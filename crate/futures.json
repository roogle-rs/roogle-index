{"root":"0:0:1763","crate_version":"0.3.26","includes_private":false,"index":{"2:11482:33452":{"id":"2:11482:33452","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"2:11470:2324","self::pattern":"2:11122:10988","prim@char":"1:12309:409","str::split_terminator":"2:11479:33451"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50122:11027","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11517:33463":{"id":"2:11517:33463","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12309:409","self::pattern":"2:11122:10988"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11147:10983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:37:1692","glob":false}},"2:11503:33456":{"id":"2:11503:33456","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:7078:120","prim@char":"1:12309:409","self::pattern":"2:11122:10988","str::rmatch_indices":"2:11506:33457"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50204:11023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:4952:1678","glob":false}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1733","glob":false}},"2:11529:33465":{"id":"2:11529:33465","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11122:10988","prim@char":"1:12309:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1668","glob":false}},"2:11488:25560":{"id":"2:11488:25560","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11485:25558","self::pattern":"2:11122:10988","prim@char":"1:12309:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50176:10973","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:5991:1684","glob":false}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2740:1673","glob":false}},"2:11422:25512":{"id":"2:11422:25512","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11511:33459":{"id":"2:11511:33459","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1044":{"id":"0:56:1044","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:58","0:59","0:60","0:62","0:63","0:65","0:66","0:67","0:69","0:70","0:71","0:73","0:74","0:76","0:77","0:78","0:79","0:81","0:82","0:83","0:84"],"is_stripped":false}},"2:11448:31778":{"id":"2:11448:31778","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11449:31792"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50328:11011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:104:691","glob":false}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:11704:135","glob":false}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1672","glob":false}},"5:5221":{"id":"5:5221","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5132:1360","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5222:34117","5:5223:3554","5:5226:34118","5:5229:34119","5:5237:34120","5:5238:34121","5:5239:2141","5:5240:23489","5:5241:23490"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:5047:1700","glob":false}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:5973:1687","glob":false}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1672","glob":false}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1736","glob":false}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1680","glob":false}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1666","glob":false}},"2:11442:33449":{"id":"2:11442:33449","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11441:33448","crate::ops::IndexMut":"2:2982:4751","`str`":"1:12315:1360"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3580:1674","glob":false}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1668","glob":false}},"2:11546:5414":{"id":"2:11546:5414","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4470:5414"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50362:5415","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:5045:920","glob":false}},"2:11445:22722":{"id":"2:11445:22722","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12309:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50024:11015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1696","glob":false}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1669","glob":false}},"2:11500:33455":{"id":"2:11500:33455","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"prim@char":"1:12309:409","`DoubleEndedIterator`":"2:7078:120","self::pattern":"2:11122:10988","str::matches":"2:11497:1977"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50276:11026","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:4993:1695","glob":false}},"2:11470:2324":{"id":"2:11470:2324","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"prim@char":"1:12309:409","str::split_whitespace":"2:11448:31778","str::rsplit":"2:11476:25556","`DoubleEndedIterator`":"2:7078:120","self::pattern":"2:11122:10988"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50054:3553","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:4952:1678","glob":false}},"2:11462:4265":{"id":"2:11462:4265","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:11122:10988","prim@char":"1:12309:409","`None`":"2:48080:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:4488:1677","glob":false}},"2:11452:31808":{"id":"2:11452:31808","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50346:11009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5229:34119":{"id":"5:5229:34119","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7096:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7096:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:1285:1670","glob":false}},"2:11446:22650":{"id":"2:11446:22650","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12309:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50030:11014","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11513:33460":{"id":"2:11513:33460","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:2740:1673","glob":false}},"2:11547:33469":{"id":"2:11547:33469","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4467:33469"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50371:11020","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:8":{"id":"0:8","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1669","glob":false}},"0:0:1763":{"id":"0:0:1763","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::executor":"0:46:1573","crate::io":"21:5047:1700","crate::channel":"27:0:1697","crate::stream":"21:1285:1670","crate::future":"21:104:691","crate::sink":"21:4488:1677"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:46:1573","0:56:1044","0:4","0:5","0:7","0:8","0:10","0:11","0:13","0:14","0:15","0:16","0:18","0:19","0:20","0:21","0:23","0:24","0:25","0:26","0:27","0:28","0:29","0:31","0:32","0:33","0:33","0:34","0:35","0:37","0:38","0:39","0:40","0:41","0:42","0:43","0:44","0:45"],"is_stripped":false}},"2:11429:25278":{"id":"2:11429:25278","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10690:11012"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11479:33451":{"id":"2:11479:33451","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"`DoubleEndedIterator`":"2:7078:120","str::split":"2:11470:2324","self::pattern":"2:11122:10988","prim@char":"1:12309:409","str::rsplit_terminator":"2:11482:33452"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50104:11028","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6535:1693","glob":false}},"2:11444:25546":{"id":"2:11444:25546","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11443:25545"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1676","glob":false}},"2:11430:33447":{"id":"2:11430:33447","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:6014:1699","glob":false}},"2:11432:25523":{"id":"2:11432:25523","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12326:1456"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:131:1688","glob":false}},"2:11449:31792":{"id":"2:11449:31792","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11448:31778"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50337:11010","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:6536:1690","glob":false}},"2:11466:22407":{"id":"2:11466:22407","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:11122:10988","prim@char":"1:12309:409","`None`":"2:48080:176"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:11704:135","glob":false}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:5986:1686","glob":false}},"5:5241:23490":{"id":"5:5241:23490","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11543:23493"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7096:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1735","glob":false}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1683","glob":false}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1683","glob":false}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1681","glob":false}},"2:11509:33458":{"id":"2:11509:33458","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11526:25565":{"id":"2:11526:25565","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11122:10988","prim@char":"1:12309:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11541:23491":{"id":"2:11541:23491","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1734","glob":false}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1732","glob":false}},"2:11491:33453":{"id":"2:11491:33453","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1682","glob":false}},"2:11538:22687":{"id":"2:11538:22687","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11083:5695","FromStr::Err":"2:11084:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48222:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11083:5695","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11083:5695","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5238:34121":{"id":"5:5238:34121","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:7096:221","`Box<str>`":"5:286:2293"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2293","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6847:5472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7096:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5222:34117":{"id":"5:5222:34117","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2293","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6847:5472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2293","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6847:5472","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11451:33450":{"id":"2:11451:33450","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50318:11022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11459:25564":{"id":"2:11459:25564","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12309:409","self::pattern":"2:11122:10988"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11476:25556":{"id":"2:11476:25556","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:12309:409","self::pattern":"2:11122:10988","`DoubleEndedIterator`":"2:7078:120","str::split":"2:11470:2324"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50072:10971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1676","glob":false}},"2:11437:25521":{"id":"2:11437:25521","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:5973:1687","glob":false}},"5:5237:34120":{"id":"5:5237:34120","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7096:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7096:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11450:2315":{"id":"2:11450:2315","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50308:2341","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11515:33461":{"id":"2:11515:33461","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11520:33464":{"id":"2:11520:33464","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11122:10988","prim@char":"1:12309:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11494:33454":{"id":"2:11494:33454","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11431:310":{"id":"2:11431:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:12326:1456","str::as_mut_ptr":"2:11432:25523"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1666","glob":false}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:109:1731","glob":false}},"2:11542:23492":{"id":"2:11542:23492","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11447:2362":{"id":"2:11447:2362","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50040:3551","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5223:3554":{"id":"5:5223:3554","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7096:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7096:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11426:33446":{"id":"2:11426:33446","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11424:33445"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11532:33466":{"id":"2:11532:33466","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12309:409","self::pattern":"2:11122:10988"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11540:22765":{"id":"2:11540:22765","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:1285:1670","glob":false}},"2:11516:33462":{"id":"2:11516:33462","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11443:25545":{"id":"2:11443:25545","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11444:25546"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11421:796":{"id":"2:11421:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12309:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1682","glob":false}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1697","glob":false}},"2:11485:25558":{"id":"2:11485:25558","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"2:11488:25560","self::pattern":"2:11122:10988","prim@char":"1:12309:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50158:10975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:6533:1691","glob":false}},"2:11441:33448":{"id":"2:11441:33448","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:2978:4750","`str`":"1:12315:1360","str::slice_mut_unchecked":"2:11442:33449"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:5991:1684","glob":false}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1671","glob":false}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:20:1027","glob":false}},"2:11439:25522":{"id":"2:11439:25522","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11453:25562":{"id":"2:11453:25562","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11122:10988","prim@char":"1:12309:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11473:25554":{"id":"2:11473:25554","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12309:409","self::pattern":"2:11122:10988"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10946:10977","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1671","glob":false}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:5956:1685","glob":false}},"2:11506:33457":{"id":"2:11506:33457","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"2:11503:33456","`DoubleEndedIterator`":"2:7078:120","self::pattern":"2:11122:10988","prim@char":"1:12309:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50222:11024","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1681","glob":false}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:5986:1686","glob":false}},"2:11543:23493":{"id":"2:11543:23493","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1573":{"id":"0:46:1573","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`LocalPool`":"31:120:1735","`block_on`":"31:65:1729"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:48","0:49","0:50","0:51","0:52","0:53","0:54","0:55"],"is_stripped":false}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:6534:1694","glob":false}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1680","glob":false}},"2:11423:33444":{"id":"2:11423:33444","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11523:23440":{"id":"2:11523:23440","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11122:10988","prim@char":"1:12309:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:104:691","glob":false}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1689","glob":false}},"5:5239:2141":{"id":"5:5239:2141","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7096:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7096:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11544:33468":{"id":"2:11544:33468","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4469:33468"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50353:11019","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1729","glob":false}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:4488:1677","glob":false}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3580:1674","glob":false}},"2:11456:25563":{"id":"2:11456:25563","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12309:409","self::pattern":"2:11122:10988"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:5956:1685","glob":false}},"2:11420":{"id":"2:11420","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10685:1360","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11421:796","2:11422:25512","2:11423:33444","2:11424:33445","2:11426:33446","2:11429:25278","2:11430:33447","2:11431:310","2:11432:25523","2:11433:25519","2:11435:25520","2:11437:25521","2:11439:25522","2:11441:33448","2:11442:33449","2:11443:25545","2:11444:25546","2:11445:22722","2:11446:22650","2:11447:2362","2:11448:31778","2:11449:31792","2:11450:2315","2:11451:33450","2:11452:31808","2:11453:25562","2:11456:25563","2:11459:25564","2:11462:4265","2:11466:22407","2:11470:2324","2:11473:25554","2:11476:25556","2:11479:33451","2:11482:33452","2:11485:25558","2:11488:25560","2:11491:33453","2:11494:33454","2:11497:1977","2:11500:33455","2:11503:33456","2:11506:33457","2:11509:33458","2:11511:33459","2:11513:33460","2:11515:33461","2:11516:33462","2:11517:33463","2:11520:33464","2:11523:23440","2:11526:25565","2:11529:33465","2:11532:33466","2:11535:33467","2:11538:22687","2:11540:22765","2:11541:23491","2:11542:23492","2:11543:23493","2:11544:33468","2:11546:5414","2:11547:33469"],"negative":false,"synthetic":false,"blanket_impl":null}},"5:5240:23489":{"id":"5:5240:23489","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11542:23492"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7096:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5226:34118":{"id":"5:5226:34118","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7096:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7096:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11497:1977":{"id":"2:11497:1977","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11122:10988","`DoubleEndedIterator`":"2:7078:120","prim@char":"1:12309:409","str::matches":"2:11497:1977"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50258:11025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1730","glob":false}},"2:11433:25519":{"id":"2:11433:25519","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48080:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11535:33467":{"id":"2:11535:33467","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11122:10988","prim@char":"1:12309:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11127:10984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11142:10985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11424:33445":{"id":"2:11424:33445","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11435:25520":{"id":"2:11435:25520","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48080:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48078:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9304:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"21:11943:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"2:11765:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:46586:31736":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:8655:5574":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"6:4437:15327":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:7237:15493":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"21:10588:36774":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:11836:5575":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:12033:21414":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:10946:10977":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:4952:1678":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"2:21392:5583":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:48505:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:48129:2676":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:7426:18208":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6953:12007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:8418:18598":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"21:7543:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:4307:5594":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"12:2053:5439":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:2494:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:4658:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:608:12064":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"27:451:4923":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"2:20276:5605":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:686:5422":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:11528:18518":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:8086:5535":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:20469:5605":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4653:15350":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:3046:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"18:80:22435":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:2793:18323":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:3466:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:0:1870":{"crate_id":17,"path":["object"],"kind":"module"},"6:4706:15356":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:2478:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:48695:5759":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"21:10655:2169":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"27:369:3923":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"1:4019:5576":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"5:5643:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:6509:16409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"21:4993:1695":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"1:5072:5610":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:4122:5577":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"5:7036:5515":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:11348:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:545:5391":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:12326:1456":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:12118:21420":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:13114:22229":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"20:143:4211":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"2:21997:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:8475:18340":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"5:3557:34444":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:8751:5660":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:8796:18610":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:11559:21220":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"21:14010:36774":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"1:6228:3923":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:1636:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"12:853:5437":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"28:19:4025":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"21:10427:2163":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:6179:4987":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"5:630:33277":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:22030:5584":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:7859:5410":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:3599:22506":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"21:10558:2162":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"1:12307:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"21:14915:2505":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"31:38:5310":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"30:648:22422":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:12103:21419":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"16:3632:17274":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:1643:11148":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8373:2205":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:9104:28977":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:782:2164":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:9650:10971":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:9263:5709":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"5:5329:11059":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"21:11920:2059":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"17:11161:18844":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:8874:11126":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"12:1866:5448":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:7050:22748":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"9:19:17082":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"5:6991:5455":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:52451:31718":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10721:18581":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:2978:4750":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:11247:18900":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:13518:22351":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:5074:2152":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:8660:5564":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:2781:4734":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:8323:2087":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"6:4621:15346":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11734:21393":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:6818:2144":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11515:21215":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:1887:5497":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"21:6198:164":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"1:12322:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13031:22218":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:49178:11357":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"6:4683:15354":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"21:10754:36774":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"1:8237:2281":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:9778:18433":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:21211:22693":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:521:22418":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:3091:3572":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"31:136:1732":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"21:7228:2067":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"6:5534:15976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:6554:16413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:13614:2269":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"2:1825:2658":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:1626:5447":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:4977:5631":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"21:6811:36774":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:7310:28594":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"27:11:37117":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"17:10360:18525":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:49872:10962":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"21:13456:2202":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"21:8880:36774":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:13975:2274":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"17:9909:18469":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8093:5536":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:420:18167":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:1525:12942":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:10350:18560":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"17:9193:36514":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:49964:10969":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:12792:2194":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"17:13506:22350":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:51836:5848":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"21:6533:1691":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"2:8164:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:6327:28959":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"18:574:2178":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"16:6829:23093":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:9350:18383":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:1021:18393":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"21:7031:2058":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"12:815:5434":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:592:12062":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:6790:18277":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"30:824:10986":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"21:4134:36743":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"17:13527:22352":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:11506:5557":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:9930:18490":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:7279:16971":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"18:636:36535":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:11122:23412":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"21:14429:36774":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"17:11841:21401":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:2960:4760":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"15:214:17247":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:3142:5449":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:8611:10923":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10997:18624":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"12:320:22886":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:8494:18298":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:6542:2056":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"21:9653:2056":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"17:12850:21783":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:5498:15972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:11122:10988":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"21:9233:2174":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"6:4257:15308":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:967:18388":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"21:9023:2109":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"1:8515:5568":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"24:296:37080":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"17:8774:18609":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"30:114:22437":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"21:13649:36774":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"17:8339:18607":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:4506:15332":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:56883:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:21964:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:6719:23088":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:13126:22232":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:13214:22268":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:8615:10933":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:47274:2903":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"16:534:22945":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:9541:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"17:13436:22317":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"21:14534:36774":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"21:14495:5238":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"17:11606:21323":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:5014:5604":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:51937:5828":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13039:22219":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:9155:18616":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:2750:4728":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"12:659:4025":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:1601:34444":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:2509:18311":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:5078:2096":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:51730:5835":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"9:649:17036":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"5:4154:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"14:40:18624":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:507:12051":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:46838:22676":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:495:12049":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"12:1852:5446":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:969:5433":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:47348:2173":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:5679:11639":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:14:1980":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:1751:31856":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"9:111:17050":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:3669:5430":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:52231:5825":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:5405:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:50502:10997":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:8981:18614":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"21:7139:2064":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"17:11014:18736":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:9584:5774":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"9:505:17197":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"5:3600:2338":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:11136:10986":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:20069:32808":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"9:382:17119":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:484:28967":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:965:5432":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"5:3612:5460":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:11299:23417":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"5:4753:3543":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10283:18529":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:20993:5784":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:11083:5695":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"21:11231:36774":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"6:4294:15313":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"21:8298:2085":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:4635:15348":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"6:7255:15496":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:6095:2265":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5595:15980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:9401:18387":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:56935:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1595:12949":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:13134:22233":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11479:25276":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:3854:17319":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:10528:18606":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:6975:16782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:4267:5592":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"21:14176:2335":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"2:39366:22798":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"5:6944:4025":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:10233:18556":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:10796:18582":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:8110:18611":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"21:8310:2086":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"1:11400:28970":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:5541:15977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"21:5032:4623":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:46868:11117":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:14599:2342":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"21:14127:2334":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"7:32:16988":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:53695:5831":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5480:15971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"21:7463:2515":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"2:49834:10960":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"5:5752:3543":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:5660:15983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"1:10867:3568":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:12768:21736":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:4307:15315":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"21:10028:2159":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"1:9841:5533":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:50682:11030":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:7160:29160":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:47264:2165":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:3226:4763":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:6345:18187":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:46898:11109":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:2669:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"21:37:1692":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"17:13168:22258":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:7185:2066":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"2:50781:11411":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"21:20:1027":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"16:7557:18186":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"21:12521:2200":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"21:6589:2057":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"22:7:1689":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"5:4232:34442":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"21:14269:108":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"16:3689:17283":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:6676:18189":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:513:12052":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:46944:11111":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:628:5412":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:8983:5691":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:12008:21412":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:6896:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:7955:5443":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"28:0:2012":{"crate_id":28,"path":["slab"],"kind":"module"},"16:7396:18291":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6743:18276":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:4196:11084":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:1452:5459":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"21:14032:2331":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"1:353:5408":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"6:6311:16400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"21:13115:2206":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"27:146:203":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:2755:4733":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:4408:22620":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:12308:920":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:5238:5665":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"12:822:5435":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"6:5841:15207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"16:6171:18232":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:11524:23452":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:4329:5598":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:8544:23741":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2154:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:9783:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"2:2895:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:47283:2166":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"21:13138:36774":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"17:9293:18392":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:3199:3569":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11684:21332":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:11330:19024":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:9577:18412":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"21:14637:2346":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"17:12797:21738":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"9:0:1863":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:5517:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:4368:11093":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:6792:5767":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:5016:5608":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"21:11411:2760":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"21:10085:2057":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"17:10466:18566":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7237:18282":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:20991:5605":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:8056:18165":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:21931:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:9846:28971":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:2465:18309":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11909:21405":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"30:655:22423":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:20003:11122":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"21:6988:36774":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:2926:2289":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:20885:5778":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:10221:18555":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"21:104:691":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"16:6877:18278":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:10394:18562":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:49954:10968":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"21:6866:36774":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:1695:12958":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:8897:5686":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"30:798:22410":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"12:1065:22883":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11288:19019":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:5587:15979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:5328:30090":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:3475:29931":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"26:0:2011":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"2:2442:2618":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11368:19039":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:1938:5510":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4598:15343":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"21:6349:2507":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"17:10854:18584":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"12:2080:5441":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:49108:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"16:7329:18290":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9885:18513":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"20:27:5605":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"6:1500:12938":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9446:18396":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:6289:34444":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:12946:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"2:51915:5824":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:46497:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:8666:18352":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:46915:5415":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:21137:31436":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:10975:2175":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"1:8747:5657":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:10849:2172":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"16:3188:18331":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:1889:5498":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:2151:22790":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:8609:10924":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:9223:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"21:11792:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:12334:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:8105:2076":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"5:1393:5428":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12638:21684":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"21:11689:2072":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"17:9873:18512":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"21:9372:2153":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"1:6614:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:5835:16021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:10256:10965":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:11925:2395":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:13572:22359":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:8617:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:13393:22312":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:286:2293":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:7000:2893":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:8169:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:2862:10912":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:4398:15324":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"21:13603:2268":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"5:870:2202":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:8607:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:21084:31438":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8445:3553":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:50072:10971":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"24:0:1764":{"crate_id":24,"path":["futures_task"],"kind":"module"},"21:13737:217":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"2:21267:5581":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:11543:5722":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"21:12865:2197":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:4899:5593":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:9501:18390":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:22429:5578":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:4459:5623":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:7208:36774":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"21:3826:2089":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"17:9526:18407":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:36:5474":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4300:15314":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:10363:2160":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"17:9791:18461":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"25:9:1676":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"11:36:35571":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"31:125:1736":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:13805:2272":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"2:8328:22700":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:12315:1360":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"21:7825:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12278:21492":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:21385:31831":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"21:12662:2195":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"16:7942:18295":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:5030:34444":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:7166:18281":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"6:4179:15299":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:2736:10917":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:11939:21408":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:10546:18572":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:54078:10895":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12674:21685":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:46475:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4737:15359":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:6424:16404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:531:22422":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:545:12055":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"21:14832:2115":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:20237:5791":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:979:5435":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:12319:2189":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:9688:10972":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"21:8597:36774":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:9474:23446":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"21:13070:4450":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"2:53819:5816":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:736:22415":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:9834:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:7107:11031":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:21799:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"6:4317:15316":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:6539:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:4441:17800":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:1760:11299":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"21:10539:36774":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:8871:18612":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:12250:2188":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"2:11914:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7825:18292":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:6403:2395":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:10875:18585":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:5949:18257":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:52899:5826":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"9:863:17098":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:2871:5019":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5699:15987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:29574:11055":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"21:8954:2108":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"5:1962:5460":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:13141:22234":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:5671:5701":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11500:21214":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"21:13109:2205":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"21:10274:2157":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"18:590:31833":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:8773:5607":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:2771:4732":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:12280:5424":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:49613:10954":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:9495:3553":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"21:8401:36774":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"30:761:2178":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"5:3121:22777":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:10625:18575":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"21:10405:36774":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"6:575:12059":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4673:15353":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"21:12834:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"6:5443:15914":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:52945:5830":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:887:2202":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:48817:10923":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:2613:3555":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:4169:34442":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:7288:18286":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:13225:36774":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"2:2320:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:5996:18258":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:9104:2111":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"9:956:17093":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"31:68:1730":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"6:6375:12880":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"12:1859:5447":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:4191:11083":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"20:92:5605":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"17:11137:18808":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"14:31:17225":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"4:0:1861":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"21:8265:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:2705:18319":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:50040:3551":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:7019:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:8441:18601":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"21:13366:36774":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"2:9470:4024":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:20728:5787":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:12321:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"21:7402:2081":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"17:8881:36505":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"21:327:2069":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"21:39:2030":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"21:8336:2088":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"1:11099:24045":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:3075:4754":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:46878:11118":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5772:15993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:11650:23419":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:48831:10932":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:57:1696":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"18:719:22413":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:4721:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:2257:2321":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:4119:5332":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:20897:32423":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:11857:5577":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:10660:11398":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"2:11704:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:3490:4024":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4191:15301":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:4267:15309":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:49120:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:6376:18269":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:8941:18613":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12617:21630":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"21:14768:4985":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"21:7606:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:4413:17796":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:5730:2203":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"1:12313:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:2868:18326":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:12917:2198":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"17:12934:21853":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"24:169:2053":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"16:5388:18235":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:3234:5430":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:6704:18203":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:6451:23800":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"21:8197:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:4317:5595":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"30:81:22435":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11394:28972":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:8055:18588":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:2653:2335":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:7067:5777":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:7739:3915":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:900:4024":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7044:22923":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"21:14212:2150":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"27:127:4918":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"13:220:35631":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:1562:12946":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:6938:4025":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:7066:5513":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:7740:5675":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:719:5423":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:47251:2898":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"6:4475:15330":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"5:1376:4025":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5749:35387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"21:6146:4989":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"30:97:22436":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:2793:4735":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"29:0:1679":{"crate_id":29,"path":["futures_io"],"kind":"module"},"21:13940:36774":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"21:7056:36774":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:5554:15943":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6901:4025":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:12384:2081":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"16:4574:17860":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:4510:5624":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:1232:5440":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:5741:15992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:2131:34400":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:1541:12944":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"21:9995:36774":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:13678:2270":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"1:12316:1438":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:9475:18409":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:1574:12947":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"6:7266:15497":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:50176:10973":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12896:21850":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"21:9412:2154":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"1:8824:5676":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:29540:4719":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:38174:11122":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"5:5663:3954":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:51640:31716":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:6409:16402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"12:861:5438":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5713:15988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6865:23095":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:6316:18211":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:598:5398":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:14647:2347":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"16:6472:17240":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:51061:10908":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:51684:5855":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:54025:10892":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:560:12057":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:6090:5770":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10108:18470":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:10332:22594":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:10845:18565":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:9021:18615":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:9325:4925":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:6419:28964":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:9183:18617":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"12:697:5433":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"21:8776:2102":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"21:4267:4219":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"17:11106:18806":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"12:1555:17219":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:11680:23425":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:8393:18600":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"21:14243:36774":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"5:1355:2202":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:7050:2292":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9947:18515":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:11110:36774":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"2:49370:11128":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:12550:21628":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2723:2286":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"21:0:1667":{"crate_id":21,"path":["futures_util"],"kind":"module"},"1:7972:5485":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:1518:12941":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:3566:17257":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"21:14385:2337":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"1:6931:30095":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:3891:34444":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:8701:18353":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"31:0:1728":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"1:2250:5534":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:2869:33215":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:11142:10985":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"6:4816:15367":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:10505:22554":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:21406:5582":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:14093:36774":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"2:52739:5853":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:51992:31712":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:11125:18807":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:51854:31715":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:5891:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:5510:18242":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:11657:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"2:49594:11392":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"6:6479:16407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:54014:10891":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:49909:2894":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"29:20:1683":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"17:10257:18531":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:5844:2905":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:7934:5417":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"21:11309:36646":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"6:1505:12939":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:50012:11018":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:8340:3573":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:11913:10899":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:6429:2738":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:1714:12960":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:11193:10992":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:50649:11003":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"30:788:22409":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:12333:1099":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:8526:18348":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:944:2265":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:217:10922":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:0:1869":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:8141:22577":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:46378:4752":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"17:10670:18578":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4461:15329":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:47181:2155":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:6562:30907":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"17:12291:21498":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:53988:10889":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13148:22235":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:49391:4928":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"21:8240:2083":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"21:9594:2056":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"20:0:1665":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:52663:5846":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:681:5421":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"18:491:36529":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"18:481:22419":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:20031:32425":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:12972:22187":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:53757:5851":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:13059:22223":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:5047:1700":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"1:11383:28986":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:8991:36515":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:10182:18476":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:48391:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"21:11032:2176":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"9:896:17099":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:8333:22701":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:4077:11096":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:5379:2157":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:4817:17909":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4527:15334":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:2667:10918":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"12:725:5428":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:4662:17878":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:12328:1454":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"21:9075:36774":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"15:0:1868":{"crate_id":15,"path":["addr2line"],"kind":"module"},"21:6958:2063":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"17:9165:36518":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:6609:2878":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:6059:23077":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:8401:2284":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:950:34444":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6735:18205":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:3409:2342":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:46977:11114":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"18:660:22408":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:51706:5843":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:53865:5834":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:6186:18183":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"30:731:36544":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:2670:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"21:7861:2079":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:2765:4729":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:1919:10919":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4629:15347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:5235:35865":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"21:10633:36774":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:7037:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:20733:5810":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:47552:31805":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"21:12698:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"16:7469:18192":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:11748:21394":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"21:14583:36774":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"17:487:18604":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"21:8516:2096":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:13260:2208":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"6:4286:15312":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:1246:5442":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"21:2740:1673":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"1:8076:5532":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11853:21402":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:11956:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:51752:5823":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:49142:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:9118:36516":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"21:11845:2073":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"6:7243:15494":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:12637:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"28:193:5441":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"2:51784:5856":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"16:4217:17699":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:20016:32425":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"17:8561:18349":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:46570:11063":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:1828:5479":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:9658:18457":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:2814:4740":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:14502:2340":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"16:5433:18237":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:5861:16022":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:11595:28983":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"21:6625:2060":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:10973:18623":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:1637:5449":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:762:5430":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"6:1701:12959":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:13203:22262":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:7432:2891":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:7845:10984":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:6871:2265":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:6506:3923":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:1722:12961":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2824:4743":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12948:21854":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:2797:4737":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:5541:18244":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:9546:5722":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"16:153:18171":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:56909:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:6534:1694":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:50662:11029":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:9223:18367":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"21:12432:2186":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"16:2389:18306":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"6:4346:15319":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"27:489:4968":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"21:13514:4024":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"18:699:22412":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:10371:2167":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"2:50857:11430":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:54155:10898":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"27:154:4925":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:46958:11113":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"21:13492:36774":{"crate_id":21,"path":["futures_util","stream","select_all","_","__Origin"],"kind":"struct"},"2:8879:11127":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:8044:2077":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"31:65:1729":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"17:8596:18350":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:3427:2283":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:2367:18305":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:11774:21396":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7603:18209":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"18:624:36538":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5733:15991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:8157:2338":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"12:393:35582":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:58236:31862":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"21:10776:2173":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:53365:5858":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:13327:22272":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6463:18270":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"16:5664:18248":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5472:18240":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:13404:22313":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:3360:11065":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"21:6700:36774":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:1285:1670":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"21:11132:2166":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:52137:5852":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:9031:36513":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:7372:23099":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"30:844:22414":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"21:331:3942":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"21:11767:2074":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"6:6572:16414":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:6027:34436":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"5:1948:2338":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:5219:18296":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:1608:4025":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:5163:18125":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:8137:18589":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:12291:23481":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"6:4126:15296":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:50158:10975":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:7289:16972":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:10374:18527":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:52307:5814":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:7096:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:3174:22625":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"21:11342:2762":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"5:4199:3543":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:6608:34454":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:9250:18368":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6496:18271":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:8704:5626":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:9743:10973":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:50845:5776":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:11487:11428":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"21:12120:2080":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"17:8212:18590":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"21:14774:3942":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"1:12329:1455":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:4212:15303":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:1771:18411":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:20050:32803":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:3491:3538":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:50614:11000":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11721:21392":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:12087:21418":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"14:202:11034":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:9303:18390":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:12322:21500":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:3402:18333":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:8432:2171":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"21:14818:36774":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"2:48353:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"22:0:2009":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:52709:5850":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:5625:15982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"6:1550:12945":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:12325:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"20:32:1666":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"1:661:5416":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:51032:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:2993:18328":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"21:10728:2171":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"2:9446:2202":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:9671:18424":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:20263:5792":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:48163:5673":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:10332:18559":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:20319:5783":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4231:15305":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:3138:4755":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:53959:10886":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"21:6728:2065":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"21:13151:189":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:4532:11036":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:2760:4730":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:13007:22216":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:50801:11416":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:8755:32487":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"21:14117:2333":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"2:48273:4024":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"30:816:22412":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13221:22269":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"27:124:4917":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"1:5585:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:49783:22713":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:7091:2062":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"2:46519:4753":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:5472:15970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"30:853:22415":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:11956:17251":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:7929:18294":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:8914:5687":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:52821:5838":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"18:507:2178":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:46292:4027":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:5782:15994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:11594:21267":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:10497:18569":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11054:18797":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:8133:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:2320:18168":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:5761:18251":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"21:12185:2192":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"12:387:35586":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"21:23:2028":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"17:11708:21391":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"21:7800:2072":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"2:46393:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:6293:11930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:4262:17748":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:8362:36774":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"2:50104:11028":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:11661:21331":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:2909:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:21418:5585":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:56948:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:646:12093":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"21:7757:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"0:0:1763":{"crate_id":0,"path":["futures"],"kind":"module"},"21:11303:36596":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"1:9394:23816":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:6298:18210":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6161:18262":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:20445:5605":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:1002:5438":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:6567:18201":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:46817:11082":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:11813:21399":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:48265:2202":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:7965:5444":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:50824:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:960:5431":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:12309:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"16:2579:18314":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:6252:18266":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:1668:12955":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"28:53:37135":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"6:586:12061":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:52404:31713":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:6842:35638":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:56526:5859":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:6021:5760":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:5655:3543":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"6:4665:15352":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"30:807:22411":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"24:309:4621":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"1:8709:5627":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:9119:31420":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:13382:22311":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:49194:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"18:727:22414":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:4849:17916":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:53617:5847":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"30:699:11122":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:9751:18432":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:2666:2285":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:1608:12951":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:6758:2205":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:554:12056":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:21227:31837":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:47161:2153":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"21:14199:36774":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"5:3108:5448":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:2300:18303":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12980:22214":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:8723:5309":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:11436:21212":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:7949:5420":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:50024:11015":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:10690:11012":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:5605:15981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:5510:15974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9644:18403":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"21:7683:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:12550:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"18:652:2178":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:13241:2207":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"21:10379:2165":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"16:2535:18312":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"28:23:2202":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"21:11577:2066":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"29:17:1681":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:2487:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:52085:5845":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4239:15306":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:539:12054":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:10304:36774":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:5525:18243":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7249:18283":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:4749:5631":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"30:883:22417":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:12593:2190":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:47152:2897":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4551:15337":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:6054:5762":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4644:15349":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:12319:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"21:8544:36774":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:47130:2150":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"21:14984:2527":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"16:7659:18180":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7298:18287":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"6:7214:15490":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:10911:11421":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2771:18322":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"21:21:1027":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"2:9577:10964":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:4635:17873":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:2364:22794":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:4674:5425":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:9335:109":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"9:827:17158":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"21:14741:2353":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"2:47213:2057":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:9433:18381":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:11061:36774":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"1:3276:3567":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:9844:18468":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"16:7267:18284":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"21:9970:2178":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"16:6270:18184":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:11951:21409":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"18:609:36534":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:11963:17251":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:11692:27238":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:10420:18553":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:7970:18196":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:48838:10933":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:50346:11009":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:8389:2282":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:12330:1452":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:9217:5705":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"16:5737:18250":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"1:5359:30090":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:11147:10983":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:3159:22581":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"24:12:4212":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"2:53903:5854":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2678:4171":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"5:1201:5439":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:6109:18207":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:8452:2341":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"21:4220:4217":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"2:47231:2904":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:10835:11420":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:5623:31662":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:8014:18227":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:6322:4328":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"18:644:2178":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:53159:5839":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:1931:18405":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:7497:18188":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:1091:5439":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:581:12060":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:12955:21866":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:47071:5531":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:8510:18296":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"9:586:17024":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"21:9135:2150":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"5:6917:22780":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10445:18565":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:49883:10953":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:51885:5836":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:8752:3551":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:12073:21417":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"21:14945:2524":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"17:1962:18429":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:46996:5516":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:29674:22746":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:46951:11112":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:21243:30642":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:5815:18254":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"21:9438:36774":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"6:1511:12940":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"21:10607:2168":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"6:600:12063":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"21:6513:2506":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"21:5830:2182":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"1:4022:5575":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10583:18573":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:12331:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:4438:5621":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:10766:5705":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"21:9529:2156":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"21:14479:2339":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"17:13413:22316":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:3082:5447":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"21:2689:2182":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"1:524:28981":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"21:8618:2098":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:2490:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:13071:22224":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"21:11280:36774":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"12:1085:17215":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:52115:5849":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:4575:15340":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:20288:5781":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:487:12048":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:11617:21324":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8439:3551":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4611:15345":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:4810:15366":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10088:18474":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:6148:28959":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"16:2657:18317":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:9271:2202":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:50789:11413":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:1105:5440":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:3352:2203":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10752:18563":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9631:18404":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"21:4056:2210":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"30:681:22424":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:20478:5786":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12884:21848":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:12060:21416":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"12:1138:5442":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"21:6846:2059":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"14:187:17235":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:52283:5832":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"21:7922:2074":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"27:181:4926":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"5:3932:4024":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:54040:10893":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:6862:5452":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:10921:18621":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"20:68:1671":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"16:6816:23092":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:12816:21740":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"21:402:28986":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"21:12070:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:10455:28588":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:50968:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:1421:5432":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"21:14972:2522":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"17:12349:21563":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"6:4496:15331":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:5494:18241":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:7758:29151":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:47242:2060":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6517:17239":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"12:738:5429":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9283:18394":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"12:1832:2202":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:10385:18561":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:5691:5702":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:47199:31795":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:12314:1330":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:46552:4756":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:12836:21781":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"15:175:17242":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"12:2069:5440":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:335:3943":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"17:10949:18622":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:2481:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"27:497:4969":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"5:7173:5430":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:21190:30716":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"21:13082:2202":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"6:6538:16411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:1826:5478":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:1707:5615":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:49922:10952":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6123:18181":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"21:8998:36774":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"6:4335:15318":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:50276:11026":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4449:15328":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:11967:2077":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"21:7221:2068":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"21:8130:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:11087:18805":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"21:4322:28975":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"21:6921:36774":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:48214:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11164:2282":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"18:599:36541":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:50318:11022":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:11127:10984":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6981:16783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"21:424:1668":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"2:52329:5817":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10270:18530":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:54093:10896":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"21:10818:36774":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"21:13386:4609":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"17:10682:18579":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:12481:2187":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"2:50030:11014":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:271:34444":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:9086:33145":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11104:27232":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"9:188:17058":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"6:4102:15294":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"31:102:1734":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"2:50785:11412":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:3116:5446":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:853:5451":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:13176:22259":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"16:4749:17892":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:6330:18267":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:7980:18228":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:9072:33146":{"crate_id":2,"path":["core","slice","sort","insert_head","InsertionHole"],"kind":"struct"},"2:49379:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:11134:5536":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"21:7727:2080":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"6:501:12050":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"21:12410:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"21:781:2089":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"21:12573:2201":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"5:7118:11032":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"12:98:22884":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:2484:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4185:15300":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:13374:22310":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:6593:18273":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:11467:5708":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5837:5712":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:589:1669":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"14:221:17234":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:8368:18591":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:48315:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:2929:2290":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:3861:2265":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:4721:17884":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:12151:27183":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:4206:15147":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6352:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"14:215:17228":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:7319:18289":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:10676:11400":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:47559:2206":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:7988:5492":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"21:14608:2343":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"17:12307:21499":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:21865:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"21:7427:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:3153:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:10895:11419":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:13030:2196":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"21:9274:36774":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"5:7003:5473":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:11787:21397":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:4273:5593":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:50471:10993":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:48078:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:46638:11075":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:6856:4025":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:7041:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10139:18391":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:49401:31050":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12211:21487":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:53968:10887":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"30:556:36529":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"21:6786:2060":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:21340:30691":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:2561:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:7208:15489":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:21766:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:29780:22747":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:8613:10932":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:3970:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"21:11561:2184":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"1:12310:1472":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"31:109:1731":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"21:13333:2209":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"5:1432:5433":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:21700:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"21:6014:1699":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"21:13541:2265":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"16:7637:18197":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"13:108:35630":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:14064:2332":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"17:8272:18603":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:5991:1684":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"21:12289:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"5:1060:22788":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:3606:4025":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:954:5430":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"26:37:37114":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"21:12719:2193":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"16:6690:18190":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10310:18558":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"20:17:1999":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"1:9405:3942":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"21:10217:2060":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"1:3237:3571":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:9857:18491":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:2809:4739":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:11773:22505":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:6795:5768":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"21:6535:1693":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"17:10490:18568":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:4446:5622":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:11536:18516":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:7909:18200":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:990:5436":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:8631:18351":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6137:18179":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:7741:3914":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:21356:30712":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"5:2873:33216":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:1636:12952":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:7117:22926":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"7:0:1499":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:9712:18459":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:44:17202":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:47323:2900":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"12:1518:17217":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:4357:17786":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:50204:11023":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:9417:23444":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:2261:18301":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:6448:16406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4797:15364":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:2785:4738":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:11992:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"20:97:1672":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"16:6200:18263":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:11109:5535":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"21:11013:36774":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"21:10452:36774":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"12:1044:17214":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:9382:18389":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:50958:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"21:7305:2081":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"17:10774:18560":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:6332:4304":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"16:7135:22927":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:54063:10894":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:9897:18514":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11287:5706":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:12251:21490":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:1697:5430":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"17:9831:18511":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"2:50485:10996":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4280:15311":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"21:11173:36774":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"16:2557:18313":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:2326:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:1217:5441":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:7166:16943":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:6903:18279":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"12:632:2202":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:11714:28967":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"16:6528:18272":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"21:7352:2515":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:47190:2156":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"10:0:1864":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"12:2184:32147":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"5:1365:4024":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4200:15302":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:247:36511":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:11738:2086":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"16:2605:18315":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:7220:15491":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:2982:4751":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:2863:34787":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"21:13157:2090":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"1:1123:5442":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"29:25:1682":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"12:2198:35577":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:13307:36774":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"17:12964:22186":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:2399:5545":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:12630:21682":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"18:0:1871":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:46579:18227":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:51974:5813":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:58257:31835":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:11274:5492":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:2842:18325":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:49081:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13024:22217":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:13366:22309":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:47568:2883":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"21:13100:2204":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"30:546:22419":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"9:977:17101":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11149:18843":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"18:707:10986":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"21:9460:2155":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"16:6241:18265":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:2401:5546":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:7858:5605":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"6:5684:15985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:9399:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:12730:21690":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:7747:18605":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11665:23437":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:11070:18798":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:2487:18310":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:5876:16023":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"27:136:3923":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"17:2916:18472":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:21294:31850":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9691:18431":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9371:18395":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:9294:5605":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10894:18586":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:7211:18174":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"21:7886:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:9293:4922":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:3274:3566":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:8839:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:12361:21566":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"21:10245:36774":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"6:1532:12943":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:50122:11027":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:8825:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"12:0:1866":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"2:53941:5819":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:14716:36774":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"6:6322:16401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:8149:3562":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"27:483:4928":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"1:8806:5666":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"12:751:2265":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"21:12761:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"1:678:5419":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"11:0:1865":{"crate_id":11,"path":["adler"],"kind":"module"},"21:8897:2107":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"6:4761:15361":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"30:726:36534":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"19:0:1007":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6691:5764":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:9647:5497":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:48619:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:51814:5844":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:49935:10967":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:50797:11415":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"12:119:22888":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"21:4285:2211":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:8619:10930":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:574:5396":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:6210:18264":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"21:9216:36774":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:2848:4748":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:62:11667":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:47008:22748":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:3898:3543":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"12:1628:35580":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:50337:11010":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"7:79:16995":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:3946:32486":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:1967:5511":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:47362:2175":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:6430:16405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:2289:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:4488:1677":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:49409:31051":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6070:18173":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:46826:11116":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:2853:4749":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:9805:18509":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4367:15322":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"18:582:11122":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:11603:36774":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"18:681:22410":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:8768:2101":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"1:4221:5588":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:5793:18253":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:1443:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:1611:2265":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:562:18605":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"30:638:22418":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11199:18847":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:13082:22225":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:48222:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"30:872:22416":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11974:21410":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:9447:23801":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:242:36510":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6277:12879":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:5905:5717":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:6879:5453":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:48205:11348":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:9380:5763":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:20325:5785":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:4251:5590":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4274:15310":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:4519:17804":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"21:11621:2071":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"21:9905:2178":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:8996:11375":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:4534:15335":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:12312:1025":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12609:21629":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:11186:18846":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:10207:18544":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"21:7269:2075":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"2:50577:10999":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:7079:5514":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8380:1676":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:14617:2344":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"1:8564:22618":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:2589:28977":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:7523:2082":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:53999:10890":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:3993:10916":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4329:15317":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:7190:11056":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:5672:15984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:14153:36774":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"2:2671:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:48146:4024":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:46811:5415":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:9061:18391":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:9108:18395":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4297:17769":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12874:21786":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:9328:18385":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"14:165:17226":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"21:6107:163":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"16:7435:18224":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7543:18185":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:47593:2204":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12022:21413":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:3466:2353":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:46433:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"21:9565:36774":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"2:4268:11090":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:1402:5429":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:50222:11024":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:50976:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6668:23090":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:5037:4622":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"21:13436:4024":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"21:14551:2341":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"17:11174:18845":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"9:33:17083":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:8697:5570":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:52975:5833":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:49090:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"12:1003:5440":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:8116:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:10121:18471":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:2562:36582":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"2:50805:11428":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:8600:5570":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"2:38157:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:50434:10989":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:910:4025":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"21:9714:2158":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"17:8911:36521":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13100:22227":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:49944:10970":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:13091:22226":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:5772:1676":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"1:12332:1509":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:96:22436":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:7254:36774":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"17:9422:18382":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:2547:36744":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"17:12237:21489":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"21:10167:36774":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:49843:2176":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2836:4745":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"16:6284:18194":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:11790:2089":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46937:11019":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:3010:18329":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"6:4565:15339":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:52482:31719":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:12969:2199":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"17:10642:18576":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:4139:15297":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"21:13465:4025":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"21:5456:2205":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"2:52353:5818":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:9729:10975":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"13:0:1860":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13478:22326":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"27:72:4937":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"6:6500:16408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"14:0:1867":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:11343:19025":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"23:0:2010":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"18:755:22416":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:10872:11422":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"21:12229:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"1:8972:5690":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:9304:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:9525:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4778:15363":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:7880:5386":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:4322:11092":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:9738:18434":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"15:193:17243":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"18:671:22409":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:9362:18391":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:29355:5580":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:9235:5707":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:21832:4377":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:46854:11115":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:47545:2881":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:5834:5710":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"21:5956:1685":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"1:8635:5572":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"1:10591:5714":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:2253:2316":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:4354:15320":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:9681:18458":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"21:11568:2183":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"1:9536:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"21:13854:36774":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"21:7983:2073":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"6:4096:15293":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:10870:3570":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"21:13530:2264":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"21:13714:36774":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"21:9321:36774":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"17:11271:19012":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:9538:10977":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:8587:5569":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:46921:11110":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:9274:18370":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"27:366:203":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"1:6028:5761":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:3026:18330":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:9452:23739":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"12:300:22887":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"5:2083:22791":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"12:1534:17218":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:3958:32485":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5582:15978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:7796:28973":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:46991:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:6719:5771":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"21:8687:2099":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"21:14781:36687":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"6:6545:16412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"16:3716:17316":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:7202:24746":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"12:777:17212":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:5720:15989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:47101:2894":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:2844:4747":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:1686:12957":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"30:665:140":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:135:11734":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:6524:16410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"16:4144:17433":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:9263:18369":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:8295:18608":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:9440:30096":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"5:6583:34436":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"16:2341:18304":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:3075:2202":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"12:1845:5430":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"16:4606:17865":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:56896:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:12037:5471":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"21:927:2100":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"2:2789:4736":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:11144:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:4:991":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:7992:22798":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:11174:25272":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:2575:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"21:7653:2071":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"16:6052:18261":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:49362:31834":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"21:13183:36774":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"1:8481:5566":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:5122:17948":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:47601:2887":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:47222:2058":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"21:3580:1674":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"6:4592:15342":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:50362:5415":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"9:676:17080":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"27:149:4921":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:12894:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"21:4735:2271":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"16:6359:18268":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:8621:10931":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:4921:17939":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:4690:981":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:10678:30321":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"30:753:36535":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:29602:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"30:769:2178":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:5189:5656":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:10873:3566":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"21:8008:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"9:920:17100":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12514:21627":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7226:15492":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:7278:18285":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:5628:18247":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10296:18528":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"21:14930:2525":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"2:1552:3543":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:50258:11025":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"21:6055:2182":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"21:13547:2266":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"2:29616:22745":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:5203:18298":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:51660:31717":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:14684:2351":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"21:5973:1687":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"21:14678:2350":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"6:4489:5648":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:6163:4988":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"21:8852:2106":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"21:11084:2177":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"12:2178:35579":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:2894:18327":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:8662:36774":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:48281:4025":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"5:1318:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:13158:22257":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"21:9184:2151":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"16:5558:18245":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:11455:5707":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:7388:18206":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:11300:19020":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:3148:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:6214:4025":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:4258:11089":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:690:22411":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:2727:18320":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"21:12507:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"21:13056:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"17:13047:22222":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11639:21325":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"21:13505:2202":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"6:4361:15321":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"21:6680:2056":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"1:11080:5659":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"21:8167:2078":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"16:3457:18334":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"21:6896:2061":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"21:7947:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:5878:18256":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"21:14669:2349":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"28:32:4024":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"1:5095:5603":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"31:120:1735":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"21:14487:2268":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"6:6392:12883":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:4909:27250":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12695:21686":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:4038:2202":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"27:468:4924":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"21:10064:36774":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"1:3165:22583":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:7511:18164":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"21:13785:36774":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"1:4430:5620":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:12926:21852":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:13354:22274":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:9722:18456":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:53507:5827":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:5554:2265":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:11982:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"21:8304:189":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"1:11931:24660":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:50777:11410":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"24:9:4213":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"21:15017:4196":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:7292:36774":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"17:12046:21415":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:49354:11129":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"21:9112:2112":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"16:2411:18307":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5504:15973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:3309:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:11278:22519":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:4974:5658":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:6612:36774":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"12:2190:35576":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:56961:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:9844:2761":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"16:5981:22949":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:12327:1453":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"21:13196:2101":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:39330:2617":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:1411:5431":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:11698:23661":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:11217:18848":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:4843:5647":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6329:5660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:56922:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:53979:10888":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:3165:4759":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:48290:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:2865:33217":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13192:22261":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:6017:18259":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:50550:10998":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:6244:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:538:22423":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:8874:4928":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:4768:15362":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:11893:21404":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"21:14789:2116":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"5:3688:34444":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:3372:11069":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"21:14759:2355":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"2:4342:3953":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:13747:2209":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:49998:11021":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:53009:5815":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"21:9758:36774":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"21:14734:2352":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:10133:2170":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"17:11547:18517":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:1080:22789":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:13580:22361":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:8552:2353":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"24:190:2055":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"1:7870:24668":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:2516:2332":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:6848:5772":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:10436:5490":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"27:140:4919":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"1:8232:5017":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"21:13091:2203":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"17:10520:18570":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:46409:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"30:0:1871":{"crate_id":30,"path":["memchr"],"kind":"module"},"17:9317:18386":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:2385:5541":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:21279:22689":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:7567:18212":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:5706:5703":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:2840:4746":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:1615:5430":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:6422:11059":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:21898:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:48657:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:9118:2113":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"2:50054:3553":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:20366:5786":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:12781:21737":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:918:5428":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"21:14842:5215":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:4662:5619":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"21:14658:2348":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"1:6862:5773":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:2907:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"16:7956:18195":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:49852:10963":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"18:766:22417":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11485:21213":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:567:12058":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:12148:21422":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:6887:34412":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:5941:3826":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13557:22354":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:7357:18204":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:11870:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:9700:18430":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9601:18410":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:1580:12948":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:9341:5719":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:4313:11091":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:519:12053":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:7483:18193":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:5374:18182":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"12:1029:5441":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:6415:16403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"9:800:17138":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:2441:5605":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4247:15307":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:9287:4025":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:9764:18460":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:2749:18321":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:51011:2402":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"5:4874:3954":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"30:777:22408":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12134:21421":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:10697:36774":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"6:1600:12950":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:13594:22395":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:14261:2264":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"1:8227:5016":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:8822:36504":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:2930:18169":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:52039:5780":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:6909:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10476:18567":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:9757:10976":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"21:14847:2117":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"27:432:4970":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"2:2819:4741":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:4590:5625":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:54116:10897":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1643:12953":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:14304:36774":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"2:47574:2203":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"28:185:3952":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"2:3189:4762":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:48196:5674":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"21:8739:36774":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:9539:18406":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:48581:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:20071:32806":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:50371:11020":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:5523:15975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:6146:18231":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:12176:21437":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:10468:2164":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"2:6515:2902":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10912:5315":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:4417:15325":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"21:14690:2171":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"6:4659:15351":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6034:18260":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"14:160:17225":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:6748:36774":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14899:36592":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"6:4716:15357":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:3599:17265":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"12:353:22885":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7309:18288":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:4327:17780":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:9458:18423":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11828:21400":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:1903:18445":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:4913:27254":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"6:4605:15344":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"28:37:2265":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"21:9295:2152":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"21:14364:36774":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:9820:18510":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"21:10946:36774":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"2:2659:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"21:11205:2179":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"2:10289:10966":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:20476:5788":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4540:15336":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:5045:920":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"17:10062:18475":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"14:7:17225":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:5898:3923":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6619:18274":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2908:2005":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:3319:3559":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"16:4786:17896":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:9312:5718":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:46593:11090":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:3958:5573":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"1:7549:23808":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:4321:5596":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:11539:36774":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"6:4152:15298":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:21733:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"16:4385:17792":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:1044:34425":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"12:810:5431":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11235:18899":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:2683:18318":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:52585:5857":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"21:10142:2058":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"21:11714:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:12323:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"21:13008:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"0:46:1573":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"2:21667:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"21:13472:2102":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"2:7101:2291":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:996:5437":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:5774:5706":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:8951:36520":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13492:22344":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:4771:5632":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:20317:5605":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"21:13426:4215":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"1:11796:5576":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"21:6221:4986":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"2:25239:5579":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"24:15:4214":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"16:5184:18300":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:6847:5472":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"30:836:22413":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:9488:18408":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"21:12193:2191":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"2:39379:11263":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:8649:5309":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"9:709:4928":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:4187:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:2282:18302":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:1738:12962":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"18:614:36544":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:50308:2341":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"21:9398:36774":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"1:6687:2206":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"21:6536:1690":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"16:5839:18255":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"21:11500:2181":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"30:707:31833":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:6141:34444":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:46331:4761":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:4224:15304":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:1114:5441":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"16:5411:18236":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:7847:18293":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10455:18554":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:47081:5530":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"5:2044:5391":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:3162:22582":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:4689:17881":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10075:18473":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:10506:18532":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:8602:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:5657:5700":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:113:22437":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:1620:5446":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12164:21423":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13231:22270":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"5:2593:22793":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:47313:2169":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:10403:18563":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8623:5571":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:4695:33187":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"21:12045:2076":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:8458:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:4911:27252":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:51049:10910":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"31:100:1733":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"26:43:37115":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:47299:2168":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:3263:18332":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:4215:5589":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5780:18252":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:10661:5704":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"21:14451:2338":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"1:9249:5708":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"21:10883:36774":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"1:10809:28979":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:3197:3568":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"30:691:2178":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1678:12956":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"21:13592:2267":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"9:622:17035":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"16:5460:18239":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:7890:18198":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5596:18246":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:49075:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"6:6998:16784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:7872:18199":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"21:10111:36774":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"1:3382:3543":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6654:18275":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:47334:2171":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"21:10493:36774":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:11154:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:12265:21491":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"21:9167:36774":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"2:7155:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"21:8069:36774":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:21302:30635":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:11997:21411":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11356:19038":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:51019:2403":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:21319:30760":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:7159:36774":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:11611:23795":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"5:6441:11060":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:9615:10978":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11761:21395":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"18:564:22424":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:13575:36774":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"30:741:36538":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:1604:2202":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:5180:5655":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:12485:21626":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:8956:5688":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"12:274:35572":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:5568:15944":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1654:12954":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12909:21851":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:8422:2150":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:2433:18308":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:50769:11407":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"21:14323:2336":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:51955:31710":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"30:716:36541":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:47121:2895":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"9:592:17034":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:4545:17858":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:8729:5628":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:13279:22271":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:2631:18316":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"12:1872:5449":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:11873:21403":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:11317:5709":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:47143:2896":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"12:1840:2265":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:12756:21734":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"28:202:5439":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"12:985:5439":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:29580:11276":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:10245:18557":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:46890:11020":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"21:7111:36774":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:7004:2892":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:11254:2180":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:13536:22353":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:13445:4216":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"1:9357:4923":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:8562:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:20450:5782":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"21:8414:202":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"17:11259:19009":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"6:5692:15986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2923:2288":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:52185:5837":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"12:646:4024":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:2802:4742":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:10608:18574":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:6781:18202":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:39370:11322":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:49609:22763":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:7343:18191":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:9771:10974":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:1737:11300":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:9279:5716":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:7815:28975":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10708:18580":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4581:15341":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:4698:15355":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"30:632:22421":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:7093:18280":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:48138:2202":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:1632:5448":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:12275:23818":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:5447:18238":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"29:27:1680":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"27:187:4927":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"17:10159:18478":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:2579:2334":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"18:515:22421":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:7078:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"12:1120:17216":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:12320:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:2411:5551":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46453:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:9460:18279":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:8241:18602":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"16:7059:5673":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"16:5703:18249":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:7885:5395":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4559:15338":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:50639:11002":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:2777:4731":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:13184:22260":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4726:15358":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:359:5409":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:3484:2349":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4515:15333":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"21:12464:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"17:11800:21398":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:12748:21692":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:8498:5567":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"0:56:1044":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"17:12225:21488":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"5:3477:2202":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:9339:18384":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:8933:36774":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:13459:22320":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:50793:11414":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"21:5986:1686":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"16:2825:18324":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:49862:10961":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:931:5429":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:50328:11011":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:13523:4025":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"2:11717:2075":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"21:8375:2090":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:7425:2888":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:47171:2154":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:12355:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"6:131:11733":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:48543:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3235:3570":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:8162:18599":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:3159:4757":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"12:669:5432":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12337:18565":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"21:14836:2114":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"17:11315:19023":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:2830:4744":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:1672:1063":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11034:18737":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11576:21223":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:5488:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:14960:2523":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"24:135:2054":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"17:10321:18524":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:10822:18583":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4115:15295":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2383:5540":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"26:53:37116":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"12:1836:4025":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:2919:2287":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"21:13888:2273":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"6:1887:13098":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:50628:11001":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"21:9673:36774":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:4050:11095":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:52505:31714":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"21:12156:36774":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"6:4427:15326":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:2673:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:5614:22943":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:48429:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:9495:23474":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:9553:18391":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:20048:32805":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"5:6451:11061":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:4888:17924":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:386:18480":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:50773:11409":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:9071:36507":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:8103:5537":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:50353:11019":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:7249:15495":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:9565:5557":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:52261:5829":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12739:21691":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"21:10910:2063":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:4259:5591":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:0:1352":{"crate_id":1,"path":["std"],"kind":"module"},"1:8081:5533":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"12:834:5436":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9627:18417":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"21:10509:2161":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"1:5018:5609":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"27:0:1697":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"2:5456:2056":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:47583:2885":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"30:624:2178":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:6554:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"21:338:2070":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"2:49057:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"8:0:1862":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11617:5715":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:7428:2890":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12198:21486":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"12:2205:5455":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:47024:11344":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:5720:5704":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"6:4379:15323":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6302:16399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:1864:5490":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:20200:5790":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"20:131:1688":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"21:8561:2097":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"2:48824:10924":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4745:15360":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:10434:18564":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:7906:5315":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4804:15365":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:13340:22273":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:7581:2084":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"1:8715:5618":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:8966:2202":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:48154:4025":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:3125:18477":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"25:0:1675":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"17:3249:18496":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"21:14878:36593":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"5:2054:22779":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:6650:30095":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:2284:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"12:60:35585":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"21:1087:2110":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"21:9499:36774":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"21:14750:2354":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"1:973:5434":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:50456:10990":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"21:14626:2345":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"27:439:4922":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"2:48467:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:5727:15990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"20:82:2000":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"17:12860:21784":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:3087:22776":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"6:6269:11971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:12324:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"}},"external_crates":{"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"futures_task","html_root_url":null},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"futures_macro","html_root_url":null},"28":{"name":"slab","html_root_url":null},"30":{"name":"memchr","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"20":{"name":"futures_core","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"futures_sink","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"27":{"name":"futures_channel","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"31":{"name":"futures_executor","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}