{"root":"0:0:1962","crate_version":"0.3.30","includes_private":false,"index":{"0:79-29:20:1882":{"id":"0:79-29:20:1882","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1882","glob":false}}},"0:59-2:45034:150":{"id":"0:59-2:45034:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:45034:150","glob":false}}},"2:12929:27458":{"id":"2:12929:27458","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12930:27475"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44399:8325","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:1871":{"id":"0:67-20:97:1871","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1871","glob":false}}},"0:50-31:109:1930":{"id":"0:50-31:109:1930","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1930","glob":false}}},"0:62-21:4707:1876":{"id":"0:62-21:4707:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:1876","glob":false}}},"0:38-21:5264:1041":{"id":"0:38-21:5264:1041","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1041","glob":false}}},"2:12909:333":{"id":"2:12909:333","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12910:22369","`u8`":"1:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:1935":{"id":"0:55-31:125:1935","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1935","glob":false}}},"2:12902:29812":{"id":"2:12902:29812","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12934:22410":{"id":"2:12934:22410","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:1879":{"id":"0:76-29:27:1879","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1879","glob":false}}},"2:12923:22397":{"id":"2:12923:22397","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12924:22398"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:27447":{"id":"2:12933:27447","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44417:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13019:29833":{"id":"2:13019:29833","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12553:137","`FromStr`":"2:12552:2947"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42385:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12552:2947","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12552:2947","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:587:1868":{"id":"0:8-21:587:1868","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:1868","glob":false}}},"2:12960:29818":{"id":"2:12960:29818","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12592:8322","str::split":"2:12951:2462","prim@char":"1:12072:453","`DoubleEndedIterator`":"2:7973:131","str::rsplit_terminator":"2:12963:29819"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44175:8342","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:27678":{"id":"2:12927:27678","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44101:8328","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28-22:7:1888":{"id":"0:28-22:7:1888","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1888","glob":false}}},"2:12922:22394":{"id":"2:12922:22394","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12921:22393","str::split_at_mut_checked":"2:12924:22398"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6199:1886":{"id":"0:84-21:6199:1886","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:1886","glob":false}}},"0:16-21:5171:1877":{"id":"0:16-21:5171:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:1877","glob":false}}},"0:78-29:25:1881":{"id":"0:78-29:25:1881","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1881","glob":false}}},"0:39-21:4707:1876":{"id":"0:39-21:4707:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:1876","glob":false}}},"0:63-25:9:1875":{"id":"0:63-25:9:1875","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1875","glob":false}}},"0:37-21:104:763":{"id":"0:37-21:104:763","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:763","glob":false}}},"5:5603:22199":{"id":"5:5603:22199","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13024:22197"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20-29:25:1881":{"id":"0:20-29:25:1881","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1881","glob":false}}},"0:83-21:6212:1885":{"id":"0:83-21:6212:1885","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:1885","glob":false}}},"2:12930:27475":{"id":"2:12930:27475","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12929:27458"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44408:8324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13031:2592":{"id":"2:13031:2592","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4772:2592"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44433:2593","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1772":{"id":"0:46:1772","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1928","`LocalPool`":"31:120:1934"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1928","0:49-31:68:1929","0:50-31:109:1930","0:51-31:136:1931","0:52-31:100:1932","0:53-31:102:1933","0:54-31:120:1934","0:55-31:125:1935"],"is_stripped":false}}},"0:13-21:2766:1872":{"id":"0:13-21:2766:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:1872","glob":false}}},"2:12998:29828":{"id":"2:12998:29828","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12617:8317","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:30534":{"id":"5:5600:30534","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1177":{"id":"0:56:1177","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:763","0:59-2:45034:150","0:60-20:32:1865","0:62-21:4707:1876","0:63-25:9:1875","0:65-21:1291:1869","0:66-20:68:1870","0:67-20:97:1871","0:69-21:422:1867","0:70-21:587:1868","0:71-21:5171:1877","0:73-21:2766:1872","0:74-21:3786:1873","0:76-29:27:1879","0:77-29:17:1880","0:78-29:25:1881","0:79-29:20:1882","0:81-21:6217:1883","0:82-21:6182:1884","0:83-21:6212:1885","0:84-21:6199:1886"],"is_stripped":false}}},"2:13025:22196":{"id":"2:13025:22196","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:21050":{"id":"2:12947:21050","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42244:191","prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-20:32:1865":{"id":"0:5-20:32:1865","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1865","glob":false}}},"2:13007:22411":{"id":"2:13007:22411","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12994:29825":{"id":"2:12994:29825","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13021:22200":{"id":"2:13021:22200","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:1932":{"id":"0:52-31:100:1932","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1932","glob":false}}},"0:69-21:422:1867":{"id":"0:69-21:422:1867","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:1867","glob":false}}},"2:12915:22367":{"id":"2:12915:22367","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12920:29816":{"id":"2:12920:29816","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12078:1545","crate::ops::IndexMut":"2:3253:2670","str::slice_unchecked":"2:12919:29815"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13028:23753":{"id":"2:13028:23753","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:36060"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-29:20:1882":{"id":"0:21-29:20:1882","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1882","glob":false}}},"0:73-21:2766:1872":{"id":"0:73-21:2766:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:1872","glob":false}}},"0:40-21:1291:1869":{"id":"0:40-21:1291:1869","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:1869","glob":false}}},"2:12907:21688":{"id":"2:12907:21688","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12140:8326"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12990:29823":{"id":"2:12990:29823","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:1887":{"id":"0:27-20:131:1887","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1887","glob":false}}},"2:12969:22406":{"id":"2:12969:22406","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12072:453","str::splitn":"2:12966:22404","self::pattern":"2:12592:8322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44247:8309","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:29822":{"id":"2:12987:29822","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12592:8322","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::match_indices":"2:12984:29821"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44293:8338","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12997:29827":{"id":"2:12997:29827","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12901:29811":{"id":"2:12901:29811","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:23748":{"id":"2:13022:23748","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40215:23703","Self::is_ascii":"2:13021:22200"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40215:23703","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5586:8654":{"id":"5:5586:8654","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:1880":{"id":"0:77-29:17:1880","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1880","glob":false}}},"0:41-21:5212:1894":{"id":"0:41-21:5212:1894","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:1894","glob":false}}},"0:26-21:6199:1886":{"id":"0:26-21:6199:1886","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:1886","glob":false}}},"2:12932:29817":{"id":"2:12932:29817","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44389:8336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13023:22201":{"id":"2:13023:22201","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:1929":{"id":"0:49-31:68:1929","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1929","glob":false}}},"2:12904:29813":{"id":"2:12904:29813","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12902:29812"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13026:23751":{"id":"2:13026:23751","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:36060"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12984:29821":{"id":"2:12984:29821","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12592:8322","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::rmatch_indices":"2:12987:29822"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44275:8337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:29824":{"id":"2:12992:29824","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:29829":{"id":"2:13001:29829","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1962":{"id":"0:0:1962","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:1899","crate::executor":"0:46:1772","crate::stream":"21:1291:1869","crate::channel":"27:0:1896","crate::future":"21:104:763","crate::sink":"21:4707:1876"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1772","0:56:1177","0:4-2:45034:150","0:5-20:32:1865","0:7-21:422:1867","0:8-21:587:1868","0:10-20:68:1870","0:11-20:97:1871","0:13-21:2766:1872","0:14-21:3786:1873","0:15-25:9:1875","0:16-21:5171:1877","0:18-29:27:1879","0:19-29:17:1880","0:20-29:25:1881","0:21-29:20:1882","0:23-21:6217:1883","0:24-21:6182:1884","0:25-21:6212:1885","0:26-21:6199:1886","0:27-20:131:1887","0:28-22:7:1888","0:29-21:6770:1889","0:31-21:6767:1890","0:32-21:37:1891","0:33-21:20:1161","0:34-21:6769:1892","0:35-21:6768:1893","0:37-21:104:763","0:38-21:5264:1041","0:39-21:4707:1876","0:40-21:1291:1869","0:41-21:5212:1894","0:42-21:57:1895","0:43-27:0:1896","0:44-21:6240:1898","0:45-21:5266:1899"],"is_stripped":false}}},"2:13032:29835":{"id":"2:13032:29835","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4769:29835"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44442:8334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4-2:45034:150":{"id":"0:4-2:45034:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:45034:150","glob":false}}},"2:12928:21467":{"id":"2:12928:21467","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44111:2783","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6769:1892":{"id":"0:34-21:6769:1892","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:1892","glob":false}}},"5:5592:30533":{"id":"5:5592:30533","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:22409":{"id":"2:12975:22409","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65-21:1291:1869":{"id":"0:65-21:1291:1869","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:1869","glob":false}}},"2:12951:2462":{"id":"2:12951:2462","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12592:8322","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::split_whitespace":"2:12929:27458","str::rsplit":"2:12957:22402"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44125:2784","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12908:29814":{"id":"2:12908:29814","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13013:29831":{"id":"2:13013:29831","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12899:879":{"id":"2:12899:879","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12072:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31-21:6767:1890":{"id":"0:31-21:6767:1890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:1890","glob":false}}},"0:81-21:6217:1883":{"id":"0:81-21:6217:1883","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:1883","glob":false}}},"0:82-21:6182:1884":{"id":"0:82-21:6182:1884","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:1884","glob":false}}},"0:43-27:0:1896":{"id":"0:43-27:0:1896","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1896","glob":false}}},"5:5601:30535":{"id":"5:5601:30535","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2434","`String`":"5:7622:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2434","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51-31:136:1931":{"id":"0:51-31:136:1931","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1931","glob":false}}},"2:13016:29832":{"id":"2:13016:29832","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:22192":{"id":"2:12900:22192","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:1871":{"id":"0:11-20:97:1871","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1871","glob":false}}},"2:12937:21844":{"id":"2:12937:21844","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:22398":{"id":"2:12924:22398","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12923:22397"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:1934":{"id":"0:54-31:120:1934","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1934","glob":false}}},"0:25-21:6212:1885":{"id":"0:25-21:6212:1885","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:1885","glob":false}}},"0:32-21:37:1891":{"id":"0:32-21:37:1891","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1891","glob":false}}},"2:13029:29834":{"id":"2:13029:29834","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4771:29834"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44424:8333","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12931:2453":{"id":"2:12931:2453","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44379:2479","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:21846":{"id":"2:12940:21846","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:22408":{"id":"2:12972:22408","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:22393":{"id":"2:12921:22393","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:12923:22397","str::split_at_mut":"2:12922:22394"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12981:29820":{"id":"2:12981:29820","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12592:8322","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::matches":"2:12978:2185"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44347:8340","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5602:2322":{"id":"5:5602:2322","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12966:22404":{"id":"2:12966:22404","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322","str::rsplitn":"2:12969:22406"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44229:8311","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:29826":{"id":"2:12996:29826","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6182:1884":{"id":"0:24-21:6182:1884","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:1884","glob":false}}},"2:12957:22402":{"id":"2:12957:22402","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12592:8322","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::split":"2:12951:2462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44143:8307","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:763":{"id":"0:58-21:104:763","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:763","glob":false}}},"2:12911:22365":{"id":"2:12911:22365","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66-20:68:1870":{"id":"0:66-20:68:1870","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1870","glob":false}}},"2:12963:29819":{"id":"2:12963:29819","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12592:8322","str::split":"2:12951:2462","prim@char":"1:12072:453","str::split_terminator":"2:12960:29818"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44193:8341","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-21:6217:1883":{"id":"0:23-21:6217:1883","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:1883","glob":false}}},"2:13024:22197":{"id":"2:13024:22197","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:27446":{"id":"2:12926:27446","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12072:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44095:8329","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18-29:27:1879":{"id":"0:18-29:27:1879","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1879","glob":false}}},"0:7-21:422:1867":{"id":"0:7-21:422:1867","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:1867","glob":false}}},"2:12978:2185":{"id":"2:12978:2185","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12592:8322","`DoubleEndedIterator`":"2:7973:131","prim@char":"1:12072:453","str::rmatches":"2:12981:29820"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44329:8339","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:22198":{"id":"5:5604:22198","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13025:22196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5589:30532":{"id":"5:5589:30532","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7622:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7622:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12910:22369":{"id":"2:12910:22369","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12089:1649"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:587:1868":{"id":"0:70-21:587:1868","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:1868","glob":false}}},"0:35-21:6768:1893":{"id":"0:35-21:6768:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:1893","glob":false}}},"2:12943:21049":{"id":"2:12943:21049","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42244:191","prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5585:30531":{"id":"5:5585:30531","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:286:2434","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:286:2434","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1895":{"id":"0:42-21:57:1895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1895","glob":false}}},"0:14-21:3786:1873":{"id":"0:14-21:3786:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:1873","glob":false}}},"0:53-31:102:1933":{"id":"0:53-31:102:1933","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1933","glob":false}}},"2:12898":{"id":"2:12898","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12899:879","2:12900:22192","2:12901:29811","2:12902:29812","2:12904:29813","2:12907:21688","2:12908:29814","2:12909:333","2:12910:22369","2:12911:22365","2:12913:22366","2:12915:22367","2:12917:22368","2:12919:29815","2:12920:29816","2:12921:22393","2:12922:22394","2:12923:22397","2:12924:22398","2:12926:27446","2:12927:27678","2:12928:21467","2:12929:27458","2:12930:27475","2:12931:2453","2:12932:29817","2:12933:27447","2:12934:22410","2:12937:21844","2:12940:21846","2:12943:21049","2:12947:21050","2:12951:2462","2:12954:22400","2:12957:22402","2:12960:29818","2:12963:29819","2:12966:22404","2:12969:22406","2:12972:22408","2:12975:22409","2:12978:2185","2:12981:29820","2:12984:29821","2:12987:29822","2:12990:29823","2:12992:29824","2:12994:29825","2:12996:29826","2:12997:29827","2:12998:29828","2:13001:29829","2:13004:21518","2:13007:22411","2:13010:29830","2:13013:29831","2:13016:29832","2:13019:29833","2:13021:22200","2:13022:23748","2:13023:22201","2:13024:22197","2:13025:22196","2:13026:23751","2:13027:23752","2:13028:23753","2:13029:29834","2:13031:2592","2:13032:29835"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13010:29830":{"id":"2:13010:29830","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12612:8319","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3786:1873":{"id":"0:74-21:3786:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:1873","glob":false}}},"2:13004:21518":{"id":"2:13004:21518","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:1865":{"id":"0:60-20:32:1865","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1865","glob":false}}},"0:10-20:68:1870":{"id":"0:10-20:68:1870","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1870","glob":false}}},"0:33-21:20:1161":{"id":"0:33-21:20:1161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1161","glob":false}}},"0:71-21:5171:1877":{"id":"0:71-21:5171:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:1877","glob":false}}},"0:48-31:65:1928":{"id":"0:48-31:65:1928","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1928","glob":false}}},"0:29-21:6770:1889":{"id":"0:29-21:6770:1889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:1889","glob":false}}},"0:44-21:6240:1898":{"id":"0:44-21:6240:1898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:1898","glob":false}}},"2:13027:23752":{"id":"2:13027:23752","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:918:36060"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5584":{"id":"5:5584","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5585:30531","5:5586:8654","5:5589:30532","5:5592:30533","5:5600:30534","5:5601:30535","5:5602:2322","5:5603:22199","5:5604:22198"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12913:22366":{"id":"2:12913:22366","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42244:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42242:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19-29:17:1880":{"id":"0:19-29:17:1880","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1880","glob":false}}},"2:12917:22368":{"id":"2:12917:22368","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10682:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:29815":{"id":"2:12919:29815","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12078:1545","str::slice_mut_unchecked":"2:12920:29816","crate::ops::Index":"2:39861:2669"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:22400":{"id":"2:12954:22400","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12072:453","self::pattern":"2:12592:8322"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12408:8313","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12597:8318","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5266:1899":{"id":"0:45-21:5266:1899","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:1899","glob":false}}},"0:15-25:9:1875":{"id":"0:15-25:9:1875","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1875","glob":false}}}},"paths":{"6:6763:14189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:11110:8311":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:12808:16520":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"5:3652:2621":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:46470:3089":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:918:2628":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:44869:8807":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:7485:14603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:2979:15461":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"21:8921:2299":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"1:7616:16537":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:44915:3031":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:9196:3026":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:6438:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"21:8339:2276":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"1:8236:2426":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:22782:2825":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"21:5266:1899":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:22394:3173":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"6:523:9429":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:39952:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:10045:8263":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"29:25:1881":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"21:7419:2267":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"29:17:1880":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:39865:8682":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"20:82:2211":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"16:4813:16097":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:32789:8645":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:6621:14172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"14:0:2077":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:5472:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:5581:2956":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:12089:1649":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:12792:16519":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8304:2819":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:4109:2849":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:7921:2751":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:7100:33703":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:22031:2755":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"27:495:21150":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"1:9155:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:7382:2415":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:32820:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"5:2104:2658":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"1:7802:2602":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:4706:2848":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"21:15387:2317":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"1:4902:2858":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:12087:802":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:11189:16591":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:15222:20806":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:7971:16456":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"11:396:32141":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:12582:2376":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"21:13524:33760":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"5:6554:2415":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:6626:2424":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"21:9309:33703":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"6:5528:13460":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:32701:16461":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:44329:8339":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:16069:21010":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"1:10719:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:12127:16705":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:12408:16779":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:482:27253":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:44424:8333":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:5346:32548":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7914:16453":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:15313:20813":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"6:5588:13466":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:6217:1883":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"2:44125:2784":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:40903:2667":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:42291:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:7537:14605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4885:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:6362:16400":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:42325:2926":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:16259:19521":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"21:23:2230":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:2687:2755":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:44526:8353":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:2336:15434":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:10001:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"21:7130:2262":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:3221:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:43214:8253":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"2:43521:27793":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:12383:2280":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"21:13676:2394":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"1:5045:2918":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"28:42:2622":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"1:8291:2784":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:40739:8441":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"21:11209:2358":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"1:11647:21534":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:9916:16541":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11841:16738":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"21:9992:33703":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"17:11788:16736":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:15249:20807":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:2789:15455":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:8351:15177":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:14991:2476":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"11:1566:15347":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"21:8364:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:21399:28311":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"30:1081:21167":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"21:10017:71":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"2:13525:2646":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:11567:16680":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"21:14056:2621":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:11714:8295":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:4979:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:44399:8325":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:12039:26014":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"21:15035:32101":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:46270:3048":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:2569:2617":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:45055:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:11089:16590":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:16121:21014":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"21:15166:2483":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"2:22851:27667":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:6376:16401":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"11:687:2621":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:5959:15403":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:41464:8622":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:32788:2430":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12030:16702":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:15092:20794":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"30:1464:35154":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"21:11920:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"2:46646:3061":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"21:6394:21096":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"17:16151:21016":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:22913:2826":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:15148:2481":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"16:6422:32635":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:4399:15982":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:12899:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"19:0:1139":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"27:434:21151":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"1:10069:2686":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:3501:8248":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:5316:16357":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:256:33409":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:10401:33703":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:6698:14181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"30:1508:35159":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"21:14327:33703":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"1:8461:2922":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:14066:20039":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:15646:20839":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:45047:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"21:9346:2312":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"17:12683:16802":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"5:6682:2622":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:1510:10324":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:3561:2491":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:8080:21627":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:10997:16577":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:13814:20023":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"21:7636:2281":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"21:6859:2261":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"21:9167:33703":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:8635:33703":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"2:22675:27663":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:8090:2425":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:14475:20065":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"9:501:15225":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:11095:2759":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"6:5191:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"21:11407:33703":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"17:14260:20050":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"21:15321:33649":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"17:11242:16613":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:5515:13459":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"18:718:21051":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:10462:28683":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"21:14657:2471":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"30:142:21172":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"1:6068:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:14111:20042":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:15426:20825":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"21:11763:2366":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"17:12557:16595":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"28:0:2222":{"crate_id":28,"path":["slab"],"kind":"module"},"16:4674:16073":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"23:0:2220":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"2:47750:3085":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:47094:3096":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"21:11514:33703":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"5:4426:31162":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:5649:2957":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"11:811:2625":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:42513:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9755:16508":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:42385:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"16:5580:16365":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:3424:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"21:15198:2486":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"1:1063:2636":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:16235:21023":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"17:13325:19517":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13412:19523":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11877:16696":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:14372:20058":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:15190:20802":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:12072:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:5527:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:43306:8255":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"30:934:21170":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"21:9188:2308":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"24:12:21076":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"21:15372:2315":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"21:9131:2307":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"1:4119:2850":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:41025:2261":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:6882:32590":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"30:1587:35153":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"30:978:153":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"17:10218:16515":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:9338:2311":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"2:38458:8677":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:22537:3165":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:1547:2628":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"15:394:15393":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:12213:16783":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:597:16537":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:3190:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:2079:2476":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:2032:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:44347:8340":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:13691:2396":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"17:11493:16637":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"16:4787:16094":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:4987:2908":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"1:8012:2476":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"30:1123:21056":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"21:11117:33703":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"2:41231:2354":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:5616:16367":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:2917:15460":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"21:15358:33703":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"1:3504:2480":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"21:13575:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"2:10031:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:9737:16510":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:44293:8338":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:3406:15466":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:8248:2428":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14414:20061":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11688:16649":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"30:1579:21058":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:5521:16361":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15301:20812":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"27:136:2993":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"1:1862:2686":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"16:6268:16394":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:46890:27751":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:8391:2647":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:30958:8253":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:7516:14604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:637:2597":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11915:16741":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:14633:33703":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"17:16176:21018":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:42450:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"10:0:2074":{"crate_id":10,"path":["adler"],"kind":"module"},"17:15473:20830":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:1723:10344":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"21:14031:2392":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"17:15616:20836":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:40801:27819":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:8750:2296":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"16:3830:15528":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:10037:8264":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:11704:33703":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:11510:16623":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5630:13470":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:44389:8336":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:22036:3043":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"21:7393:33703":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:1934:8704":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:4911:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"16:6134:16385":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11166:16593":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:5671:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:3698:2415":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"21:6583:33687":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"21:11465:33703":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"6:1653:10337":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"27:371:2993":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"11:875:2632":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:47124:3102":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:1968:2707":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:13738:20020":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"11:1883:2392":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11153:16556":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:10317:16548":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"28:208:2636":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"6:6915:14222":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"21:14604:2470":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:34187:8671":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:2730:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"21:4486:21083":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"5:3863:2625":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"21:9672:33703":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"21:4353:34591":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"21:14783:33703":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"16:6201:16388":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:9181:8318":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"21:12618:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"21:11977:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:6429:187":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"16:7609:16446":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:9503:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13581:19535":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13986:20033":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:880:2624":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"21:10117:33703":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"17:11853:16739":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:40953:2337":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:6478:14164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:13435:3176":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:2304:15432":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"6:5407:1109":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:13397:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:12108:2274":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"20:32:1865":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"6:5102:13414":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:10720:33400":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6331:16398":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"5:1526:2626":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:12089:16698":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:10139:2361":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:41479:8623":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:46045:3046":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"9:329:15278":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"15:306:15382":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:44101:8328":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"21:9694:2338":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"2:44620:8357":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:11160:21679":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:12887:16564":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:44541:8354":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"6:5344:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:8931:2622":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"0:56:1177":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"11:1896:2625":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"21:9257:2309":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:48364:8210":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"21:5171:1877":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"16:2769:15454":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:533:2567":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"27:441:2998":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:903:2625":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:3832:2622":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:42971:8257":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"21:14347:2422":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"24:9:21077":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"6:5370:13443":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:12140:8326":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:8271:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"18:689:21057":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:9002:2301":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"17:13272:19514":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:8915:2392":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:42985:8265":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13568:19534":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:15:2188":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:46424:3035":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:4838:8433":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"13:109:32203":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"0:0:1962":{"crate_id":0,"path":["futures"],"kind":"module"},"21:13961:33535":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"21:12758:33657":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"17:12597:16805":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:7551:16443":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"5:6921:8386":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:2883:15459":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:13606:19537":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:7586:33684":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"9:52:15241":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11764:16689":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"21:14482:33703":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"20:17:2210":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"1:893:2415":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:40633:8407":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:3814:2820":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:34706:8675":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:42367:2929":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:2736:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"21:7991:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:14863:2474":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:9070:2928":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:12044:2604":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:2443:2415":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"11:774:2623":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:5050:2769":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:7223:25625":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"6:5390:13446":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:9830:8254":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"1:1581:2415":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:14560:20071":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"5:2748:29596":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12543:16799":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"1:922:2629":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:40683:8446":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13387:19521":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:3296:2641":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"21:14011:2621":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"1:10487:2572":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"21:6747:33685":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"17:12695:16801":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"21:14289:2399":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"1:9150:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"5:3018:31072":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13173:16841":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:12085:800":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:9807:16524":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:7635:8364":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:1885:2692":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:45034:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:4297:2392":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:403:16535":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:12362:16787":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:473:9423":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"5:713:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"21:9763:2339":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"21:10078:2331":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"21:13091:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"17:13774:16742":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"30:1007:21057":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"1:7686:27247":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:4761:16091":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:1040:2634":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:8377:2819":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:10170:16358":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8478:2940":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:33991:8668":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:42788:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:15445:20827":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:7389:10465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:1517:10325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:15023:20792":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:15410:20823":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:12913:2388":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"21:12808:33656":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"30:1472:21060":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"21:12856:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"1:8085:21623":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5536:13461":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:7584:14609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"11:800:2415":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:2548:32144":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:7749:2573":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:13199:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:2438:2740":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"21:13008:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"30:1391:21062":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:16093:21012":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"30:1158:21167":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"30:1523:21063":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"11:434:32135":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:21744:2755":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:1585:10332":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:44732:8343":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:925:2300":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"2:5807:2769":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"6:7348:14597":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:21401:28315":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:11702:16684":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"18:538:21066":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:1707:10343":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:8549:2942":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:14575:16525":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"21:14072:2414":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"30:1415:21036":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"21:15123:33703":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"1:1809:662":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:2353:639":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:9369:2332":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:4366:8424":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:10747:26349":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"6:1686:10341":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:9858:16539":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:1716:31152":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:6944:8387":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10738:26351":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:8298:2479":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"27:124:21132":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"17:14912:20786":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:1903:2638":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:42747:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:7984:9382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13235:19512":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:10444:2800":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:13116:16839":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:47892:3057":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:3273:2798":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22807:27652":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"21:9606:2336":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"17:10350:16549":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:8285:2783":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:6116:16384":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:5181:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"20:97:1871":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"1:3749:2817":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"21:10686:33703":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:5256:21090":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"17:11715:16685":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43874:27433":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:10451:2261":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"16:7932:16454":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:10247:25977":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:6858:16420":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"21:7155:33703":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:10494:28222":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"21:8544:2286":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"17:12659:16797":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"2:22831:27753":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:3399:2789":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13785:16743":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:4821:2859":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:10958:8302":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"11:430:32140":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:32661:2964":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"5:4095:31152":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:22185:3039":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:3172:8246":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"16:7194:32653":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:6452:21094":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:10262:2342":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"1:0:1537":{"crate_id":1,"path":["std"],"kind":"module"},"2:10851:2621":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:15678:20841":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"21:13510:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"5:7611:8277":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"18:643:2361":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6394:16402":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:3028:31030":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:12300:16785":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13146:16840":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"21:8217:2274":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"21:11318:2360":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"17:12107:16555":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:15720:20843":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:6491:14120":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:4518:16009":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:8894:2962":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:2509:15442":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:2276:2459":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:48384:8212":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:2733:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"16:6141:32609":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"21:9632:33703":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"17:12201:16782":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:46522:3101":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:41241:2356":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:6600:31152":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:11031:8307":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:4909:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"28:60:2415":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"1:5827:2980":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:15209:2487":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"2:44247:8309":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:5039:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:4634:2576":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:6954:8388":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"2:48373:8211":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:7402:2659":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"21:7777:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:41057:8637":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:45096:3178":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:11424:25624":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:14189:20046":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:46169:3083":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:5046:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:12606:8320":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:43259:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:11069:8308":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:0:2080":{"crate_id":17,"path":["object"],"kind":"module"},"17:10877:16557":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:10041:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"31:0:1927":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"4:0:2071":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"21:15027:2418":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"1:7976:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:2268:2732":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46500:3095":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"20:0:1864":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:43706:8798":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"30:1569:21057":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:8870:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13473:19527":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9781:16538":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:22622:27637":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:15438:33690":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"6:4971:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:722:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"30:1187:21170":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"6:1663:10338":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:6275:21425":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:21362:8462":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"26:0:2221":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"1:2982:21644":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:3589:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"27:181:21137":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"21:4607:2302":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"2:46668:3067":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"21:6284:2367":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"6:5445:13451":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:497:9427":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:44193:8341":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"21:8401:2278":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"1:9089:16422":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"21:13714:33703":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"2:40856:2730":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:2001:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:7987:2619":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"1:557:2569":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:15256:33703":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"6:5477:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"16:7366:16432":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:12328:16750":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"24:169:2254":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"17:10534:33390":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:4481:8408":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:5906:2606":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:12597:8318":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"21:12419:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"17:14271:20051":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"21:4540:27247":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"17:9886:16540":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:12094:854":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:1574:2392":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:7373:2265":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:14574:2469":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"21:57:1895":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"5:1054:31152":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11443:16632":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:14212:20047":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"11:2423:2622":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:6721:14184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"16:2709:15451":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:4907:16122":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:9983:2491":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:15992:21009":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:1602:2640":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:6063:9027":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:15655:20840":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:4996:2909":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:7528:2618":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4787:13383":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:7931:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:4572:16017":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"9:177:15327":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"21:11543:33750":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"5:217:8252":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:15138:20798":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:5581:13465":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:1699:10342":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:1925:27708":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:2553:15444":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:10887:33406":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"13:0:2070":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:13248:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10759:16555":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:15418:20824":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"21:13882:33703":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"6:5283:13432":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"11:102:32148":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:21574:3041":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:42036:2813":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"11:1891:2415":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:10647:2912":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:6471:14163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"21:14220:2420":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"6:5502:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"16:6221:16390":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:6764:31152":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:299:32126":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"28:30:21153":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"11:1887:2622":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12189:16781":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:5665:13474":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:14256:33703":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"6:6417:14158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:4784:2883":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22542:3163":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"21:8795:2297":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"6:8012:14980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"6:8006:14979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:12092:1648":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:2689:15450":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:2375:15436":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"5:2197:29573":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"6:4811:13385":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:14356:20057":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:14025:20036":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:8328:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:11138:8312":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"21:15224:2489":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"1:11635:8226":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:15342:20816":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:44845:8810":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:6435:14159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:42182:2814":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:4942:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:21:1161":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"6:4985:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:1939:2706":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"21:8538:205":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"5:2187:2562":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:3260:15465":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"2:725:2755":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"18:96:21037":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:13288:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"31:109:1930":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"1:8278:2354":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:8282:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:5662:16370":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:40753:8443":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:5568:16364":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:12969:16513":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:6532:14167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:11230:21559":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:4:1122":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:11083:2355":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"6:1526:10326":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5329:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:47544:3051":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:1596:2639":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:3264:16699":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:13526:19531":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"21:2566:33602":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"31:125:1935":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:11952:2273":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"2:46570:3049":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"28:46:2392":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"3:0:480":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:10319:2258":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"5:1346:2637":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"21:14001:21079":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"17:2203:16625":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:8224:1875":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:16187:21019":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"6:5306:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"21:8532:2285":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:1680:10340":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"21:335:33607":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"31:100:1932":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"6:7306:9475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:3020:29601":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:10156:2966":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:43934:2359":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:40790:2716":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"21:15074:33703":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"21:9646:2337":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"1:849:2621":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"30:1039:21180":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"17:15624:20837":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:7467:26013":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:4075:2848":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"21:12206:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"1:1824:2675":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:5846:16376":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13946:20030":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"27:154:2999":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"16:6773:16416":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:5436:13450":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:5713:32239":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:7619:16447":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"14:40:19512":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"21:9114:33703":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:15836:20852":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:836:2392":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:6227:3179":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:0:2075":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"17:10419:16511":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:909:2626":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:6511:2984":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:12443:16780":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:8109:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"21:7887:2272":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:3214:2431":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"18:491:33447":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:32708:28487":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"16:2665:15449":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:44417:8323":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:48410:8214":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:45145:8230":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"21:6199:1886":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"1:1578:2622":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8564:2943":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:42827:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13877:20027":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"30:1137:21165":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"2:10996:8314":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:10682:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"30:1111:2392":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"18:754:21060":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:12183:2260":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"1:3579:2487":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"21:5251:21091":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:43466:2762":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:48463:8217":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:7507:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"16:4545:16013":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:40670:8444":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:41096:2352":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:11399:21520":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"21:15091:2479":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"17:11102:16589":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:6729:14185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"17:16032:19513":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"21:10613:2348":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:42064:27749":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:42377:2218":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:21372:28307":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"6:5244:13427":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:42552:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"21:3786:1873":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"16:2489:15441":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:3253:2670":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:15569:20832":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"5:7587:2712":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:14430:2423":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"5:1486:2622":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:21753:3038":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:15778:20848":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"16:2593:15446":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:928:2630":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:14969:33703":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"1:8966:2999":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:11524:16677":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:9030:21413":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:2516:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:437:15406":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"21:8778:33703":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:32697:26532":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"21:9907:33703":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"11:2403:2621":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:39992:2611":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:44841:8808":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:6892:3032":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:7720:8383":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:1332:2635":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:2279:31063":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:15931:19510":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"30:144:21173":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"6:7461:14601":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"6:4965:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:44891:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"6:7330:9306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7176:32645":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:4137:2621":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"11:2124:2634":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:40720:8333":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"21:6410:21095":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"2:11152:8310":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"15:327:15386":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:46616:3055":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:34360:8672":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:3522:2427":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:10876:2784":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:48425:8215":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10441:2798":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:11621:16654":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:41489:2394":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:12318:16567":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"30:909:21168":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"1:4550:2883":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13292:19515":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:6151:27255":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:8253:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:11358:2967":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:14844:33703":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"5:1536:2627":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:3224:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"21:13246:2381":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"6:479:9424":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"21:12873:2374":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"5:5434:2334":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:10847:2696":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"1:4069:2847":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:11579:2822":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:4409:8278":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:3442:2393":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11558:2820":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:8082:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:48002:3091":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"11:856:2631":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:13959:20031":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:37:1891":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"5:7622:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:2521:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12824:16561":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:7650:2395":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:1841:1196":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:6421:3181":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:7412:10450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:15799:20849":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:10710:16554":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:4462:15999":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"30:1179:21169":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"2:42366:2605":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:4240:2875":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:10382:27238":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:10946:27237":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13485:19528":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"21:4275:2400":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:48288:3103":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14311:20054":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"21:11840:2267":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"2:40943:2336":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"21:7455:2269":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"21:8570:2288":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"18:481:21062":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:46970:3084":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:6447:14161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:513:16536":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13509:19530":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"18:521:21061":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2440:2741":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"15:0:2078":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:16212:21021":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"21:9467:2357":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"1:12077:1512":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"5:816:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"21:400:27245":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"5:7392:2645":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:7575:14608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:7480:8618":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"21:11866:33703":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"2:22743:27616":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"5:6167:2769":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:1547:10328":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"5:5699:8386":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:4781:2910":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:7961:2280":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"1:10088:21547":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"16:5298:16356":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"21:10931:33703":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"16:7706:16450":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"21:9450:33703":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:21627:3036":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"21:6934:33703":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:13597:2372":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"17:11647:16682":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:6099:16383":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11605:16676":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:11269:16615":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:15058:20777":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:44013:8288":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"30:1216:21166":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"17:10524:16551":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11595:16681":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:9938:16542":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"5:3275:29543":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"21:14396:33703":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"18:765:21053":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:42433:2621":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"12:0:2076":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:5555:16363":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:3229:2392":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"16:6555:15376":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:12090:1646":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:9081:21620":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:44111:2783":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:22316:3169":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"21:14925:2475":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"2:4203:28453":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"13:226:32157":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:4823:2862":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"21:779:2289":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:5997:2257":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:7627:21536":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"30:1425:21037":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"2:44175:8342":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"6:5296:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:2740:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"21:11366:2349":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"6:6519:14165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:9145:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:31026:27638":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"21:8156:2275":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:12124:8771":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:5018:28801":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:5485:16359":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1535:10327":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"17:15039:20793":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:1593:10333":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:14855:20783":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:46867:27808":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:39877:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:1007:2634":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13064:16521":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:10447:2796":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:9685:28327":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3029:3029":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"21:13462:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"11:1051:2636":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:10689:21643":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"5:3241:29560":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"21:338:2271":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"16:4871:16109":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:14325:20055":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"14:187:15365":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"17:10612:16552":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:5883:2340":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"9:391:15223":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:3237:25764":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:6379:14092":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:1580:10331":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:10666:25834":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:45118:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:4605:8418":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"30:1454:21052":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"17:9984:16543":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:39202:8681":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:46221:3094":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6689:14180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"1:7816:2603":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:7960:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"30:1061:21181":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"21:7045:33703":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:12133:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:12095:1704":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:44873:8825":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:1098:16592":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:11227:16585":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:42630:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"30:1271:21056":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"5:3798:2657":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12494:16757":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"21:14083:2415":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"16:7376:16433":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8363:2881":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:587:1868":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:10230:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"16:7324:16428":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:5097:860":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:5598:13467":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:2175:16665":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:8614:2392":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"14:160:15357":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"17:12433:16525":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10622:33412":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:14012:20035":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"21:15187:2485":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"21:14716:2473":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"1:588:2591":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:2819:15456":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"27:487:21149":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"6:5014:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:21646:3037":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:9235:21673":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:14402:20060":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:11026:16579":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:2588:2470":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:12717:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"21:11674:2364":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"16:4968:16137":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:39914:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"21:13658:2392":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"17:11634:16652":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:7114:31178":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:12647:2281":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"17:14463:20064":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:8055:16461":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:1517:2624":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"21:12055:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"31:68:1929":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"16:7889:16452":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:6714:14183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:14436:20062":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:10043:8262":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:10185:16514":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"21:13173:2380":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"16:5630:16368":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"21:15556:33715":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"9:0:2073":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:3626:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:2671:27250":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:4439:21081":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"2:44045:8304":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:4017:2843":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12647:16798":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"2:3113:8674":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:2749:15453":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:12671:16833":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"30:1490:35148":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"1:9035:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:11042:16580":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"2:9690:29116":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11293:16616":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:12929:16566":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:10026:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"11:351:32131":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:46714:3122":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:5653:13473":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:4047:2845":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:4355:15961":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:11898:16716":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"21:15218:2488":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"2:3056:8243":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:11352:21445":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:15266:20808":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:15417:33692":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"21:8648:219":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"2:38623:8680":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12150:16703":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"21:7265:2259":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"17:11574:15340":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:10828:33418":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2818:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:11069:26346":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12949:16567":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:7757:2282":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"21:7080:2260":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"6:559:9434":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:2657:2472":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:15822:20851":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6188:16387":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:42148:27644":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:3234:26990":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:44442:8334":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"30:999:21056":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"2:44750:8344":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"21:9733:33703":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:3464:8245":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:31131:27607":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"16:2573:15445":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:11063:16599":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:40972:2339":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:44433:2593":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"5:1161:31023":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:4952:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:6621:2987":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:13221:2286":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:33580:8667":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:5020:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"21:7661:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"18:659:21054":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:9948:2341":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"21:8852:2298":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"17:11128:16587":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:2727:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:7444:16437":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"11:1923:2641":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:10887:2963":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6821:14193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:10242:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:48399:8213":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4837:13387":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:6062:32592":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:2729:15452":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"21:12456:2378":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"1:1072:2637":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:21416:28321":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"21:14904:33703":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"5:7370:2644":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"16:7984:16457":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:7599:2713":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"21:13817:2397":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"16:7482:16439":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:6507:2396":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:7537:16442":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:13797:20022":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:6621:27622":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"27:127:21133":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"1:8369:2872":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:15456:20828":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:41455:2396":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2450:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:10068:16523":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"18:623:21176":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"30:1069:21165":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"21:10743:2344":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"2:22061:3033":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"30:956:21174":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"17:15116:20796":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:4844:16105":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:15748:20845":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:7400:16435":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"21:6212:1885":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"21:12824:2373":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"30:1034:21179":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"21:13319:2384":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:9964:25784":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"21:331:2566":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"16:6610:16409":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:11743:16687":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"30:1401:33447":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"14:31:15357":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:3017:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"21:8181:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:10870:21553":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:8294:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:7070:26906":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"18:680:21056":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:11802:33703":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:7710:2325":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:44719:8362":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:12823:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:44926:8826":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8385:2882":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"21:10773:33703":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:6691:2992":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:15281:20810":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"30:1200:21056":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"6:7429:10448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:40925:8630":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:44026:8303":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:2983:2578":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2469:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:4456:2769":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:42308:2621":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:47048:3090":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:2319:15433":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"21:14279:237":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"16:6724:16413":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"21:12552:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"17:14994:20778":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"21:5675:2395":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"30:922:21169":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"21:7345:33703":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"14:220:15367":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:13922:20029":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"21:15274:2490":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"17:11051:16605":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:14503:20067":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"27:481:2941":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:15383:20820":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"21:12308:2276":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"5:661:29549":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"21:7840:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:40215:23703":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:8022:16460":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"5:4227:2769":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12516:16809":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:7294:16426":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:10538:33703":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:536:32267":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"16:6599:15375":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"28:217:2634":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:36582:8676":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:5320:13437":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"21:11052:33703":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"18:515:21064":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:5331:16358":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12070:403":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"21:13371:2385":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"1:645:2599":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40883:8287":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:47206:3050":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:12230:2277":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"11:700:2622":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:3024:3027":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"21:12255:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:9592:33703":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"6:8029:14981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:30943:8597":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"5:7572:27819":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:42020:2812":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:44849:8809":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"21:8896:33703":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:11537:16644":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12464:16791":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11367:16595":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"21:4954:2421":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"6:4800:13384":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:6725:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:48353:8209":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:9178:2759":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46300:3054":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:43725:8290":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:14876:20785":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"11:1910:2639":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:12076:332":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"21:14739:33703":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"21:14156:2419":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"1:7113:21821":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:7470:2622":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"11:1025:2635":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:14177:20045":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:8197:15140":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:3203:2217":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:15523:33686":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"5:5390:31152":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"21:11576:33677":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"1:859:2622":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"30:1015:21177":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"16:2399:15437":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:16105:21013":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:7982:2620":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:12043:16700":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:15608:20835":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:13047:2377":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"1:2424:2736":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"11:673:2392":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:12251:16754":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"16:7345:16430":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:15469:33689":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"1:9069:21459":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"21:5992:1875":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"5:7462:2622":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12584:16556":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:3472:2769":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:4720:21731":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"21:422:1867":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"11:1087:32156":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:7926:2752":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:40:2671":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"26:53:35104":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"5:7704:2625":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"21:15042:2478":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"2:44379:2479":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:43953:8299":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:4702:16078":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:2859:15458":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:14147:20044":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:8474:2283":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"17:12388:16778":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:2363:8694":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:2266:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:9076:21448":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:7998:16458":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:2724:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"21:7697:33684":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"6:8317:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"21:9418:2333":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:44684:8359":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5759:16373":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"18:531:21065":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:5212:1894":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"21:1087:2310":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:47330:3062":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:8012:16459":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:3545:15467":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"30:878:21165":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"2:43243:27800":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:3589:2778":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:3639:2392":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"21:11649:33701":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"16:5541:16362":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:44143:8307":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:3218:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:4876:13390":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:40727:8440":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"21:10605:2350":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"16:5696:16371":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"16:4937:16129":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:11825:16717":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11016:16578":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7335:16429":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:42441:2622":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:44709:8361":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12278:16784":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:33873:3030":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"11:832:2626":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9472:25983":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:42004:2811":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:10710:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"21:6566:33751":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"16:7306:16427":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:7339:14596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:5512:2955":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"27:140:21134":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"17:3473:16704":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:38513:8678":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"21:14040:2622":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"27:149:21136":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"17:14587:20072":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:14529:20069":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12342:16752":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"21:11884:2272":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"17:13674:20018":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:48204:3118":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:44865:8806":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"21:12513:2375":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"16:7869:16451":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7089:31148":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40846:2731":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"11:2369:15350":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"17:13553:19533":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12093:1645":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:5336:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:11497:16624":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:670:21055":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:41047:2348":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:4335:8423":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:7645:8365":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:15760:20846":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:10018:16516":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"30:1530:21054":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:44698:8360":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:10671:26127":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"21:11144:2264":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"2:12354:8816":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:8394:2651":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:41441:27465":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"5:286:2434":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:6077:16382":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:34533:8673":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:40816:2715":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2121:8249":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:5361:13442":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"11:1107:15345":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"11:742:2628":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"21:7442:33703":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"2:44853:8813":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"21:6776:2257":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"16:7414:16436":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:13772:2301":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:22271:3168":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:6010:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"5:1455:2392":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:8034:2273":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"17:14091:20041":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"21:8278:2277":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"21:15454:33693":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"2:26357:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"21:12030:2275":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"2:46199:3088":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:7462:2268":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"1:5462:2952":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:8923:3001":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:11290:21539":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:46692:3116":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:1054:2635":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:42170:2823":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"21:11537:33702":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"17:13424:19524":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:40934:8631":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7938:2753":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:12612:8319":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:45134:8232":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:7944:2433":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:1496:10322":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:42591:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:30681:2824":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:570:9436":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:44837:8805":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:7152:16423":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"27:146:220":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"1:3570:27396":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:5645:16369":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:16138:21015":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:13899:20028":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:46322:3060":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:48344:8208":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:7446:14599":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:8937:2998":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"21:7815:2284":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"17:13211:19511":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"5:2517:29599":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"16:5794:16374":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:6348:16399":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:9299:2692":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"16:6646:16410":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:363:2589":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:39972:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:586:9438":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:40772:8439":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6542:14168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:32715:8417":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:12863:16563":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:10285:2761":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:22866:27646":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:10919:8313":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:1887:2693":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"11:2231:15340":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"21:11824:2369":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"14:202:8363":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:12097:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"30:1436:21038":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"17:13594:19536":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11773:16735":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:6941:16421":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:46115:3047":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"21:15290:2492":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"2:2971:8241":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"21:14117:33703":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"1:621:2595":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"27:0:1896":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"17:15176:20801":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:5064:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:491:9426":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:11488:2363":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"2:21572:2755":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:3061:8244":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:47284:3056":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"21:7192:2264":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"2:2558:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"30:1166:21168":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"21:6056:2367":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"17:10818:16556":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:6338:186":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"2:22462:8694":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"2:22408:8694":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"5:271:31152":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"21:6182:1884":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"1:4392:2879":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12289:16749":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:4891:13223":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:43491:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13046:16522":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:32732:2429":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:7837:2696":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:914:2627":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:47394:3117":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:32722:8732":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:4464:2873":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:15273:20809":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"27:72:21148":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"1:10700:2753":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"16:2419:15438":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:6547:2990":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:40644:8445":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"28:55:2621":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"21:12492:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"6:538:9431":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:45037:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14341:20056":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:15329:2316":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"2:12592:8322":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"21:15484:33691":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:7935:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:15214:20805":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:44275:8337":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:4821:16804":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:21633:3040":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:5212:13423":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"25:0:1874":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"17:10439:16550":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:15019:2477":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"21:7290:33703":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:14246:20049":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"30:1250:21169":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"1:10339:2960":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:7426:2622":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:3409:8683":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:11547:16678":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:8268:2332":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:33208:8665":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8351:2814":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"30:1479:21053":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"17:11557:16679":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"21:9401:33703":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"6:6678:14179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:39892:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:40704:8334":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:12055:21675":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:3017:8234":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:22900:2827":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:1911:8705":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:0:2081":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:6045:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:5200:13422":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5225:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:11518:2821":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"21:9508:33703":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"2:48080:3063":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"6:5466:13453":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:14386:20059":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:14986:20790":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:12942:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"17:13375:19520":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:9460:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:44035:8306":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"18:651:2361":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13497:19529":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:5897:16379":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:3856:15531":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:34050:8670":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"21:7503:165":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"1:1975:709":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:3419:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"26:37:35105":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:40655:27725":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"11:364:32129":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"28:76:35117":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"6:5483:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:4825:2863":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:7996:21486":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:7559:2714":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:48250:3069":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"18:726:21059":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:10905:16558":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"31:120:1934":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"17:11075:16595":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"5:7434:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:5083:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:5499:16360":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:11674:16683":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"30:1208:21165":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"17:16198:21020":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"21:6377:21097":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"21:14191:33703":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"6:4824:13386":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:4123:2851":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:10035:8256":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:10915:33391":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2422:2735":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:3916:2822":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:2733:2473":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:2447:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:39861:2669":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:14038:20037":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5423:13449":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:4486:8409":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:13723:20019":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6745:16414":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:3436:8403":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13832:20024":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:12530:16800":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"18:113:21038":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:22448:3174":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:860:2642":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:10982:16576":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"1:7730:2755":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"21:10508:2340":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"2:31480:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"21:10822:33703":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:6908:32519":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:22924:2839":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:9160:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:6874:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:48326:3124":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:11112:21676":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:939:2631":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11413:21466":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6629:14173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:41106:8634":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:2552:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:33932:8669":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:11354:16628":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:15400:20822":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:517:9428":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:15157:2482":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"6:6609:14171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:10672:2755":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:2973:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:12617:8317":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"27:467:21147":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"8:0:2072":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:11405:16626":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:12264:16753":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:8400:8626":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"24:309:21089":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:46025:3081":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"0:46:1772":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:12073:1665":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:48478:8218":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"30:1229:21167":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"6:6650:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6670:14178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"9:446:15222":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"7:0:1694":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:5476:2953":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40981:27467":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"21:14693:33703":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"5:7353:2654":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:12108:8769":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"7:31:15193":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"10:44:15332":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:6546:16407":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:5496:2954":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"16:3773:15494":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:9352:2313":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"2:13415:3179":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"22:0:2219":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"5:1558:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:4959:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:10676:2749":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"17:10671:33419":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8907:2963":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:16050:19514":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:39817:8247":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:2978:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:13437:19525":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:5565:13464":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:15368:20818":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:9122:21685":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"21:7325:2263":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"21:5875:2769":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"22:7:1888":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"17:12225:16756":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:11324:16643":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:6409:14157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"21:6846:33703":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"21:20:1161":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"21:13667:2393":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"21:10792:2345":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"21:2780:33748":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"function"},"6:1490:10321":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5038:16161":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:3262:2640":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:15376:20819":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:7898:8627":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:104:763":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"17:15944:19511":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"17:12508:16794":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"17:10769:33405":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:6768:14190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:44071:8335":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:6657:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:10597:2343":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"17:14051:20038":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"21:13941:33703":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"6:7359:14598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:40876:2754":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"21:7526:33703":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"5:6042:2978":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:1585:2625":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:2459:15440":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"6:1503:10323":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:1676:32152":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:8604:2944":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:2352:2636":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:12331:8819":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:7428:27443":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:41448:8620":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13089:16838":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:16165:21017":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:7731:2590":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:5825:16375":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:15596:20834":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10044:16544":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:43943:8301":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:357:2588":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"17:15206:20804":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:5236:13426":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:31507:8462":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:11124:8309":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:1317:2636":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"16:2284:15404":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:2995:15462":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:44572:8356":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:22:736":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:7363:8635":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:46836:27623":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:12724:16560":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"24:135:2255":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"21:10639:33703":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"6:7452:14600":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:6979:27235":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"11:837:2629":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:4560:8417":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"21:13484:2383":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"6:6738:14186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:10039:8265":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:7364:8636":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"21:6914:2257":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"1:6677:2991":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:5457:13452":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:22815:27811":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:1559:10329":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6230:16391":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:1565:10330":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:2037:16631":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"21:8059:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:15356:20817":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:5636:13471":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"21:13636:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"21:327:2270":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"2:46359:3115":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:12353:16786":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:41082:2351":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"18:573:2361":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:11247:33703":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"30:1049:21176":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"2:12370:8818":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:5389:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:10954:16575":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5031:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5174:2842":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:10056:33703":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"9:356:15238":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"6:7602:14610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"14:7:15357":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:44055:8305":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:15314:2566":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"5:3270:2638":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:5209:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:46789:27655":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:42356:2927":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5382:13445":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:10399:2783":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:3051:8242":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"21:15299:2493":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"27:11:35108":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"6:6811:14192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:12448:2379":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:3240:25775":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"9:237:2941":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:5834:2981":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:635:21181":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:5376:13444":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"16:6431:16404":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:3315:2800":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:22759:27713":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:43268:8253":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"21:15230:2354":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"5:1181:30965":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:7561:14607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:11495:25631":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:42978:8264":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"11:328:32143":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:3597:16722":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:6402:3180":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:3732:31152":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7118:2926":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11214:16586":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:5712:2769":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:2859:2710":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"1:4650:2901":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:10345:33703":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"2:42866:2979":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:46377:3121":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"11:2542:27873":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"30:1237:21168":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"1:10855:2956":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"6:4916:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:15434:20826":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:11661:16653":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:40627:2593":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"21:13685:2395":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"16:6579:16408":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"21:13733:2290":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"5:4489:31162":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:9102:21366":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"6:6524:14166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"11:2562:32146":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:41497:8625":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:21755:3037":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:12083:698":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"21:11439:2362":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"1:1607:2641":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:4210:25630":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:4232:2874":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"21:13116:2382":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"2:48448:8216":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46091:3087":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:8438:28330":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:2693:2785":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"17:13187:19510":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"6:6441:14160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6692:16412":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:11256:16614":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"15:288:15381":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11385:21510":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:42368:8755":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:2365:8695":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:44857:8811":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"30:1559:21056":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:7894:8628":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"25:9:1875":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"6:8247:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:44095:8329":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5726:16372":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10573:33416":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"21:7222:33703":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:1567:2656":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"21:6768:1893":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"1:9213:21435":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:5652:2959":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"30:1145:21166":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"11:1142:15346":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4879:2864":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:6243:27249":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"21:12333:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:14047:2392":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:40995:2258":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:6769:1892":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"17:13538:19532":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:15499:33694":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"2:4550:8416":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:4661:8420":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:11637:8296":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:4227:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:33814:3028":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:2688:8466":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:43474:27650":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:12238:16755":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:945:2632":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:11142:16555":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:1621:10334":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:12071:1041":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:12454:16790":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:12076:16697":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:15289:20811":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11583:16651":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:5865:16377":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:5706:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:14517:2424":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"17:15078:16594":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"5:1301:2634":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"30:1024:21178":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"6:0:884":{"crate_id":6,"path":["libc"],"kind":"module"},"17:14968:20788":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:44505:8352":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:12086:801":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:8026:2432":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:13252:19513":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:11730:16686":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:5163:21630":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:951:2633":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"21:6240:1898":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"21:13908:2399":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"17:11419:16555":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"21:7488:33703":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"31:136:1931":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"17:13766:16744":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:5134:13417":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:10827:2392":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:1820:2625":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:1811:8606":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:13455:19526":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"11:2304:2634":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:22493:2755":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"21:13423:2387":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"2:32731:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:14977:20789":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:3993:15645":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:14933:20787":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"21:14145:2418":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"21:14752:2332":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"2:41034:8632":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:6052:2993":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8996:3000":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"21:0:1866":{"crate_id":21,"path":["futures_util"],"kind":"module"},"5:3388:2625":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"21:10204:2361":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"21:9887:2257":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"6:6746:14187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"21:14134:2417":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"16:2835:15457":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:2496:1899":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:7429:32366":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:15957:21008":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"2:43231:2335":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:46239:3100":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:12084:803":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"6:5314:13436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:1826:2676":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:12371:16566":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:12079:1630":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"21:10661:2346":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"2:41004:2259":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"21:14065:2622":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"6:4992:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5643:13472":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"5:2093:2657":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:5122:13416":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:41982:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:16269:19523":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"17:9671:16512":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:10290:2763":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:47360:3068":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:22406:27503":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:21384:28307":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:12707:16559":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:6152:16386":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"21:10841:2351":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"6:8306:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"21:8609:2290":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:4126:2769":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:4924:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:11341:16629":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:4215:28332":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:5601:16366":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:6282:16395":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:6378:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"11:2326:2635":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"11:883:2633":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42300:2392":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5415:13448":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"5:1145:30964":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:5132:21630":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:5950:2393":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"11:123:32145":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:6505:14121":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6292:16396":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"21:10727:33703":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:12673:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"21:1291:1869":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"17:12485:16793":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"16:3741:15485":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"17:15701:20842":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:12621:16803":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"30:886:21166":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"16:5238:16338":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"27:452:3000":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"1:8620:2945":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:4433:15993":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"9:423:15224":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8954:2996":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:4716:21727":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"1:12075:1159":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"16:0:2079":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:21625:2755":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5006:16152":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:7523:16441":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:39:2232":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"17:13015:16525":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"16:7386:16434":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"5:5926:2415":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:1639:10336":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:21430:28318":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"2:32818:8240":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"16:7270:16425":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:42669:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:3010:15463":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:2035:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"21:15382:33754":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"5:3783:2476":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:13855:20026":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"21:10298:33703":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"6:5352:13441":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:11865:16740":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:43974:8289":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"6:5290:13433":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:15333:20815":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:5112:13415":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:7667:27258":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"17:15769:20847":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"18:608:21179":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:15177:2484":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"11:2383:2392":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:6706:14182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:8310:2818":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:1717:2769":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:504:2562":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"2:11670:8297":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:10092:16545":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:43963:8300":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:8881:2961":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:11010:2356":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12056:16701":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"17:14284:20052":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:3709:15476":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"21:7917:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:7565:16444":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:13308:19516":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10251:16546":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:1418:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:14516:20068":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:30905:2653":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:42708:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:40746:8442":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"20:143:21075":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"2:12294:8817":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12851:16562":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:22379:2755":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:43925:8298":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"30:1448:8320":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"6:6636:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:5056:2802":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:44084:8332":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:43482:2764":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:11130:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:5713:2993":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:23957:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:5146:13418":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:14667:2472":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"6:6880:13298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:39932:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:14298:20053":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"18:698:21058":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"20:131:1887":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"2:22728:27744":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:12023:21476":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:8215:2395":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6408:16403":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:22183:2755":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:13273:2289":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:7467:14602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:11467:16630":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"11:2554:32151":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:45088:3177":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"21:10702:2347":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"17:15635:20838":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:4477:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:6756:14188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"17:15168:20800":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7355:16431":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:13759:33703":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"1:4131:2853":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"11:2151:2636":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"21:6823:2258":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:44000:8287":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:12478:16792":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12091:1647":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"21:6982:33703":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:12965:2389":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"17:14131:20043":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5617:13468":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"30:1258:21170":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"21:10962:2354":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"16:6759:16415":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6900:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"18:589:21177":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:6556:33752":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"17:11115:16588":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:41013:8638":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6597:14170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:6895:32575":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:40042:8399":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"21:9529:2334":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"21:8303:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:2715:2367":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"1:8428:2861":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"21:10988:33703":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"5:3236:2639":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:5489:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:5677:13476":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:190:2256":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"24:296:35020":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"1:4248:2876":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:415:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:14599:20073":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:6965:16422":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:9048:21543":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:14489:20066":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"21:9232:33703":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"29:0:1878":{"crate_id":29,"path":["futures_io"],"kind":"module"},"20:68:1870":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"5:7442:29532":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:933:2392":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:11430:25634":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"21:13801:33703":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"21:8557:2287":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"18:581:8462":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10155:16357":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:8431:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:4269:8406":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"21:15511:33688":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:39781:8402":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:4411:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8864:2960":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:8358:2880":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:735:21052":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:4011:2844":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:8288:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:41255:2358":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:12408:8313":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6664:14177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2140:2635":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:6775:14191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:13753:20021":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"21:2553:34593":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"16:7951:16455":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:32733:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:1692:2869":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15521:20831":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:2469:2625":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"16:8097:16462":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"21:10376:2259":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"1:5321:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"5:3024:31031":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:14868:20784":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"21:15376:2314":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:3356:2797":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:10137:16509":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"9:481:15221":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:46340:3066":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:5878:16378":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13363:19519":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:42964:8256":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"11:2536:32149":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:10729:2426":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:46738:3123":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:7362:2622":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:15582:20833":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:6624:2988":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:6244:16392":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:12088:798":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:7366:2913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:5200:2978":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:14449:20063":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"6:1628:10335":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:7546:14606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"11:1582:15348":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"29:27:1879":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"6:5266:13430":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:1485:10320":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:710:2627":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:8300:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"21:13348:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"17:11799:16737":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"21:13030:2391":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"17:12993:16568":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:33394:8664":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"11:1917:2640":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:11392:16627":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"27:187:21138":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"1:9041:2566":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"10:36:32124":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"6:7314:10279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:9498:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:11755:16688":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:3430:8404":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:43285:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:13400:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"2:6426:8639":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"11:844:2630":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:6788:32509":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:3177:15464":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"2:30969:27653":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"16:6320:16397":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"7:78:15200":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:11831:2368":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"17:10661:16553":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"24:0:1963":{"crate_id":24,"path":["futures_task"],"kind":"module"},"16:6030:16381":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"21:13835:2398":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"5:7543:2577":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:4986:16810":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:48501:8219":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"21:4503:2401":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"6:8259:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:4061:2846":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:6562:14169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:92:2755":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"17:11812:16695":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4932:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"30:0:2081":{"crate_id":30,"path":["memchr"],"kind":"module"},"21:6770:1889":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"21:8973:33703":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:1671:10339":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"21:11266:2359":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"1:11654:15390":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"21:13536:2371":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"1:3317:2801":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:6767:1890":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:14235:20048":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4870:13389":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:3275:2799":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:5260:13429":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:4491:16005":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"18:80:21036":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:4065:2415":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11058:2962":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"21:8831:33703":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"24:15:21078":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:12663:8346":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:12552:2947":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:4250:8239":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:2234:16650":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:8341:15176":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:3039:8666":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7595:16445":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:7973:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:3449:28297":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"30:1500:21061":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"16:6803:16417":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:14788:20781":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"30:899:21167":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"21:8120:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:14752:20780":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:40963:2338":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:4261:2877":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:6811:16418":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:48142:3097":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"21:10867:33703":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"6:465:9422":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:42425:2392":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:15814:20850":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"21:13215:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"14:165:15358":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6254:16393":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"21:11180:33703":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"21:2769:930":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"function"},"16:7103:32644":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:41470:2393":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:1804:638":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:22355:3170":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"6:553:9433":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"30:1095:21169":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"2:6615:8633":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:21418:28316":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"27:368:220":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"17:1207:16600":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"21:14552:33703":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"2:13470:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:5861:2982":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:485:9425":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:5250:13428":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:4312:2878":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"30:993:21056":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"1:12078:1545":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"21:10367:2353":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"1:10935:27245":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"6:5546:13462":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"21:9086:2306":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"6:545:9432":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"5:4257:2769":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"11:1160:2637":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:42204:2815":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:46069:3082":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:8315:2810":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:2226:30911":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:10396:8781":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"29:20:1882":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:22508:3164":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"16:6445:16405":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:7452:16438":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:2617:15447":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:4997:421":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:3346:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"18:507:2361":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:44229:8311":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:4283:15912":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:14079:20040":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:7822:2695":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:10479:33703":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:40785:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:7412:29565":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:13024:16569":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:1508:2623":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"21:10889:2352":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"17:10284:16547":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"21:5264:1041":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"1:11077:8825":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:40912:2332":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:3600:15468":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:22073:28314":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:2529:15443":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"21:10229:33703":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:2641:15448":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:7539:2281":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:3020:8644":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"21:6962:2266":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:42474:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:5160:13419":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:12768:16517":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"5:7045:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:2807:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5624:13469":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"5:5856:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:7258:8629":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:5219:13424":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4864:13388":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:8265:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"21:9569:2335":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"1:10952:27234":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:45157:27802":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"21:8242:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:4045:2289":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"21:2766:1872":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"1:2450:2746":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:12082:696":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:8981:2997":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:30937:8382":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:5277:13431":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"11:787:2624":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:916:2643":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"17:261:33417":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:4572:2884":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"16:149:15409":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:7225:16424":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:7754:2575":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:532:9430":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:15151:20799":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:4649:16071":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:13972:20032":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:4614:8419":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:8526:2941":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:3015:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5002:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:6788:32053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"16:4733:16086":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"14:214:15366":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12900:16565":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:14723:20779":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:14545:20070":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:2299:30936":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"11:1066:15344":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:43204:27635":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13399:19522":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:598:21178":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:13844:20025":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:9555:33703":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"20:27:2755":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"5:820:2347":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:8402:2911":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:867:2623":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:0:536":{"crate_id":2,"path":["core"],"kind":"module"},"6:5052:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:14847:20782":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:16223:21022":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"1:7774:2572":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:43721:27738":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:15390:20821":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8406:2913":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:8095:2279":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"1:2271:2454":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12422:16789":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"1:12096:1255":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:8004:2792":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:45109:3175":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"2:38568:8679":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:640:2598":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:12798:32607":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"5:1470:2621":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"21:15308:21093":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"30:947:21056":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"1:10090:21633":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"1:3354:2796":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:11045:2961":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:5557:13463":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:578:9437":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:2355:15435":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:7948:2750":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"21:7020:2261":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:40022:8684":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:42242:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:9017:2983":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:13344:19518":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:6737:32550":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:44861:8812":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:5919:16380":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"18:563:21067":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6929:32601":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:42316:2622":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:4718:21729":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"21:8596:33703":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"17:12399:16788":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:13999:20034":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"21:11295:33703":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"21:13152:33703":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"17:15463:20829":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:11661:15390":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:10250:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:1590:2638":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:43513:27761":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"21:4707:1876":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"21:13727:205":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"17:11313:16617":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:22893:27758":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:15197:20803":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"18:613:21180":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:6460:14162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:11335:27242":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:10033:8257":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"30:1545:21055":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:2439:15439":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:5720:2994":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:6215:16389":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"5:7517:2617":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"31:38:35175":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"16:7653:16448":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"30:964:21056":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"21:9799:33703":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"17:16079:21011":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"6:564:9435":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:6669:16411":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:8631:2946":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"21:9828:2257":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"21:14801:2414":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"30:971:21057":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"2:42222:2816":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:40712:2593":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:7684:16449":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:15324:20814":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"31:65:1928":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"17:15126:20797":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:48540:8220":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12175:16769":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6849:16419":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"21:14089:2416":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"31:102:1933":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"1:7931:2749":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"5:3200:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:40828:2717":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:40693:8447":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"21:12697:2386":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"21:15139:2480":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"6:4897:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:46137:3053":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:15102:20795":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"26:43:35103":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"21:12982:2390":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"2:10479:27250":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"2:43503:2941":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:15010:20791":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:44555:8355":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:3811:2821":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"11:1603:15349":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:44408:8324":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:41066:2349":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:5278:16355":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:12572:16555":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:44647:8358":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:16249:21024":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:6330:2993":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5400:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:22793:27806":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"5:5438:2296":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:726:2828":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:9467:2752":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"18:706:8320":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:7491:16440":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"21:11344:33703":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"17:15734:20844":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"21:8499:33703":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11858:21823":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"30:1515:21065":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"21:15281:2491":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"21:14020:21080":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"21:9010:2302":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"21:14809:119":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"2:40029:8391":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:6462:16406":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}