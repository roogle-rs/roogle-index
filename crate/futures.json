{"root":"0:0:1863","crate_version":"0.3.28","includes_private":false,"index":{"0:62-21:4576:1777":{"id":"0:62-21:4576:1777","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4576:1777","glob":false}}},"2:12306:23704":{"id":"2:12306:23704","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:28544":{"id":"2:12405:28544","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11950:127","`FromStr`":"2:11949:2823"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41908:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11949:2823","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11949:2823","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5526:29207":{"id":"5:5526:29207","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2333","`String`":"5:7449:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2333","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2760:1773":{"id":"0:13-21:2760:1773","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1773","glob":false}}},"0:31-21:6628:1791":{"id":"0:31-21:6628:1791","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6628:1791","glob":false}}},"0:48-31:65:1829":{"id":"0:48-31:65:1829","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1829","glob":false}}},"2:12300:23701":{"id":"2:12300:23701","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41765:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12310:23726":{"id":"2:12310:23726","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:12311:23727"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12314:20420":{"id":"2:12314:20420","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43711:2670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12291:28521":{"id":"2:12291:28521","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12355:23741":{"id":"2:12355:23741","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12046:428","str::splitn":"2:12352:23739","self::pattern":"2:11989:8189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43847:8176","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-21:4576:1777":{"id":"0:39-21:4576:1777","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4576:1777","glob":false}}},"5:5514:29204":{"id":"5:5514:29204","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12396:28541":{"id":"2:12396:28541","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81-21:6079:1784":{"id":"0:81-21:6079:1784","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6079:1784","glob":false}}},"0:4-2:12572:136":{"id":"0:4-2:12572:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:12572:136","glob":false}}},"5:5528:21260":{"id":"5:5528:21260","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12410:21263"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12290:28520":{"id":"2:12290:28520","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6102:1799":{"id":"0:44-21:6102:1799","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6102:1799","glob":false}}},"0:40-21:1293:1770":{"id":"0:40-21:1293:1770","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1293:1770","glob":false}}},"2:12288:835":{"id":"2:12288:835","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12046:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6631:1790":{"id":"0:29-21:6631:1790","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6631:1790","glob":false}}},"0:19-29:17:1781":{"id":"0:19-29:17:1781","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1781","glob":false}}},"0:42-21:57:1796":{"id":"0:42-21:57:1796","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1796","glob":false}}},"2:12287":{"id":"2:12287","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12288:835","2:12289:21311","2:12290:28520","2:12291:28521","2:12293:28522","2:12296:25041","2:12297:28523","2:12298:320","2:12299:319","2:12300:23701","2:12302:23702","2:12304:23703","2:12306:23704","2:12308:28524","2:12309:28525","2:12310:23726","2:12311:23727","2:12312:26525","2:12313:26579","2:12314:20420","2:12315:26504","2:12316:26523","2:12317:2353","2:12318:28526","2:12319:26526","2:12320:23743","2:12323:23351","2:12326:23353","2:12329:20076","2:12333:20077","2:12337:2362","2:12340:23735","2:12343:23737","2:12346:28527","2:12349:28528","2:12352:23739","2:12355:23741","2:12358:28529","2:12361:28530","2:12364:2090","2:12367:28531","2:12370:28532","2:12373:28533","2:12376:28534","2:12378:28535","2:12380:28536","2:12382:28537","2:12383:28538","2:12384:28539","2:12387:28540","2:12390:20606","2:12393:23744","2:12396:28541","2:12399:28542","2:12402:28543","2:12405:28544","2:12407:21258","2:12408:24869","2:12409:21262","2:12410:21263","2:12411:21264","2:12412:28545","2:12414:2488","2:12415:28546"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:66-20:68:1771":{"id":"0:66-20:68:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1771","glob":false}}},"0:84-21:6061:1787":{"id":"0:84-21:6061:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6061:1787","glob":false}}},"2:12378:28535":{"id":"2:12378:28535","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:2222":{"id":"5:5527:2222","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12337:2362":{"id":"2:12337:2362","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11989:8189","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::split_whitespace":"2:12315:26504","str::rsplit":"2:12343:23737"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43725:2671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12293:28522":{"id":"2:12293:28522","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:12291:28521"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:2488":{"id":"2:12414:2488","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4542:2488"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44033:2489","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12415:28546":{"id":"2:12415:28546","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4539:28546"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44042:8201","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2760:1773":{"id":"0:73-21:2760:1773","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1773","glob":false}}},"0:33-21:20:1079":{"id":"0:33-21:20:1079","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1079","glob":false}}},"2:12361:28530":{"id":"2:12361:28530","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71-21:5040:1778":{"id":"0:71-21:5040:1778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5040:1778","glob":false}}},"5:5529:21261":{"id":"5:5529:21261","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12411:21264"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:725":{"id":"0:37-21:104:725","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:725","glob":false}}},"0:63-25:9:1776":{"id":"0:63-25:9:1776","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1776","glob":false}}},"2:12317:2353":{"id":"2:12317:2353","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43979:2379","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12376:28534":{"id":"2:12376:28534","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12382:28537":{"id":"2:12382:28537","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5509":{"id":"5:5509","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5510:29203","5:5511:8508","5:5514:29204","5:5517:29205","5:5525:29206","5:5526:29207","5:5527:2222","5:5528:21260","5:5529:21261"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5517:29205":{"id":"5:5517:29205","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59-2:12572:136":{"id":"0:59-2:12572:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:12572:136","glob":false}}},"0:28-22:7:1789":{"id":"0:28-22:7:1789","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1789","glob":false}}},"2:12304:23703":{"id":"2:12304:23703","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12384:28539":{"id":"2:12384:28539","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12014:8184","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12323:23351":{"id":"2:12323:23351","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12309:28525":{"id":"2:12309:28525","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12052:1447","crate::ops::IndexMut":"2:3066:2563","str::slice_unchecked":"2:12308:28524"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:1831":{"id":"0:50-31:109:1831","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1831","glob":false}}},"0:79-29:20:1783":{"id":"0:79-29:20:1783","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1783","glob":false}}},"2:12352:23739":{"id":"2:12352:23739","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189","str::rsplitn":"2:12355:23741"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43829:8178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12358:28529":{"id":"2:12358:28529","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1674":{"id":"0:46:1674","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1829","`LocalPool`":"31:120:1835"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1829","0:49-31:68:1830","0:50-31:109:1831","0:51-31:136:1832","0:52-31:100:1833","0:53-31:102:1834","0:54-31:120:1835","0:55-31:125:1836"],"is_stripped":false}}},"2:12316:26523":{"id":"2:12316:26523","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12315:26504"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44008:8191","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:28533":{"id":"2:12373:28533","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11989:8189","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::match_indices":"2:12370:28532"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43893:8205","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12326:23353":{"id":"2:12326:23353","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12312:26525":{"id":"2:12312:26525","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12046:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43695:8196","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12349:28528":{"id":"2:12349:28528","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11989:8189","str::split":"2:12337:2362","prim@char":"1:12046:428","str::split_terminator":"2:12346:28527"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43793:8208","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12299:319":{"id":"2:12299:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12063:1550"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12402:28543":{"id":"2:12402:28543","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12393:23744":{"id":"2:12393:23744","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:1766":{"id":"0:60-20:32:1766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1766","glob":false}}},"0:32-21:37:1792":{"id":"0:32-21:37:1792","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1792","glob":false}}},"2:12302:23702":{"id":"2:12302:23702","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41765:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10083:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6044:1785":{"id":"0:24-21:6044:1785","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6044:1785","glob":false}}},"2:12315:26504":{"id":"2:12315:26504","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12316:26523"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43999:8192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12380:28536":{"id":"2:12380:28536","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-20:68:1771":{"id":"0:10-20:68:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1771","glob":false}}},"2:12409:21262":{"id":"2:12409:21262","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12387:28540":{"id":"2:12387:28540","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:21258":{"id":"2:12407:21258","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:1772":{"id":"0:67-20:97:1772","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1772","glob":false}}},"2:12364:2090":{"id":"2:12364:2090","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11989:8189","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::rmatches":"2:12367:28531"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43929:8206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65-21:1293:1770":{"id":"0:65-21:1293:1770","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1293:1770","glob":false}}},"0:77-29:17:1781":{"id":"0:77-29:17:1781","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1781","glob":false}}},"2:12318:28526":{"id":"2:12318:28526","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43989:8203","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12333:20077":{"id":"2:12333:20077","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41765:181","prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:589:1769":{"id":"0:70-21:589:1769","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1769","glob":false}}},"0:78-29:25:1782":{"id":"0:78-29:25:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1782","glob":false}}},"0:83-21:6074:1786":{"id":"0:83-21:6074:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6074:1786","glob":false}}},"2:12412:28545":{"id":"2:12412:28545","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4541:28545"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44024:8200","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12346:28527":{"id":"2:12346:28527","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11989:8189","str::split":"2:12337:2362","prim@char":"1:12046:428","`DoubleEndedIterator`":"2:7438:121","str::rsplit_terminator":"2:12349:28528"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43775:8209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:1788":{"id":"0:27-20:131:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1788","glob":false}}},"0:43-27:0:1797":{"id":"0:43-27:0:1797","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1797","glob":false}}},"2:12383:28538":{"id":"2:12383:28538","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12297:28523":{"id":"2:12297:28523","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:82-21:6044:1785":{"id":"0:82-21:6044:1785","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6044:1785","glob":false}}},"0:5-20:32:1766":{"id":"0:5-20:32:1766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1766","glob":false}}},"2:12319:26526":{"id":"2:12319:26526","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44017:8190","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:1836":{"id":"0:55-31:125:1836","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1836","glob":false}}},"0:76-29:27:1780":{"id":"0:76-29:27:1780","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1780","glob":false}}},"2:12411:21264":{"id":"2:12411:21264","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12329:20076":{"id":"2:12329:20076","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41765:181","prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14-21:3664:1774":{"id":"0:14-21:3664:1774","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3664:1774","glob":false}}},"0:11-20:97:1772":{"id":"0:11-20:97:1772","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1772","glob":false}}},"0:49-31:68:1830":{"id":"0:49-31:68:1830","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1830","glob":false}}},"0:15-25:9:1776":{"id":"0:15-25:9:1776","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1776","glob":false}}},"0:58-21:104:725":{"id":"0:58-21:104:725","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:725","glob":false}}},"0:20-29:25:1782":{"id":"0:20-29:25:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1782","glob":false}}},"2:12367:28531":{"id":"2:12367:28531","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11989:8189","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::matches":"2:12364:2090"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43947:8207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12340:23735":{"id":"2:12340:23735","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11805:8180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5081:1795":{"id":"0:41-21:5081:1795","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5081:1795","glob":false}}},"2:12370:28532":{"id":"2:12370:28532","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11989:8189","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::rmatch_indices":"2:12373:28533"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43875:8204","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5525:29206":{"id":"5:5525:29206","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12308:28524":{"id":"2:12308:28524","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12052:1447","str::slice_mut_unchecked":"2:12309:28525","crate::ops::Index":"2:3062:2562"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12320:23743":{"id":"2:12320:23743","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:1834":{"id":"0:53-31:102:1834","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1834","glob":false}}},"2:12298:320":{"id":"2:12298:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12299:319","`u8`":"1:12063:1550"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:1833":{"id":"0:52-31:100:1833","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1833","glob":false}}},"0:18-29:27:1780":{"id":"0:18-29:27:1780","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1780","glob":false}}},"0:35-21:6629:1794":{"id":"0:35-21:6629:1794","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6629:1794","glob":false}}},"2:12408:24869":{"id":"2:12408:24869","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39797:25004","Self::is_ascii":"2:12407:21258"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39797:25004","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3664:1774":{"id":"0:74-21:3664:1774","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3664:1774","glob":false}}},"2:12410:21263":{"id":"2:12410:21263","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12343:23737":{"id":"2:12343:23737","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11989:8189","`DoubleEndedIterator`":"2:7438:121","prim@char":"1:12046:428","str::split":"2:12337:2362"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43743:8174","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12009:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5511:8508":{"id":"5:5511:8508","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7449:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7449:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-21:424:1768":{"id":"0:7-21:424:1768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1768","glob":false}}},"0:54-31:120:1835":{"id":"0:54-31:120:1835","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1835","glob":false}}},"0:16-21:5040:1778":{"id":"0:16-21:5040:1778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5040:1778","glob":false}}},"0:8-21:589:1769":{"id":"0:8-21:589:1769","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1769","glob":false}}},"2:12296:25041":{"id":"2:12296:25041","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11549:8193"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-21:5133:960":{"id":"0:38-21:5133:960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5133:960","glob":false}}},"0:45-21:5135:1800":{"id":"0:45-21:5135:1800","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5135:1800","glob":false}}},"0:51-31:136:1832":{"id":"0:51-31:136:1832","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1832","glob":false}}},"0:69-21:424:1768":{"id":"0:69-21:424:1768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1768","glob":false}}},"0:25-21:6074:1786":{"id":"0:25-21:6074:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6074:1786","glob":false}}},"0:56:1096":{"id":"0:56:1096","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:725","0:59-2:12572:136","0:60-20:32:1766","0:62-21:4576:1777","0:63-25:9:1776","0:65-21:1293:1770","0:66-20:68:1771","0:67-20:97:1772","0:69-21:424:1768","0:70-21:589:1769","0:71-21:5040:1778","0:73-21:2760:1773","0:74-21:3664:1774","0:76-29:27:1780","0:77-29:17:1781","0:78-29:25:1782","0:79-29:20:1783","0:81-21:6079:1784","0:82-21:6044:1785","0:83-21:6074:1786","0:84-21:6061:1787"],"is_stripped":false}}},"2:12313:26579":{"id":"2:12313:26579","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12046:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43701:8195","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1863":{"id":"0:0:1863","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5135:1800","crate::executor":"0:46:1674","crate::stream":"21:1293:1770","crate::channel":"27:0:1797","crate::future":"21:104:725","crate::sink":"21:4576:1777"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1674","0:56:1096","0:4-2:12572:136","0:5-20:32:1766","0:7-21:424:1768","0:8-21:589:1769","0:10-20:68:1771","0:11-20:97:1772","0:13-21:2760:1773","0:14-21:3664:1774","0:15-25:9:1776","0:16-21:5040:1778","0:18-29:27:1780","0:19-29:17:1781","0:20-29:25:1782","0:21-29:20:1783","0:23-21:6079:1784","0:24-21:6044:1785","0:25-21:6074:1786","0:26-21:6061:1787","0:27-20:131:1788","0:28-22:7:1789","0:29-21:6631:1790","0:31-21:6628:1791","0:32-21:37:1792","0:33-21:20:1079","0:34-21:6630:1793","0:35-21:6629:1794","0:37-21:104:725","0:38-21:5133:960","0:39-21:4576:1777","0:40-21:1293:1770","0:41-21:5081:1795","0:42-21:57:1796","0:43-27:0:1797","0:44-21:6102:1799","0:45-21:5135:1800"],"is_stripped":false}}},"0:21-29:20:1783":{"id":"0:21-29:20:1783","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1783","glob":false}}},"2:12399:28542":{"id":"2:12399:28542","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12289:21311":{"id":"2:12289:21311","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12390:20606":{"id":"2:12390:20606","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12046:428","self::pattern":"2:11989:8189"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41763:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11994:8185","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6630:1793":{"id":"0:34-21:6630:1793","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6630:1793","glob":false}}},"2:12311:23727":{"id":"2:12311:23727","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:12310:23726"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-21:6079:1784":{"id":"0:23-21:6079:1784","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6079:1784","glob":false}}},"5:5510:29203":{"id":"5:5510:29203","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2333","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2333","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7182:2548","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26-21:6061:1787":{"id":"0:26-21:6061:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6061:1787","glob":false}}}},"paths":{"16:6243:15661":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"21:9689:2157":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"21:6906:33204":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:4483:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:11354:20583":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:10542:8179":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:8825:15808":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:46814:2990":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"21:13222:2284":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"6:5829:13460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:10561:15924":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"11:365:30887":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:15165:32219":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"16:7782:15723":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6361:15668":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"16:5673:15642":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:42040:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:7822:2180":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"2:43989:8203":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:4142:2295":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:9431:8132":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:4641:15294":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11173:16061":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"21:6941:2160":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:10083:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"21:57:1796":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"1:12063:1550":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:12827:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"21:14970:2392":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"7:32:14474":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"11:1501:14626":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:5082:25685":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:1911:10369":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"21:8164:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:6444:32212":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"2:44225:8224":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:10903:15978":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:0:1986":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:7613:15714":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:14699:2377":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:22122:2712":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:21156:8550":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"6:4535:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2886:8528":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"14:31:14634":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:488:9288":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:44460:8676":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:41737:2702":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:11694:8680":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:3741:2707":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:11519:8631":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"15:0:1983":{"crate_id":15,"path":["addr2line"],"kind":"module"},"21:11781:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"17:9328:2670":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:4800:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:8949:2877":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:562:9297":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4436:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:10370:15899":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:21195:2920":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:4569:2777":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13554:19981":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:21719:2911":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:11845:16077":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"21:6795:33204":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:7364:151":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"2:20818:26817":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:40601:8491":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:10714:16014":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"6:6156:13506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:22240:27733":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:41629:2700":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:42001:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:6256:2870":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"30:1261:20197":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"21:13743:2515":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"21:11701:2167":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"2:12585:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:21960:27359":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:1839:2587":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:42522:8123":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:40206:8274":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"21:14979:2393":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"1:8017:2321":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:7175:2225":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:1055:2528":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11627:14667":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:9107:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"27:497:20177":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:8522:2501":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:8855:2840":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"1:1426:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:40394:2610":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:3800:2518":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:11951:18712":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:22098:26705":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:4462:15259":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:22195:26796":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:1647:8461":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:6558:2515":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:10089:2580":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"27:146:208":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:9864:28241":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"6:7272:14268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:7734:2499":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"21:23:2130":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"24:9:20104":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"17:9445:15820":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:40612:2161":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:7768:15722":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"21:13761:2311":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"6:4695:12774":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:10547:15959":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:6817:2910":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"21:6102:1799":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"5:1288:2528":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"1:11321:25467":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"18:574:2260":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:782:2246":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:13685:19988":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"11:817:2524":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"21:14754:33204":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"21:6290:167":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"17:9521:15821":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:6616:2869":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:20790:26402":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"24:135:2155":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"5:7425:2608":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:7492:15705":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:5051:25685":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"30:980:141":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"6:4781:12784":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"21:10474:2247":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"21:13679:20106":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:3315:8115":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:4944:12803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:494:9289":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:4005:26885":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:6467:15675":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:9102:15789":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:9896:26986":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"21:7447:32337":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"21:10702:2250":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"27:187:20165":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"6:7609:14458":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:9574:32075":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:7513:15707":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:11327:2844":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:11304:25810":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"28:217:2527":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"0:0:1863":{"crate_id":0,"path":["futures"],"kind":"module"},"5:878:2538":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:21294:2919":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"21:5081:1795":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"1:11620:25715":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:32308:15738":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"6:541:9294":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:1118:28459":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:13897:20001":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7722:15720":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:7855:2545":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"27:439:2875":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:10661:16012":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:10108:20699":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:8150:2290":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"27:136:2870":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:2166:604":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:9607:15823":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:6844:15689":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2877:8522":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"30:1457:20079":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"1:4389:2749":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10456:15926":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"14:165:14635":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:12373:19217":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:3843:2709":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:6189:31350":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:399:30908":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:2918:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"21:8200:2176":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"16:6944:31093":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11191:15839":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:4527:15276":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:5849:13420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6769:8253":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:2885:20710":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"21:13436:33204":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"16:6401:15671":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:500:9290":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:13868:19998":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:12047:1566":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:10588:2471":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:2822:2326":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:39445:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:11070:2257":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"2:45859:2971":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6067:13477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:7126:2159":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"17:14134:20024":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12007:18715":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:11248:2879":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:11407:15829":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:1928:8118":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"5:2243:29557":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:4182:8145":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11111:16031":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:48034:8080":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:13838:19996":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:7691:2471":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"21:11227:2248":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"21:11349:2262":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"21:11041:33204":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"17:12598:19227":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:5805:13458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:13040:19255":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:32322:8284":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11991:18714":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:22885:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"21:10588:33204":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"11:2201:2512":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"9:0:1978":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:40441:2626":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:11731:8682":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:8167:15734":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"31:100:1833":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"21:6628:1791":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:12280:18734":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"5:7365:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3062:2562":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"21:13734:2514":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:4378:8285":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:8466:2817":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:44444:8668":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:5593:2157":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"6:4650:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"2:43578:8154":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:6600:15683":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:5535:2239":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:9277:15818":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:113:20065":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"21:12717:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"17:9488:32079":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:3345:2676":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"21:7981:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12293:18735":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:7859:8479":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:42079:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:44109:8219":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:3501:2391":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7006:15696":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:4723:12777":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6041:15657":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:1041:2527":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"11:667:2520":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:41900:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:9437:8130":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1690:10202":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:10073:2650":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"21:7895:2173":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"2:2279:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:44008:8191":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"16:6818:15688":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"21:13795:33204":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"16:8154:15733":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:40227:26590":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:7937:2376":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:3388:2288":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"21:9853:33204":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"21:14313:33204":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"30:1211:20192":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"21:7497:2181":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"21:7676:2184":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"16:2321:14710":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"14:40:18711":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"22:0:2119":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:12003:8187":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:11872:16078":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"21:7956:2179":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"21:14819:2380":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"16:3600:14744":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:5760:15647":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:8953:15812":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:46479:26762":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"21:8457:33204":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"21:6608:32210":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:47692:2979":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:9279:2233":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"17:13174:19264":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:1640:603":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:6415:15672":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:21023:8550":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:43633:8172":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:7586:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:39430:8536":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"21:8017:2175":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"1:9034:25719":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:4220:32231":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"2:41087:8478":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:2524:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:41612:2699":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"21:13869:33204":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"21:331:2465":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"1:915:2520":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:11995:20629":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:2540:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:1138:28507":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:9141:2654":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:21378:2915":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:2363:2630":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"21:12558:2283":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"29:0:1779":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:41045:2291":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12959:19249":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:41881:2803":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:2533:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:7359:8481":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"30:1274:20083":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"16:7534:15709":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"30:936:20197":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"2:41763:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:7438:8144":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:4814:817":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:4616:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"11:798:2522":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"15:327:14663":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:47894:3006":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"21:14432:2232":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"2:26142:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:14126:20023":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:2782:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:12830:19242":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:6805:13894":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:10397:15953":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:2696:14726":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:9423:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2332:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:7547:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:7862:15726":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:4585:15286":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:14156:20026":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:12765:19238":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10168:21101":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:22522:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:44303:8227":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"30:1394:20089":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:6268:31385":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:6077:13478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:504:15802":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:21142:2924":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9985:21086":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:629:29540":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"21:14230:33204":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"17:9790:32088":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"21:6991:2162":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:21627:2930":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:43725:2671":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:7861:2647":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12934:19247":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10197:15918":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:8926:15811":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:21280:2918":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:48043:8081":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"9:450:14503":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:7543:25354":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"6:4895:12798":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:10528:8176":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:13274:15841":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:8659:15784":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:5381:2828":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13739:19991":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:1709:10204":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:8203:2232":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:48138:8088":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"5:2690:28445":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"30:1240:20195":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"2:31084:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"11:2060:2529":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:10012:15824":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:6893:31307":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:4992:12809":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:1557:10190":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:11573:15836":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8885:2875":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:10545:2687":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:6513:15678":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:7137:22878":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"27:181:20164":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"16:6792:15687":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:40823:2253":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:10985:20581":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:44464:8674":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"6:4685:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:4906:2784":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"21:9660:33204":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"30:1182:20196":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"21:12508:2181":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"21:13147:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"17:12888:19245":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:6841:13897":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:40347:8306":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:7462:15703":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:104:725":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"1:9160:2904":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:9350:15786":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"11:1068:14624":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:1717:10205":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:10255:2514":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:46049:3003":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:7540:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"21:8042:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:43452:27897":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:10348:20709":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"5:3735:2551":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:8879:2515":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"27:369:2870":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"1:10755:2788":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"21:14195:2320":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12671:19231":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:7529:2518":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"1:8343:2789":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4787:12785":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:43613:8173":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:45735:2934":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:12778:19239":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46160:2977":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"21:6313:20121":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"6:6720:13889":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:9117:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"5:1482:2519":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4328:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"27:0:1797":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"6:5877:13462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:3986:2722":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:4165:2751":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:4921:15382":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"26:53:33738":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:9650:15824":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:4259:8276":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11272:16064":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:12062:18718":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"18:636:20208":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12658:19230":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"12:0:1981":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:22753:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:12009:8186":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:8713:2198":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"17:10340:15905":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:7856:2646":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:12790:19240":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:12059:763":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:4915:2785":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:6376:15669":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:14163:20027":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:1980:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:10547:33204":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"5:3594:2514":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:20777:8326":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:7253:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:5994:13471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"24:296:33659":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"21:14605:2375":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"5:5366:2196":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:13286:19271":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"21:13309:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"21:6044:1785":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"1:946:2525":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:14707:2314":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"15:394:14670":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:4044:2726":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:20973:2921":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:6960:8471":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"14:202:8230":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"28:55:2514":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:6912:26983":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:9634:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"21:10913:33204":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"1:919:2521":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:9852:15851":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:43604:8170":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11244:15838":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"1:8506:2819":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:1506:10184":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"21:10750:2251":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"16:5963:15653":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:7400:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:43623:8171":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:47084:3005":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:5978:2870":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:10507:15928":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:5775:13455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:12051:1417":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"21:7083:33204":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:7523:15708":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:44732:8104":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:12014:8184":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:41054:8475":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:7517:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:6569:15681":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:13922:20004":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:6077:25806":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"27:489:20176":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"1:2573:25803":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:7102:15698":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:13148:19262":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:45827:2941":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12737:19236":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11661:15788":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:48063:8083":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:5044:12813":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"21:10228:2252":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"2:43999:8192":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:13323:33642":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"17:14355:20038":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:44177:8223":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:8470:2190":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"17:9933:15874":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"21:13898:2316":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"17:13989:20009":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10139:15890":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"21:7323:2168":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"17:9172:15815":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:9886:15853":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4984:12808":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:10258:2843":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:11115:8162":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:45781:2975":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:12044:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"21:14988:20120":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"11:836:2525":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:11770:8681":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:2864:14733":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"21:2568:32202":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"1:4821:2734":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"21:10458:2242":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"30:1544:20082":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:7772:25408":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:35:2565":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:3183:29597":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:8575:2822":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"21:13087:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"18:96:20064":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11306:15841":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"16:2526:14719":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"21:6684:2158":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"30:1511:33802":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"1:2496:2370":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:41908:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:9209:25476":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:5832:2502":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"6:4949:12804":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"30:1002:20083":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"17:13758:19975":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"21:12774:2285":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:41749:2703":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"21:7522:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:3972:2721":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:256:32076":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:2595:2672":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"30:966:20083":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"6:7529:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:13693:19976":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:554:9296":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"26:37:33737":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"17:8765:15806":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:3244:8272":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2536:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:9433:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:12252:18732":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"21:15192:32215":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"18:515:20091":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:12215:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"21:10466:2249":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"21:13957:223":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"16:7284:2802":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:5308:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"21:10978:33204":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"21:10563:2246":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"17:14282:20031":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"6:6589:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"17:14056:20015":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:5995:15655":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:9878:69":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"17:12876:19244":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"21:14936:33204":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"21:8757:33204":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:7067:31083":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:44499:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"11:805:2523":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:2305:14709":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:9372:15819":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:45759:2970":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"30:1072:20192":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"2:11949:2823":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:14100:20020":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:2150:15941":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:12422:19218":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:22157:26607":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:4635:21128":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"21:39:2132":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:3263:2688":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:43669:8202":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"21:11891:2175":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"1:8294:2756":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:13135:19261":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:40200:2489":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:652:2260":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:39383:8117":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:6705:13887":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"21:4306:20108":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"5:2170:29572":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:13228:19268":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"21:10180:2158":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"6:6671:10312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"5:7463:8231":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11215:16028":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"5:2049:2551":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"6:4420:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:44715:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:11261:16054":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"16:7708:15719":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4638:12770":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8220:2670":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:14803:33204":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"28:60:2311":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"2:1554:2660":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:9122:2879":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:1073:2530":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:21009:2923":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"30:1219:20193":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"2:44033:2489":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"21:12803:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"5:7290:2515":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:12123:18723":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"11:2033:2527":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:506:9291":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:41823:2287":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:643:2495":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"18:660:20081":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:42157:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:619:2491":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:41814:8541":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"21:13410:2190":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"17:11062:16057":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:8097:15730":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:8287:2701":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"21:13709:2287":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:44659:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"21:10823:2253":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"5:3178:2534":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:11381:16070":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:1766:8561":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:3416:2660":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:6386:15670":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:4304:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:2339:14711":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:45960:2936":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14378:20039":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6721:15685":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:860:2515":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:2962:29554":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:44252:8225":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:44042:8201":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:6726:13890":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2839:2907":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:14478:20046":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:6183:2320":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"21:14649:33204":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"2:41714:2701":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"30:1439:20065":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"2:10280:2671":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:10112:15888":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:1075:15867":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"21:8262:2178":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"18:690:20084":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:7740:2531":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:4842:12792":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:21109:2929":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"30:1064:20208":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"2:32416:8499":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:10797:20688":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9660:32069":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"14:221:14644":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:8321:2758":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:6549:2865":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:14076:20017":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:3232:14741":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:3441:15980":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"21:15119:32220":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:11205:33204":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"2:32268:2841":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46358:2955":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12086:18720":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:2194:30895":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:7852:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:4745:15350":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"21:9467:2235":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"6:526:9292":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"16:5049:15414":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:414:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"21:8611:2196":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:10792:33204":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"6:5882:13463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:41976:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:7660:15717":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"21:5860:1776":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"21:8656:2197":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"17:10588:15961":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:119:8971":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"31:136:1832":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"17:11535:15834":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"30:1037:20206":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"16:4497:15270":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"17:12554:19225":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"21:14396:2373":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"16:7544:15710":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:43683:8199":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:5403:15634":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"21:20:1079":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"21:10604:2243":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"8:0:1977":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:614:20207":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4748:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:3238:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:46336:2949":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4929:12801":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"17:10410:15919":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:5955:13467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12531:19223":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:11910:18710":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10637:15965":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"5:6788:8254":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:4887:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"21:11437:32303":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"2:40215:8312":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"30:1203:20083":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"17:12983:19251":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:13876:19999":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10126:15889":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:1569:10191":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:1776:2569":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:11490:15832":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"30:1052:20203":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"21:7920:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9867:15852":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10603:15962":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"21:4371:2296":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:2834:2905":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:434:14683":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:5793:13456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:2131:2461":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:47978:2991":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14083:20018":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"21:14489:109":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"5:1257:2527":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:12267:18733":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"1:1561:2311":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"30:1126:20083":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"6:4587:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:11490:2708":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:2855:8521":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"6:7558:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:12572:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:532:9293":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:22819:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"30:0:1986":{"crate_id":30,"path":["memchr"],"kind":"module"},"6:4938:12802":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:62:8917":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"21:13449:2201":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:3066:2563":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:10110:25718":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"6:4496:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:48054:8082":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:22720:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:2928:8533":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:21212:2650":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:41839:2515":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1638:10197":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:4000:2724":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"16:6753:15686":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"21:13362:2290":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"21:5818:2288":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"6:1495:10182":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"21:9917:33204":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"31:102:1834":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"1:10961:21079":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"30:1554:20083":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:474:9286":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"30:1098:20196":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2772:2325":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:5387:2660":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"21:13513:2293":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"21:14284:2370":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:2555:32227":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"2:9383:2391":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:11124:16030":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"21:12826:2286":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"1:4186:2753":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:15001:32226":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"2:21373:2650":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:13611:19984":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"2:1757:27321":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:12062:761":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:7546:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:8335:2183":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"31:0:1828":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"1:1565:2518":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"29:20:1783":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"16:4417:15238":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"18:755:20087":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:8205:15737":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"16:7436:15702":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:10186:15892":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:8213:2253":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:8564:2821":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:6083:14680":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:12437:19219":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:7029:21402":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:2618:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:7115:2290":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"30:901:20194":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"17:10023:15825":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5799:13457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:10435:8174":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"21:335:32233":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"2:10323:8180":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10447:15927":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9070:15634":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:8299:2757":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:8782:2199":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"16:5017:15406":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:7852:2542":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:11639:15839":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:47234:2939":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:14316:20034":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:6433:2291":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:9289:2586":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:4973:12807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:12071:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:6255:20123":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"21:10340:33204":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"5:7349:2513":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:4446:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2141:29578":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:12068:811":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:22687:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:4254:8275":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:40314:8308":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:30480:2547":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:6279:15663":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:48191:8091":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"11:403:30903":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:4380:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"5:4363:29642":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:12790:3052":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"21:1293:1770":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"21:12443:2273":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"11:1852:2535":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:9762:32086":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10278:15901":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:4389:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9242:15817":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"17:13914:20003":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:43947:8207":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:653:9349":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"21:14910:2253":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"6:6036:13476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:3185:23150":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"5:3217:29591":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:8863:2287":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:8393:2185":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:1520:10186":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:3888:14805":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"21:8692:33204":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:5816:31178":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:4788:28281":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"27:432:20178":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"5:1503:2521":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5696:15643":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:7568:15712":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"23:0:2120":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"1:7921:23144":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"18:727:20086":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:22621:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"11:1012:2529":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"21:6079:1784":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"1:9047:15699":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"18:766:20080":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:10331:2832":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:1663:10199":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43279:8157":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"16:2670:14725":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:7191:2515":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:4985:2660":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:11549:8193":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:4798:2740":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:6987:25365":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"21:8292:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:30520:8511":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"21:5743:2660":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"17:10240:15870":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:3182:20985":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4742:2738":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:3302:2684":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:6417:32317":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"30:1582:33787":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"6:4664:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:4017:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:11535:8633":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:3330:2518":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"17:12846:19243":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:22082:27502":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"21:11813:2173":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"16:149:14686":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:46738:2978":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:13422:19977":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:2865:2906":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:12309:2276":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"21:0:1767":{"crate_id":21,"path":["futures_util"],"kind":"module"},"17:9921:15880":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:40634:2247":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:41038:27739":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:1761:627":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:4986:15399":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:12911:19246":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:9564:15822":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"18:736:20079":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:7719:2498":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:40513:8483":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"9:330:14559":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6306:3053":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:9418:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:21:701":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"28:208:2529":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"6:595:9302":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"5:5954:2855":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"21:5135:1800":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"6:6688:10310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:11586:15837":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:11535:2263":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"16:5743:15646":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:2213:2627":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13890:20000":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:6820:13895":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:2223:29577":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:7054:31354":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:9701:15825":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:12194:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:7206:33204":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:2832:14732":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:40471:8154":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:50036:2932":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"16:7597:31134":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"21:13344:2288":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"17:13188:19265":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"0:46:1674":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"16:7651:15716":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"21:13045:2278":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"16:6960:15694":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"21:10123:2241":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"1:6304:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:1558:2515":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:7182:2548":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:43591:8155":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"21:9416:33204":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"1:10483:25795":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"21:14584:33204":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"1:3510:21069":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"21:5120:20118":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:39610:8258":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:8548:2820":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:47582:2945":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"21:7254:33204":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"20:131:1788":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"5:1011:29638":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:43028:27472":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"10:44:14613":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:30288:2711":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"21:14961:2391":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"21:14898:2388":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"2:2178:8551":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"21:13967:2294":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"16:2644:14724":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:5040:1778":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"2:7491:2331":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:40243:8311":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:4053:14922":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"21:8225:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:15135:32221":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"6:4456:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:4413:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"21:2760:1773":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"2:44641:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:14013:20011":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:10440:2837":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:4678:2718":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11098:16032":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:3508:2311":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:1928:673":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"30:144:20200":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"17:11281:16055":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"21:11994:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:3233:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:3032:14738":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13487:19979":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:719:20078":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"21:12091:2177":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"21:10159:33204":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"5:4393:2660":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:12698:19233":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11000:15981":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6130:13505":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"16:6879:15690":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"21:12317:2275":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"17:9985:15863":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:5918:2266":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"17:11367:16033":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"21:13283:2280":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"6:6171:13507":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:11337:16067":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"21:12890:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"16:5830:15649":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:2369:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:5088:15429":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:12046:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"17:13298:19272":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13973:20007":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"21:15204:32211":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"17:12184:18727":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:12070:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:40328:8310":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"30:1114:2287":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"2:48089:8085":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:41031:8473":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:11184:20564":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:3462:2323":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:14024:20012":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:12154:18725":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:9642:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"18:582:8326":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8339:2787":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:4700:2786":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12452:19220":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:39797:25004":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:2992:2118":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:13259:19270":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10646:16011":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:48168:8090":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:2744:14728":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"1:10774:21115":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"21:15180:32218":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"2:40361:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:9207:2212":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"2:43875:8204":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:3112:2689":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:5836:13461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:7752:2589":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"30:1451:8187":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"6:4818:12789":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:5569:2836":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:14252:2369":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"17:12496:19221":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:2211:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"21:13834:2315":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"17:13546:19980":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:10819:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:1595:10194":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:7736:15721":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"21:9748:2157":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:42315:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:587:9301":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:3044:8116":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:44452:8673":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"21:14074:33204":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"17:10916:15976":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:41701:2710":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:7438:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:2907:14735":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:20971:2650":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"6:4463:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:4767:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:10628:15964":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"16:5648:15640":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"21:14722:2378":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"21:6961:33204":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:2970:29762":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"21:9624:2238":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"2:8951:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"21:9453:33204":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:11552:2709":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:4034:2725":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:44017:8190":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:39344:8270":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:8072:15729":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:2924:8532":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"18:707:8187":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"21:11300:2261":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"21:7618:2182":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:40560:2238":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"21:6061:1787":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"11:1826:2311":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:4963:12806":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"21:3912:2189":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"1:6602:2868":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"21:9555:2237":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"18:564:20094":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:12116:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:43793:8208":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:2635:2373":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"28:42:2515":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"2:46260:2937":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4374:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"27:149:20163":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"6:4568:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6008:13472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:45715:2969":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"18:624:20203":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4291:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:8848:15809":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:41595:2698":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:14671:2376":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"16:6425:15673":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11531:2707":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"17:11761:15844":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"21:9049:2208":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"21:12951:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"2:9427:8122":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:46557:26650":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:5753:2857":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:3261:2687":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:14:2093":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:5446:2832":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:46382:3004":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:6902:25815":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:3720:2376":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:1776:2518":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:9482:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"6:5920:13466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:5240:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:32329:8588":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:22174:26603":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:9311:33204":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"20:17:2112":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"17:13710:19989":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"21:6271:20122":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"21:15062:33643":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:502:2461":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"21:14160:33204":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"17:10929:15977":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:6744:13891":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:44357:8211":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14536:20050":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"17:14090:20019":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:46784:2984":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:20820:26815":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:579:9300":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:3655:14745":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"31:38:33809":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"2:20835:26814":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:5623:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:2937:8535":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:2932:8534":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:4764:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:5661:15641":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"21:7349:33204":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"13:110:30956":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:40500:2232":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:1302:2530":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13244:19269":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"21:14481:2310":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"1:3942:2719":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"11:1611:30884":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"21:12044:2160":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"2:46428:3011":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:12882:2541":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"17:13676:19987":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:11327:16066":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:14460:20044":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"21:15056:2214":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"2:44024:8200":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11507:15833":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:11788:16075":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:2596:14722":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"21:15150:32213":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:14499:20047":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:1527:10187":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:10548:2683":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"21:6629:1794":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"5:3171:2287":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:40378:26759":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"30:1027:20205":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"16:5435:31306":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4854:12794":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:2527:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"11:1822:2515":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:332:30890":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"13:226:30910":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"27:11:33740":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"1:12050:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:7828:15725":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:2898:8526":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13723:19990":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11235:16063":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:2966:29765":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:12634:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"21:14837:2382":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"17:12484:16019":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:11158:2838":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:12017:2500":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"21:11727:33204":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"1:10848:20621":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"18:681:20083":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4550:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:46974:2944":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:10771:15992":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:40451:2625":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"30:1404:32090":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"5:5839:2311":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:43893:8205":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:2365:2631":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:276:2333":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:10206:33204":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"1:4964:2794":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"20:32:1766":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"21:13725:2287":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"21:10634:33204":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:3188:23151":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:30714:26701":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"2:21272:2650":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:4002:2311":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10738:16016":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:7503:15706":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:12064:1547":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"21:12760:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"18:699:20085":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"18:609:20206":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:8115:15731":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"11:1048:30909":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:11389:15828":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"13:0:1975":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:6546:2864":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:9978:33204":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"1:10809:2648":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"21:12374:2272":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"6:1696:10203":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:11048:16045":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"21:8399:194":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"16:5574:15636":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:12915:2279":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"1:3994:2723":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"5:6798:8255":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:21406:2919":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:11805:8180":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10957:2590":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"6:0:840":{"crate_id":6,"path":["libc"],"kind":"module"},"17:11971:18713":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"28:46:2287":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"16:2504:14718":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7621:15715":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:1921:2602":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"21:12479:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"5:3669:29638":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:11192:8688":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:40644:8490":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:4704:12775":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:5500:2833":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"30:958:20201":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"21:11326:33204":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"1:635:2493":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"10:0:1979":{"crate_id":10,"path":["adler"],"kind":"module"},"17:13802:19993":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:481:25801":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:13826:19995":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:14401:20040":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:7250:9247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"1:8182:2324":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:7505:12976":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"21:9170:33204":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:8904:2873":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"30:1018:20204":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"5:4164:2660":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:10036:15868":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:1500:10183":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:2908:8529":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:9798:8644":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:39549:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"21:14828:2381":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"17:14335:20036":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10292:15824":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:43045:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:11023:15979":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:9393:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:4157:2750":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:6625:2789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:9493:33204":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"21:4353:20110":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"2:48115:8087":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:8594:15787":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:2777:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"11:285:30892":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:2406:1800":{"crate_id":1,"path":["std","io"],"kind":"module"},"16:2881:14734":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"31:68:1830":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"19:0:1057":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:12779:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:2920:8531":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:11624:2265":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"21:13199:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"1:11402:22871":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"29:25:1782":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"26:0:2121":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"2:22247:2714":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:3764:14753":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:8122:2649":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"27:124:20159":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"21:402:25817":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"18:80:20063":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:22134:26624":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:4889:15374":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"5:7211:2311":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14308:20033":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:11617:15838":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"18:491:32090":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13949:20005":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"21:8103:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:8159:1776":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:1089:2210":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:2775:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:6648:10327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"16:6485:15676":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:46190:2983":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"21:8360:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:41060:2288":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:5967:13468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:12659:31383":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"21:14373:33204":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"6:4754:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"5:2461:28448":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"9:426:14505":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"21:13404:194":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"17:13575:19983":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:6868:13899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:22273:2715":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:1536:10188":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2257:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"21:12578:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"2:7896:26979":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10084:15861":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:5395:2829":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:44337:8210":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:30608:26760":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9617:32077":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:44476:8670":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:1587:2536":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:13014:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"6:4862:12795":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:6439:2311":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:2488:8330":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:8978:15813":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"21:13478:33204":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"9:393:14504":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"21:9230:2232":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:21841:2650":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"30:949:20083":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"30:1518:20092":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"1:0:1439":{"crate_id":1,"path":["std"],"kind":"module"},"17:10962:15974":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:40621:8485":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"21:15009:2216":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"16:6499:15677":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:7564:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:9003:15814":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:5900:13465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:32315:27709":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:10829:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:14522:20049":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:1554:2287":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:43020:8335":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:40267:8314":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"21:6427:32316":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"21:11375:33204":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"6:568:9298":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11719:15842":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"21:14463:33204":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"16:2574:14721":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"21:6637:2157":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"21:14904:2389":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"17:9945:15870":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:4341:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:48153:8089":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"20:68:1771":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"1:4135:22875":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:14110:20021":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:3399:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"21:9369:33204":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"16:3830:14771":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"5:7412:2607":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:8139:2177":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"2:2787:2476":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:12098:18721":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:8933:2874":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"17:12136:18724":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:7523:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46660:2972":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:31112:8326":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:11151:16060":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"30:973:20084":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"1:1892:2601":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:43775:8209":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:9119:27480":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:4048:2727":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:12012:25853":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"21:7186:2163":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"16:2969:14737":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:9177:25690":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"16:4862:15371":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:10514:8178":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:46896:2938":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"30:1190:20197":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"6:4556:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:45929:2988":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:11634:14667":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:5760:2858":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:822:2537":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:48100:8086":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"21:6823:2166":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:46030:2954":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:47050:2956":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"20:97:1772":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:39624:8267":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:7552:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:547:9295":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:13162:19263":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10534:15929":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"21:14857:2384":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"21:4408:25793":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"1:12056:660":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:10857:20560":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:44314:8228":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:7409:2332":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:7575:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:6178:27753":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"16:2548:14720":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"9:52:14522":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:3929:2660":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:2869:2908":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:2830:8498":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:43036:8334":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"31:125:1836":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"1:5630:2870":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"21:9533:33204":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"2:30514:8249":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:10980:15824":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:3581:2287":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:40669:2250":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"20:143:20102":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"21:927:2200":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:2472:14717":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:21404:2925":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:7053:2164":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"2:10556:8177":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:7511:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"7:79:14481":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"5:5318:29638":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:1778:2570":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"5:5128:2855":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"30:1533:20081":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:6352:15667":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"21:10312:2161":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:42783:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"11:97:30886":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:40531:2235":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:7866:2644":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:1649:10198":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:46212:2989":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"11:1838:2533":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:11989:8189":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"30:1418:20063":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"17:11886:18709":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:6930:29644":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:5058:12815":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:12724:19235":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:7342:31388":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:40287:2489":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"21:13823:2314":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"2:9435:8129":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"5:7382:2609":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:4333:8284":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:9207:15816":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:5923:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:3738:2708":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"29:17:1781":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"17:13085:19258":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:10728:33204":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"18:590:20204":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:13170:2282":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"1:11608:8098":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:5769:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:1492:2520":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:6473:2867":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:4835:15368":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:881:2517":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"21:11404:33212":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:8809:2837":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:3993:26982":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:13667:19986":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:6864:8489":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"9:486:14502":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"30:1232:20194":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"30:1140:20192":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"11:630:2287":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:14469:20045":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:3642:2515":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:7545:8250":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:14173:20028":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:43067:26396":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:12659:2189":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:40833:2255":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"21:13368:2291":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"17:10468:15957":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"5:3238:2536":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:8134:15732":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"2:21843:2917":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:44131:8220":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"21:3664:1774":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"6:5051:12814":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"24:12:20103":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"21:14954:2390":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"30:1042:20207":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"11:1121:2530":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:22786:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:6201:25737":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:4237:2754":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"27:451:2877":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"1:11061:25814":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"21:13118:2281":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"21:14108:2319":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"1:4475:2759":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:40653:2248":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:5905:15651":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:2903:8527":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:2920:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"5:3212:2533":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:2881:8524":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"21:13698:20107":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:14033:20013":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"6:1603:10195":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"15:288:14658":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:39571:2506":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:6850:13898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"6:5080:12818":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:6775:8482":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:724:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6565:9337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"21:12734:2271":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:11074:16058":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"21:6074:1786":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"16:4774:15355":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:43541:8165":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:1582:2535":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:2559:2372":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"21:13391:33204":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"1:12069:1606":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"5:7474:8232":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5818:13459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:6015:13473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:10478:15952":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:43711:2670":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:44289:8226":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5634:15639":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"9:177:14608":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:8986:25694":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:8713:15805":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:4879:1026":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:43695:8196":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5419:15635":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:12543:19224":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:46012:2948":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"5:1464:2516":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2391:2641":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:3519:2387":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:6022:13474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"11:2049:2528":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:9429:8131":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:1513:10185":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"11:119:30889":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:41572:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:12750:19237":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:43075:26395":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:7318:15700":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12043:18717":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:7768:2590":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:10839:2322":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:5890:13464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5363:15632":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:44532:8689":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"21:7778:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:5612:8253":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:1575:10192":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"30:1253:20196":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"2:22149:27308":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"21:11108:33204":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"17:11710:15841":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:4543:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:1473:2517":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"21:14771:2379":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"21:9768:33204":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:43531:8164":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"5:1102:28502":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"16:7554:15711":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"30:1010:20084":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"21:9430:110":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:42274:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:44146:8221":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:39485:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:4806:15363":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:14001:20010":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:6915:15692":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"11:793:2519":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"21:7748:2172":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"21:10090:33204":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:22852:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:13981:20008":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:47020:2950":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:1576:2534":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:8523:2805":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"21:11156:33204":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"1:8007:25725":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:8398:2798":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:6261:15662":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"16:5384:15633":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"30:1467:33785":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"21:8431:2188":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"6:6573:10142":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:6598:13884":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12196:18728":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:923:2522":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:41848:2802":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:3565:15998":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:2363:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:44324:8229":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:8558:2287":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"31:65:1829":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"2:42838:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"11:1103:14625":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"11:723:2516":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:40295:8200":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7474:15704":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:13024:19254":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:5015:12811":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:13639:32295":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"1:8815:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"11:1538:14628":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5025:12812":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12513:19222":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:44160:8222":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:0:1985":{"crate_id":17,"path":["object"],"kind":"module"},"5:6886:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:5767:13454":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:5994:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"21:8947:2206":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"30:1503:20088":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"16:5588:15637":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"21:6843:33204":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"11:644:2514":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:14346:20037":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:43979:2379":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:40491:2560":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:929:2523":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:11041:8168":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:12711:19234":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43552:8156":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:43503:8163":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:40541:2236":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:9594:33204":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"16:5612:15638":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:2359:14712":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:40408:2612":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:4489:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:41951:2287":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:13934:33204":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"17:10165:15891":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:4323:8283":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:21622:2922":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:21397:2650":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:10059:15866":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:9998:15862":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:327:2170":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"16:6583:15682":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"11:968:2527":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"16:2406:14714":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:9912:15855":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"21:13718:2515":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"2:48074:8084":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"6:6796:13893":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:9752:15826":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"11:986:2528":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:8794:15807":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:1064:2529":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:4315:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2487:2650":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:12067:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"1:850:2514":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:3263:26498":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"30:1482:20080":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"6:5979:13469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:1677:1115":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"14:215:14643":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:8991:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:7363:8480":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:1672:29638":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"21:9028:33204":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:13778:15869":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:781:2189":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"21:14994:2465":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"1:5637:2871":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:2012:15906":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:11172:2839":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"21:11179:2259":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"27:483:2817":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"2:42536:8132":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"11:1517:14627":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"1:8416:2816":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"21:14524:33204":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"1:555:2468":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:2709:2266":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"1:940:2524":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4250:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"1:904:2518":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"21:14025:2318":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"1:5787:2859":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:1631:10196":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:41959:2514":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:9199:25490":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"5:4194:2660":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"21:10262:33204":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:3065:14740":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:20805:26402":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"25:0:1775":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"6:6711:13888":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"1:7583:25797":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:4344:15189":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:6204:15659":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:2530:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"21:12972:2277":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"1:8170:2322":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4626:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8871:2878":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13055:19256":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:3461:14743":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"21:14867:2385":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"17:400:15801":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"11:1858:2536":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"21:11745:2172":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"17:2209:15925":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:10726:16015":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:11448:15830":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"21:11663:33204":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"1:7873:2648":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:41678:26622":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13215:19267":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9531:32081":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:11742:15843":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:6226:15660":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6332:15665":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:42860:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12576:19226":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:39527:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:22588:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:12024:18716":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:45911:2982":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:2428:14715":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"21:7151:33204":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"11:657:2515":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:2776:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"21:8496:33204":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"17:12645:19229":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:2174:28020":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"16:3049:14739":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2659:2605":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"17:13071:19257":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4524:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"11:736:2517":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:22654:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"16:6901:15691":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"11:844:2526":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"21:5125:20117":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"17:10575:15960":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"6:4848:12793":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"6:7463:14429":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:47832:2985":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"21:10237:2159":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"2:46526:26767":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:11162:16025":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"30:880:20192":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"16:8181:15735":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:20837:26812":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:12028:20628":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"21:4476:2202":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"17:10788:16017":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"11:1845:2534":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:536:31244":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3676:2704":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"21:8078:2174":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"21:13494:2292":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"2:2844:8519":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"11:760:2518":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:1818:2287":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"21:5544:2290":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"2:8946:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:9494:20700":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:1831:2554":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:4407:2475":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:12685:2270":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"1:12053:1531":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"21:12280:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"1:9004:20584":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:10362:8167":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:10779:25481":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7360:31382":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:12534:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"2:44651:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:9086:15635":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:910:2519":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"21:7387:33204":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"30:1148:20193":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"21:11127:2258":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"21:6707:33204":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"1:8313:2706":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:1570:2533":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:5566:2834":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:12052:1447":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:41967:2515":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8305:2748":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:0:1984":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:261:32070":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"21:6720:2161":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:11547:15835":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:42118:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:11994:8185":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:11351:16068":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6687:15684":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:9061:20687":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:1831:2518":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:43929:8206":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5987:13470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"17:13851:19997":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:1814:2580":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:7896:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:14324:20035":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:10316:15907":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"21:338:2171":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"16:6346:15666":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:42529:8131":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:5362:2234":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"30:1526:20090":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"1:11211:2654":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"5:1442:2515":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13567:19982":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:3526:2668":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:12060:764":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:4434:8287":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:22211:26652":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:8631:8185":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"24:309:20116":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:44468:8675":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"21:6881:2161":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"16:6531:15679":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:42354:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:47770:2951":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14434:20042":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:7041:31297":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:5866:15650":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:40366:2611":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:10440:15956":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"21:8975:33204":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:3936:2720":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:7128:15699":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"21:12169:2176":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"21:11692:2267":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"2:4140:8291":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:6017:15656":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"21:9390:2234":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"21:10522:2245":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"1:4639:21132":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"28:30:20180":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"17:13792:19992":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:14514:20048":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:21731:26407":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:5975:8891":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:5322:15615":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:4109:8290":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:4744:2739":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13113:19260":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:2849:8518":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:11137:16029":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:11201:16026":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:362:2485":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"21:9809:2240":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"6:5068:12816":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2861:8520":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:8281:15739":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:9137:15790":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:13560:33204":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"17:10685:15971":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:6637:29638":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:10653:2244":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"1:11396:22877":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:41891:8618":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"29:27:1780":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"17:14420:20041":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:5994:8492":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:2607:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:2765:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:48230:8092":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:1411:2287":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:10399:33204":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:13010:19253":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"16:4949:15386":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"21:12413:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"30:996:20083":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"21:9213:2213":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"2:47440:2973":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:1426:2514":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11830:23686":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:42755:27305":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:44456:8672":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"18:531:20092":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:5737:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:44472:8669":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:6607:13885":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"21:11398:32289":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"11:695:2521":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"21:7400:2181":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"6:6028:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12111:18722":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:586:2487":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:8050:15728":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"21:8639:33204":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:14347:2372":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"5:2035:2376":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:7602:25793":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:837:2287":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:6136:12653":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:1545:10189":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"20:92:2650":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"30:142:20199":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"1:531:2466":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:9881:25803":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:6485:29638":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:7929:2679":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:868:2516":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:6079:2660":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:6630:1793":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"30:1493:33782":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"1:11003:2840":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:4637:21130":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:8997:2465":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:44480:8688":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2327:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:42393:2856":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"11:2168:30898":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"5:3204:2535":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:6650:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"18:521:20088":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:6172:8486":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"21:10849:33204":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"2:40569:26809":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:32304:25408":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:11467:20705":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:40279:8201":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"10:36:30881":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:4387:8286":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"21:10944:2254":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"1:11229:20597":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"11:749:2311":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"20:82:2113":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"21:11565:33204":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:7015:15697":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"21:14543:2374":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"17:14269:20030":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"28:76:33767":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"17:10698:15993":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:8250:2697":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:4729:12778":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:9455:32085":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"21:14337:2371":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"16:2810:14731":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:40551:2237":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:10231:2287":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:8524:2804":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"30:1564:20084":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:10369:2239":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"2:42811:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:13632:19985":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"24:169:2154":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"21:7016:33204":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:13619:33204":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"1:9027:25721":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:2827:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"21:13767:2312":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"24:15:20105":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:21065:2928":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:47940:2957":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:13101:19259":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:3010:2329":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:12060:8213":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"21:9199:2211":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"6:1673:10200":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12473:16018":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:43521:8166":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:9711:32080":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:44757:27749":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:11086:16059":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:1273:2529":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"26:43:33739":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"16:6696:14653":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11226:16062":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"5:261:29638":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:7337:2512":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"5:4426:29642":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:40321:8309":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:7532:15803":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"21:589:1769":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"6:4368:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"5:7221:2540":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5121:15438":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:21021:27329":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"21:7303:33204":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"2:40847:2257":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7582:15713":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:40592:2159":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:2722:14727":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5939:15652":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6929:15693":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:582:15803":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:12621:19228":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:44520:2909":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:8226:2671":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:39505:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:1681:10201":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"20:0:1765":{"crate_id":20,"path":["futures_core"],"kind":"module"},"6:4955:12805":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:14068:20016":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"21:13353:2289":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"21:4576:1777":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"1:12045:960":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:7316:2169":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"1:9039:25687":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:4606:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:12074:18719":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"21:6199:166":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"30:888:20193":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"2:39461:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:13750:2310":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"1:638:2494":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:3223:2686":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:45889:2976":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11815:16076":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"21:8418:2187":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"16:2284:14681":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:1590:10193":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:2176:8550":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:22261:2713":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:5712:15644":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:22066:26797":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:7694:15718":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:2618:14723":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"16:7884:15727":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:5727:15645":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7792:15724":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:14448:20043":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:44744:8102":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:8972:2860":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:8841:2839":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4317:2755":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"15:306:14659":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:7231:29573":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:3315:14742":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:1983:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10265:15902":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:12058:766":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:5475:2660":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:12049:1077":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"27:366:208":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"17:12810:19241":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:9939:2231":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"17:14221:20029":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:11687:15840":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:14145:20025":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:10616:15963":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:4173:2752":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:7090:31314":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12237:18731":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:10473:8175":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"21:12619:32311":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"5:2959:8106":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"21:13812:2313":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"6:4794:12786":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"17:3232:15975":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:48016:3012":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:8405:2186":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"17:11316:16056":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"20:27:2650":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"1:7913:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"21:9118:2209":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:3250:8271":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"21:12669:32216":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"17:11934:18711":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:4719:15348":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:9112:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"21:13335:2287":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:46306:2943":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"21:10000:2260":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:44702:3051":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:9959:15865":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:11369:20566":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"21:14846:2383":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"17:10494:15930":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"21:15038:33204":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"27:72:20175":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"1:4625:2724":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:3003:2327":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:6169:25813":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:8239:15738":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:13586:2294":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"6:4395:12587":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:1837:2586":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10420:15954":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:4917:12800":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:356:2484":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:42795:27318":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"5:7245:2515":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:9823:15850":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"11:2180:30897":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:2381:2636":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:4040:8111":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11295:16065":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"24:190:2156":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"6:123:8972":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:43743:8174":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"21:11510:32290":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"2:46580:26761":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"5:4032:29638":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"9:237:2817":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"6:4469:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:5431:2831":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:12945:19248":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:7381:25840":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:7199:2539":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:5415:2830":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:45805:2935":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:5798:15648":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"30:924:20196":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"21:9507:2236":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"9:357:14519":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12997:19252":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:3278:8114":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"21:8992:2207":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"2:2893:8525":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"21:7280:2167":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"2:43512:2258":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:46114:2913":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"4:0:1976":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10383:15898":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:4518:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"21:15052:2215":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"17:10430:15955":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:3223:8537":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:5863:13421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:43057:2817":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"27:154:2876":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"17:9896:15854":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:7665:2472":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:7449:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:2450:14716":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:7396:26759":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:9682:8333":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:41069:8476":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:8917:2876":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:7599:14457":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:6775:13892":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:42196:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:37:1792":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"27:127:20160":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"21:15098:32214":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"14:187:14642":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:11074:8169":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"21:6631:1790":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"17:12172:18726":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:43701:8195":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:2914:8530":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:4824:12790":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:4056:2729":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:952:2526":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:10400:8181":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"21:6775:2157":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"21:10871:2255":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"17:14296:20032":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:6560:31329":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"16:6318:15664":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"21:15237:33210":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"6:1733:10206":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:44694:3050":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:3013:2330":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:43275:26893":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:1523:2550":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:12066:1549":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"21:6238:20124":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"18:671:20082":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:14715:30855":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"14:0:1982":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12970:19250":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:7282:2515":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:8239:2706":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"27:140:20161":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"17:9780:15827":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:8233:2379":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:11384:20616":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:12061:765":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:21274:2916":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"18:507:2260":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:10214:15904":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:1702:2745":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:894:2311":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:42820:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:22555:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43829:8178":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"11:0:1980":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:30550:26641":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:12305:18736":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"21:6145:2266":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"30:911:20195":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"6:4428:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"1:9082:20570":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:6364:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:9114:26981":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:6044:30650":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"21:11838:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:42515:8122":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:40522:8484":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13966:20006":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:12244:2180":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"30:1084:20194":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"6:6618:13886":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"21:12353:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"1:12057:662":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:4833:12791":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:1184:15875":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:6456:15674":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10970:2833":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4770:12783":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:30536:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"14:160:14634":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6156:15658":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:6153:3052":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:4074:2514":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:9489:2647":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:42765:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"21:4823:2317":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"21:14878:2386":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"21:11916:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"22:7:1789":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"0:56:1096":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"11:311:30901":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:4475:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10520:15958":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4740:12779":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:10542:2685":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:13906:20002":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:11050:25817":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:2960:29764":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"21:12846:2274":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:2260:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:3797:14762":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"5:895:2287":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:8195:15736":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:40302:8307":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:41658:27311":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"6:5074:12817":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:4557:15282":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"30:1475:20087":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"1:4497:2760":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:7645:2650":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"21:7234:2165":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"17:10750:15972":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:9677:8332":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:11754:8679":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44448:8671":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:10784:2644":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"31:109:1831":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"21:8509:207":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"21:14005:33204":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"1:8489:2818":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"21:5133:960":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"17:12685:19232":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2825:8112":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:2873:8523":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:538:20093":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5008:12810":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:644:2260":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:2788:14730":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:4908:12799":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:23332:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:40583:2158":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10672:16013":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:8895:15810":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"21:21:1079":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"21:14419:33204":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"21:8871:2202":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"21:10500:33204":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:2766:14729":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10366:15912":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"18:599:20205":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"18:481:20089":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:7261:28417":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:4:1039":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"30:1428:20064":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"2:40257:8313":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:43260:8661":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:4703:2759":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:7883:2645":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:10097:15860":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:9425:8123":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:13689:2514":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:2773:8113":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:4613:15290":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:14889:2387":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"21:8863:2201":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"21:9328:2256":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"1:11067:25809":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"21:7701:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:6545:15680":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"11:2186:30900":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"21:11969:2174":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"17:12208:18729":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"21:15067:2217":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"1:3221:2685":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22013:27357":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"27:468:20174":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"16:6742:14652":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"16:2380:14713":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:10227:15903":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:8827:2838":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:21228:2914":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:40683:2251":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"21:7558:32337":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"17:9972:15864":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:5128:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4872:12796":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:1027:14623":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:3007:2328":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:6968:15695":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12067:1546":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"30:1169:20195":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"17:13451:19978":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"6:7295:14270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:4740:2735":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:12607:2186":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:4608:8300":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"17:2178:15900":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:9093:33204":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:2220:2359":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"21:11268:33204":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"21:424:1768":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"1:12065:1548":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:6955:29640":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:40693:8487":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"17:14042:20014":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:2216:2354":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"21:13261:33204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"21:11005:2164":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"16:2933:14736":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"14:7:14634":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:7745:2532":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:42235:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:482:9287":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"30:1161:20194":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"1:8012:25701":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:573:9299":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:7391:15701":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:9262:33204":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"2:7396:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"31:120:1835":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"6:4716:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:7646:2486":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:6437:2861":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"9:507:14506":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:13202:19266":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:14118:20022":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"7:0:1596":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:8686:15804":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:43847:8176":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:5982:15654":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:3160:2564":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:12465:16020":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:7269:31387":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:3444:2380":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:10949:15973":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11473:15831":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:6834:13896":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"24:0:1864":{"crate_id":24,"path":["futures_task"],"kind":"module"},"6:7278:14269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:2379:2635":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:8245:2705":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"21:11685:2268":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"6:4506:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:4401:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"21:10065:2260":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"5:4234:2287":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"21:8834:33204":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:45990:2942":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:39603:8538":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:41079:2289":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:207:8121":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"28:0:2122":{"crate_id":28,"path":["slab"],"kind":"module"},"1:7670:2474":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:46067:3009":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:3915:14808":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:7638:33204":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9051:15785":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:46404:3010":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12225:18730":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13816:19994":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:11358:16069":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:1743:8562":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"25:9:1776":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"1:8365:2737":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:41831:2514":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"21:10683:33204":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"30:1574:20085":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:3300:2683":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4810:12788":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:2979:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}