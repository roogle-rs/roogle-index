{"root":"0:0:1809","crate_version":"0.3.28","includes_private":false,"index":{"2:12014":{"id":"2:12014","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12015:812","2:12016:22490","2:12017:31638","2:12018:31639","2:12020:31640","2:12023:22499","2:12024:31641","2:12025:314","2:12026:23520","2:12027:23516","2:12029:23517","2:12031:23518","2:12033:23519","2:12035:31642","2:12036:31643","2:12037:23544","2:12038:23545","2:12039:28919","2:12040:28828","2:12041:21147","2:12042:28842","2:12043:28841","2:12044:2295","2:12045:31644","2:12046:28920","2:12047:23561","2:12050:23562","2:12053:23563","2:12056:19871","2:12060:19872","2:12064:2304","2:12067:23553","2:12070:23555","2:12073:31645","2:12076:31646","2:12079:23557","2:12082:23559","2:12085:31647","2:12088:31648","2:12091:2032","2:12094:31649","2:12097:31650","2:12100:31651","2:12103:31652","2:12105:31653","2:12107:31654","2:12109:31655","2:12110:31656","2:12111:31657","2:12114:31658","2:12117:21133","2:12120:23564","2:12123:31659","2:12126:31660","2:12129:31661","2:12132:31662","2:12134:23444","2:12135:23445","2:12136:23447","2:12137:23448","2:12138:23449","2:12139:31663","2:12141:2417","2:12142:31664"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:73-21:2760:1719":{"id":"0:73-21:2760:1719","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1719","glob":false}}},"2:12067:23553":{"id":"2:12067:23553","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11539:8115","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12044:2295":{"id":"2:12044:2295","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43625:2321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4576:1723":{"id":"0:62-21:4576:1723","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4576:1723","glob":false}}},"0:71-21:5040:1724":{"id":"0:71-21:5040:1724","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5040:1724","glob":false}}},"2:12056:19871":{"id":"2:12056:19871","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1742":{"id":"0:42-21:57:1742","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1742","glob":false}}},"0:15-25:9:1722":{"id":"0:15-25:9:1722","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1722","glob":false}}},"2:12036:31643":{"id":"2:12036:31643","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11923:1399","crate::ops::IndexMut":"2:2985:2491","str::slice_unchecked":"2:12035:31642"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:18-29:27:1726":{"id":"0:18-29:27:1726","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1726","glob":false}}},"0:24-21:6044:1731":{"id":"0:24-21:6044:1731","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6044:1731","glob":false}}},"5:5407:32315":{"id":"5:5407:32315","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2275","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2474","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:273:2275","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2474","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12042:28842":{"id":"2:12042:28842","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12043:28841"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43645:8127","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12079:23557":{"id":"2:12079:23557","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124","str::rsplitn":"2:12082:23559"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43475:8113","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12039:28919":{"id":"2:12039:28919","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43341:8131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-29:20:1729":{"id":"0:21-29:20:1729","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1729","glob":false}}},"0:25-21:6074:1732":{"id":"0:25-21:6074:1732","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6074:1732","glob":false}}},"2:12110:31656":{"id":"2:12110:31656","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12023:22499":{"id":"2:12023:22499","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11283:8128"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79-29:20:1729":{"id":"0:79-29:20:1729","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1729","glob":false}}},"0:59-2:12299:136":{"id":"0:59-2:12299:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:12299:136","glob":false}}},"2:12029:23517":{"id":"2:12029:23517","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12097:31650":{"id":"2:12097:31650","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11716:8124","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::rmatch_indices":"2:12100:31651"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43521:8139","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12041:21147":{"id":"2:12041:21147","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43357:2594","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12136:23447":{"id":"2:12136:23447","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:1726":{"id":"0:76-29:27:1726","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1726","glob":false}}},"0:55-31:125:1782":{"id":"0:55-31:125:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1782","glob":false}}},"0:29-21:6631:1736":{"id":"0:29-21:6631:1736","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6631:1736","glob":false}}},"0:69-21:424:1714":{"id":"0:69-21:424:1714","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1714","glob":false}}},"0:13-21:2760:1719":{"id":"0:13-21:2760:1719","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1719","glob":false}}},"2:12016:22490":{"id":"2:12016:22490","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-21:424:1714":{"id":"0:7-21:424:1714","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1714","glob":false}}},"2:12139:31663":{"id":"2:12139:31663","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4539:31663"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43670:8135","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1809":{"id":"0:0:1809","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5135:1746","crate::executor":"0:46:1620","crate::stream":"21:1293:1716","crate::channel":"27:0:1743","crate::future":"21:104:707","crate::sink":"21:4576:1723"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1620","0:56:1069","0:4-2:12299:136","0:5-20:32:1712","0:7-21:424:1714","0:8-21:589:1715","0:10-20:68:1717","0:11-20:97:1718","0:13-21:2760:1719","0:14-21:3664:1720","0:15-25:9:1722","0:16-21:5040:1724","0:18-29:27:1726","0:19-29:17:1727","0:20-29:25:1728","0:21-29:20:1729","0:23-21:6079:1730","0:24-21:6044:1731","0:25-21:6074:1732","0:26-21:6061:1733","0:27-20:131:1734","0:28-22:7:1735","0:29-21:6631:1736","0:31-21:6628:1737","0:32-21:37:1738","0:33-21:20:1052","0:34-21:6630:1739","0:35-21:6629:1740","0:37-21:104:707","0:38-21:5133:937","0:39-21:4576:1723","0:40-21:1293:1716","0:41-21:5081:1741","0:42-21:57:1742","0:43-27:0:1743","0:44-21:6102:1745","0:45-21:5135:1746"],"is_stripped":false}}},"2:12094:31649":{"id":"2:12094:31649","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11716:8124","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:2032"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43593:8142","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12088:31648":{"id":"2:12088:31648","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:1779":{"id":"0:52-31:100:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1779","glob":false}}},"0:58-21:104:707":{"id":"0:58-21:104:707","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:707","glob":false}}},"2:12129:31661":{"id":"2:12129:31661","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:1776":{"id":"0:49-31:68:1776","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1776","glob":false}}},"0:65-21:1293:1716":{"id":"0:65-21:1293:1716","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1293:1716","glob":false}}},"2:12038:23545":{"id":"2:12038:23545","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12037:23544"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12085:31647":{"id":"2:12085:31647","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6061:1733":{"id":"0:84-21:6061:1733","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6061:1733","glob":false}}},"5:5406":{"id":"5:5406","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5407:32315","5:5408:8447","5:5411:32316","5:5414:32317","5:5422:32318","5:5423:32319","5:5424:2164","5:5425:24776","5:5426:24777"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:28-22:7:1735":{"id":"0:28-22:7:1735","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1735","glob":false}}},"2:12082:23559":{"id":"2:12082:23559","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11917:418","str::splitn":"2:12079:23557","self::pattern":"2:11716:8124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43493:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4-2:12299:136":{"id":"0:4-2:12299:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:12299:136","glob":false}}},"0:10-20:68:1717":{"id":"0:10-20:68:1717","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1717","glob":false}}},"2:12053:23563":{"id":"2:12053:23563","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32-21:37:1738":{"id":"0:32-21:37:1738","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1738","glob":false}}},"0:14-21:3664:1720":{"id":"0:14-21:3664:1720","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3664:1720","glob":false}}},"0:39-21:4576:1723":{"id":"0:39-21:4576:1723","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4576:1723","glob":false}}},"2:12107:31654":{"id":"2:12107:31654","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12123:31659":{"id":"2:12123:31659","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26-21:6061:1733":{"id":"0:26-21:6061:1733","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6061:1733","glob":false}}},"5:5424:2164":{"id":"5:5424:2164","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12064:2304":{"id":"2:12064:2304","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11716:8124","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split_whitespace":"2:12042:28842","str::rsplit":"2:12070:23555"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43371:2595","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12026:23520":{"id":"2:12026:23520","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-21:20:1052":{"id":"0:33-21:20:1052","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1052","glob":false}}},"2:12138:23449":{"id":"2:12138:23449","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12073:31645":{"id":"2:12073:31645","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11716:8124","str::split":"2:12064:2304","prim@char":"1:11917:418","`DoubleEndedIterator`":"2:7244:121","str::rsplit_terminator":"2:12076:31646"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43421:8144","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5426:24777":{"id":"5:5426:24777","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12138:23449"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78-29:25:1728":{"id":"0:78-29:25:1728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1728","glob":false}}},"0:35-21:6629:1740":{"id":"0:35-21:6629:1740","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6629:1740","glob":false}}},"0:77-29:17:1727":{"id":"0:77-29:17:1727","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1727","glob":false}}},"2:12015:812":{"id":"2:12015:812","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11917:418"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1069":{"id":"0:56:1069","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:707","0:59-2:12299:136","0:60-20:32:1712","0:62-21:4576:1723","0:63-25:9:1722","0:65-21:1293:1716","0:66-20:68:1717","0:67-20:97:1718","0:69-21:424:1714","0:70-21:589:1715","0:71-21:5040:1724","0:73-21:2760:1719","0:74-21:3664:1720","0:76-29:27:1726","0:77-29:17:1727","0:78-29:25:1728","0:79-29:20:1729","0:81-21:6079:1730","0:82-21:6044:1731","0:83-21:6074:1732","0:84-21:6061:1733"],"is_stripped":false}}},"0:43-27:0:1743":{"id":"0:43-27:0:1743","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1743","glob":false}}},"0:48-31:65:1775":{"id":"0:48-31:65:1775","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1775","glob":false}}},"2:12027:23516":{"id":"2:12027:23516","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41404:179"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:589:1715":{"id":"0:8-21:589:1715","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1715","glob":false}}},"2:12126:31660":{"id":"2:12126:31660","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12137:23448":{"id":"2:12137:23448","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12141:2417":{"id":"2:12141:2417","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4540:2417"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43679:2418","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20-29:25:1728":{"id":"0:20-29:25:1728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1728","glob":false}}},"2:12070:23555":{"id":"2:12070:23555","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11716:8124","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::split":"2:12064:2304"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43389:8109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5135:1746":{"id":"0:45-21:5135:1746","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5135:1746","glob":false}}},"2:12109:31655":{"id":"2:12109:31655","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12025:314":{"id":"2:12025:314","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12026:23520","`u8`":"1:11934:1501"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12037:23544":{"id":"2:12037:23544","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12038:23545"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-21:6079:1730":{"id":"0:23-21:6079:1730","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6079:1730","glob":false}}},"0:83-21:6074:1732":{"id":"0:83-21:6074:1732","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6074:1732","glob":false}}},"2:12105:31653":{"id":"2:12105:31653","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6630:1739":{"id":"0:34-21:6630:1739","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6630:1739","glob":false}}},"0:74-21:3664:1720":{"id":"0:74-21:3664:1720","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3664:1720","glob":false}}},"2:12020:31640":{"id":"2:12020:31640","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12018:31639"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12103:31652":{"id":"2:12103:31652","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12100:31651":{"id":"2:12100:31651","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11716:8124","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::match_indices":"2:12097:31650"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43539:8140","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5422:32318":{"id":"5:5422:32318","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5408:8447":{"id":"5:5408:8447","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:1781":{"id":"0:54-31:120:1781","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1781","glob":false}}},"2:12120:23564":{"id":"2:12120:23564","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-21:5133:937":{"id":"0:38-21:5133:937","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5133:937","glob":false}}},"2:12134:23444":{"id":"2:12134:23444","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40-21:1293:1716":{"id":"0:40-21:1293:1716","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1293:1716","glob":false}}},"2:12040:28828":{"id":"2:12040:28828","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11917:418"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43347:8130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12132:31662":{"id":"2:12132:31662","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11677:127","`FromStr`":"2:11676:2751"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41546:210","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:11676:2751","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11676:2751","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12050:23562":{"id":"2:12050:23562","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5411:32316":{"id":"5:5411:32316","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:1777":{"id":"0:50-31:109:1777","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1777","glob":false}}},"0:41-21:5081:1741":{"id":"0:41-21:5081:1741","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5081:1741","glob":false}}},"0:66-20:68:1717":{"id":"0:66-20:68:1717","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1717","glob":false}}},"0:31-21:6628:1737":{"id":"0:31-21:6628:1737","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6628:1737","glob":false}}},"2:12035:31642":{"id":"2:12035:31642","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11923:1399","str::slice_mut_unchecked":"2:12036:31643","crate::ops::Index":"2:2981:2490"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:19-29:17:1727":{"id":"0:19-29:17:1727","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1727","glob":false}}},"0:5-20:32:1712":{"id":"0:5-20:32:1712","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1712","glob":false}}},"2:12031:23518":{"id":"2:12031:23518","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6102:1745":{"id":"0:44-21:6102:1745","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6102:1745","glob":false}}},"2:12111:31657":{"id":"2:12111:31657","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11741:8119","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12117:21133":{"id":"2:12117:21133","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12076:31646":{"id":"2:12076:31646","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11716:8124","str::split":"2:12064:2304","prim@char":"1:11917:418","str::split_terminator":"2:12073:31645"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43439:8143","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5414:32317":{"id":"5:5414:32317","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7254:224"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12091:2032":{"id":"2:12091:2032","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11716:8124","`DoubleEndedIterator`":"2:7244:121","prim@char":"1:11917:418","str::matches":"2:12091:2032"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43575:8141","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1620":{"id":"0:46:1620","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1775","`LocalPool`":"31:120:1781"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1775","0:49-31:68:1776","0:50-31:109:1777","0:51-31:136:1778","0:52-31:100:1779","0:53-31:102:1780","0:54-31:120:1781","0:55-31:125:1782"],"is_stripped":false}}},"2:12060:19872":{"id":"2:12060:19872","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41404:179","prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11736:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12114:31658":{"id":"2:12114:31658","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63-25:9:1722":{"id":"0:63-25:9:1722","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1722","glob":false}}},"2:12024:31641":{"id":"2:12024:31641","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:1712":{"id":"0:60-20:32:1712","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1712","glob":false}}},"2:12142:31664":{"id":"2:12142:31664","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4537:31664"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43688:8136","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12046:28920":{"id":"2:12046:28920","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43663:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12135:23445":{"id":"2:12135:23445","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39560:23440","Self::is_ascii":"2:12134:23444"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41402:181","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39560:23440","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:707":{"id":"0:37-21:104:707","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:707","glob":false}}},"2:12017:31638":{"id":"2:12017:31638","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12018:31639":{"id":"2:12018:31639","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5040:1724":{"id":"0:16-21:5040:1724","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5040:1724","glob":false}}},"2:12033:23519":{"id":"2:12033:23519","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9817:222","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12045:31644":{"id":"2:12045:31644","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43635:8138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:1734":{"id":"0:27-20:131:1734","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1734","glob":false}}},"0:82-21:6044:1731":{"id":"0:82-21:6044:1731","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6044:1731","glob":false}}},"0:81-21:6079:1730":{"id":"0:81-21:6079:1730","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6079:1730","glob":false}}},"2:12047:23561":{"id":"2:12047:23561","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11917:418","self::pattern":"2:11716:8124"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11721:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5423:32319":{"id":"5:5423:32319","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:273:2275","`String`":"5:7254:224"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:273:2275","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:6994:2474","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5425:24776":{"id":"5:5425:24776","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12137:23448"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7254:224","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:1718":{"id":"0:11-20:97:1718","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1718","glob":false}}},"0:70-21:589:1715":{"id":"0:70-21:589:1715","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1715","glob":false}}},"0:67-20:97:1718":{"id":"0:67-20:97:1718","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1718","glob":false}}},"0:53-31:102:1780":{"id":"0:53-31:102:1780","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1780","glob":false}}},"0:51-31:136:1778":{"id":"0:51-31:136:1778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1778","glob":false}}},"2:12043:28841":{"id":"2:12043:28841","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12042:28842"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43654:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:7645:2399":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:7322:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"18:652:2202":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:7694:2457":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"21:14803:36443":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"1:10448:2611":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:41879:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:40020:8253":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:2620:2315":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"21:8393:2127":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"21:10474:2189":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:2843:8471":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"5:7161:2439":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13376:19809":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"16:6321:15587":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"21:10871:2197":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:11269:8568":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:5976:15576":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"24:9:19899":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"21:13743:2441":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"1:8163:2195":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"28:0:2064":{"crate_id":28,"path":["slab"],"kind":"module"},"6:1648:10132":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:11730:8122":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:21454:28833":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:6647:10261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:10169:8109":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:47478:2922":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:8360:15727":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"5:4392:2584":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:9696:15790":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:21798:30039":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"18:624:34827":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"21:335:34972":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"1:4868:2711":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:9933:15831":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:10445:2609":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"20:32:1712":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"11:1012:2455":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"26:43:36550":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"1:1924:2530":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:4480:15194":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"9:445:14436":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:11005:2106":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"2:21:682":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:10428:15951":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:2839:8470":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:2589:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:44348:2988":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:13821:19842":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:2348:182":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"8:0:1918":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:21956:30036":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:32158:8438":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:43645:8127":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:9148:34748":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:43315:8137":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"14:160:14565":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"3:229:210":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:2151:588":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:7364:151":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"6:4388:12677":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:43421:8144":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:21963:2640":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"30:836:19873":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:573:9234":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:10010:2508":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:13499:19822":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:9613:22478":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:3327:2444":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6400:15594":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:4916:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"0:56:1069":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"17:11969:19027":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:3266:15891":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:9098:15742":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:11918:1517":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:386:15722":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:8335:2125":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"6:1535:10122":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"1:6124:22489":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:4233:2229":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:40157:8543":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"21:1293:1716":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"2:12609:2467":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:9121:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:21094:2574":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:11258:18509":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"21:5544:2232":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"17:12433:19057":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:327:2112":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"2:44145:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"5:682:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44378:8041":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:10705:15961":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"26:0:2063":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"21:8947:2148":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"6:1716:10139":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:13812:2255":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"2:45361:2906":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"21:14904:2331":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"31:109:1777":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"21:6290:167":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"1:9127:23210":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:40141:28301":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8348:2725":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13159:19790":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:11337:20786":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"28:67:36564":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:2391:1746":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:7598:14390":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:21118:2574":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:1669:31318":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:11529:14592":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:8366:2744":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"21:8078:2116":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"1:8854:2802":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:1916:2481":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:8909:2594":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"21:12091:2119":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"2:2744:8049":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"2:42682:8274":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:7202:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"15:0:1924":{"crate_id":15,"path":["addr2line"],"kind":"module"},"5:2128:2389":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:4540:15206":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"6:4637:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:9146:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:40446:2193":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"21:13639:35063":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"6:4991:12742":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:0:286":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12403:19055":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"5:1254:2453":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"21:12558:2225":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"2:2780:8459":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"30:546:19884":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:4351:2676":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2753:2841":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:8120:2264":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:4306:19903":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"1:4877:2712":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:4347:245":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:9057:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"5:6371:2441":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:1982:185":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:9533:36443":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"10:0:1920":{"crate_id":10,"path":["adler"],"kind":"module"},"1:7619:2400":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:2357:14638":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:8170:2594":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:11692:2209":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"2:44106:8611":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:21838:2638":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:7697:15641":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:10731:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"21:6427:35076":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"17:9322:34659":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"21:6720:2103":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"21:14419:36443":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"17:12033:19031":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2163:8490":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:9670:15806":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6254:15584":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:7537:22491":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"21:5081:1741":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:11465:8617":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:40678:8413":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"21:11781:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"17:13233:19796":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"5:1270:2455":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:43237:8090":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"7:32:14407":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:10598:15759":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"27:483:2745":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"27:149:19958":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"2:12386:2131":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:8249:2684":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"11:817:2450":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5862:13354":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:9218:15745":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:12085:19035":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:11832:15912":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:6561:2797":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"26:53:36551":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"2:3079:2492":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:39387:8210":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"21:14961:2333":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"16:3446:14669":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:8984:20351":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:13564:19825":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:7294:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:6628:1737":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:8310:15726":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:7016:33718":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:20779:29245":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"17:10000:15904":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:22601:2641":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"5:1479:2445":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"21:10563:2188":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"1:8835:2804":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"27:187:19960":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"2:4410:2403":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:8225:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:2337:14637":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"21:9390:2176":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"11:798:2448":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:12563:19066":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:6981:2167":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:3225:14667":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:3638:2628":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:13639:19828":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:45636:2879":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5073:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:39086:8213":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11032:2766":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:6236:15583":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"11:657:2441":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:8200:2118":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"21:9809:2182":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"16:5571:15558":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:40276:8423":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12358:19052":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"21:13934:36443":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"1:6108:2989":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"17:975:15788":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"11:2180:33631":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:9153:8059":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:8017:2117":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"6:1494:10116":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:6617:13819":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:5509:8188":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:43158:2200":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:47540:2943":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:10039:15864":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:20547:8266":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:2720:14653":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:40077:8248":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:9628:28386":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:44094:8606":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:13433:19815":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:875:2442":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:10626:15957":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"16:6904:15614":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:7186:2105":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"11:1517:14558":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:2784:2842":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:10262:36443":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:9032:20344":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:10386:22495":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"21:6313:19916":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"30:816:19880":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:953:2451":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:10735:15963":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:8525:2750":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:3030:14664":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"21:11663:36443":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"30:872:19882":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:43357:2594":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:1499:10117":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:42691:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12510:19062":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:1574:10126":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:1630:10130":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"1:11915:371":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46384:2915":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"21:10702:2192":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"5:7177:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3163:8215":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"27:468:19969":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"6:7522:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:23048:2635":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:10851:2518":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"21:12534:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"5:7033:2466":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:562:15724":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:13744:19836":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:7165:8421":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:0:1925":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:9523:15785":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:14605:2317":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"1:10894:2768":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:911:2444":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:30277:8184":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:6833:13829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"5:7057:2441":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:9159:8068":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"6:6624:2716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:12826:2228":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"21:781:2131":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"11:0:1921":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"29:27:1726":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"5:7208:28301":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:12461:19059":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10660:15762":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:779:2188":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"9:234:2745":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:8508:2229":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"6:4763:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"16:2967:14663":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:3374:8193":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"21:7895:2115":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"21:11813:2115":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"6:506:9226":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11921:312":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:4327:15113":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:11920:1050":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:2558:22478":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:6678:8428":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"14:215:14574":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"21:10466:2191":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"1:2481:2312":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:9011:20275":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:9822:15814":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"30:753:34817":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:47784:8025":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:7519:15631":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:40124:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:44114:8610":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"21:13436:36443":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"1:1895:2529":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:42666:8275":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:3935:2584":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:22436:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:44178:8624":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:4812:796":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:1519:10120":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:6710:13821":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:11355:18514":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:9989:2440":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"5:7279:8167":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:4255:207":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:10580:15955":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:3158:21028":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:8244:2683":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:41462:2229":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:5848:13353":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:2981:2490":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:4702:2662":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:4381:8226":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13777:19838":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"21:9199:2153":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"2:40416:2190":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:47086:2910":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"21:9262:36443":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"2:2768:8457":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:5886:15572":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:30847:183":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"21:7920:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:8195:2629":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"9:325:14491":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:4818:15292":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"20:27:2574":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:10712:15962":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"21:57:1742":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"2:2929:2271":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:10589:15956":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:247:34693":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:7652:198":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"21:9917:36443":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"6:1701:2672":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:9110:2840":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"21:11916:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:21927:28284":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:9380:15771":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5993:13404":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:6793:15609":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:40294:2177":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:1844:2514":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:11539:8115":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:14313:36443":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"5:7043:31438":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"14:187:14573":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4972:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:45695:2940":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:42039:2784":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11902:19024":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:46226:28298":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:30299:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:43635:8138":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:30052:2637":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"14:0:1923":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:11676:2751":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:10960:22481":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:20607:29056":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"21:13795:36443":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"21:15052:2157":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"29:0:1725":{"crate_id":29,"path":["futures_io"],"kind":"module"},"6:4290:12669":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"7:0:1545":{"crate_id":7,"path":["unwind"],"kind":"module"},"5:3593:2440":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"11:1121:2456":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:11866:21276":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"6:4445:12683":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"5:2220:32417":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:888:2443":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:5032:15338":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:4459:2687":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:487:15723":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:4437:2686":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:6991:2104":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"1:6505:2792":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:11234:18508":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:20605:29051":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:45906:2874":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:11741:8119":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11585:18530":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2879:14660":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:21343:2856":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:1080:2456":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"15:180:14583":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"13:226:33692":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:10080:15908":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"21:8399:192":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"17:12923:19777":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"21:11227:2190":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"5:626:31235":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:4932:15310":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:10857:15754":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"6:5954:13400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:47876:8029":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:41234:2622":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:13709:2229":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"30:707:28917":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:11398:35694":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"16:5655:15563":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5067:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"27:451:2806":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"21:10500:36443":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:13612:19826":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:6156:20377":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:119:33626":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"20:97:1718":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"1:11522:14592":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:4336:8225":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8765:186":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"20:68:1717":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"21:8103:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"20:131:1734":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"5:7102:2441":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"21:10634:36443":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:13145:19789":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:8858:15739":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"12:0:1922":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:1785:2498":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:6022:15578":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"30:681:19889":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10569:15921":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:9108:34676":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:2544:2314":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:2926:2270":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1846:2515":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:119:8906":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"18:736:19874":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"21:8418:2129":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"17:10555:15919":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11136:15968":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:4488:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:8573:15734":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"21:12169:2118":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"21:12951:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"1:731:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9149:22916":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:6589:8422":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:13453:19817":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:9817:222":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:3142:8476":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:11883:20370":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:6611:8190":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"17:10967:15759":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:6921:2232":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:8142:15655":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:4510:15200":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"18:644:2202":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5920:15573":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46696:2893":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:5418:33931":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:13211:19794":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:5402:14602":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:1733:8501":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:5820:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:39380:8225":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"21:13283:2222":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"1:6211:2799":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:11544:18527":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:45606:2873":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:14543:2316":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"1:4665:2686":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:47761:8024":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:10262:8111":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"6:6606:13818":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:40716:8416":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"5:6699:244":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:12592:19068":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:1594:10128":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:4187:8080":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:41919:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"2:8674:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:1034:15792":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"11:1822:2441":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11928:643":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:1602:10129":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9895:15827":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:9188:34727":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"20:0:1711":{"crate_id":20,"path":["futures_core"],"kind":"module"},"6:482:9222":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:12972:2219":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"1:1561:2229":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:7206:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:3962:2651":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"13:0:1916":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:21865:28710":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"18:614:34834":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"21:13619:36443":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"11:968:2453":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:43329:8134":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:6432:2796":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"24:0:1810":{"crate_id":24,"path":["futures_task"],"kind":"module"},"2:41999:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13324:19804":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"11:805:2449":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:8598:15735":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:9312:15747":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10505:15953":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:2749:8437":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"21:11108:36443":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"16:3585:14670":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:39227:199":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:2470:8270":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7683:15640":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40084:8249":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:4739:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:7528:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:8842:30831":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:4010:2654":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:15067:2159":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"16:5616:15560":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:4408:22493":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"2:1756:8500":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:39978:8252":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44118:8604":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"17:11471:18522":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:41317:28119":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"16:6728:15607":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:9165:8066":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:9878:69":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"1:10167:2771":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:6774:13825":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"21:20:1052":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"2:5472:2584":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:2827:8468":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"21:12067:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"16:4445:15183":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:14954:2332":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"2:2696:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:653:9284":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"6:1568:10125":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6336:15589":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:42411:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:9628:15781":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13469:19819":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:8829:2441":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:21890:28282":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7767:15645":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"21:13368:2233":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"11:1838:2459":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:40006:8251":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:39247:202":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:45836:2920":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"21:14819:2322":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"6:4400:12678":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:10751:21262":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:8111:1722":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:10823:15752":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:8947:2393":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"21:7254:36443":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:11174:22485":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"1:2892:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:10681:15959":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:21348:2866":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:2890:210":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:2509:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8176:2595":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:43898:8160":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:1470:2443":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8271:2685":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:2905:14661":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:13323:35700":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"6:488:9223":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:10721:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:7215:2274":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:8315:2664":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:11056:21345":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:40332:28865":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:1520:2476":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:3749:14679":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:22271:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"21:12044:2102":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"21:7701:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:7711:15642":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"21:12244:2122":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"21:7852:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:46460:2927":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"18:671:19877":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:13199:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"21:8975:36443":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:11253:8566":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:9478:15793":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4482:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:3180:31435":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"21:14889:2329":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"21:4476:2144":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"21:13014:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"21:8457:36443":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"1:5949:206":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:5792:13389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"25:0:1721":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"2:43806:8157":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:10545:15760":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"21:7447:35051":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"21:7234:2107":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:15062:35702":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"17:10402:15938":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"21:9507:2178":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"21:10750:2193":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"6:5889:13397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:12312:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"21:8992:2149":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"1:2580:2596":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:20771:2857":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"5:3235:2462":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:11940:1555":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:585:2416":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:11101:21271":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:926:2447":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:8753:15736":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:9907:15856":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"16:8072:15651":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"21:10913:36443":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"1:10686:2568":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:43679:2418":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12550:19065":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:6506:15600":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:21729:28656":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:20560:28835":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"18:590:28917":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:3193:2610":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:6935:15615":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"21:10369:2181":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"2:3999:28967":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:40355:2101":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:6066:13410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"11:844:2452":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:947:2450":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:3197:8051":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:5071:15353":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:1526:10121":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"21:10000:2202":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"17:10885:15755":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"16:8256:15660":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"21:8863:2143":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"16:3782:14688":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"21:6775:2099":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"21:11510:35693":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"17:9826:15801":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:8805:2768":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:40314:2179":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"4:0:1917":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"21:13957:220":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"5:7149:2438":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:9155:8058":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:47624:2928":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"21:14284:2312":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:20933:2574":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:8498:2748":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:9424:15773":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:11787:8148":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"21:9660:36443":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"17:11993:19028":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:5013:23172":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:6417:35059":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"5:4425:31317":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:8443:15730":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:4706:2666":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"30:638:19883":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:47662:2949":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:13087:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"2:43935:8161":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:45760:2849":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:4264:8219":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:4031:31318":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:5919:13399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6361:15591":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:22403:2405":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:7837:2569":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11721:19016":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10416:15950":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:9498:15790":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"29:20:1729":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"6:4517:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:4163:2584":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"21:5133:937":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"17:13488:19821":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:8997:15620":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:20588:29055":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:8129:15654":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:11520:18525":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"21:3664:1720":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"21:14988:19915":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"0:46:1620":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:7827:2572":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4394:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:12282:19046":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:2760:1719":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"1:5525:2764":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"16:2830:14658":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"21:15165:34952":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:22535:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:2522:237":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4596:15214":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:5779:15569":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:12915:19776":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"21:11624:2207":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"5:258:31318":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"21:5860:1722":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"6:6687:10244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:5811:15570":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:12318:19049":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"6:4495:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:4412:12679":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7596:15636":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"24:12:19898":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"24:135:2097":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:11922:1369":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"21:5818:2230":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"30:699:8266":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:8883:2803":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"11:2194:33634":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:7556:22493":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:43983:8145":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:42175:8067":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"21:6074:1732":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"7:79:14414":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:42441:28728":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:9138:15743":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"27:489:19971":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"21:14489:109":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"21:13222:2226":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"1:9415:20780":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:6564:9272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"5:6582:8188":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:8164:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:45427:2912":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:9959:15857":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"27:432:19973":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"6:4605:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"21:10588:36443":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:43688:8136":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"27:497:19972":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"5:5840:2783":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:10096:8102":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11532:18526":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:9512:15786":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:9493:36443":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"17:9721:15804":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:11844:19020":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"21:14970:2334":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"17:12902:19775":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:8679:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:11927:641":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"21:11994:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"9:388:14437":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:42182:8068":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:13257:19799":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"30:777:19876":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2469:2574":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:14649:36443":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"5:1135:32723":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:4023:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:13411:19812":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:4587:2651":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"30:726:34843":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:4702:15272":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"16:5847:15571":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:9534:15784":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:14846:2325":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"2:7244:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"16:7478:15627":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:9328:2198":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"16:4757:15279":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:7638:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:104:707":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"16:7029:34066":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"21:14867:2327":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"2:21873:28263":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5978:13402":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:4606:8240":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6307:15586":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"16:7837:15647":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:7592:2468":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:10653:2186":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"1:10255:20782":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:1978:15826":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:4894:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:40432:2192":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"10:36:33617":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:11934:1501":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"21:12309:2218":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"17:13181:19792":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:3214:31444":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"21:8496:36443":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"17:1787:15808":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:10635:15948":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:10283:15870":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"31:100:1779":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"6:4625:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"5:3719:2318":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12483:19060":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:6854:15611":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:6780:2846":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:4624:15218":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:20590:29053":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:6043:33419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:12194:19042":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:4926:2721":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:8718:15711":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:2572:14647":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:11299:18511":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"6:4427:12681":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:7003:2441":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:40692:2233":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:2366:2560":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"21:6271:19917":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"21:8292:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:10522:2187":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:15056:2156":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"2:20890:8489":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:5856:8826":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"21:14005:36443":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"17:10125:15885":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12576:19067":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"29:25:1728":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:2898:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"18:80:19858":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"30:769:2202":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:1931:654":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"21:15135:34949":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"16:7588:15635":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:9299:28971":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"30:883:19875":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:12388:19054":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:12361:192":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:11197:2772":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11339:18513":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12224:19043":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:9409:15772":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"16:4037:14847":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:43250:8105":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"21:8470:2132":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:45575:2925":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:4006:2653":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4534:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:7608:14391":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:14160:36443":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"21:10823:2195":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"21:6795:36443":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:5408:2760":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8791:2767":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7757:15644":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:5305:15539":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:3152:234":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:30371:28253":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:2932:2272":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:8156:15656":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"16:5557:15557":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:2515:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:6893:22179":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"1:11478:8035":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:4379:12676":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:43575:8141":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"21:12774:2227":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"16:5104:15362":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:7462:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"30:741:34827":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"21:13767:2254":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"1:3348:2230":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:11401:2631":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:13869:36443":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"5:1511:198":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"21:9689:2099":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"18:96:19859":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:6743:31358":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:41268:2624":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:2546:14646":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:775:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"16:7488:15628":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:47689:8018":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:13449:2143":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"21:9594:36443":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:45505:2908":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"21:12317:2217":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"28:216:2453":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:30875:8266":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"30:716:34821":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8439:2746":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13625:19827":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:618:2420":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"21:12374:2214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"21:14671:2318":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"17:10478:15923":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"21:13718:2441":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"16:6293:15585":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:41605:2441":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:901:2253":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"25:9:1722":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"6:4728:12711":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:7151:36443":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:41340:2634":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"21:11404:35054":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:40397:2189":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:4845:15295":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:4:1015":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:41453:8480":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:4907:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:8153:2174":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"21:11156:36443":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"2:20852:2864":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"11:285:33628":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:4531:2704":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"5:6252:2253":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:12669:34943":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"28:33:2441":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"1:2348:2554":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"21:13689:2440":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"16:2786:14656":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"11:2201:2438":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:4954:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"11:2168:33636":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2856:8474":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:844:2229":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"21:13410:2132":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"5:1500:2447":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:5677:15564":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:2855:20784":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"18:515:19886":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2364:2559":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:3815:14697":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:3463:2333":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"31:102:1780":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"17:8931:15708":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:7126:2101":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"1:7867:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:1512:10119":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:41470:2440":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:12126:19038":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:20575:28835":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"13:110:33691":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:474:9221":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"11:365:33622":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"6:6588:9107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:5743:2584":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"21:13147:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"17:12799:19772":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13506:19823":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4615:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:7335:34129":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:1708:10138":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"21:5125:19912":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"11:836:2451":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:707:8122":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:7194:2534":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:10864:2761":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"5:7351:8185":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:12138:19039":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"11:749:2253":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"11:403:33639":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"16:2378:14639":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:5462:2761":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:6032:22473":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"16:7317:33833":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"30:807:19879":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:1689:10136":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:12770:19771":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"21:7497:2123":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"6:4793:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"21:8757:36443":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:14707:2256":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"30:731:34834":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"21:6238:19919":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"11:1611:33637":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"21:5135:1746":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"16:5630:15561":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:6460:15597":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"21:331:2393":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"1:1433:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:43792:8156":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"21:5040:1724":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"17:13082:19786":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:4474:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"21:0:1713":{"crate_id":21,"path":["futures_util"],"kind":"module"},"6:7585:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"21:9853:36443":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"21:11727:36443":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"2:41402:181":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:12299:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:2956:8043":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:1577:2459":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:12536:19064":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:44090:8603":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"21:10458:2184":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"17:10440:15952":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7103:15620":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:6201:15581":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:6218:15582":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:3047:14665":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:11319:18512":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:8256:15705":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"31:125:1782":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"2:9409:8272":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:5930:2584":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:7268:8166":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:10343:2765":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:10808:8104":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"29:17:1727":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"6:4555:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:6155:13439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:9557:15745":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"21:7956:2121":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:42401:28712":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13367:19808":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:9453:15775":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"2:40204:2550":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"16:5367:14606":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"21:2568:34974":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"2:30243:2473":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:41589:2229":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:3912:2131":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"2:44126:8623":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:2758:2843":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:46730:2942":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"21:7400:2123":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"20:143:19897":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"17:1919:15842":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:8255:2731":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"17:9340:15748":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:9072:2808":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"27:439:2804":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:5709:2785":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:12280:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"6:4983:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:11641:18534":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:2046:2477":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:30313:28304":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"17:9886:15828":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:5899:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:6876:15612":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:242:34741":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:15192:34953":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"6:5774:13388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"21:12734:2213":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:10142:15910":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"2:10134:8116":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:10377:15872":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:45535:2913":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11391:18516":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"21:10978:36443":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"1:7850:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:11497:22919":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:4145:8231":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:6609:217":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"21:13823:2256":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"2:41487:2729":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8189:2630":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:8180:15658":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:41546:210":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"21:5918:2208":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"6:4769:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13516:19824":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:568:9233":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:40263:2174":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:47814:8027":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"21:12659:33807":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"17:13667:19831":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"21:10123:2183":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"1:8104:2232":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:5579:206":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:13725:2229":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:45405:2907":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:11838:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:47735:8022":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:5000:15330":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:1672:10134":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"21:9049:2150":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"1:8132:2266":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:2312:188":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:4018:2656":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:4097:27561":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:0:496":{"crate_id":2,"path":["core"],"kind":"module"},"21:4823:2259":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"17:9653:15820":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"6:595:9237":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:43949:8162":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:8090:15652":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:4127:2678":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:9866:15821":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"11:1845:2460":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:1695:10137":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:46620:2881":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:3996:2652":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13121:19787":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:14936:36443":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"21:11349:2204":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:11600:18531":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:8847:30672":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"11:1818:2229":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"21:13834:2257":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"1:8954:21142":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:40456:8426":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:587:9236":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"9:0:1919":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"5:4362:31317":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:10079:22053":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:8076:2573":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:2911:2060":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:46430:2921":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:10057:8115":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12646:19071":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:7722:2518":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"5:5263:2138":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:1489:2446":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:8821:2807":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:3472:20227":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:7966:20342":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:643:2424":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"5:5666:232":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:11923:1399":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"21:10228:2194":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"5:875:2464":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:43347:8130":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"18:481:19884":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:7488:15724":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"21:15237:35695":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"2:22370:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:676:2425":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:42703:2745":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:41639:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:44098:8608":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"21:15009:2158":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"17:8420:15729":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"16:2862:14659":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:2512:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:2746:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:4663:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"21:8871:2144":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"1:11942:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:12803:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"21:9279:2175":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:47228:2882":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43755:8154":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7285:20343":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"21:4142:2237":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"21:7349:36443":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"18:531:19887":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:11272:21757":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"21:4220:34961":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"16:6327:15588":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:13659:19830":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"16:2448:14642":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:413:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"21:7778:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12019:19030":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:1544:2584":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:7961:23201":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:11717:22488":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"21:14025:2260":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"27:181:19959":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"30:81:19858":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:39203:198":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:6629:1740":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"24:190:2098":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"2:40375:2103":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:42506:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10015:15905":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:13101:19770":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10334:15745":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"6:4586:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:47746:8023":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:40467:2195":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:13066:19785":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:12236:19044":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"21:14481:2252":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"17:10649:15958":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"11:1538:14559":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"21:8713:2140":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:47700:8019":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:13169:19791":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"16:4728:15274":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6351:15590":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:2167:31170":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11193:15970":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"21:7316:2111":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"2:47416:2888":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:6243:33809":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:5393:2759":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:5643:15562":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:4046:8048":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11800:19019":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11938:1497":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13477:19820":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"21:11179:2201":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"17:3142:15873":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:40304:2178":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:2822:8466":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:43777:8155":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:42161:8058":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"18:574:2202":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:14074:36443":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"11:97:33627":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:6935:21195":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:0:1926":{"crate_id":17,"path":["object"],"kind":"module"},"1:2219:2301":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"5:1115:31227":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:11490:23208":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"27:154:2805":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"1:3934:2648":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"21:10792:36443":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"1:9906:20633":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:39345:8477":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:15204:34945":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"1:3481:2329":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:8416:2745":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"18:755:19882":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"11:332:33618":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:11937:1500":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"21:14898:2330":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"16:7557:15634":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"5:4842:204":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:2518:238":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"21:4576:1723":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:43539:8140":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"21:14347:2314":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:2817:8465":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:8777:2766":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:9028:36443":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:10849:36443":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"21:23:2072":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"6:6849:13831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:2242:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:7891:2318":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"31:38:36591":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"21:9939:2173":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"21:13391:36443":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"1:7043:27558":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:10104:15865":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"18:699:19880":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5986:13403":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"21:7558:35051":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"6:5881:13396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:40364:8430":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:42713:28571":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2847:8472":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:22337:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:21572:2853":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:3270:2607":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:40726:2231":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:44361:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"21:6608:34951":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:2695:225":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:8971:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:11410:18517":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"21:13586:2236":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"21:10604:2185":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"21:6044:1731":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"1:11888:2428":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"21:14108:2261":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"1:5343:2756":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13426:19814":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:47799:8026":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:8667:14602":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11556:18528":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:7699:2458":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"21:13679:19901":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"14:221:14575":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:44390:8039":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2694:226":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:579:9235":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:13803:19840":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:5590:2099":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:40042:8136":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"21:13261:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"6:4694:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"21:14432:2174":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"2:39990:28315":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"6:4523:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"6:4455:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:723:2442":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"18:766:19875":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"15:219:14588":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:10527:15954":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"6:62:8852":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:4704:2665":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:2212:2551":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"21:13761:2253":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"6:7539:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:936:2449":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:6684:2100":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:41353:2625":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:39560:23440":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"6:5050:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"21:10090:36443":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:2694:14652":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:13857:19844":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:6601:8189":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"17:9683:15805":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:6319:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:43670:8135":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:4780:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:554:2396":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:5828:13393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:1568:2253":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"21:11565:36443":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:2298:14608":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:7498:15629":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:7624:2402":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:44102:8607":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:45451:2872":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"21:11268:36443":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"17:13344:19806":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:21442:2847":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:8214:15659":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5804:13391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"24:296:36489":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"1:355:2413":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:46028:2941":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:4786:30027":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:40384:8425":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:638:2423":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:4353:19905":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"14:7:14565":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:20920:2865":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:582:8266":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:10683:36443":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"6:4715:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:7271:14201":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:6396:2789":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"17:11813:15913":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:41478:2441":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:43167:8101":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:154:14613":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:40707:2230":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:10452:15925":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"21:39:2074":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"17:13385:19810":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:6990:15618":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:40058:8135":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"21:8405:2128":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"21:13560:36443":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"2:3182:30902":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7293:15621":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:12517:2989":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:20753:2861":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:8360:8120":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"9:352:14452":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12178:19041":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"18:521:19883":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:43493:8111":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:45713:2946":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"30:648:19887":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:4841:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:9596:29989":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:21570:2574":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"21:10065:2202":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"2:10207:8110":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:5090:191":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:2594:14648":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:4279:2682":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:7065:198":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:10691:15960":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:7073:31134":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:39125:8054":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:10029:20792":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:7499:22212":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:43475:8113":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:13678:19832":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"18:113:19860":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:667:2446":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"21:15001:34956":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"2:46880:2876":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12006:19029":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:361:2414":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7244:34065":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"27:369:2799":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"5:7334:2444":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:41251:2623":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:2502:14644":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:41376:2626":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:6508:2793":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:7169:8420":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10681:25313":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"21:9369:36443":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"5:273:2275":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:3956:2650":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11220:15971":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:10068:15907":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:736:2443":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"5:4073:2440":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:7599:2574":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13240:19797":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:5817:13392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"21:14837:2324":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"5:2032:2318":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:6919:34134":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:5259:2176":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:8548:15733":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:12554:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13194:19793":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:532:9228":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"18:719:19873":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:3805:2633":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:5944:15574":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10238:2760":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"21:13404:192":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:11942:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:6442:15596":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:40407:8429":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:47709:8020":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"18:491:34811":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6431:15595":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"5:6119:2990":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:11924:1483":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"21:11535:2205":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"1:8237:2625":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:9839:15800":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"21:6707:36443":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"17:12959:19778":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"21:11070:2199":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"21:8262:2120":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"27:11:36558":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:4326:8224":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:11653:18535":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:43177:8099":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"6:4340:12673":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"11:399:33644":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:11946:19026":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4435:12682":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"21:8139:2119":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"2:40734:8418":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:3378:2584":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:3488:2592":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:21989:2642":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"21:13478:36443":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"18:660:19876":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9617:15782":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:12508:2123":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"21:11701:2109":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"1:1768:609":{"crate_id":1,"path":["std","env"],"kind":"module"},"22:0:2061":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"21:9467:2177":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"2:47586:2894":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:46172:28303":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:420:14610":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"21:14584:36443":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"5:3139:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:7859:15648":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:7820:2568":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"21:14373:36443":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:13292:19801":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"21:6823:2108":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"6:4962:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"11:1858:2462":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:562:9232":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:41529:8553":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:1637:10131":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:43593:8142":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:41959:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8514:2749":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:12158:19040":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:917:2445":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:4878:1002":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"21:9311:36443":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"5:7254:224":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:11879:19022":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:21676:28658":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:1680:10135":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:2957:31216":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:9946:15829":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4937:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:25858:2636":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:44403:28933":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"30:853:19874":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6390:15593":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6725:13823":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"17:13879:19846":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:2642:14650":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"17:12259:19045":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:12607:19069":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:2800:8463":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:4568:15210":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4809:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:9178:15744":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:13249:19798":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:11375:36443":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"1:11422:2633":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"10:44:14544":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"18:690:19879":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:3872:14730":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11628:18533":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:11931:744":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:547:9230":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"21:15098:34950":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"1:0:1391":{"crate_id":1,"path":["std"],"kind":"module"},"21:11685:2210":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"2:12334:2128":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:7600:2415":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:40171:2536":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"2:40285:8424":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12293:19047":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"17:12345:19051":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11615:18532":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13053:19784":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"21:14722:2320":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"18:609:34843":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:10516:15918":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"16:4872:15298":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:14828:2323":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:45952:2880":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"5:5215:31318":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:7267:2273":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:4199:2681":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:3169:8214":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:9213:2514":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"5:3580:2229":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:7572:33798":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:6575:15604":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"5:1285:2454":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:8834:36443":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"30:665:141":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:10014:2595":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:3063:14666":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:9350:34677":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"21:9430:110":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"16:2470:14643":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"16:6544:15602":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"21:7822:2122":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"2:42674:28923":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:7023:2253":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"21:8042:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:43654:8126":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:10248:8113":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:20740:2860":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:8283:15725":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:4119:2677":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"18:538:19888":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"31:65:1775":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"1:4760:2667":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7543:15633":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"11:2033:2453":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"21:6843:36443":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:21814:28239":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:3300:14668":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"31:68:1776":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"21:12846:2216":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"1:1572:2444":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"2:40091:8250":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"21:7016:36443":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:6164:33778":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"21:9213:2155":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"21:4371:2238":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"17:12113:19037":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:6767:15608":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:9577:15789":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:3318:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10465:15924":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:9038:34753":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9091:2578":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:41388:2627":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:2687:31388":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:6865:22471":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"21:402:22481":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"1:1583:2460":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7437:15624":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"30:824:8122":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8183:2321":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:11283:8128":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:40129:2535":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13265:19800":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:3168:2229":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"21:8782:2141":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"30:761:2202":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"17:9596:15787":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:39373:28938":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:7688:2427":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:43341:8131":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"21:10728:36443":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"6:1732:10140":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"11:644:2440":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"5:1773:2444":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10699:21281":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"11:1068:14555":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"21:12717:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"2:32071:8523":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11459:18521":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12980:19779":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:2933:15868":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:6597:13817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:793:2445":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6076:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:526:9227":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5079:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"21:12413:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"21:8692:36443":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:40110:8246":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:9853:15854":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:9111:2333":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6795:13826":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43871:8159":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:44122:8605":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:4789:15287":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:9965:2229":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:2741:2268":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:2210:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:32031:2769":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:47837:8028":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:5741:15568":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"21:7748:2114":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"16:5963:15575":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:42906:8596":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:7011:2465":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:9163:8065":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:55:14603":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"27:140:19956":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"21:10399:36443":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:2240:31165":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:44110:8609":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13356:19807":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12372:19053":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:12835:19773":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:2788:2844":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:10312:2103":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:9807:2574":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"21:8360:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:1910:10303":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"19:0:1032":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:9062:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:43187:8100":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:6355:23178":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:10290:8112":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:43198:8091":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"5:1408:2229":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:37:1738":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"28:51:2253":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"17:12634:19070":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:2506:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:13721:19835":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"5:4193:2584":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"1:4599:22078":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:5966:13401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11422:18518":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:1565:2441":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:10761:15750":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:6662:15605":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"5:3567:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:49682:2869":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:6867:13832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:9566:15746":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"21:927:2142":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:5594:15559":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:4011:28977":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"21:9978:36443":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"1:11064:8623":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"24:309:19911":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"16:2931:14662":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:3648:2441":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:3948:2649":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"21:6079:1730":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"17:10052:15886":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:4597:22076":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"21:13170:2224":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"17:8195:15707":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:3272:2608":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"16:7669:15639":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"30:0:1927":{"crate_id":30,"path":["memchr"],"kind":"module"},"30:655:19888":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:21911:28201":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:40495:2199":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"27:146:206":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"1:8899:2806":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:8788:15737":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:11770:19017":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:11504:8616":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9796:15807":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:10676:22055":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:2796:8461":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:11282:18510":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:6558:15603":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:930:2448":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:1423:2440":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"21:6102:1745":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"11:630:2229":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:14857:2326":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"21:13967:2236":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"24:169:2096":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"30:798:19878":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:4567:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:4462:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:13399:19811":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:10743:15749":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:11224:21342":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:7726:21071":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"21:10206:36443":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"2:11736:8121":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:3424:2265":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"30:556:34811":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"1:7810:2570":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:12760:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"2:1747:28715":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11266:25312":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:8823:15738":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:2922:2269":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:3734:2477":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:727:19881":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:9265:15746":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"9:174:14539":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:11933:741":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:4437:8228":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"5:5059:2783":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:9403:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:2264:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:39172:8475":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:41719:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:43259:8108":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:2215:2296":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:1667:1088":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:21099:2851":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:1594:2462":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:43098:28918":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9443:15774":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:41297:28714":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"5:1371:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"21:9416:36443":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"17:9469:15776":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"27:0:1743":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"17:9973:15830":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:2985:2491":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"21:10180:2100":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"16:2404:14640":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"11:1831:2444":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"21:14910:2195":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"17:9228:34728":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:8253:2733":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:7971:2263":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:8269:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:43279:8107":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13033:19782":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:10897:15756":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8977:23212":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"14:31:14565":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:4601:22080":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:5991:8431":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:3640:14671":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"21:10340:36443":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"17:12419:19056":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4948:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:7551:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"21:14252:2311":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"2:1821:2480":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:41679:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:6881:2103":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"21:9093:36443":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:13118:2223":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"2:44340:2987":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6535:34019":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:4327:12672":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"21:15038:36443":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"21:7676:2126":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"21:13698:19902":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"1:11083:2578":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"21:13309:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"17:12059:19033":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:5708:15566":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:5693:15565":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:1852:2461":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"5:6450:31318":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:46004:2892":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:10840:15753":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:40065:8247":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"21:14699:2319":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"16:7626:15637":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:10977:22498":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11916:937":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6696:15606":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:47338:2916":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:3898:2647":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"5:1299:2456":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:2317:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:11060:15762":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:46074:2948":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:39313:2432":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:7875:21040":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"0:0:1809":{"crate_id":0,"path":["futures"],"kind":"module"},"1:867:2441":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"5:204:8057":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1589:2461":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:10276:8114":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:6768:31320":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:1544:10123":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5876:13395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:3668:31318":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:13461:19818":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:4928:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:21001:2854":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:6132:15579":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:5044:23172":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:8509:205":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"21:14715:33612":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"21:8639:36443":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"30:114:19860":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:3799:2444":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"18:0:1927":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:11502:18524":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4786:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:42925:8092":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:1630:587":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:46542:2875":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:2692:8050":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7803:15646":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:42484:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"16:7259:2729":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:6804:13827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:20993:2574":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11932:745":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6170:13440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10354:15874":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:2319:14636":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:44305:195":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"21:14524:36443":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"6:4703:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:4823:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:45658:2885":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:39969:8217":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"6:6704:13820":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"21:7981:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9641:15794":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:2524:14645":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:681:19878":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:44297:211":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:5787:2795":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:8651:14604":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"11:695:2447":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:9876:15855":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:4135:2679":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:9624:2180":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"1:7706:2517":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10989:15760":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:40214:2549":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:8632:15706":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:43224:8089":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:589:1715":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"2:22238:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:9151:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:959:2452":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4886:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"21:6061:1733":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"6:6027:13408":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"21:11041:36443":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"16:6520:15601":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:1099:32722":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"21:12194:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:4747:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"21:12890:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"1:11936:1499":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"11:2060:2455":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"26:37:36552":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"17:1947:15802":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:13344:2230":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"6:7504:12909":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"21:11745:2114":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"1:3700:2632":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:338:2113":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"17:11821:15911":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:32067:21071":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:2706:2404":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"21:8611:2138":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:13335:2229":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:43371:2595":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"30:624:2202":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"27:124:19954":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:42457:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:45381:2871":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:45676:2891":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:2805:8467":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6943:15616":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:8047:15650":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:7545:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:6981:15617":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"21:7618:2124":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"22:7:1735":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"6:4649:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:10159:36443":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"1:10876:21239":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:20880:2858":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"21:12578:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"6:7557:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:13812:19841":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"21:12685:2212":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"17:13024:19781":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"6:6007:13405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:535:33767":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"21:9748:2099":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"16:8109:15653":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:8759:2765":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:40685:28922":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:11109:15765":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:5357:2757":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:21125:2859":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"6:4549:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"5:2963:31220":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6014:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:554:9231":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10721:15926":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:3904:2646":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:3083:2613":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"21:7303:36443":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"21:8431:2130":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"2:30283:8450":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:43823:8158":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:9772:15809":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7042:33824":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11930:743":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:6994:2474":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"6:6035:13409":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:10923:15757":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"21:11891:2117":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"28:199:19975":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"2:39366:15659":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:1985:184":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41211:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"30:691:2202":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:5043:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:4148:2680":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:9555:2179":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"1:8255:2675":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:21127:2855":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:4861:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:20949:2850":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:43269:8106":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"20:82:2055":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"18:507:2202":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:43521:8139":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:8389:15728":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:10971:22497":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"21:12915:2221":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"5:3209:2459":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:43960:8163":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:45473:2878":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:46666:2887":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:10855:21913":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:5532:2181":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"21:15150:34947":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"2:4390:8227":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:42429:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:11090:15764":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"6:1662:10133":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"30:97:19859":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:13309:19802":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:14230:36443":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"17:13791:19839":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8867:2805":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:8922:2788":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7277:14202":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:45806:2914":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:11163:15969":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:7883:2603":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:43663:8125":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12894:19774":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"21:6255:19918":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"17:8683:15710":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:1821:2508":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:11935:1498":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"18:564:19889":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:6129:13438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:4943:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"6:5057:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2833:8469":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:2354:189":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:13135:19788":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:2376:2565":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6179:15580":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:1637:8402":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46306:2909":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"21:12116:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:10741:2264":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:2668:14651":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:7522:36443":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:3315:2600":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"28:207:2455":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"2:44287:205":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:8953:15740":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:43625:2321":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"14:40:18510":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"11:1501:14557":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:9488:15791":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"21:6199:166":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"17:13865:19845":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"21:11205:36443":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"6:1589:10127":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:7529:15632":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"27:72:19970":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"1:3703:2631":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"1:8289:2714":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:1048:33645":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:9275:34647":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:11941:1128":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:20815:2863":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"5:7224:2532":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:40234:8089":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"21:11969:2116":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"21:6630:1739":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"30:632:19886":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12046:19032":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:10798:15751":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7635:15638":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:5998:15577":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"16:7449:15625":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:5586:2799":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:12098:19036":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"21:1089:2152":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"17:12307:19048":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"17:9748:15745":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:10316:15867":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:13898:2258":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"2:9161:194":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:7206:36443":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:15180:34948":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"28:37:2229":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"16:4400:15162":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:12522:19063":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"16:7077:15619":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:12449:19058":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:5593:2800":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10615:15947":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:1071:2455":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13763:19837":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:7516:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:40346:2100":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10257:15871":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:5522:2762":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:39963:2418":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"23:0:2062":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"11:311:33620":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11037:15761":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3233:2612":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:44166:2845":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"21:2555:34958":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"21:14396:2315":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"6:4677:2645":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:4505:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:12496:19061":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:44003:8146":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:21850:28198":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:6146:194":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:9028:15741":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11924:19025":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:13219:19795":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"21:9118:2151":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:46125:28105":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:7574:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13332:19805":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10747:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:0:817":{"crate_id":6,"path":["libc"],"kind":"module"},"21:13353:2231":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"21:7323:2110":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"17:13651:19829":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:21015:2855":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:7595:2471":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:9917:15853":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"27:366:206":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"2:41520:2730":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"21:10944:2196":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"11:986:2454":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"6:5798:13390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4817:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:14:2035":{"crate_id":2,"path":["core","write"],"kind":"macro"},"21:14337:2313":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"16:4904:15306":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:6575:2798":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"16:7065:33722":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:11069:15763":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"21:13045:2220":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"16:6671:14581":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4871:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:30477:28184":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:10270:15869":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:35:2493":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4373:12675":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"21:14994:2393":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"2:47680:8017":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:2792:8462":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:8979:34711":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:8989:20368":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"6:6719:13822":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:3231:2611":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"21:6444:34946":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"21:14878:2328":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"16:4969:15323":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"21:13750:2252":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"17:9068:34754":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:7249:9182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:11127:2200":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"21:11300:2203":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"1:8456:2747":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:11360:2632":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"21:21:1052":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"6:4303:12670":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:6819:13828":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"21:2709:2208":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"5:4001:2253":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:6868:33811":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:1062:2454":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:5736:2253":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:4114:8230":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10303:15866":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"21:15119:34942":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"2:43149:8098":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:11721:8120":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"16:8170:15657":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"21:12479:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"1:6392:2233":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:4753:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:12622:15762":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:45982:2886":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:4468:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"21:7083:36443":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:11716:8124":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"21:11326:36443":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"21:13734:2440":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:7599:8419":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:11488:8614":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:5384:2584":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"24:15:19900":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:2763:8458":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"21:10547:36443":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:8941:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"5:1008:31318":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:42721:28572":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"31:0:1774":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"6:4847:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:8263:2630":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:20781:8489":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13698:19834":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"9:481:14435":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:5014:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:45858:2926":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"17:12331:19050":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:6631:1736":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"6:5736:13325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:4832:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:7510:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:39269:201":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:3406:2322":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:21782:28302":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:11011:15709":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:9414:8273":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:4419:12680":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"11:760:2444":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:4259:8218":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:13689:19833":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:857:2440":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:3191:2609":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:41759:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"15:198:14584":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:10775:8103":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:5716:2786":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:2774:8460":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:1048:2453":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:7563:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"21:9170:36443":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"16:6890:15613":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:41597:2440":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:46050:2947":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10092:15909":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3152:25894":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:7467:15626":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"21:10237:2101":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"21:7053:2106":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"2:3234:8052":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:40030:8254":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:9530:8579":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:5024:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:13316:19803":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:2161:8489":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:40481:2197":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10491:15922":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"21:9453:36443":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"17:10026:15906":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:2426:14641":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10657:2715":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:43439:8143":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:9374:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:3155:21037":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4542:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:892:2229":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:9157:8067":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7673:2426":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:45557:2919":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"21:9230:2174":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"21:12619:35071":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"20:17:2054":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"2:22502:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:47720:8021":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:10451:2607":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:11446:18520":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11191:20323":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"21:7280:2109":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"18:636:34817":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"20:92:2574":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"17:12072:19034":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"18:599:34821":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:14754:36443":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"2:39352:8201":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:13443:19816":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:7815:2571":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:635:2422":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:42466:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"1:10711:2572":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"1:5202:190":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:5766:13387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:6819:15610":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"6:1556:10124":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"21:14771:2321":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"1:11939:790":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:6637:2099":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"1:501:2389":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"21:12443:2215":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:2245:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:480:22476":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:8936:20358":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"5:2959:31226":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:5724:15567":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9545:15783":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:2458:31212":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:22304:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:11929:746":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:5346:15556":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:6644:23178":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"17:8521:15732":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4722:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"21:13362:2232":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:41799:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:42168:8059":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4799:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"30:844:19881":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:5933:2799":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"1:8200:2621":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"5:4938:2584":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:2684:220":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4314:12671":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:20995:2852":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"16:3899:14733":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:11372:18515":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"21:6961:36443":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:8254:2732":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"11:2049:2454":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"11:2174:28871":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:9768:36443":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:819:2463":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"17:13842:19843":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:3514:2253":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"21:6145:2208":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"17:9986:15858":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:11573:18529":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:11254:21335":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"11:1826:2253":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5797:34130":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:21977:2639":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:6572:10076":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:9734:15803":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"21:14463:36443":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"16:6061:14607":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:40050:2418":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:2350:2555":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"5:2138:31436":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:40254:2488":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"21:11437:35065":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"6:5007:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:11861:19021":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11917:418":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"21:14979:2335":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"16:6376:15592":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:12506:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"5:7237:2533":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5835:13394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:7411:15623":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:41614:183":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"21:14195:2262":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"21:7387:36443":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"1:9067:219":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:1505:10118":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"16:2616:14649":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2963:8053":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:43970:8164":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2812:8464":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:541:9229":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:2701:228":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"6:494:9224":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"5:7094:2441":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"6:4684:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:5270:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:4662:2713":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"31:136:1778":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:22568:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:11434:18519":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:6772:8411":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:6259:206":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:2603:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:42921:28360":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"27:127:19955":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"9:502:14439":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"9:421:14438":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"5:1439:2441":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:40701:8415":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:1461:2442":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:2851:8473":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:6725:28978":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2691:2267":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"30:788:19877":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:11785:19018":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:10936:15758":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"14:165:14566":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:41839:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"9:52:14455":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:13015:19780":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:3201:2461":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"21:9207:2154":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"1:11899:21260":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"21:13513:2235":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"17:13419:19813":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:8490:15731":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"31:120:1781":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"2:9366:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:4783:2661":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:11891:19023":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:4765:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:500:9225":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:3175:2460":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:46203:28290":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:5377:2758":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:5742:2787":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:11120:2808":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:673:231":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:6717:14580":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:22469:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"21:6906:36443":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"11:2186:33633":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8293:2716":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:13041:19783":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:6298:31318":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:43389:8109":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:530:2394":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:4853:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:6840:13830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"21:8656:2139":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"21:13494:2234":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"16:5386:14604":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"11:1027:14554":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"11:1103:14556":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:8025:15649":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:6135:12586":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:4367:12674":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:7743:15643":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"21:5120:19913":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"21:424:1714":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"1:11044:2767":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:123:8907":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:2808:14657":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:6743:13824":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"27:136:2799":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"21:12353:36443":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"1:10491:2399":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:922:2446":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:2764:14655":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"3:0:442":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:8813:2229":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:6670:10246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:2742:14654":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11484:18523":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"21:6941:2102":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"5:2967:31219":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:7636:30829":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:3386:8197":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"16:7509:15630":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:39291:203":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:9410:2571":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:11239:21146":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6021:13407":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:39187:200":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7366:15622":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:40323:2180":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"14:202:8165":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"1:1783:2497":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:6474:15598":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:10670:15949":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6488:15599":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:11428:8615":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"28:46:2440":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":26}