{"root":"0:0:1922","crate_version":"0.3.29","includes_private":false,"index":{"2:12436:22028":{"id":"2:12436:22028","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1131":{"id":"0:56:1131","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:755","0:59-2:12688:142","0:60-20:32:1825","0:62-21:4701:1836","0:63-25:9:1835","0:65-21:1293:1829","0:66-20:68:1830","0:67-20:97:1831","0:69-21:424:1827","0:70-21:589:1828","0:71-21:5165:1837","0:73-21:2760:1832","0:74-21:3780:1833","0:76-29:27:1839","0:77-29:17:1840","0:78-29:25:1841","0:79-29:20:1842","0:81-21:6204:1843","0:82-21:6169:1844","0:83-21:6199:1845","0:84-21:6186:1846"],"is_stripped":false}}},"0:10-20:68:1830":{"id":"0:10-20:68:1830","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1830","glob":false}}},"0:7-21:424:1827":{"id":"0:7-21:424:1827","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1827","glob":false}}},"0:33-21:20:1114":{"id":"0:33-21:20:1114","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1114","glob":false}}},"2:12496:29006":{"id":"2:12496:29006","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63-25:9:1835":{"id":"0:63-25:9:1835","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1835","glob":false}}},"0:25-21:6199:1845":{"id":"0:25-21:6199:1845","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6199:1845","glob":false}}},"0:29-21:6756:1849":{"id":"0:29-21:6756:1849","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6756:1849","glob":false}}},"2:12445:20154":{"id":"2:12445:20154","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41591:194","prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12407:28993":{"id":"2:12407:28993","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:29007":{"id":"2:12498:29007","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5165:1837":{"id":"0:16-21:5165:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5165:1837","glob":false}}},"0:20-29:25:1841":{"id":"0:20-29:25:1841","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1841","glob":false}}},"2:12442:22030":{"id":"2:12442:22030","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1855":{"id":"0:42-21:57:1855","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1855","glob":false}}},"0:78-29:25:1841":{"id":"0:78-29:25:1841","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1841","glob":false}}},"5:5533:29679":{"id":"5:5533:29679","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2393","`String`":"5:7487:246"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2393","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:2280":{"id":"5:5534:2280","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:589:1828":{"id":"0:8-21:589:1828","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1828","glob":false}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:29675","5:5518:8568","5:5521:29676","5:5524:29677","5:5532:29678","5:5533:29679","5:5534:2280","5:5535:23489","5:5536:23490"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12486:29002":{"id":"2:12486:29002","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12105:8247","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatch_indices":"2:12489:29003"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43701:8262","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14-21:3780:1833":{"id":"0:14-21:3780:1833","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3780:1833","glob":false}}},"2:12489:29003":{"id":"2:12489:29003","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12105:8247","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::match_indices":"2:12486:29002"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43719:8263","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:1831":{"id":"0:11-20:97:1831","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1831","glob":false}}},"2:12477:22027":{"id":"2:12477:22027","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12432:26791":{"id":"2:12432:26791","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12431:26777"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43834:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12480:2147":{"id":"2:12480:2147","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12105:8247","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::rmatches":"2:12483:29001"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43755:8264","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:23489":{"id":"5:5535:23489","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12526:23189"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:29678":{"id":"5:5532:29678","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12427:22010":{"id":"2:12427:22010","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12426:22009"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12404:868":{"id":"2:12404:868","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12066:447"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12521:29014":{"id":"2:12521:29014","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12066:131","`FromStr`":"2:12065:2884"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41734:229","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12065:2884","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12065:2884","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26-21:6186:1846":{"id":"0:26-21:6186:1846","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6186:1846","glob":false}}},"0:40-21:1293:1829":{"id":"0:40-21:1293:1829","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1293:1829","glob":false}}},"2:12420:21984":{"id":"2:12420:21984","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12429:26653":{"id":"2:12429:26653","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43527:8253","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2760:1832":{"id":"0:73-21:2760:1832","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1832","glob":false}}},"2:12515:29012":{"id":"2:12515:29012","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59-2:12688:142":{"id":"0:59-2:12688:142","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:12688:142","glob":false}}},"2:12456:22018":{"id":"2:12456:22018","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11921:8238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12462:28999":{"id":"2:12462:28999","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12105:8247","str::split":"2:12453:2421","prim@char":"1:12066:447","`DoubleEndedIterator`":"2:7517:125","str::rsplit_terminator":"2:12465:29000"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43601:8267","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6169:1844":{"id":"0:24-21:6169:1844","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6169:1844","glob":false}}},"0:55-31:125:1895":{"id":"0:55-31:125:1895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1895","glob":false}}},"2:12403":{"id":"2:12403","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12404:868","2:12405:21148","2:12406:28992","2:12407:28993","2:12409:28994","2:12412:21623","2:12413:28995","2:12414:339","2:12415:338","2:12416:21982","2:12418:21983","2:12420:21984","2:12422:21985","2:12424:28996","2:12425:28997","2:12426:22009","2:12427:22010","2:12428:26769","2:12429:26653","2:12430:20747","2:12431:26777","2:12432:26791","2:12433:2412","2:12434:28998","2:12435:26770","2:12436:22028","2:12439:22029","2:12442:22030","2:12445:20154","2:12449:20155","2:12453:2421","2:12456:22018","2:12459:22020","2:12462:28999","2:12465:29000","2:12468:22022","2:12471:22024","2:12474:22026","2:12477:22027","2:12480:2147","2:12483:29001","2:12486:29002","2:12489:29003","2:12492:29004","2:12494:29005","2:12496:29006","2:12498:29007","2:12499:29008","2:12500:29009","2:12503:29010","2:12506:20601","2:12509:22031","2:12512:29011","2:12515:29012","2:12518:29013","2:12521:29014","2:12523:23185","2:12524:23186","2:12525:23188","2:12526:23189","2:12527:23190","2:12528:29015","2:12530:2548","2:12531:29016"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5524:29677":{"id":"5:5524:29677","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:23490":{"id":"5:5536:23490","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12527:23190"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31-21:6753:1850":{"id":"0:31-21:6753:1850","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6753:1850","glob":false}}},"2:12506:20601":{"id":"2:12506:20601","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1922":{"id":"0:0:1922","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5260:1859","crate::executor":"0:46:1733","crate::stream":"21:1293:1829","crate::channel":"27:0:1856","crate::future":"21:104:755","crate::sink":"21:4701:1836"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1733","0:56:1131","0:4-2:12688:142","0:5-20:32:1825","0:7-21:424:1827","0:8-21:589:1828","0:10-20:68:1830","0:11-20:97:1831","0:13-21:2760:1832","0:14-21:3780:1833","0:15-25:9:1835","0:16-21:5165:1837","0:18-29:27:1839","0:19-29:17:1840","0:20-29:25:1841","0:21-29:20:1842","0:23-21:6204:1843","0:24-21:6169:1844","0:25-21:6199:1845","0:26-21:6186:1846","0:27-20:131:1847","0:28-22:7:1848","0:29-21:6756:1849","0:31-21:6753:1850","0:32-21:37:1851","0:33-21:20:1114","0:34-21:6755:1852","0:35-21:6754:1853","0:37-21:104:755","0:38-21:5258:995","0:39-21:4701:1836","0:40-21:1293:1829","0:41-21:5206:1854","0:42-21:57:1855","0:43-27:0:1856","0:44-21:6227:1858","0:45-21:5260:1859"],"is_stripped":false}}},"2:12527:23190":{"id":"2:12527:23190","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:1890":{"id":"0:50-31:109:1890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1890","glob":false}}},"2:12412:21623":{"id":"2:12412:21623","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11665:8251"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12425:28997":{"id":"2:12425:28997","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12072:1502","crate::ops::IndexMut":"2:3076:2622","str::slice_unchecked":"2:12424:28996"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12434:28998":{"id":"2:12434:28998","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43815:8261","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:1889":{"id":"0:49-31:68:1889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1889","glob":false}}},"2:12503:29010":{"id":"2:12503:29010","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12468:22022":{"id":"2:12468:22022","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247","str::rsplitn":"2:12471:22024"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43655:8236","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:755":{"id":"0:37-21:104:755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:755","glob":false}}},"2:12406:28992":{"id":"2:12406:28992","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5206:1854":{"id":"0:41-21:5206:1854","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5206:1854","glob":false}}},"0:76-29:27:1839":{"id":"0:76-29:27:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1839","glob":false}}},"2:12453:2421":{"id":"2:12453:2421","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12105:8247","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split_whitespace":"2:12431:26777","str::rsplit":"2:12459:22020"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43551:2732","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12449:20155":{"id":"2:12449:20155","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41591:194","prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12405:21148":{"id":"2:12405:21148","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12414:339":{"id":"2:12414:339","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12415:338","`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12494:29005":{"id":"2:12494:29005","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:20747":{"id":"2:12430:20747","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43537:2731","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:23185":{"id":"2:12523:23185","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12530:2548":{"id":"2:12530:2548","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4573:2548"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43859:2549","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69-21:424:1827":{"id":"0:69-21:424:1827","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1827","glob":false}}},"2:12525:23188":{"id":"2:12525:23188","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82-21:6169:1844":{"id":"0:82-21:6169:1844","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6169:1844","glob":false}}},"0:4-2:12688:142":{"id":"0:4-2:12688:142","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:12688:142","glob":false}}},"2:12471:22024":{"id":"2:12471:22024","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12066:447","str::splitn":"2:12468:22022","self::pattern":"2:12105:8247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43673:8234","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28-22:7:1848":{"id":"0:28-22:7:1848","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1848","glob":false}}},"0:19-29:17:1840":{"id":"0:19-29:17:1840","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1840","glob":false}}},"2:12528:29015":{"id":"2:12528:29015","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4572:29015"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43850:8258","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:1840":{"id":"0:77-29:17:1840","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1840","glob":false}}},"0:5-20:32:1825":{"id":"0:5-20:32:1825","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1825","glob":false}}},"0:46:1733":{"id":"0:46:1733","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1888","`LocalPool`":"31:120:1894"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1888","0:49-31:68:1889","0:50-31:109:1890","0:51-31:136:1891","0:52-31:100:1892","0:53-31:102:1893","0:54-31:120:1894","0:55-31:125:1895"],"is_stripped":false}}},"2:12409:28994":{"id":"2:12409:28994","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12407:28993"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12483:29001":{"id":"2:12483:29001","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12105:8247","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::matches":"2:12480:2147"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43773:8265","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12531:29016":{"id":"2:12531:29016","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4570:29016"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43868:8259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:755":{"id":"0:58-21:104:755","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:755","glob":false}}},"0:65-21:1293:1829":{"id":"0:65-21:1293:1829","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1293:1829","glob":false}}},"2:12422:21985":{"id":"2:12422:21985","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:29008":{"id":"2:12499:29008","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:2412":{"id":"2:12433:2412","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43805:2438","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-21:6754:1853":{"id":"0:35-21:6754:1853","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6754:1853","glob":false}}},"2:12416:21982":{"id":"2:12416:21982","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41591:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:79-29:20:1842":{"id":"0:79-29:20:1842","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1842","glob":false}}},"0:32-21:37:1851":{"id":"0:32-21:37:1851","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1851","glob":false}}},"0:62-21:4701:1836":{"id":"0:62-21:4701:1836","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4701:1836","glob":false}}},"2:12500:29009":{"id":"2:12500:29009","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12130:8242","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66-20:68:1830":{"id":"0:66-20:68:1830","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1830","glob":false}}},"0:21-29:20:1842":{"id":"0:21-29:20:1842","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1842","glob":false}}},"0:70-21:589:1828":{"id":"0:70-21:589:1828","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1828","glob":false}}},"0:83-21:6199:1845":{"id":"0:83-21:6199:1845","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6199:1845","glob":false}}},"2:12439:22029":{"id":"2:12439:22029","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:1847":{"id":"0:27-20:131:1847","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1847","glob":false}}},"0:52-31:100:1892":{"id":"0:52-31:100:1892","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1892","glob":false}}},"2:12413:28995":{"id":"2:12413:28995","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5260:1859":{"id":"0:45-21:5260:1859","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5260:1859","glob":false}}},"0:74-21:3780:1833":{"id":"0:74-21:3780:1833","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3780:1833","glob":false}}},"2:12465:29000":{"id":"2:12465:29000","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12105:8247","str::split":"2:12453:2421","prim@char":"1:12066:447","str::split_terminator":"2:12462:28999"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43619:8266","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:1835":{"id":"0:15-25:9:1835","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1835","glob":false}}},"2:12428:26769":{"id":"2:12428:26769","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12066:447"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43521:8254","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12524:23186":{"id":"2:12524:23186","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39545:23323","Self::is_ascii":"2:12523:23185"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39545:23323","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-21:4701:1836":{"id":"0:39-21:4701:1836","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4701:1836","glob":false}}},"0:60-20:32:1825":{"id":"0:60-20:32:1825","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1825","glob":false}}},"2:12518:29013":{"id":"2:12518:29013","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12474:22026":{"id":"2:12474:22026","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2760:1832":{"id":"0:13-21:2760:1832","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1832","glob":false}}},"2:12526:23189":{"id":"2:12526:23189","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-27:0:1856":{"id":"0:43-27:0:1856","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1856","glob":false}}},"2:12415:338":{"id":"2:12415:338","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12083:1608"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12431:26777":{"id":"2:12431:26777","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12432:26791"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43825:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:1894":{"id":"0:54-31:120:1894","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1894","glob":false}}},"2:12459:22020":{"id":"2:12459:22020","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12105:8247","`DoubleEndedIterator`":"2:7517:125","prim@char":"1:12066:447","str::split":"2:12453:2421"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43569:8232","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6186:1846":{"id":"0:84-21:6186:1846","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6186:1846","glob":false}}},"0:81-21:6204:1843":{"id":"0:81-21:6204:1843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6204:1843","glob":false}}},"0:51-31:136:1891":{"id":"0:51-31:136:1891","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1891","glob":false}}},"0:23-21:6204:1843":{"id":"0:23-21:6204:1843","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6204:1843","glob":false}}},"2:12492:29004":{"id":"2:12492:29004","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-21:5258:995":{"id":"0:38-21:5258:995","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5258:995","glob":false}}},"0:71-21:5165:1837":{"id":"0:71-21:5165:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5165:1837","glob":false}}},"2:12435:26770":{"id":"2:12435:26770","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43843:8248","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6227:1858":{"id":"0:44-21:6227:1858","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6227:1858","glob":false}}},"2:12426:22009":{"id":"2:12426:22009","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12427:22010"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12424:28996":{"id":"2:12424:28996","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12072:1502","str::slice_mut_unchecked":"2:12425:28997","crate::ops::Index":"2:3072:2621"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:1831":{"id":"0:67-20:97:1831","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1831","glob":false}}},"5:5517:29675":{"id":"5:5517:29675","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2393","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2393","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7220:2608","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6755:1852":{"id":"0:34-21:6755:1852","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6755:1852","glob":false}}},"0:53-31:102:1893":{"id":"0:53-31:102:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1893","glob":false}}},"0:48-31:65:1888":{"id":"0:48-31:65:1888","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1888","glob":false}}},"2:12418:21983":{"id":"2:12418:21983","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41591:194"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10195:242","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12509:22031":{"id":"2:12509:22031","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41589:196","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12512:29011":{"id":"2:12512:29011","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12066:447","self::pattern":"2:12105:8247"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12125:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18-29:27:1839":{"id":"0:18-29:27:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1839","glob":false}}},"5:5518:8568":{"id":"5:5518:8568","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:29676":{"id":"5:5521:29676","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7487:246"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7487:246","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12110:8243","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"21:15022:2374":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"2:42893:27412":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:12934:19325":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:14514:20126":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:11921:8238":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:4960:12871":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:1924:2660":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:43986:8280":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:4501:12823":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5808:13532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:22934:185":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"21:104:755":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:4800:416":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"11:2494:2572":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:9505:136":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"21:13083:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"16:5419:15714":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"21:14475:33325":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"21:9618:33325":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"11:1882:2596":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"21:14249:33325":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"21:11352:2306":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:11886:8742":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"20:97:1831":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"21:6762:2215":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"6:1710:10266":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:12830:19320":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:5844:13536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"6:4792:12851":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:32077:8647":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"21:7031:33325":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:6600:15762":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"30:1261:20275":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"21:10248:2299":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"21:9404:2291":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:47904:8143":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:7920:134":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43495:8260":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"20:68:1830":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"21:12216:2235":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"2:20893:8386":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:6186:13583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:8036:20785":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4631:12835":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"30:1037:20284":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"2:46188:3014":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:6584:2575":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:44274:8732":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"21:5250:20195":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"16:2380:14792":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:47846:3071":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:10625:33325":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"30:1002:20161":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"2:40786:8533":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:531:20170":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:9117:2265":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"1:6568:2924":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"16:2832:14811":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:45719:3035":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:14068:20094":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:8294:132":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:9051:15864":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:7567:13049":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:5474:108":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:45820:3001":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:654:9411":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:11910:18788":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:389:30970":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:42621:27113":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:2782:2385":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:6973:28047":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"20:131:1847":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"17:14269:20108":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:483:148":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"11:1036:2589":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:47893:8142":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:7931:2602":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:12089:1664":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:9505:133":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:11742:15922":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:7708:15798":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4728:12843":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:46804:3003":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12267:18811":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:13024:19332":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:21410:2978":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:42355:8189":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:119:9032":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:22:728":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:12658:19308":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:14804:112":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"18:0:2044":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:40003:8370":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:6186:1846":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"2:10392:2732":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:46309:27258":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:7758:2559":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:11272:16142":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"17:9488:32151":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:42591:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:8239:15817":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:14401:20118":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"30:1533:20159":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:11393:33325":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"21:331:2525":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"17:9455:32156":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:13914:20081":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:10903:16056":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:624:20281":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:5626:2215":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:12911:19324":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"1:10982:21214":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"28:46:2347":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"16:2644:14803":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:15303:20198":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"21:6380:20201":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"17:10714:16092":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:9136:237":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6560:31446":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"18:113:20143":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:42883:2878":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:2918:8589":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:0:310":{"crate_id":5,"path":["alloc"],"kind":"module"},"16:6792:15766":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"11:1842:2347":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"16:6915:15771":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:3232:16053":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8031:24433":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11226:16140":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:48021:8150":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:3401:2348":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:676:253":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:6956:30083":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:4768:2796":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"30:996:20161":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"2:21181:2987":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:40358:2219":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:47522:3038":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:1737:8621":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:44574:8161":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"30:936:20275":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"21:6809:2216":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"1:926:2582":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:9102:15868":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"31:68:1889":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"6:4775:12849":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"30:1475:20165":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"2:47770:3016":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"21:13415:2342":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"2:46234:3069":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:12237:18809":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:39:2190":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"17:261:32167":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:41377:2761":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:7318:15779":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:7162:25931":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"5:3212:2593":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"21:10672:33325":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:3888:14884":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:1075:15946":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:12701:158":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:1501:10245":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:8996:2920":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:817:2579":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:9010:20770":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"18:507:2318":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:12037:2560":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:7544:13046":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"21:7086:33325":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:2366:204":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2170:8610":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:11845:16155":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:4417:15317":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"9:52:14598":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:6795:8311":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"8:0:2035":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"13:110:31042":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:11963:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"31:102:1893":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"16:6318:15743":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"31:65:1888":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"11:2487:30978":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:13793:33325":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"2:3248:139":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"21:8959:33325":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"5:7237:2599":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"21:6920:33325":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:927:2258":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"5:1257:2587":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:42219:2916":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2835:8171":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"21:10974:33325":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"30:1072:20270":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"1:8895:2938":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:13897:20079":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:12079:791":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13966:20084":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:30462:27254":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:6633:13962":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4992:2855":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:10042:33325":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"21:6438:20199":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"17:9711:32137":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42854:27408":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5727:15724":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:12943:146":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"18:96:20142":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:4078:2790":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"21:7512:33325":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"18:521:20166":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:11179:2898":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:7624:14534":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"21:9338:2271":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"1:1779:2627":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"28:42:2575":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"1:4731:2820":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"5:3171:2347":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:14024:20090":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:2896:8588":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:5858:2371":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:1127:14703":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"21:12119:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"16:2670:14804":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:47662:3044":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:21311:2979":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"27:72:20253":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"24:190:2214":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"17:12645:19307":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:7287:14344":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:30262:8307":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:22362:2775":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1521:10248":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:9355:2290":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"6:1703:2806":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:40569:2311":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"21:15371:2272":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"6:4488:12821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:11151:16138":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"21:9387:33325":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"1:8227:2290":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:7387:2573":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:9515:2292":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"17:10059:15945":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:3217:29990":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"6:4954:12870":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13148:19340":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"30:901:20272":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"21:9719:33325":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"30:1203:20161":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"21:9100:33325":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:40297:2295":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"30:1190:20275":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"5:1482:2579":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4815:12854":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"21:6755:1852":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"17:11710:15920":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"21:13528:32320":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"5:4363:30075":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:1067:2589":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:30013:2772":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:1922:8177":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:11407:15908":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:43430:8228":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:7651:15795":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"21:2568:32719":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"17:10430:16033":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:40093:8363":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:22802:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:21328:2708":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:3669:30072":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:11562:32276":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"30:1574:20163":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5892:13538":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"18:652:2318":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:14920:2434":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"20:92:2708":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"2:22075:26768":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:9071:15778":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"21:6169:1844":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"1:11647:14746":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:10139:15969":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:10800:26020":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:10292:15903":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:6385:178":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:1650:10260":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:44562:8163":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:1591:10255":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:39178:8596":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6002:13546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:39989:8368":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"11:357:30973":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:4997:12875":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:12997:19330":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:11111:16109":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"16:6279:15742":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:4511:12824":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:7532:13044":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"6:7561:13048":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:9184:2963":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8363:2848":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:5420:2718":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"27:371:2930":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"2:44362:8750":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"21:12885:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"11:1562:14706":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"21:15434:32317":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"1:1568:2578":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"5:5973:2915":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:9574:32150":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"6:1912:10431":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"21:4431:20186":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"21:7178:2222":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"2:39297:219":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:9959:15944":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:2555:32364":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"1:5156:206":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:47873:8140":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:10185:2708":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:39351:8598":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:43825:8250":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:12899:2343":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"1:4157:25934":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5970:13543":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:40140:2668":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:11342:20778":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"21:12369:2238":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"1:646:2555":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:4667:21319":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"17:9852:15930":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"21:5206:1854":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:43439:8231":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"5:7403:104":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:8367:2850":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:9295:33325":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"5:4002:2371":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:495:9351":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"16:2722:14806":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:40237:2619":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10520:16036":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:9487:2450":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2360:197":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:1895:2659":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4968:12872":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"18:515:20169":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:14184:33325":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"21:11166:33325":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"17:11295:16143":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"14:215:14722":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:11572:2770":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12071:1470":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:46212:3063":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:39193:216":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:4806:15442":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"18:671:20160":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:62:8978":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1734:10268":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:8154:15812":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:3201:24095":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:7406:20786":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:41944:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:46914:3064":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"11:666:2347":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:11523:32314":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"21:13238:2336":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:41657:2574":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:9933:15953":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:5443:2891":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"11:298:30966":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"11:785:2371":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"21:9153:33325":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:13816:20072":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:12154:18803":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:3948:2718":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"17:9328:2731":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"30:1169:20273":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"17:9207:15895":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"11:2394:2578":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:10573:2748":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:11006:21126":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"10:0:2037":{"crate_id":10,"path":["adler"],"kind":"module"},"17:9701:15904":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:2366:2688":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:40827:2349":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:11635:8692":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:2305:14788":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"17:9372:15898":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:533:9355":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:10135:24431":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"2:42646:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:1671:1151":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:11511:2769":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"21:9632:2294":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"2:4067:8170":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4934:12867":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:9217:28254":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:3653:2575":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"24:12:20181":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"2:42862:8394":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:10850:123":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:13174:19342":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:14378:20117":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"21:2774:32313":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"foreign_type"},"1:1986:199":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41343:2759":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:45790:2995":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"11:2351:2575":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:41905:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:40802:8535":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"26:53:33856":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"2:40268:8544":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"21:12016:2233":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"21:15037:2437":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"30:1482:20158":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"1:1590:2596":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"5:3142:97":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:39131:8175":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:2947:8595":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13113:19338":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:22670:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:12280:18812":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"21:6948:2224":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"21:6270:2324":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"16:7722:15799":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:7897:2706":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:4889:15453":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:46880:3015":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:7520:13042":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:2991:8174":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"17:11215:16106":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"1:7011:21783":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12473:16096":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:11086:16137":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:7862:15805":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:40154:2670":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:2883:8583":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:10978:2648":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:5760:15726":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:10637:16043":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:14282:20109":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:40033:2549":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:12111:18800":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:10456:16005":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:4480:12820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"18:736:20157":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:3043:2390":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"21:6733:32265":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"1:3125:2750":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:21959:2976":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:4435:2535":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"16:7128:15778":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"16:3461:14822":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"21:13719:207":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"17:10575:16038":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"21:15480:32258":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"6:5994:13545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"21:6415:179":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"31:136:1891":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"5:6824:8313":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"21:11069:2312":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"6:4829:12856":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:22272:27165":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:5369:2292":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"21:7977:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:3539:2726":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:8713:15884":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6604:9233":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:7743:2240":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"20:27:2708":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:9985:15942":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:5634:15718":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:11971:18791":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:43367:8223":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:4597:2838":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"27:441:2935":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"17:14335:20114":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"21:10362:2217":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"21:12859:2329":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"2:12723:2244":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:8606:2866":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:6205:8546":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"5:4985:2718":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:41360:2760":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:2894:21802":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"11:1855:2578":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:46387:27202":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11934:18789":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"16:2406:14793":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:45545:3028":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:8825:15887":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:12091:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:2763:917":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"foreign_type"},"21:14110:33325":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"17:10616:16041":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"14:40:18789":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"14:221:14723":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"27:499:20255":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"6:4943:12868":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:43755:8264":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:4862:15450":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:6832:33325":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"17:1184:15954":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:39973:27262":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:11547:15914":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:44350:2968":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"21:11938:2231":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"2:42609:113":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"21:9453:2314":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"17:14522:20127":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10227:15982":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"21:15134:2439":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"2:46614:3043":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:5049:15493":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"21:14599:2429":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:10465:33325":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"31:109:1890":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"17:10949:16051":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46410:27159":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4753:12846":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:5384:15712":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:6865:13974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:4462:8344":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"21:14986:2435":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"17:12074:18797":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12750:19315":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8183:1835":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:12125:8244":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:40779:28050":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:10240:15949":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:9086:15714":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4373:12807":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:3763:2768":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10788:16095":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:13751:33325":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"16:2969:14816":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"21:13165:2335":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"2:6808:8542":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11951:18790":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"14:187:14721":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:7488:2392":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"6:4900:12864":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:5661:15720":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14118:20100":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:44481:230":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:4400:12652":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6703:10372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12437:19297":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"21:12294:2234":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"6:1558:10252":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"21:9934:2298":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"21:6756:1849":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:40315:27335":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:7479:159":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:7975:28255":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"21:15316:32344":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"2:39209:213":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"0:46:1733":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"5:7450:2665":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"28:76:33868":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:2214:133":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:10474:8225":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:22637:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:5866:15729":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:5712:15723":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:2303:14707":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:12067:1624":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:6759:13967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:10585:8233":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:7269:29992":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:8765:15885":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"21:15152:2441":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"5:1514:213":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:6735:13965":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:5660:2930":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:1718:10267":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:45565:2993":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:14058:2575":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"17:12790:19318":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"18:481:20167":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:11082:26153":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"11:796:2578":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:3032:14817":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:2534:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:7501:8289":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:11074:16136":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:10840:134":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"24:9:20182":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"21:15213:2447":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"15:306:14738":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:2243:28517":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:44183:8269":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:14056:20093":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:8973:2937":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:7517:125":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:2012:15985":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:39545:23323":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"2:10435:8238":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"21:9814:2215":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:30832:198":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:40060:8365":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:21957:2708":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:13286:19349":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:7621:15794":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"9:450:14579":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:0:528":{"crate_id":2,"path":["core"],"kind":"module"},"17:11124:16108":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:22703:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:2178:15979":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:6324:178":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"2:40246:2290":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:3183:29978":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:2669:2663":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:46020:3042":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6569:15760":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"21:13207:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"2:40112:2669":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:4613:15369":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:5868:2718":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"5:7259:2600":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:45879:3062":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:41674:2863":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:7590:13052":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"6:6883:13975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:5905:13540":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8879:2900":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"30:1439:20143":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"21:15014:2436":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"16:7090:31437":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"6:4494:12822":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:641:2554":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:21139:8610":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"2:9754:151":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"6:6037:13550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:7428:33325":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"2:43719:8263":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:7475:138":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:11507:15912":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:9539:8181":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:9564:15901":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:5423:2890":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4643:12836":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:8134:15811":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:5599:2896":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:6458:2921":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:45635:2994":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:1523:2610":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"21:15413:32316":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"17:13906:20080":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"17:11389:15907":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:41726:208":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:5653:223":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:14308:20111":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:6754:1853":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:21388:2708":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:13693:20054":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:32016:2901":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"27:136:2930":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:45611:3034":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:41866:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:2257:100":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:10278:15980":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"21:14423:2379":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"1:8311:2762":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:4:1075":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:14734:33325":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"2:43329:8221":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:7342:31464":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"5:7476:8202":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:8345:2819":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"21:424:1827":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"9:237:2878":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:9547:8187":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"16:7828:15804":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:9512:2705":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:43655:8236":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"30:888:20271":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"21:5258:995":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"16:7284:2863":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"5:6814:8312":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:2766:14808":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1507:10246":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:11473:15910":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"21:13363:2340":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"6:1537:10250":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4468:12818":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:1496:10244":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:2223:2418":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:11367:16111":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"1:4411:2810":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:14090:20097":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"1:8318:2817":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:11529:32376":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"17:13876:20077":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:6346:15745":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:14076:20095":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:2582:26181":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"18:766:20158":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:49866:2991":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"20:32:1825":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:43449:8229":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:0:2043":{"crate_id":17,"path":["object"],"kind":"module"},"16:7269:31466":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:10588:16039":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12983:19329":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:9517:21801":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:1682:10263":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:6960:15773":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12172:18804":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"7:78:14557":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:0:1494":{"crate_id":1,"path":["std"],"kind":"module"},"17:10440:16034":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"5:6465:2371":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:2596:14801":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"16:2933:14815":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:9312:2644":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"6:6009:13547":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"11:1635:30983":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:7573:13050":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:45990:3036":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:9146:155":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:12208:18807":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"16:3797:14841":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"25:0:1834":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"1:2216:2685":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:7934:2605":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:6226:15739":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:922:2581":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:32164:8559":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:2844:2964":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:7254:2283":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:39253:218":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:7526:13043":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"9:357:14595":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:42901:27390":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:40367:8545":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:8115:15810":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:11062:16135":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"16:2810:14810":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:40306:2296":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"21:13039:2332":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"21:14545:33325":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"21:14082:2372":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"16:6879:15769":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"21:15161:2442":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"6:6622:13961":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:1760:8620":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:4282:8332":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"16:6352:15746":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"21:12810:2328":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"6:483:9349":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"6:6820:13970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:21089:2980":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"21:10688:2304":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"17:9790:32134":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"11:2473:30977":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:4056:2786":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5995:15734":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:4519:2821":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:7715:2531":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11535:15913":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:9063:20751":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:41589:196":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:9912:15934":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:14013:20089":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:2150:16019":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:43417:8213":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:6171:209":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:22355:28233":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:12080:792":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:44051:8282":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"11:2461:30976":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:2546:260":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:14420:20119":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:3198:24108":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9650:15903":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"21:10305:2216":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"17:14478:20124":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:7792:2648":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:10698:16071":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:8953:15891":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"5:3800:2578":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:12724:19313":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:43101:27693":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"21:338:2229":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:14040:2347":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"5:778:98":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"27:0:1856":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"21:8530:2244":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"21:7359:2223":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:15382:2275":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:14049:2574":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"17:13162:19341":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"28:0:2180":{"crate_id":28,"path":["slab"],"kind":"module"},"1:9141:238":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:10917:33325":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"21:9592:2293":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"17:8848:15888":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:6415:15751":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"21:10599:2305":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"21:10759:33325":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:15507:32304":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"21:15450:32324":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"6:4759:12847":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5322:15694":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"21:10103:33325":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"1:12084:1605":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"21:6043:2324":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"5:2962:29959":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:12184:18805":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"5:7375:2572":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:7938:8539":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:12794:32284":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"21:12241:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:12465:16098":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:8659:15863":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"21:12478:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"2:6216:2380":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:5017:15485":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:2394:2699":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"21:10064:2289":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"17:11306:15920":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"24:169:2212":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"17:12043:18795":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:40013:8371":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:2472:14796":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:4846:220":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:5049:12879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:11269:155":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"17:9350:15865":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:14042:20092":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"21:7276:33325":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:42637:72":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"27:434:20256":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"20:82:2171":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"21:5943:2348":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"21:4267:2355":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"21:6845:2219":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"21:12842:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"17:10370:15978":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"21:10996:2313":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:39961:8369":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:8460:2241":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"6:5056:12880":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:475:9348":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:7953:2740":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:14149:2375":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"1:6672:236":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"11:1846:2575":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"21:13516:32342":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"21:11330:33325":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"16:6968:15774":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"17:400:15880":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:358:2544":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"27:124:20237":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"30:911:20273":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"11:841:2584":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5648:15719":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:10193:21327":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6944:31226":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:4053:15001":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:4892:12863":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"21:15172:2443":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"2:43701:8262":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"11:2286:2589":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:43773:8265":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:10778:2302":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"6:4683:2779":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:14316:20112":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:3958:2781":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:5814:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"21:13108:2337":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"2:40439:8547":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:46258:3070":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"5:7220:2608":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:5830:15728":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13422:20055":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:9051:24448":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:4287:8333":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:21396:2977":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7884:15806":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:10084:15940":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:7660:15796":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:43859:2549":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:6277:2930":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:14163:20105":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"31:125:1895":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"2:43086:8722":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:3273:28457":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"18:538:20171":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:42686:74":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:13487:20057":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:2384:2694":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"11:822:2582":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:5596:2894":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:2837:109":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:43850:8258":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"24:15:20183":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"5:2970:29963":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:629:28474":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:7907:2703":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:2865:8581":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:30860:8386":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:12062:18796":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:9535:124":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"5:2966:29961":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:12088:843":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:9436:33325":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:11847:8743":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:21494:2974":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"6:4655:12837":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:12711:19312":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:43459:8230":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:11038:33325":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"21:335:32717":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"2:40124:28025":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:15193:2445":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"17:9607:15902":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:884:2577":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:555:9358":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:11186:8227":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:1546:10251":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:7299:28566":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:10795:21302":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"20:143:20180":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"2:47864:8139":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3040:2389":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:40187:2684":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:80:20141":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:13758:20053":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:11088:26150":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:39946:2549":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:10343:2347":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:10980:15903":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6376:15748":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:13723:20068":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"21:10437:2219":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"21:4037:2247":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"18:719:20156":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"5:878:2598":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:15118:33325":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"21:14796:2370":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:14899:33325":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"21:5669:2350":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"16:3049:14818":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:8417:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"11:122:30972":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:7229:2575":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"30:1526:20168":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"2:4639:8357":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:41406:27204":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"21:11281:33325":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"2:8607:2865":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:2709:2324":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"31:120:1894":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"16:4344:15268":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1576:10254":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:5790:13531":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"16:7544:15789":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:14156:20104":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:4406:8342":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:12090:1211":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:4406:12811":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"27:11:33859":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"16:2574:14800":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:1842:2645":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:12077:689":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"21:15309:2525":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"2:42581:27205":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"6:5864:13494":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:40338:2217":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"21:11474:2320":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"21:12633:2239":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"6:6726:13964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:3022:2176":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:11654:14746":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:7606:26151":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:12015:21044":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"17:8686:15883":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:5020:12877":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:9749:2296":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"1:5774:2917":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:6545:15759":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"6:4823:12855":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:5325:30072":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:40107:103":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:12176:8271":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10661:16090":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:42664:132":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:15552:32345":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"16:6189:31438":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"21:15377:32306":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:4022:2785":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"21:13764:2259":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"5:3178:2594":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"21:9218:33325":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"6:527:9354":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:7903:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"30:980:147":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"16:7613:15793":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:7582:15792":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"30:1274:20161":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"1:11250:21106":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:43935:8277":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:8337:2767":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:1293:1829":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"21:12568:2331":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:40835:8538":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"21:11252:2316":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"11:2085:2589":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"21:7647:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:7796:20536":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:10805:2702":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:2223:30039":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"21:10215:33325":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:8907:2257":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"1:3865:2770":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:41827:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"11:680:2574":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:4066:2787":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"6:4433:12814":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"21:12499:2330":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"16:5121:15517":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"30:1126:20161":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"6:501:9352":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:5373:2254":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:22197:27385":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:2219:2413":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:12086:18798":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:22326:27119":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:3288:8173":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:9993:26181":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:10359:108":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4394:12810":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:43278:28049":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:9541:33325":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"16:4497:15349":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"30:1394:20167":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1302:2590":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"6:6640:2850":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:3600:14823":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"11:759:2576":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:39358:8316":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"6:4805:12853":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13826:20073":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:2131:2521":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:8167:15813":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:44325:126":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"21:11906:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"21:13875:33325":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"1:10114:2638":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:44532:3110":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"21:402:26196":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"1:3994:2782":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:9201:24461":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"21:10353:2310":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"21:9243:2267":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"1:3236:2747":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:9233:26015":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"11:2467:27295":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:1058:2588":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:1411:2347":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7677:213":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:4826:2801":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"31:38:33926":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"11:423:30991":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"21:13392:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"1:11232:2712":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:10626:8236":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:13710:20067":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:4259:2815":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:9867:15931":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:13659:2348":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"16:2526:14798":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"3:0:472":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:1751:27256":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:3514:2450":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:12110:8243":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:43347:8224":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:2744:14807":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:6332:15744":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:4728:2847":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:4351:8340":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"30:1219:20271":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"21:12405:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"16:7006:15775":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:10340:15984":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:12422:19296":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7736:15800":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"21:12442:2333":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:14127:2373":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"17:11639:15918":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:2929:132":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:11325:26192":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"21:13809:2352":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"5:5994:8952":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"30:1010:20162":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"30:958:20279":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"5:2690:28610":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:10561:16003":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:12698:19311":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"21:14652:2430":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"2:22868:183":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"21:2760:1832":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"21:15251:33325":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"2:3033:2387":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"12:0:2039":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:21125:2982":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"21:14747:2290":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"16:2450:14795":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:1464:2576":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:41640:8601":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:7885:2705":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:13055:19334":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:9978:33325":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"2:12331:115":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"21:11749:2323":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"17:10420:16032":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6811:13969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"17:12252:18810":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:42348:8182":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:7694:15797":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:12078:794":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:42061:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:4922:12866":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:7067:31380":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"21:7116:2220":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"1:2568:2431":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:4462:15338":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:7945:24104":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:3409:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4621:12834":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:43868:8259":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:9746:147":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:4320:12804":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:2254:99":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:1426:2574":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"30:1451:8245":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"27:187:20243":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"21:14013:20185":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"5:7283:2575":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:4346:12806":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:2537:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:863:2575":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:21390:2975":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:9021:2525":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:5135:2915":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:6835:13971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:6613:13960":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"11:1145:2590":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"17:13451:20056":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:2907:14814":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:2942:8594":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:11213:8749":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:42022:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:6569:32298":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"17:8895:15889":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"21:7141:33325":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:15465:32274":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:13188:19343":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:9030:81":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:4234:2347":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:3076:2622":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"11:344:30987":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"21:13934:33325":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"6:6580:9399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:32056:15817":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"2:11665:8251":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:2368:2689":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:6686:10374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:7555:15882":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:22213:27211":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:11193:2899":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:2903:8585":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:32070:8341":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"16:4774:15434":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:40793:2351":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:11000:16059":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:6790:13968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"21:11788:33325":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"16:6401:15750":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"0:0:1922":{"crate_id":0,"path":["futures"],"kind":"module"},"27:154:2936":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:11651:8694":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:11628:8157":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:11205:21036":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"9:486:14578":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:13981:20086":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"17:14434:20120":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:3037:2388":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:10511:26184":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"17:13611:20062":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13739:20069":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"21:8228:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:13228:19346":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12305:18814":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:7670:2546":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:2797:2536":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:44278:8734":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:6499:15756":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"6:6720:13963":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:10672:16091":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:3234:2746":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:8833:2897":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:3594:2574":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:45689:3030":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:6151:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:7379:33325":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"24:296:33853":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"6:5079:12883":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:30228:2607":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:8020:2231":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"2:5568:2297":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"21:8264:2235":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"6:6741:13966":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:636:20286":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:1473:2577":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:44270:8729":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"2:43569:8232":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"9:177:14684":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"21:14567:2428":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"11:101:30975":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:6332:3112":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:895:2347":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"21:9893:33325":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:7265:9309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:8203:2232":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"2:30268:8571":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:3565:16076":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"21:7826:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:13202:19344":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:3441:16058":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"30:1544:20160":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4669:12838":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:12073:1589":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:8851:2898":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:14004:2574":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"1:8146:2707":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:3325:8176":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:8237:2311":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:5110:24434":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"27:146:223":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"16:5435:31390":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4786:12850":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:4333:12805":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"15:0:2041":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40048:8364":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:11375:20749":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13778:15948":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:15086:2438":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"15:394:14749":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:11405:21104":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"6:6171:13582":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4721:12842":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40067:8366":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:8621:33325":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"11:1876:2595":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:13340:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"1:4070:2788":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:41526:2762":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:5816:31244":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:14173:20106":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:14469:20123":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:3315:14821":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:2170:28539":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:46042:3048":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:44489:210":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:10916:16054":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:47724:3065":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:6844:15768":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:10603:16040":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:41717:8679":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"5:7420:2667":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"30:1240:20273":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"21:15353:33325":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"5:7320:2575":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:7054:31442":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"30:1182:20274":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"1:10133:21800":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"21:12928:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"1:10285:2903":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:4719:15427":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:7669:2708":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:11719:15921":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:41734:229":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10628:16042":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"0:56:1131":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"16:4986:15478":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:10570:2746":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"21:589:1828":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"21:14964:33325":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"17:13632:20063":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:3698:2765":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:12688:142":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:12087:1604":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:4949:15465":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:3274:2748":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"11:731:2581":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:2927:229":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:3072:2621":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2628:132":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:1596:10256":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"10:44:14689":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:44150:8287":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"30:1161:20272":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"1:534:2526":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:20936:28269":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:41320:164":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"6:4418:12812":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:5363:15711":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"21:7489:158":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"5:5788:254":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"14:202:8288":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:2461:28613":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"28:55:2574":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:4210:8203":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:46356:27207":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:7474:15783":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:23000:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:10112:15967":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"21:14320:33325":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"2:47808:3050":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:11153:8226":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:43537:2731":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:9886:15932":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:8440:2877":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"21:9658:33325":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"17:13101:19337":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:10366:15991":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:1764:654":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:4296:12802":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:10776:2849":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2501:2429":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:4934:2845":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:9896:15933":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:1840:2644":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"21:14711:2432":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:9762:32142":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"15:327:14742":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:10869:21116":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:6051:13552":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"5:4032:30072":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:2321:14789":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"30:1027:20283":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"2:2497:2708":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:12744:32283":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"5:1011:30072":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"21:4345:32365":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"2:9537:8182":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:1931:700":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:6027:8552":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:505:2521":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"21:23:2188":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"17:11788:16153":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"21:11870:2230":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"17:13922:20082":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:2049:2611":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:6174:3111":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:11423:21432":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:622:2551":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"21:9680:2295":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"21:12094:2232":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"21:8736:2254":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"2:22249:28033":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:2854:8579":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:8206:2384":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"21:8781:2255":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"28:208:2589":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"16:7436:15781":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:22967:182":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:9131:179":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"21:7066:2218":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"17:13567:20060":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:8422:2859":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11448:15909":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"21:13725:2248":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"11:2074:2588":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:2930:8591":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:8764:33325":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:12513:19300":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"21:8988:2259":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"17:10410:15998":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"21:11690:33325":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:11316:16134":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:43551:2732":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:10818:21105":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"21:15182:2444":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"1:7694:2534":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"21:13668:2349":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"2:2849:2966":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:47983:8148":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:5612:15717":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:8978:15892":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:907:2578":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:1639:10259":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:690:20162":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:7597:31254":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:2960:29962":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:40817:8536":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:9445:15899":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12671:19309":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:6261:15741":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:12373:19295":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:11048:16123":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:46850:3009":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:43601:8267":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"30:1428:20142":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"1:4943:2846":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:12543:19302":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:1525:14704":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4989:12874":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12082:789":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"5:1492:2580":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:5808:2919":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:6929:15772":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"17:14499:20125":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:8599:2883":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:6924:26188":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:6849:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:43521:8254":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:12064:398":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4690:12839":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:1585:2595":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"30:1084:20272":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"16:7568:15791":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:11348:2904":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:9072:2264":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"2:11227:8220":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"16:3830:14850":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:11815:16154":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:2324:203":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:3720:2435":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:10547:8232":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:40415:2308":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:782:2304":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"30:1018:20282":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"16:2504:14797":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:2498:8390":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:10494:16008":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:4847:849":{"crate_id":2,"path":["core","iter"],"kind":"module"},"21:11826:2225":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"16:5588:15716":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:12959:19327":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"21:8882:33325":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"5:3238:2596":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"21:10808:33325":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:41785:2574":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:5942:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:4167:8348":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"27:127:20238":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"2:40390:8550":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"28:60:2371":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"17:256:32147":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:2172:8611":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:10195:242":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6467:15754":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:47968:8147":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:13135:19339":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:5915:13541":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"16:5939:15731":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6386:15749":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:5030:12878":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"21:11810:2326":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:12098:18799":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"21:11130:2222":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"21:13454:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"2:41793:2575":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5528:2893":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4745:12845":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:2540:156":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"9:426:14581":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"18:609:20284":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:10591:2307":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"2:44524:3109":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"30:1404:32191":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"27:140:20239":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"16:6901:15770":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:44286:8737":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:685:114":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:47998:8149":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:9028:20597":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:1781:2628":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:638:2553":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"21:15285:2451":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"2:43619:8266":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:8490:2878":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:12998:2601":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:9549:8188":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:207:8180":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:2859:8578":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:10875:2309":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"1:853:2574":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:13546:20058":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"16:2864:14812":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:9789:8392":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3655:14824":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"18:599:20283":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"11:324:30985":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:43972:8279":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:2783:8172":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"21:4478:20188":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"5:1442:2575":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:2428:14794":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6583:15761":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"7:31:14550":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:13667:20064":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:14839:33325":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"11:2165:14697":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:8269:2766":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:42180:94":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:21225:2988":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:1273:2589":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:5409:2889":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:13838:20074":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:40197:2683":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:1817:2638":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:45759:3047":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:4799:12852":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:8195:15815":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:6663:30072":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:8634:222":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"17:12810:19319":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:10284:33325":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"17:9070:15713":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:11810:8741":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:7763:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:8289:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:9165:2712":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"11:1850:2371":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5963:15732":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:489:9350":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4561:12830":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:40329:2216":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:5336:124":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:8513:2879":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:3276:2749":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:6204:15738":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:12703:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"18:727:20164":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:44140:8286":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:41549:2763":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:14134:20102":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:42100:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:5673:15721":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:8263:2767":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8957:2934":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:4847:12858":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:43338:2316":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:9945:15949":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"17:14536:20128":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4451:12816":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"30:1564:20162":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:20921:28058":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:25849:269":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"11:1092:14702":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:4734:12844":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10197:15997":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:10507:16006":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"21:14662:2431":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:2329:129":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12598:19305":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:6494:2927":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:13973:20085":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:699:20163":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:13311:2339":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"2:41707:2864":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:5897:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:13685:20066":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"7:0:1654":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6222:20777":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:39275:217":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"21:12319:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:2785:248":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:12775:2247":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:43357:8222":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:3518:2371":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:1557:2347":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:14033:20091":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:7474:33325":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"6:4441:12815":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11381:16148":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:46136:3002":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"21:8595:2248":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:2924:8590":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"21:7441:2227":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"1:871:2576":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:9015:110":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"21:7873:2230":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"1:6624:2928":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:3315:2745":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:15219:2448":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:12130:8242":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:13706:33325":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"21:15269:2449":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"1:840:2347":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:6839:2969":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:6190:26195":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:7601:13053":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:12119:8245":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"21:4533:26186":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"6:5833:13535":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"17:10478:16030":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:11162:16103":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:12136:18802":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"11:693:2575":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"5:5631:8311":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:12621:19306":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:10367:2574":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"21:6199:1845":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"11:829:2583":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:327:2228":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"2:2543:137":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:3532:2446":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:2696:14805":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"21:4601:2260":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"21:15367:2273":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"18:548:147":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:5165:1837":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"21:7311:2221":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"2:2934:8592":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:5851:13537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12765:19316":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:11071:26196":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"29:25:1841":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"21:8142:2233":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"21:13144:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"16:8050:15807":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"21:10003:69":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"30:1511:33906":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"1:5667:2931":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:9390:133":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:11586:15916":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:12971:2345":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"2:43834:8249":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"30:1064:20286":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"30:0:2044":{"crate_id":30,"path":["memchr"],"kind":"module"},"30:1493:33913":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"6:5752:13466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"17:13676:20065":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:2550:259":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:46090:2996":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"21:15276:2450":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"2:7194:2350":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:11337:16145":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"5:4426:30075":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:2382:2693":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:9543:8190":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"5:7328:2575":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"9:330:14635":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:2788:14809":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:8244:2731":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"16:7554:15790":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:8174:2350":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"30:880:20270":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"16:5403:15713":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:11390:20746":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"15:288:14737":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"21:6900:2215":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"2:47945:8146":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13085:19336":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:6542:32375":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"11:2368:2371":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:40217:8212":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"30:924:20274":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"2:22128:26766":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:11304:2317":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:43105:8215":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:3260:8328":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:39952:8331":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:44163:8268":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:43404:8212":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4523:12825":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"6:7293:14345":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:11640:24442":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:11870:8740":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:47884:8141":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"5:6098:2718":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:9660:32170":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:10640:8234":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"21:37:1851":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"6:4461:12817":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:44306:8749":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:9035:88":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:30356:27158":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"21:13677:2350":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"31:100:1892":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"1:5853:2562":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:12888:19323":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"30:1042:20285":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"21:15225:2311":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"16:2618:14802":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:14126:20101":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:4592:12832":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"30:973:20162":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"1:8941:2936":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:13019:2346":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"2:45741:3041":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40808:2348":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"21:14138:2374":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"17:9617:32168":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"11:1869:2594":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"30:1052:20281":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"5:4194:2718":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:123:9033":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:44545:173":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"21:12951:2344":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"11:2479:30981":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:897:2371":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"21:11425:2319":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"16:6425:15752":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"21:15030:30937":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"17:14110:20099":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:4020:28284":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:21847:28061":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:7769:2592":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13244:19347":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"21:5260:1859":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"21:13901:2354":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"21:9174:2266":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"1:8839:201":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"27:470:20252":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"5:7249:2371":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4853:12859":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13554:20059":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11617:15917":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:9531:32135":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:6361:15747":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:2209:16004":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"13:0:2033":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:8588:2882":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"21:10125:2318":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:12065:2884":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:5999:2930":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"14:165:14714":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"16:6893:31387":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2881:14813":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:21087:2708":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:23447:239":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"21:8167:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:5508:2718":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"9:507:14582":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:41490:28018":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"21:8518:2243":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:542:9356":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:4859:12860":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"24:309:20194":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:41513:2771":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"21:10948:2311":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"17:14083:20096":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"14:160:14713":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:7442:8540":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:6243:15740":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:4821:27802":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:47919:8144":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"31:0:1887":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"6:5878:13495":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:4425:12813":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:30298:27206":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"1:4497:2820":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"6:4573:12831":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"16:7015:15776":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:5905:15730":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8329:2809":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2938:8593":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:1076:2590":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:9324:2269":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"6:7614:14533":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:42141:87":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:548:9357":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"22:7:1848":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"3:234:229":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:9541:8189":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9780:15906":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:6531:15758":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"21:9555:113":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:4136:8347":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:2141:29984":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"21:9873:2215":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"6:1604:10257":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:3735:2611":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"21:21:1114":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"17:10726:16093":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:3065:14819":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"21:12192:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"6:6030:13549":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6059:30392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"21:14688:33325":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"1:8572:2881":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"11:1072:30990":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:4611:12833":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"16:5982:15733":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:22289:27123":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:11191:15918":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:563:9359":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:2160:631":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:8389:2798":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:8794:15886":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"17:10383:15977":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:14448:20121":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:39092:8327":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:7587:8308":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"21:6968:33325":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:13828:2353":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:32063:27741":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:10878:21094":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"21:7525:2239":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"6:4309:12803":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:4187:2812":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:1044:2587":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:1514:10247":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:12048:21132":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:4074:2574":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"27:181:20242":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"1:1573:2593":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"21:8582:33325":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"16:4921:15461":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:7024:8531":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:8582:2347":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"5:7512:8290":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:2359:14791":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:5781:2918":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:7462:15782":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:10494:2297":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:12846:19321":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:7053:21738":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:21835:2970":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"6:4978:12873":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:10646:16089":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:14510:2380":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"6:6092:13554":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13949:20083":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:4653:2785":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"18:614:20285":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:14346:20115":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:3232:14820":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:11393:132":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"18:681:20161":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:11233:33325":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"21:7006:2219":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"29:27:1839":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"16:5574:15715":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:22388:2776":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10468:2897":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:7438:8541":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"5:7434:28025":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"28:217:2587":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"21:11451:33325":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"6:507:9353":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"21:57:1855":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"21:10729:2301":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"2:8715:8243":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"21:8350:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:12750:207":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:1697:10265":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"16:4641:15373":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6696:14732":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:8928:2933":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:21743:2989":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"30:1554:20161":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:13683:2351":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"21:10387:33325":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:44078:8283":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"30:142:20277":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"21:15519:32303":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"2:21137:27881":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"21:13280:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"1:12072:1502":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"21:9494:33325":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"16:5743:15725":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:44290:8735":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:9223:26013":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"6:4877:12862":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:11872:16156":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"18:564:20172":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:491:32191":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:0:2042":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:12076:687":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"21:7572:32297":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"21:6753:1850":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"2:41802:198":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8323:2818":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:7689:2532":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:4379:12808":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:46644:3049":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:7503:15785":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:14100:20098":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:14355:20116":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:11761:15923":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:11490:15911":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:5696:15722":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"11:2238:2587":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"5:4393:2718":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:6454:2351":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"21:7208:33325":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:8485:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:20953:28266":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:913:2579":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:536:31142":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:10547:16037":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:588:9363":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:8250:2732":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:12065:995":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11573:15915":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"26:37:33854":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"21:8556:2246":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"1:2604:2733":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:39233:215":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7523:15787":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"29:0:1838":{"crate_id":29,"path":["futures_io"],"kind":"module"},"18:574:2318":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"30:1503:20166":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"16:8097:15809":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:14324:20113":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:9106:20775":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"1:2409:1859":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:5459:2892":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"18:644:2318":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:4195:2813":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:7538:13045":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:39372:8324":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"21:13502:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"21:4948:2377":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:40429:2309":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7360:31404":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:45657:3000":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"21:8524:207":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"2:3170:214":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:45860:3013":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:932:2583":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:15:2150":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:0:873":{"crate_id":6,"path":["libc"],"kind":"module"},"17:14296:20110":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"21:10713:33325":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:8817:33325":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:7566:21776":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:12066:447":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:1825:181":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:574:9361":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:20906:28058":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:7764:2591":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:14001:20088":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10023:15904":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"21:11852:33325":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"1:4016:2784":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:13274:15920":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"29:20:1842":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"21:13650:2347":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:21258:2983":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"16:6083:14759":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:5063:12881":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:4179:2811":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2840:8558":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"21:10853:33325":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:2832:2386":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:8605:2561":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:1632:10258":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:9921:15959":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:22835:186":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:3429:2718":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"21:14778:33325":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"6:6043:13551":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"21:12041:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:8041:2381":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:43805:2438":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:12081:793":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:9277:15897":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:949:2585":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:9222:27401":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4700:12840":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:40347:8551":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"9:393:14580":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:8274:2758":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:44003:8281":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:1051:14701":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"21:15204:2446":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"2:6211:28235":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:44471:222":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11886:18787":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"21:15069:33325":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"2:40074:8367":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:9752:15905":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"21:11195:2315":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"1:11551:2768":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:4849:2795":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:1672:30072":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"21:8081:2237":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:44298:8730":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:6456:15753":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"21:15294:2452":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"17:9998:15941":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"11:772:2577":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"11:1010:2588":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:11281:16133":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:41649:2347":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:2879:2967":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"30:1211:20270":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"16:4835:15447":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:10860:2382":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"21:14272:240":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"2:45897:3068":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:22736:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:21489:2708":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9003:15893":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"14:7:14713":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:2644:2432":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:21520:2984":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:8257:2438":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:10165:15970":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"21:6396:20200":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"1:3195:21011":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:41983:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:1641:8521":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"21:11817:2325":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"16:8072:15808":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"21:12997:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"30:1140:20270":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"2:22376:2774":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:4032:28283":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:6098:26178":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:12105:8247":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:4474:12819":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:3457:2439":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6017:15735":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"5:1118:29955":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:13010:19331":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"21:6227:1858":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:21738:2981":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:2871:8580":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:6325:223":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:10576:2744":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"23:0:2178":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"21:10647:2303":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:10190:2318":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"6:580:9362":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:276:2393":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:20951:28268":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:10468:16035":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:47600:3010":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:13792:20070":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:4527:15355":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"30:1232:20272":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"1:12070:336":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:4555:12829":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:5982:13544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11244:15917":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"21:10331:33325":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"2:43509:8257":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"21:8387:2236":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"16:4557:15361":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"27:453:2937":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"1:955:2586":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:4769:12848":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:8194:2382":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:918:2580":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:2334:2574":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"16:7102:15777":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:30284:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:7782:15802":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:4339:2816":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:12293:18813":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:261:30072":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"11:2260:2588":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"21:8543:2245":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"29:17:1840":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"21:6552:32795":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"30:949:20161":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"21:10583:2300":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"5:7487:246":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:2339:14790":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:12123:18801":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"20:17:2170":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"21:13476:2338":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"17:13802:20071":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"30:1467:33911":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"1:7743:2558":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"11:427:30992":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:11173:16139":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:4008:2783":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10214:15983":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:4585:15365":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"25:9:1835":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"6:6145:13581":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"11:1541:14705":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"27:368:223":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"21:9578:33325":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:10376:21807":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:13259:19348":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"21:15143:2440":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"1:9058:20774":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:2775:240":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:46490:3031":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4949:12869":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:6638:2929":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:2792:250":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11201:16104":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"30:1253:20274":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"11:2058:2587":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"18:660:20159":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:12784:31458":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"30:966:20161":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"1:7937:123":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:7463:2666":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:41777:2347":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:3764:14832":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:4164:2718":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"5:2959:8165":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:6268:31460":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"21:3780:1833":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"6:4529:12826":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"21:14033:2575":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"4:0:2034":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:3760:2769":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6156:15737":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"10:36:30964":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:10738:16094":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:4745:15429":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:42362:8190":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:5079:24434":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:727:148":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6742:14731":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"1:4208:2814":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12484:16097":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:2035:2435":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:6571:2925":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:5782:13530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4838:12857":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:9976:27778":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13989:20087":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:11850:23983":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:589:2547":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:44294:8736":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"17:11661:15867":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:1570:10253":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7041:31454":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:21272:8610":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:11417:25935":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"21:9785:33325":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"21:12604:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"21:14282:2354":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"30:1518:20170":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"30:1114:2347":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"2:42871:151":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12685:19310":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:2913:8587":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:1687:150":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:44282:8733":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:6023:13548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:6513:15757":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"21:12434:2334":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"5:35:2623":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:14460:20122":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"30:1418:20141":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"6:7555:13047":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:7625:26186":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:21513:2708":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:22237:2773":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"22:0:2177":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"9:0:2036":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:6588:10204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:7768:15801":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:10685:16049":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12024:18794":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"16:3915:14887":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:10397:16031":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:8926:15890":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"18:707:8245":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:12531:19301":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:12086:1607":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:45944:2972":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:44115:8284":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11235:16141":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:46166:3008":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"30:1098:20274":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"2:2875:2965":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:0:1826":{"crate_id":21,"path":["futures_util"],"kind":"module"},"2:20934:28271":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:22264:27220":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:2891:8584":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:9242:15896":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:10991:2893":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:6753:15765":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:9530:115":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"21:14065:2370":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"1:8909:2935":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12225:18808":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"21:12538:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"2:2887:8582":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:9137:15869":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:1528:10249":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"21:8996:2260":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"17:12737:19314":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:4772:2800":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:416:177":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:569:9360":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:6912:266":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:10036:15947":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"17:10929:16055":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"21:1089:2268":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"1:8865:2899":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"21:14340:2378":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"2:40277:2293":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"21:9332:2270":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"17:8594:15866":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:4770:2799":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:41568:2764":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:13868:20076":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:10654:8237":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:10447:14697":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:43527:8253":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:12007:18793":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:47064:2998":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:10962:16052":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:3233:8597":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:10830:2706":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:1634:630":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:5073:12882":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:8106:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:11023:16057":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"27:485:2878":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"1:9085:21110":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"11:868:2586":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:48060:8151":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12196:18806":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:822:2597":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"6:4913:12865":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"21:13589:32310":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"27:149:20241":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:7405:2225":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"2:3254:8329":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"21:6204:1843":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"16:8181:15814":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"11:992:2587":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:40380:2305":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:12778:19317":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"21:20:1114":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"17:13851:20075":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:22901:184":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"6:6663:10389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:42846:8395":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:47270:3032":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:42341:8181":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"6:6856:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"21:7331:33325":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"18:590:20282":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:14221:20107":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:10668:8235":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:44302:8731":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:45842:3007":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:13890:20078":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"16:5798:15727":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:14213:2376":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"5:1776:2578":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"21:5985:1835":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:14145:20103":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:44129:8285":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:4884:1061":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:12085:1606":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:364:2545":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:13071:19335":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"16:7513:15786":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:10097:15939":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:32052:20536":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"18:755:20165":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11991:18792":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"11:860:2585":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"11:0:2038":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:21522:2978":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:4278:224":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:1664:10261":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:43815:8261":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:7571:2578":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:39319:2566":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"1:10616:2531":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"21:13994:20184":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"1:12069:1112":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:12083:1608":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"28:30:20258":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"17:10186:15971":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:2284:14760":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"11:2317:2347":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"21:4701:1836":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"6:5820:13534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:1138:29994":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:47930:8145":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"5:6981:30099":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"6:7579:13051":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:1548:2718":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:43378:8214":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:558:2528":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"13:226:30996":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:7626:171":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:8281:15818":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:3204:2595":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"24:135:2213":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"5:3568:175":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:1983:200":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:46568:3037":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:2787:112":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:7478:14505":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:9972:15943":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"11:703:2580":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:3313:2744":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:434:14762":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:8887:2347":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"30:1148:20271":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"2:40259:8543":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:14628:33325":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"6:4540:12827":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7492:15784":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"21:14389:33325":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"21:11660:2321":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:2617:120":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"1:483:26198":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"6:1674:10262":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"21:14024:2347":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"17:9172:15894":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:12906:3111":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:7776:2647":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:3009:121":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12576:19304":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:149:14765":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"21:5245:20196":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:40025:8259":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"21:10524:33325":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:3523:20648":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"14:0:2040":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:3581:2347":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"30:1582:33894":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"11:1862:2593":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:4348:267":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:40579:2313":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"5:1503:2581":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:6511:30072":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:4665:21317":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:9545:209":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:1102:29993":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:47412:3004":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:43673:8234":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12876:19322":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"21:15324:2274":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"17:9823:15929":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:0:1923":{"crate_id":24,"path":["futures_task"],"kind":"module"},"6:4867:12861":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:4709:12841":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:3243:256":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:12945:19326":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:7448:2226":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"17:10126:15968":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:6485:15755":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:22310:27162":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:22181:27210":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"21:12683:2341":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"6:5013:12876":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8903:2575":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:11098:16110":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:943:2584":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:6721:15764":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:5085:12884":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"30:1457:20157":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"17:10750:16050":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"5:7291:213":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12452:19298":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"1:11024:2900":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:6687:15763":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:1579:2594":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"21:7947:2238":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"2:7570:2391":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"21:11500:33325":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"1:1429:150":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"20:0:1824":{"crate_id":20,"path":["futures_core"],"kind":"module"},"21:4496:2356":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"17:13040:19333":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:10827:2308":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"2:10008:26600":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"21:11103:33325":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"17:13298:19350":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"21:7801:2242":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"21:12169:2218":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"6:6082:13553":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:7880:2704":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:11327:16144":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:6909:8549":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:40287:2294":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:15495:32333":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:10534:16007":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:2548:14799":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:45589:3029":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:7683:32297":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"19:0:1092":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"21:781:2247":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:4361:8341":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:7310:14346":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:14076:2371":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"17:10265:15981":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:12496:19299":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:504:15881":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:4415:8343":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:5268:205":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13215:19345":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:1564:2371":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10012:15903":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:6015:223":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"21:8045:33325":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:4548:12828":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:2786:247":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:582:15882":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7391:15780":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:3475:2383":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:12554:19303":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"21:8325:2234":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"16:5088:15508":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"21:6363:20202":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"26:0:2179":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"1:12032:20802":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11687:15919":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:9521:15900":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"21:12659:33325":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"21:11635:32272":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"2:40593:2315":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:43957:8278":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"26:43:33855":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"17:10771:16070":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"27:491:20254":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"1:11488:20733":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:4385:12809":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:11358:16147":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:7961:2435":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:40041:8258":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:9794:8393":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:14858:2433":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:43843:8248":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:1288:2588":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"16:6818:15767":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"16:7534:15788":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:7890:2702":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:12895:110":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:7622:2239":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"21:13954:32358":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"6:596:9364":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2908:8586":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:3964:2780":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11137:16107":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2276:107":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:6041:15736":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:41665:2575":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1691:10264":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:10512:8239":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:1561:2575":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:8530:2880":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"21:7251:2217":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"17:11351:16146":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:40399:2306":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"5:3330:2578":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"6:5935:13542":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:8205:15816":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:4663:21315":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"14:31:14713":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12970:19328":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"18:582:8386":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:46726:2997":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:3358:2737":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:9910:8705":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:21344:2973":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:4044:105":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11261:16132":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"21:8838:2256":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:44587:28225":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:13575:20061":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"30:144:20278":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"16:7792:15803":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10316:15986":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:10009:21258":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:1374:96":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:22769:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}