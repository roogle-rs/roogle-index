{"root":"0:0:1733","crate_version":"0.3.21","includes_private":false,"index":{"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,49],"end":[250,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:47:1652","glob":false}},"2:13379:793":{"id":"2:13379:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22899:4155":{"id":"2:22899:4155","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22889:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3349:3520":{"id":"2:3349:3520","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3351:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3345:3517":{"id":"2:3345:3517","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3346:181","2:3347:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13455:1943":{"id":"2:13455:1943","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13015:4579","`DoubleEndedIterator`":"2:8425:120","str::matches":"1:15916:1863","prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49605:4927","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13045:4583":{"id":"2:13045:4583","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13403:4951":{"id":"2:13403:4951","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49371:4915","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13443:56551":{"id":"2:13443:56551","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13015:4579","str::rsplitn":"1:15916:1863","prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49505:4894","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23424:4705":{"id":"2:23424:4705","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23425:1263","2:23426:1262","2:23427:1260","2:23428:1259"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22836:4766","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2907:124":{"id":"2:2907:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[129,0],"end":[129,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:10275:1660","glob":false}},"2:13458:61324":{"id":"2:13458:61324","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13015:4579","prim@char":"1:15910:1858","str::matches":"1:15916:1863","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49623:4928","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:9646:1657":{"id":"21:9646:1657","crate_id":21,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9647:2221","21:9648:2217","21:9649:1946","21:9651:2289","21:9653:2290","21:9655:2276"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"29:42:1653","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,35],"end":[119,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:39:1651","glob":false}},"2:13474:61331":{"id":"2:13474:61331","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5658:4171":{"id":"1:5658:4171","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5659:5810","1:5660:55192"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8860:2748":{"id":"2:8860:2748","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12462:5091":{"id":"2:12462:5091","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12463:2744","2:12464:59733"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:44:1636":{"id":"20:44:1636","crate_id":20,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:45:175","20:46:127","20:47:53305"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13728:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:39:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8377:136":{"id":"2:8377:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8379:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6103:61965":{"id":"5:6103:61965","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:258:2022":{"id":"24:258:2022","crate_id":24,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["24:261:55536","24:262:578"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"2:3558:3536":{"id":"2:3558:3536","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:181","2:3561:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1333","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:61962","5:6085:2934","5:6088:61963","5:6091:61964","5:6103:61965","5:6104:61966","5:6105:2108","5:6106:54734","5:6107:54735"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:5732:4096":{"id":"1:5732:4096","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5733:54662","1:5734:55407","1:5735:55408"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3228:115":{"id":"2:3228:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3229:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6792:4175":{"id":"1:6792:4175","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6793:55102","1:6794:55254"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13380:55579":{"id":"2:13380:55579","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:96:1641":{"id":"20:96:1641","crate_id":20,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:97:2744","20:98:3069","20:99:3028"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3318:3514":{"id":"2:3318:3514","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:181","2:3321:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,23],"end":[131,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:10272:1661","glob":false}},"2:13408:2277":{"id":"2:13408:2277","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49655:2302","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13481:6309":{"id":"2:13481:6309","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15910:1858","self::pattern":"2:13015:4579"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,8],"end":[195,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:117:1698","glob":false}},"2:10284:4549":{"id":"2:10284:4549","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10285:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:18:2992":{"id":"24:18:2992","crate_id":24,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:19:4089","24:20:4090"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3361:3521":{"id":"2:3361:3521","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3363:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13487:61334":{"id":"2:13487:61334","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13015:4579","prim@char":"1:15910:1858"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3377:3525":{"id":"2:3377:3525","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:181","2:3380:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,31],"end":[135,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:8119:917","glob":false}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,24],"end":[250,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1650","glob":false}},"2:13446:56553":{"id":"2:13446:56553","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"1:15916:1863","prim@char":"1:15910:1858","self::pattern":"2:13015:4579"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49523:4895","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13500:54737":{"id":"2:13500:54737","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6105:2108":{"id":"5:6105:2108","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3291:2252":{"id":"2:3291:2252","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8857:2747":{"id":"2:8857:2747","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,39],"end":[108,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:127:1642","glob":false}},"2:8390:2255":{"id":"2:8390:2255","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8392:38463","2:8394:6669","2:8395:57685"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3353:3524":{"id":"2:3353:3524","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3355:1349"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13389:304":{"id":"2:13389:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15927:1872","str::as_mut_ptr":"1:15916:1863"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3793:3546":{"id":"2:3793:3546","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8579:157":{"id":"2:8579:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8580:2744","2:8581:922","2:8582:3027","2:8585:3028","2:8586:495","2:8588:3029","2:8591:3030","2:8592:3031","2:8593:3032","2:8594:2272","2:8596:2518","2:8598:3033","2:8599:3034","2:8601:841","2:8604:2511","2:8611:2497","2:8613:2498","2:8616:2496","2:8617:2519","2:8618:2508","2:8620:2509","2:8622:3035","2:8625:1301","2:8626:2287","2:8627:2507","2:8631:2505","2:8634:2503","2:8635:2513","2:8636:2523","2:8638:2514","2:8639:2260","2:8641:3036","2:8644:3037","2:8646:3038","2:8656:3039","2:8671:3040","2:8673:3041","2:8677:3042","2:8686:2502","2:8689:3043","2:8691:3044","2:8694:276","2:8701:294","2:8708:3045","2:8715:3046","2:8724:3047","2:8734:1014","2:8741:3048","2:8748:2205","2:8749:3049","2:8750:3050","2:8762:3051","2:8769:3052","2:8781:3053","2:8788:3054","2:8789:2500","2:8794:3055","2:8797:3056","2:8800:2501","2:8801:3057","2:8803:3058","2:8805:415","2:8808:3059","2:8811:997","2:8814:3060","2:8817:604","2:8820:3061","2:8823:907","2:8825:826","2:8827:792","2:8829:713","2:8831:696","2:8833:3062","2:8834:3063","2:8842:3064"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9342:4152":{"id":"1:9342:4152","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9343:57609","1:9344:57610","1:9345:57611","1:9346:57612","1:9347:57613","1:9348:38465","1:9349:57608"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13496:4801":{"id":"2:13496:4801","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12954:4246","`FromStr`":"2:12954:4246"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47564:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12954:4246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12954:4246","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3147:75":{"id":"2:3147:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3149:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6104:61966":{"id":"5:6104:61966","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:432:2256","`String`":"5:8359:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2256","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:5104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,40],"end":[122,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:9629:1655","glob":false}},"1:6442:4160":{"id":"1:6442:4160","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6443:4420","1:6444:4421","1:6445:54702","1:6446:59147","1:6448:59151","1:6450:59148","1:6451:59149","1:6453:59150"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,34],"end":[236,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:13728:138","glob":false}},"2:3387:3527":{"id":"2:3387:3527","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3629:3539":{"id":"2:3629:3539","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3631:59621","2:3632:59622","2:3633:56555"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2850:4656":{"id":"2:2850:4656","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2852:60258"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2847:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3339:3518":{"id":"2:3339:3518","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:181","2:3342:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4688:2314":{"id":"1:4688:2314","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4689:1946","1:4690:2289","1:4692:3839","1:4693:2221","1:4694:2290","1:4695:3840","1:4696:3841","1:4705:2514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6464:4157":{"id":"1:6464:4157","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6465:55532","1:6466:39008","1:6467:55533","1:6468:55534","1:6469:55535","1:6470:55536"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13393:56517":{"id":"2:13393:56517","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47437:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5790:4099":{"id":"1:5790:4099","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5791:57634"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3500:130":{"id":"2:3500:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3502:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3503:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3506:132":{"id":"2:3506:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:181","2:3509:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3412:3533":{"id":"2:3412:3533","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3414:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3150:74":{"id":"2:3150:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3152:59829"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:5833:2119":{"id":"5:5833:2119","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8864:4710":{"id":"2:8864:4710","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7905:4711","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22836:4766":{"id":"2:22836:4766","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22837:4704","2:22838:1240","2:22839:1265"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2872:104":{"id":"2:2872:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2873:408","2:2874:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4764:4539":{"id":"2:4764:4539","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4765:2744","2:4766:3069","2:4767:3028"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6562:4167":{"id":"1:6562:4167","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6563:55614","1:6564:55615"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3981:68":{"id":"2:3981:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3982:1421"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[139,0],"end":[139,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:97:1665","glob":false}},"2:13498:5084":{"id":"2:13498:5084","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:9664:1654":{"id":"21:9664:1654","crate_id":21,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9665:2275","21:9666:3969","21:9667:2284","21:9669:2281","21:9671:2277"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"29:49:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3258:218":{"id":"2:3258:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:17:1646","glob":false}},"2:13471:61329":{"id":"2:13471:61329","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23096:4715":{"id":"2:23096:4715","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23733:4503","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23087:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3721:3542":{"id":"2:3721:3542","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3723:58319"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3159:228":{"id":"2:3159:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3161:127","2:3162:1409"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3328:3516":{"id":"2:3328:3516","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3330:181","2:3331:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:15:2993":{"id":"24:15:2993","crate_id":24,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:16:63983","24:17:4297"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13402:56540":{"id":"2:13402:56540","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15916:1863"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5746:4094":{"id":"1:5746:4094","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5747:57633","1:5748:57634","1:5749:54662","1:5750:57635","1:5751:4420","1:5752:4421","1:5753:57636","1:5754:1297","1:5755:57637","1:5756:57638","1:5757:57639","1:5758:57640","1:5759:57641","1:5760:57642","1:5761:57643","1:5762:57644"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13381:6716":{"id":"2:13381:6716","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13504:4132":{"id":"2:13504:4132","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15910:1858"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49709:4133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10219:2314":{"id":"2:10219:2314","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10220:1524","2:10221:55831","2:10223:3841"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13440:61321":{"id":"2:13440:61321","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split_terminator":"1:15916:1863","self::pattern":"2:13015:4579","prim@char":"1:15910:1858","str::split":"1:15916:1863"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49469:4921","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13401:56539":{"id":"2:13401:56539","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15916:1863"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,28],"end":[236,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:168:693","glob":false}},"2:13040:4582":{"id":"2:13040:4582","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13042:59300","2:13043:60159","2:13044:60160"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13034:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6964:4109":{"id":"1:6964:4109","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6965:55605"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8450:2254":{"id":"2:8450:2254","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8451:793","2:8452:55579"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13467:61327":{"id":"2:13467:61327","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3365:3523":{"id":"2:3365:3523","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3367:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:27:1967":{"id":"20:27:1967","crate_id":20,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:28:2216"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13728:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:5111","5:785:54952","5:786:54953"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13501:54738":{"id":"2:13501:54738","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3497:2253":{"id":"2:3497:2253","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3498:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[125,0],"end":[125,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:169:1658","glob":false}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[196,8],"end":[196,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:197:1705","glob":false}},"1:5724:4095":{"id":"1:5724:4095","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5725:54847","1:5726:54849","1:5727:54848","1:5728:54850"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13406:6927":{"id":"2:13406:6927","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15916:1863"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49675:4930","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10269:109":{"id":"2:10269:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10270:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5740:4097":{"id":"1:5740:4097","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5741:54662","1:5742:54675"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6107:54735":{"id":"5:6107:54735","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15916:1863"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9237:4305":{"id":"2:9237:4305","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[150,0],"end":[150,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:8121:1669","glob":false}},"1:4991:4134":{"id":"1:4991:4134","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4992:2169","1:4993:59099"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10280:4548":{"id":"2:10280:4548","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10281:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,42],"end":[105,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:991:1639","glob":false}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,52],"end":[135,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:8009:1371","glob":false}},"2:13388:61317":{"id":"2:13388:61317","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:2902:183":{"id":"2:2902:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2904:604","2:2905:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,23],"end":[122,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:9664:1654","glob":false}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,42],"end":[236,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:44:1636","glob":false}},"2:3333:3515":{"id":"2:3333:3515","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3335:181","2:3336:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,0],"end":[126,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1659","glob":false}},"2:3698:3540":{"id":"2:3698:3540","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3629:3539","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3562:3537":{"id":"2:3562:3537","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3564:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3558:3536","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8340:4638":{"id":"2:8340:4638","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8342:3057"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,60],"end":[250,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:42:1653","glob":false}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,38],"end":[131,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:43:1013","glob":false}},"2:3262:220":{"id":"2:3262:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:127:1642","glob":false}},"2:3357:3522":{"id":"2:3357:3522","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13409:61319":{"id":"2:13409:61319","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49665:4929","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,49],"end":[256,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:9659:1656","glob":false}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,42],"end":[110,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:5869:1644","glob":false}},"2:3540:2781":{"id":"2:3540:2781","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3542:237","2:3543:206","2:3544:59791"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:55769","1:2579:1841","1:2580:55768","1:2581:55770","1:2582:55392"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10269:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10276:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10278:4547":{"id":"2:10278:4547","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10279:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13490:61335":{"id":"2:13490:61335","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13015:4579","prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,26],"end":[237,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:7249:1647","glob":false}},"2:13493:61336":{"id":"2:13493:61336","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13015:4579","prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[242,28],"end":[242,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:690:1638","glob":false}},"21:991:1639":{"id":"21:991:1639","crate_id":21,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:992:2674","21:994:2675","21:997:2676","21:1001:2223","21:1004:2222","21:1006:2677","21:1008:292","21:1011:2678","21:1014:2679","21:1016:2680","21:1018:2371","21:1019:2681","21:1020:2682","21:1022:767","21:1023:2683"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"20:44:1636","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13410:6663":{"id":"2:13410:6663","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49693:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10911:214":{"id":"2:10911:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10913:181","2:10914:56516","2:10915:56517","2:10916:56518","2:10917:56519","2:10918:753","2:10919:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10902:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:690:1638","glob":false}},"0:0:1733":{"id":"0:0:1733","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[258,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# if cfg!(miri) { return; } // https://github.com/rust-lang/miri/issues/1038\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::future":"21:168:693","crate::stream":"21:2138:1640","crate::executor":"0:116:1544","crate::io":"21:8121:1669","crate::sink":"21:7249:1647","crate::channel":"27:0:1666"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:116:1544","0:142:1030","0:4","0:7","0:11","0:14","0:18","0:21","0:25","0:28","0:31","0:34","0:38","0:41","0:44","0:47","0:51","0:54","0:57","0:60","0:63","0:66","0:69","0:73","0:76","0:79","0:80","0:82","0:85","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113"],"is_stripped":false}},"2:13428:2286":{"id":"2:13428:2286","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15916:1863","str::split_whitespace":"1:15916:1863","prim@char":"1:15910:1858","self::pattern":"2:13015:4579","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49401:2933","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"29:42:1653":{"id":"29:42:1653","crate_id":29,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:43:54451","29:44:54452","29:45:53313","29:46:53314"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13417:56184":{"id":"2:13417:56184","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13015:4579","prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3085:2893":{"id":"2:3085:2893","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3084:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3416:3534":{"id":"2:3416:3534","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:1227"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3382:3526":{"id":"2:3382:3526","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:181","2:3385:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10552:4217":{"id":"2:10552:4217","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10553:146","2:10554:6405","2:10555:59270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13473:61330":{"id":"2:13473:61330","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[242,44],"end":[242,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:991:1639","glob":false}},"2:13478:61333":{"id":"2:13478:61333","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13015:4579","prim@char":"1:15910:1858"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13399:4188":{"id":"2:13399:4188","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3558:3536","str::slice_mut_unchecked":"1:15916:1863","`str`":"1:15916:1863"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3503:131":{"id":"2:3503:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3506:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3260:106":{"id":"2:3260:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10507:142":{"id":"2:10507:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10508:715","2:10510:6695"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13400:61318":{"id":"2:13400:61318","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15916:1863","`str`":"1:15916:1863","crate::ops::IndexMut":"2:3562:3537"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13424:5933":{"id":"2:13424:5933","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47437:176","self::pattern":"2:13015:4579","prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13397:56519":{"id":"2:13397:56519","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,31],"end":[108,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:96:1641","glob":false}},"2:13452:61323":{"id":"2:13452:61323","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,68],"end":[256,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:9646:1657","glob":false}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1390"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:49:1650":{"id":"29:49:1650","crate_id":29,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:50:54400","29:51:54401"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"29:39:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23048:15213":{"id":"2:23048:15213","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23049:60101","2:23050:60102","2:23051:60103"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23041:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:9703:1668","glob":false}},"2:22763:4700":{"id":"2:22763:4700","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22764:4704","2:22765:60172","2:22766:1220","2:22767:1221","2:22768:41882","2:22769:60209","2:22770:6884","2:22771:60210","2:22772:60211","2:22773:60212","2:22774:60173","2:22775:60174","2:22776:60175","2:22777:60176","2:22778:60177","2:22779:60178","2:22780:60179"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22812:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9236:2622":{"id":"2:9236:2622","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8381:151":{"id":"2:8381:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8382:2744","2:8383:2746","2:8384:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13411:56555":{"id":"2:13411:56555","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13015:4579","prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,28],"end":[247,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:4450:1643","glob":false}},"21:7964:1648":{"id":"21:7964:1648","crate_id":21,"name":"SinkExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:7966:2226","21:7971:2227","21:7975:2901","21:7978:2902","21:7980:2228","21:7981:2217","21:7982:2219","21:7984:2221","21:7985:2224","21:7986:2220","21:7987:2225","21:7990:2903","21:7992:2904","21:7994:2905","21:7995:2906","21:7996:2907","21:7997:2908"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sink","id":"25:17:1646","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3156:135":{"id":"2:3156:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3158:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2938:177":{"id":"2:2938:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2939:415","2:2940:2205","2:2941:3049","2:2942:6432"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2907:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,23],"end":[135,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:168:693","glob":false}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:4450:1643","glob":false}},"2:23733:4503":{"id":"2:23733:4503","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23734:4704"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23729:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13728:138":{"id":"2:13728:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13729:181","2:13730:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3398:3530":{"id":"2:3398:3530","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:181","2:3401:1229"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3473:116":{"id":"2:3473:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3474:221","2:3475:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,65],"end":[195,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:168:1703","glob":false}},"2:13484:56556":{"id":"2:13484:56556","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15910:1858","self::pattern":"2:13015:4579"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13404:4608":{"id":"2:13404:4608","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49377:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3421:3535":{"id":"2:3421:3535","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3423:1230"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:690:1638":{"id":"21:690:1638","crate_id":21,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:691:841","21:694:2584","21:696:2499","21:699:2585","21:701:2586","21:703:2587","21:704:2503","21:705:2588","21:706:2513","21:707:2523","21:709:2515","21:710:2589","21:711:2590","21:712:1929","21:714:2516","21:716:2591","21:717:2592","21:718:2593","21:719:2594"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13728:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,68],"end":[122,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:9646:1657","glob":false}},"0:142:1030":{"id":"0:142:1030","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[222,0],"end":[222,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144","0:147","0:150","0:154","0:157","0:161","0:164","0:167","0:171","0:174","0:177","0:181","0:184","0:188","0:191","0:194","0:197","0:201","0:204","0:207","0:210"],"is_stripped":false}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,21],"end":[119,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1650","glob":false}},"2:13464:61326":{"id":"2:13464:61326","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13015:4579","str::match_indices":"1:15916:1863","prim@char":"1:15910:1858","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49569:4925","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3710:224":{"id":"2:3710:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3711:181","2:3712:3542","2:3713:686","2:3714:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3715:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10276:119":{"id":"2:10276:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22799:4764":{"id":"2:22799:4764","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22800:60172","2:22801:1220","2:22802:1221","2:22803:60173","2:22804:60174","2:22805:60175","2:22806:60176","2:22807:60177","2:22808:60178","2:22809:60179"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22812:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3408:3532":{"id":"2:3408:3532","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3410:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:61962":{"id":"5:6084:61962","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2256","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:5104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2256","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8097:5104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3392:3529":{"id":"2:3392:3529","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3394:181","2:3395:1226"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4032:4123":{"id":"2:4032:4123","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4033:55392"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13378":{"id":"2:13378","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12475:1333","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13379:793","2:13380:55579","2:13381:6716","2:13382:61315","2:13384:61316","2:13387:55192","2:13388:61317","2:13389:304","2:13390:56520","2:13391:56516","2:13393:56517","2:13395:56518","2:13397:56519","2:13399:4188","2:13400:61318","2:13401:56539","2:13402:56540","2:13403:4951","2:13404:4608","2:13405:2323","2:13406:6927","2:13407:6925","2:13408:2277","2:13409:61319","2:13410:6663","2:13411:56555","2:13414:56182","2:13417:56184","2:13420:3045","2:13424:5933","2:13428:2286","2:13431:6926","2:13434:56549","2:13437:61320","2:13440:61321","2:13443:56551","2:13446:56553","2:13449:61322","2:13452:61323","2:13455:1943","2:13458:61324","2:13461:61325","2:13464:61326","2:13467:61327","2:13469:61328","2:13471:61329","2:13473:61330","2:13474:61331","2:13475:61332","2:13478:61333","2:13481:6309","2:13484:56556","2:13487:61334","2:13490:61335","2:13493:61336","2:13496:4801","2:13498:5084","2:13499:54736","2:13500:54737","2:13501:54738","2:13502:61337","2:13504:4132","2:13505:61338"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,44],"end":[135,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:2138:1640","glob":false}},"1:7800:4292":{"id":"1:7800:4292","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7801:57682"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14201:4208":{"id":"2:14201:4208","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14202:55712","2:14203:55713","2:14204:55714","2:14205:55715","2:14206:55716","2:14207:55717","2:14208:2514"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10282:4541":{"id":"2:10282:4541","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10283:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:47:1652":{"id":"29:47:1652","crate_id":29,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:48:54443"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:2251":{"id":"2:3255:2251","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,4],"end":[244,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:7964:1648","glob":false}},"2:13407:6925":{"id":"2:13407:6925","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15916:1863"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49684:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:9629:1655":{"id":"21:9629:1655","crate_id":21,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9630:2272","21:9632:2278","21:9634:2279","21:9636:2280","21:9638:2282","21:9640:2283","21:9642:2286","21:9643:2287"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"29:39:1651","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,38],"end":[131,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:42:1013","glob":false}},"2:3486:1973":{"id":"2:3486:1973","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3473:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3404:3531":{"id":"2:3404:3531","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3406:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6866:4163":{"id":"1:6866:4163","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6867:55458"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:9659:1656":{"id":"21:9659:1656","crate_id":21,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9660:2285","21:9661:4007"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"29:47:1652","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13390:56520":{"id":"2:13390:56520","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15927:1872"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13499:54736":{"id":"2:13499:54736","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,8],"end":[256,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:9664:1654","glob":false}},"2:3250:211":{"id":"2:3250:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10286:189":{"id":"2:10286:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10287:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13414:56182":{"id":"2:13414:56182","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15910:1858","self::pattern":"2:13015:4579"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22710:4765":{"id":"2:22710:4765","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22711:4704","2:22712:60172","2:22713:60585","2:22714:60586","2:22715:60587","2:22716:41882","2:22717:60588","2:22718:60589","2:22719:60590","2:22720:60591","2:22721:60592","2:22722:60593","2:22723:60594","2:22724:60595","2:22725:6718","2:22726:60596","2:22727:60212","2:22728:6042","2:22729:59859","2:22730:59858","2:22731:59860","2:22732:60173","2:22733:60174","2:22734:60175","2:22735:60176"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3260:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22812:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:1079:4130":{"id":"1:1079:4130","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:5111","1:1081:5084","1:1082:54734","1:1083:54735","1:1084:54736","1:1085:54737","1:1086:54738"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,31],"end":[103,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:13728:138","glob":false}},"2:12954:4246":{"id":"2:12954:4246","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12955:126","2:12956:59131"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,30],"end":[256,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:9629:1655","glob":false}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,46],"end":[119,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:47:1652","glob":false}},"5:6085:2934":{"id":"5:6085:2934","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6088:61963":{"id":"5:6088:61963","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:4450:1643":{"id":"21:4450:1643","crate_id":21,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:4451:922","21:4452:767","21:4453:841","21:4456:2496","21:4457:2497","21:4460:2498","21:4464:2499","21:4467:2260","21:4469:2500","21:4474:432","21:4475:495","21:4476:2501","21:4477:2502","21:4481:294","21:4484:276","21:4487:2503","21:4488:2504","21:4490:2505","21:4493:2506","21:4497:2507","21:4502:2508","21:4505:2509","21:4508:2510","21:4510:2511","21:4513:2512","21:4517:2287","21:4518:1301","21:4519:2513","21:4520:2514","21:4521:2515","21:4522:1929","21:4524:2516","21:4526:2243","21:4527:2517","21:4528:2518","21:4530:2272","21:4532:2519","21:4533:2520","21:4534:2521","21:4535:2522","21:4537:2286","21:4539:2523","21:4541:2524","21:4543:2525","21:4545:2526","21:4546:2527"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,77],"end":[195,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:192:1704","glob":false}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,59],"end":[131,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:10273:1664","glob":false}},"5:6106:54734":{"id":"5:6106:54734","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15916:1863"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3163:227":{"id":"2:3163:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3165:127","2:3166:1408"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8425:120":{"id":"2:8425:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8426:59300","2:8427:59301","2:8428:59302","2:8429:59303","2:8433:59304","2:8436:5933"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8579:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:116:1544":{"id":"0:116:1544","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[154,0],"end":[154,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:117:1698","`LocalPool`":"31:192:1704"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:118","0:121","0:124","0:127","0:130","0:133","0:136","0:139"],"is_stripped":false}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,44],"end":[131,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:10274:1663","glob":false}},"2:3715:137":{"id":"2:3715:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3717:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3710:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3153:149":{"id":"2:3153:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:54968"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:7964:1648","glob":false}},"2:13395:56518":{"id":"2:13395:56518","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13034:4578":{"id":"2:13034:4578","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13036:4601","2:13037:922","2:13038:59638","2:13039:59639"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13384:61316":{"id":"2:13384:61316","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15916:1863"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,54],"end":[122,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:9659:1656","glob":false}},"2:13437:61320":{"id":"2:13437:61320","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15916:1863","self::pattern":"2:13015:4579","prim@char":"1:15910:1858","`DoubleEndedIterator`":"2:8425:120","str::rsplit_terminator":"1:15916:1863"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49451:4920","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8344:4637":{"id":"2:8344:4637","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8346:3058"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,18],"end":[195,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:120:1699","glob":false}},"2:13434:56549":{"id":"2:13434:56549","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13015:4579","str::split":"1:15916:1863","prim@char":"1:15910:1858","`DoubleEndedIterator`":"2:8425:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49419:4891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13040:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10517:146":{"id":"2:10517:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10518:652","2:10519:1946","2:10520:55284","2:10521:55285","2:10522:55286","2:10523:55287","2:10524:55288","2:10525:55289","2:10526:55290","2:10527:55291","2:10528:55292","2:10529:55293","2:10530:55294","2:10531:55295","2:10532:55296","2:10533:1524"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1666","glob":false}},"2:3259:217":{"id":"2:3259:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13743:150":{"id":"2:13743:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13744:181","2:13745:150","2:13746:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13431:6926":{"id":"2:13431:6926","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15910:1858","self::pattern":"2:13015:4579"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12807:4888","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:96:1641","glob":false}},"2:13505:61338":{"id":"2:13505:61338","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15910:1858"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49718:4934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5652:4173":{"id":"1:5652:4173","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5653:55265","1:5654:5182"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:7905:4711":{"id":"2:7905:4711","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7906:60688","2:7907:60689","2:7908:2522","2:7909:60685","2:7910:60690","2:7911:60687","2:7912:60686"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2872:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2948:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,32],"end":[237,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:17:1646","glob":false}},"1:6795:4160":{"id":"1:6795:4160","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6796:54703"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4706:2310":{"id":"1:4706:2310","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4707:2285","1:4708:38862","1:4709:54768","1:4710:4007"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,58],"end":[195,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:166:1702","glob":false}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,42],"end":[195,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:208:1701","glob":false}},"2:13502:61337":{"id":"2:13502:61337","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15910:1858"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49700:4933","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4631:2303":{"id":"1:4631:2303","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4632:2278","1:4633:2279","1:4635:58901","1:4636:2282","1:4637:2283","1:4638:2280","1:4639:6266","1:4641:58902","1:4642:2514","1:4643:2323","1:4644:2272","1:4646:2287"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13025:4580":{"id":"2:13025:4580","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13027:4578","2:13028:60651","2:13029:60652","2:13030:60653","2:13031:60655","2:13032:60654","2:13033:60656"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:39:1651":{"id":"29:39:1651","crate_id":29,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:40:54432","29:41:54433"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:110:1968":{"id":"20:110:1968","crate_id":20,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:111:2216"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3370:3528":{"id":"2:3370:3528","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3371:181","2:3372:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:2138:1640","glob":false}},"1:5780:4098":{"id":"1:5780:4098","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5781:55236","1:5782:55237","1:5783:55238","1:5784:55239"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23429:15232":{"id":"2:23429:15232","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23430:59858","2:23431:59859","2:23432:59860"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23424:4705","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,35],"end":[195,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:175:1700","glob":false}},"1:6868:4164":{"id":"1:6868:4164","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6869:58881"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3323:3519":{"id":"2:3323:3519","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:181","2:3326:1348"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10288:4550":{"id":"2:10288:4550","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10289:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:3045":{"id":"2:13420:3045","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47437:176","prim@char":"1:15910:1858","self::pattern":"2:13015:4579"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,39],"end":[103,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:44:1636","glob":false}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,38],"end":[250,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:39:1651","glob":false}},"2:13475:61332":{"id":"2:13475:61332","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13015:4579","prim@char":"1:15910:1858"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13045:4583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2948:184":{"id":"2:2948:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2950:997","2:2951:826","2:2952:792","2:2953:713","2:2954:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2902:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4713:2930":{"id":"1:4713:2930","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4714:2275","1:4715:54401","1:4716:55104","1:4718:2284","1:4719:2281","1:4721:2286","1:4722:2277"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4631:2303","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13405:2323":{"id":"2:13405:2323","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49387:2931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13382:61315":{"id":"2:13382:61315","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6690:4094":{"id":"1:6690:4094","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6691:55638","1:6692:55639","1:6693:55640","1:6694:55641","1:6695:55642","1:6696:55643","1:6697:55644","1:6698:55645","1:6699:55646","1:6700:55647","1:6701:55648","1:6702:55649","1:6703:55650","1:6704:55651","1:6705:55652","1:6706:55653","1:6707:55654"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5837:2062":{"id":"5:5837:2062","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:1661"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:5869:1644":{"id":"21:5869:1644","crate_id":21,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:5870:2222","21:5872:2675","21:5875:2223","21:5878:292","21:5881:2678","21:5884:2679","21:5886:2680","21:5888:2587","21:5889:3205","21:5890:3042","21:5893:3210","21:5896:3211","21:5899:3214","21:5903:3036","21:5905:3209","21:5906:3206","21:5909:3207","21:5913:2371","21:5914:3041","21:5918:3208","21:5919:3212","21:5920:3213","21:5921:3216","21:5922:3215"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryStream","id":"20:127:1642","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"25:17:1646":{"id":"25:17:1646","crate_id":25,"name":"Sink","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:19:127","25:20:6837","25:21:53312","25:22:53313","25:23:53314"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5794:4100":{"id":"1:5794:4100","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5795:55621"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10564:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,57],"end":[119,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:42:1653","glob":false}},"1:6864:4110":{"id":"1:6864:4110","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6865:54925"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10290:4551":{"id":"2:10290:4551","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10291:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13391:56516":{"id":"2:13391:56516","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47437:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10911:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,44],"end":[247,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:5869:1644","glob":false}},"2:14127:141":{"id":"2:14127:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14128:277","2:14129:518","2:14130:280","2:14131:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6091:61964":{"id":"5:6091:61964","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8359:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8359:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3756:3545":{"id":"2:3756:3545","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2847:97":{"id":"2:2847:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2849:1928"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3255:2251","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13469:61328":{"id":"2:13469:61328","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13461:61325":{"id":"2:13461:61325","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15916:1863","self::pattern":"2:13015:4579","`DoubleEndedIterator`":"2:8425:120","prim@char":"1:15910:1858"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49551:4924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13449:61322":{"id":"2:13449:61322","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47437:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13025:4580","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,38],"end":[135,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:7249:1647","glob":false}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,29],"end":[131,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:67:1662","glob":false}},"20:127:1642":{"id":"20:127:1642","crate_id":20,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:128:175","20:129:127","20:130:53392"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1641","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:122:4114","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13387:55192":{"id":"2:13387:55192","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12486:5050"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5802:4102":{"id":"1:5802:4102","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5803:54662"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"17:9574:5839":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:7738:5650":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"6:4005:42124":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"18:866:5941":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:2276:4662":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:11186:46001":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:3195:5750":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"14:250:44287":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:3905:42115":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:7733:4524":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:23429:15232":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"21:7021:55524":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"17:13402:52007":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:1476:2231":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"21:4200:63931":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"17:12307:50867":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12699:50955":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"18:774:2145":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5330:44358":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:14127:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:47868:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:3361:3521":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:12045:2169":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:46949:2171":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:5346:5573":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:10697:2030":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"2:5082:4841":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:1528:4264":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:46232:31724":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:24832:4963":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:48036:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:8377:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"21:15928:2159":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:9860:9917":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:12537:50883":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:4083:42134":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11337:5832":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:50378:4121":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"21:9261:2170":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"1:0:1324":{"crate_id":1,"path":["std"],"kind":"module"},"21:15510:2041":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"6:1708:40032":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:49819:4587":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:48792:59620":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:8304:4988":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:51297:59537":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:11435:13362":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:12568:50885":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:9088:45982":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:46445:4989":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:3392:3529":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:5255:42751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:2773:5769":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:1665:40028":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:18137:3975":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"17:11572:46689":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:24492:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:14469:4177":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:10591:4346":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:5197:42768":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"21:16062:2156":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"30:836:5948":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:0:1837":{"crate_id":17,"path":["object"],"kind":"module"},"17:542:5509":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:53131:4754":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:10599:46210":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:46615:2024":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:3488:5756":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"5:1635:4256":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:12095:50795":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:6935:43743":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:5935:4464":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:1540:40016":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"21:11844:2042":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"16:4890:44999":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:24065:4804":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"21:14771:2143":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"16:7420:5595":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"12:1688:5403":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:11822:46913":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:46672:4515":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:49377:4916":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:13091:4586":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:13942:52123":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:2437:11027":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"12:812:4260":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:5522:5476":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:2484:46096":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"30:950:2145":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"2:3258:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"28:50:2745":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"5:8112:5224":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:2543:5842":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12073:50789":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"13:120:44234":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:4995:45029":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:2948:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:4955:45014":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:0:1836":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:13574:52028":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:13963:52124":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"21:17172:2746":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"21:15863:2046":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"17:10435:46107":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12685:50954":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:8857:2747":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"13:0:1827":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:51173:4751":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:49709:4133":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:23635:59446":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:6238:5577":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:801:5935":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:49665:4929":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13386:51979":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"18:667:5949":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"27:397:2630":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"16:4448:44882":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:9404:45986":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:5833:2119":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:5420:42785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"21:14102:2127":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"17:12456:50877":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:46410:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"5:3882:2299":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:7620:4280":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"12:892:5381":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:7279:5793":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:24174:38187":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:53358:20735":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:50301:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:15267:4398":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:1644:4257":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:8644:4424":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:9034:45980":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"21:18614:2382":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:5608:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"5:1843:60986":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:4604:2922":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:10276:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:5580:5479":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:14507:54661":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:3319:4362":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"12:747:2169":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8032:4347":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"17:12287:50866":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:10552:4217":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"12:1180:5390":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"27:595:3677":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"17:12480:50879":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:13074:107":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:6415:2124":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:2253:4657":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:9719:45990":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:48737:4274":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:2171:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:3255:2251":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"28:41:2169":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"5:6475:2231":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"22:0:1977":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"1:12176:4438":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"31:88:4049":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"2:3262:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"29:39:1651":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"6:5400:42782":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"21:13199:2122":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"1:12012:54924":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"1:13700:4294":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:2460:7668":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:13986:52131":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:32118:5021":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:4272:42150":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5359:42778":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:5210:42769":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:48440:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"21:0:1637":{"crate_id":21,"path":["futures_util"],"kind":"module"},"1:10938:3762":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4431:42170":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:1463:4257":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5528:42027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:5790:4099":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"21:18541:63926":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:15788:2042":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:2163:2746":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:12756:4923":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"6:5241:42750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:10814:5907":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:8479:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:12191:4199":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:51038:4746":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:12182:50858":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:3629:3539":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:13819:52086":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:15096:4182":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"6:5987:43183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"18:829:5938":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:11044:2047":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"1:13875:4286":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:11304:46003":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:47633:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:11962:46216":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"12:1253:4269":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"21:16793:2169":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:46681:2133":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:13778:2052":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:4359:2746":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"6:4040:42128":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:5469:42788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:3218:5751":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"17:10266:5882":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6718:5780":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:11767:46907":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:51063:4738":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:46254:4818":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6682:5588":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"7:0:1472":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:7932:2649":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"14:189:44279":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"6:3862:42111":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:2138:1640":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"1:15033:54710":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:10071:5921":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:13898:52114":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"5:8129:5225":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:10800:4107":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:11164:4138":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:32258:3506":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13540:52024":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"21:14467:2138":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"2:12486:5050":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6200:43193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:15917:1864":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"21:18602:2383":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:12051:50788":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:7512:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"21:18031:2298":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"1:1079:4130":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"21:69:1998":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"2:14040:2357":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:49804:4584":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"21:18332:2138":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:6700:55647":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"21:13881:2025":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"21:17212:2169":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"17:13924:52121":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"30:905:63907":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:17977:106":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"17:10962:46269":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"21:16609:2164":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:9065:45981":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:17444:211":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"6:3966:42120":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:525:39130":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:3506:5755":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:12116:4319":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:32293:4197":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"21:8009:1371":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"21:6626:2177":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:3228:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10611:46211":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:3264:5753":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:50293:2780":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"12:1118:4267":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"1:1045:4170":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:3486:1973":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"6:6893:42308":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"9:963:5324":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:50346:2365":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:3256:4534":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:5561:10036":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:3349:3520":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:6644:5633":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"21:43:1013":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"1:8385:4347":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:7477:5596":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:2175:4211":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:22542:59565":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:4946:4073":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:49925:4593":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:48525:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:46285:5075":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11544:4238":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:46724:2138":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:13446:52010":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"12:976:4265":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:13547:52025":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:9005:45979":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:38813:4537":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:49292:4905":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6091:43186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:49898:4592":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:48745:60039":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:49551:4924":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:4419:42168":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:1618:2746":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13306:51644":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:1744:40036":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:11202:2374":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"1:11933:4285":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:1136:4125":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"27:481:3661":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:4866:4833":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:4066:42132":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:18572:2386":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"1:11058:1646":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:9956:4875":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:13119:51482":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:12234:50862":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:23830:4958":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6577:5631":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"17:11696:46732":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:51840:59551":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"12:949:4263":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:47616:2745":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"18:896:5943":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:8335:5181":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:15415:5419":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"29:42:1653":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:49211:4899":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:4008:46183":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13258:51577":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"31:168:1703":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"17:11847:46927":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:10576:55708":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"1:11167:4142":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"21:12874:2117":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:12018:59782":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"21:18311:2310":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"2:52377:4718":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"5:1472:4267":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9943:63889":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"21:15311:2150":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"17:12671:50953":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:5137:4842":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:1723:40034":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:3892:42114":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"21:18587:2385":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:52102:4756":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:13205:51533":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:4281:42151":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:4506:44890":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13912:52120":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"21:11906:2044":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"1:8294:4347":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:11993:50684":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"29:49:1650":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"18:610:5945":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:49220:4900":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"9:603:44064":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"16:3172:5749":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"30:870:5950":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:2267:4661":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:5459:42787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:48464:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:12100:3669":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:16463:2160":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"1:5376:4398":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6185:43192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:6870:4521":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:3084:4114":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:11231:5873":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:7823:5586":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:12696:4919":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:1432:2745":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:6464:4157":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:1653:4258":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:9245:5828":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:13728:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4023:42126":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9238:2621":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:16781:3256":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"2:46241:4817":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:18193:2302":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"16:3041:5748":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:14235:4056":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:10001:46048":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:13336:4412":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:13296:51582":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5945:39051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:11597:2169":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:10426:55526":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4045:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"17:11100:5875":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:10790:4178":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:3951:42118":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"21:15710:2043":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"17:13799:52082":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:11416:4897":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:12221:50861":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"30:853:142":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:50125:4947":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"16:6110:5612":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:49655:2302":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"6:6864:42304":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:13034:2119":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"31:208:1701":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"1:4359:4383":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:23087:4114":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:5414:42784":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:4047:4122":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:8486:2630":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:6864:4110":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:11067:2248":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:3091:5806":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:3398:3530":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"18:739:63914":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13453:52013":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"6:1563:40019":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3421:3535":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"21:17163:2169":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:51431:4748":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:11388:4895":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:49469:4921":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"21:18484:5962":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"2:24209:4976":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:8844:54668":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:14715:11029":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:5740:4097":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:903:4328":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:46295:5076":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"9:927:43954":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"12:1667:5402":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:8902:45977":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:52735:4762":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"21:18478:2080":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"17:11082:5837":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"30:1072:5943":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"8:0:1829":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13590:52030":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11118:2931":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:3200:2283":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:2937:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"30:170:52486":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"27:495:2630":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:13025:4580":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"5:5415:2922":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"21:11539:2039":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"1:9770:55529":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:9162:5872":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"30:826:5944":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:13240:38427":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"17:13062:51480":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:5020:4836":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10353:5886":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:6866:4163":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:7291:54660":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"30:153:52485":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:5672:5482":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"6:6239:43196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:9068:4301":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:22540:59567":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:3997:3764":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"21:17595:2239":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"6:4331:42157":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:5632:5481":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:10280:4548":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"20:127:1642":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:46713:4518":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:6591:5632":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11386:13359":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:18300:2309":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"2:11918:4910":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:50117:4944":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:10586:4332":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"5:5837:2062":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:51864:59525":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:11137:4136":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"17:9729:63875":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:4823:44982":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:5011:4055":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:11466:2046":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"6:1596:40022":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:786:9917":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"16:5960:5498":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"5:4306:2745":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"18:644:5947":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:14943:4288":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:13573:4255":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"21:14248:2128":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"5:3951:4210":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:11653:46729":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11294:4401":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:11197:4225":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"1:1486:4210":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"27:460:3716":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"1:5863:4461":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:22899:4155":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13370:51650":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:15911:1859":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:15112:4183":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6870:42305":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"12:1144:4268":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:1655:4269":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"5:8188:2746":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:4032:4123":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:7444:60986":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:7549:5583":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"1:6562:4167":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:14346:2135":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"2:3382:3526":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:53393:20738":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7303:5649":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10448:5846":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:10377:5884":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"21:12300:2063":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"17:10950:46292":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:5766:5490":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:13015:4579":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:15660:55513":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:11140:2933":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"21:15304:2151":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"12:2323:63016":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:7682:4284":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"21:13268:2123":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"2:3416:3534":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10516:5850":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:897:4327":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:5273:5506":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"21:16406:2162":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"17:12262:50864":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"21:4185:63936":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"6:1760:40037":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:50167:4203":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"1:8137:4347":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"2:24196:4977":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:12693:2074":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"27:21:64001":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"16:6605:5589":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:11453:4227":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:6068:39956":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:2934:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:13482:11027":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:50969:59541":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:2938:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"21:11661:2041":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"17:11199:46002":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"6:4133:42140":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:5969:39010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"18:885:5942":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"12:761:2745":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:9659:63886":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12467:50878":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:10623:46212":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"21:17739:2293":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"27:515:3665":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"1:15003:4199":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:7894:5610":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:46339:5071":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:11358:5831":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13154:51486":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:18121:2300":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"21:18431:2082":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"5:8137:60882":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:6257:5156":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:6221:43195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13506:52018":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:24181:5026":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:13637:52040":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13221:51534":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"1:15928:1873":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:46532:2117":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:47624:2746":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:46316:5070":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:6087:4407":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:3613:2296":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:1617:40024":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"30:812:2145":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:15925:1870":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"21:9337:1646":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:13282:51580":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:11714:46788":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"20:110:1968":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:48078:4998":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:11001:46266":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:3392:5760":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:14588:2139":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"2:45966:3541":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"18:820:5937":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:2381:2783":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:47437:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"27:567:3670":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"21:18489:2083":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"2:49693:4932":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12040:50787":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:46931:33821":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:3839:60986":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:5436:62537":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:11295:4891":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:10855:2939":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"0:0:1733":{"crate_id":0,"path":["futures"],"kind":"module"},"5:2310:5238":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:4764:4539":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"22:7:1659":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"2:3370:3528":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:4362:4384":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:53319:4722":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:52024:4749":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:3153:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:4688:2314":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"26:49:53141":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"16:3118:5759":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:9664:1654":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"2:49569:4925":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"21:15320:2033":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"2:10507:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:3345:3517":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:2218:5173":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46633:4520":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:1522:40013":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:12771:46004":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:2866:5744":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:744:63903":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"21:14110:2134":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"2:4733:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"21:10770:2025":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"17:9759:45991":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:8241:4193":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:51336:59553":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"9:234:5284":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"27:600:3714":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"1:11051:2172":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"21:16826:2173":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"21:12062:2053":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"2:5146:4560":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"5:2553:5211":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:47479:2169":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:50010:38429":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"1:4436:2947":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:3497:2253":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10224:46068":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"5:1674:4260":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:3040:61078":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"21:10585:2026":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"17:13554:52026":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"21:7249:1647":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"21:9703:1668":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"16:6569:5777":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:46270:4820":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:7634:4281":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"6:4101:42136":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:51224:4739":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:12857:2079":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"5:3396:4214":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:3150:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8808:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:15927:1872":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:537:39132":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:12327:50868":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:9358:4580":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:5788:60986":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"21:7964:1648":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"12:181:5397":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:8437:4210":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:15908:1856":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"16:3714:44373":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:569:39135":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:9971:63878":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:1492:4258":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:11382:4176":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:6032:5507":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:37569:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:3800:44409":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:17682:2240":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:24730:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"21:4371:2149":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"9:722:5260":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"21:10248:2384":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"28:37:2746":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"2:51683:4720":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:53457:20742":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"12:2315:63019":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"24:258:2022":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"2:3739:4675":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"12:930:4261":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:69:5151":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13041:51426":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:7467:5576":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:46922:2173":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:8097:5104":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"24:380:63945":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"2:51462:4752":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:5386:42781":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:15881:10035":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:6155:43190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:12807:4888":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:46523:4516":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:704:2145":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:8151:2746":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:47658:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:3473:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:14:1946":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:14494:4107":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6620:5775":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:10424:60314":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:4721:4653":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"23:0:1978":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"27:534:3667":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"16:3522:44362":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"21:17254:2232":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"1:9593:55390":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:8359:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"9:996:5325":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:10656:46194":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:3972:41967":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:5658:4171":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"21:11091:2374":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:50337:2364":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:12671:4357":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:12632:50950":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:11970:46214":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"21:9955:2149":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"21:18557:2598":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"1:1534:4265":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5269:42772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:6021:5742":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"21:4450:1643":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"21:11320:2050":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"2:24088:38185":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:8340:4638":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:3353:3524":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:18268:2306":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"6:5371:42779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:10517:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:2159:2169":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"31:120:1699":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"21:17299:2233":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"2:45843:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"5:3772:2745":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:12917:51423":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:6176:5620":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:6413:5407":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:624:39142":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:46308:4934":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"9:809:3672":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:11333:4892":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:636:2145":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:2847:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:24144:38188":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:46662:2132":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:24011:60048":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:46693:2135":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:48753:4620":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10061:46067":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"27:576:3671":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"16:3287:5754":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:5536:2661":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:51278:4731":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"21:18392:2315":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"17:10028:46049":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"12:377:5396":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7195:5643":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:18376:2313":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"17:13348:51648":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:46226:4133":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:14201:4208":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"21:16774:2163":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"2:23972:38162":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:4013:42125":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:11159:46000":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4387:42164":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:12442:50876":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:2178:34367":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"21:661:55514":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"17:10988:46267":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"27:552:3668":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"12:469:63008":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3318:3514":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:46545:4517":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"6:3957:42119":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:5295:44361":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"5:8353:61079":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"17:9280:44358":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:4395:42165":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:15934:1879":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"13:232:63021":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:5957:4466":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"17:294:63879":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:4501:42177":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:6488:2023":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:49605:4927":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"9:1056:5319":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:8157:2111":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"5:3362:4213":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:5379:42780":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:14732:4289":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:7226:5646":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13760:52044":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"6:4145:42141":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:8493:4317":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"21:10635:2028":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:47495:2746":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:8390:2255":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"24:15:2993":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:3997:42123":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7514:5594":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"9:776:5306":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"6:4052:42130":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:3743:5904":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:10795:4357":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:5231:45215":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:650:5944":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:15922:1867":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:51808:59524":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:10571:46209":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:13609:52032":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"21:15936:2158":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"17:13685:52041":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:1663:4259":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"12:2013:2231":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:595:2649":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"18:811:5936":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:48561:4546":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:5802:4102":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:13564:52027":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:6357:5625":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:5347:42777":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"21:15993:2155":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"21:15663:2026":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"27:487:3662":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"16:7406:5578":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"12:354:63011":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"21:16862:187":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"14:194:44280":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:13854:2055":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:6702:55649":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:3868:42112":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"27:394:202":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"17:11779:46908":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"1:14154:2945":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"16:3604:44364":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"6:5522:42815":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"21:9126:2922":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"2:50129:4945":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:12155:50856":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:2968:5746":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"21:10328:2024":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:50133:4946":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:1522:4263":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:56277:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:17884:2297":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"2:49387:2931":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:8393:3672":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:13245:38428":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"6:1736:40035":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"16:4230:44789":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:9646:1657":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"1:15932:1877":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:22889:4114":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:10229:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:5973:4469":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"18:754:63900":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:5986:4470":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:12515:2068":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"17:11015:46293":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:6028:39979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"20:122:4114":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"17:10502:46109":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:51317:4716":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:9332:5829":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:3194:4358":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:2330:5207":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:53194:4719":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:49320:4908":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"17:13318:51646":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:50113:4942":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:5456:5470":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"5:7257:60986":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:12142:50855":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:10652:10031":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:2991:5757":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:49301:4906":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:49310:4907":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:50283:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"9:749:5261":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:11519:46621":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11482:46405":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"21:12075:2054":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"21:17385:2236":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"21:16175:2153":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"1:10609:4056":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:6964:4109":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"21:10830:2029":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"1:15930:1875":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:10844:5848":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:22763:4700":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:6087:5572":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:12275:50865":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"30:1033:5940":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:8579:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:10331:5848":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"21:12923:2118":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"21:9659:1656":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"1:11967:4288":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:8450:2254":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11603:4241":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:9638:55198":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"21:10967:2034":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"1:3335:4367":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:49344:4999":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5563:42817":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:52989:4750":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7264:5590":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:3357:3522":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:7928:4493":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:3710:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:2170:4210":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:8930:4444":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:8978:4304":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"30:137:52484":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:10788:46181":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:11289:4400":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:3259:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:12208:50860":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"21:7659:2237":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"17:510:45974":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:17321:2235":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"2:6611:60279":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:12659:50952":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:48984:5081":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"5:3038:5111":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:24128:38177":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:10658:4219":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:14869:55523":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:15146:4191":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:1419:2169":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:3365:3523":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:299:63884":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"16:2945:5768":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:13356:51649":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"21:16820:2172":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"17:10529:46110":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:4671:44955":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"16:7342:5607":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"6:5167:42765":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:14091:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"6:6614:39087":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:11118:45998":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"26:55:53142":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:5582:4712":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:51255:4727":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:47826:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6887:42307":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"16:5360:5465":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:49505:4894":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:5978:43182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:49700:4933":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:11915:50677":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:6942:4165":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"30:1061:5942":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:1622:40025":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:16337:2157":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:10272:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:10290:4551":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:13497:52017":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:17835:2296":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:49451:4920":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:10284:4549":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12028:50731":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"17:13377:51662":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:6391:5626":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:13488:52016":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"21:16264:2167":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:22893:4153":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4401:42166":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:37593:4505":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"21:12851:2078":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:10878:2031":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:18626:2388":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"2:45802:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4120:42138":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6636:43556":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:47910:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"21:14714:2142":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"1:15923:1868":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:6704:55651":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"21:599:2650":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"1:11101:2117":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:45864:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:13933:52122":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:11981:46215":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:7158:5640":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:12795:51030":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:10675:11022":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:15154:3075":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:46008:4495":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"2:5092:4495":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:4706:2310":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"21:9421:2149":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"1:11614:4242":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7236:5647":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13620:52038":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:10801:46180":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"5:3039:62211":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:7446:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:3404:3531":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5312:42776":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"21:13151:2121":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"2:57617:59903":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:8141:59705":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"21:16536:2161":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"1:11504:3672":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:9186:5836":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:9342:4152":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12373:50872":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11628:46727":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11952:4287":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11406:46395":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:7024:5791":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:9951:4874":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:50390:4120":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"21:13111:2120":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"2:8381:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:7884:5582":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"16:3338:5500":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12598:50887":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:531:39131":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:4300:42153":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:22812:4114":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"18:152:52485":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9440:45987":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:24052:4803":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:2733:5460":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:15909:1857":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:13788:52081":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:5548:42816":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11588:46690":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:9745:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:15920:1865":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:9296:45967":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:4157:5911":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:51150:4747":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"9:1020:5326":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:10960:2035":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"21:10084:2599":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"1:14983:54904":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:51612:4732":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"21:14118:2132":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"6:5282:42774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:3698:3540":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"16:4852:44986":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:11183:4888":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:3192:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"12:463:63015":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:4438:2948":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11738:46898":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:8864:4710":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:5314:44359":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:49419:4891":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"21:18401:2316":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"5:2200:61008":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:48214:4541":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:45910:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"17:11458:46404":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:23048:15213":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:49230:4901":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:6636:5591":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10468:5845":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"15:269:5415":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:8415:5228":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"21:17093:3415":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"17:9649:45989":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:46653:4522":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:12664:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:3048:62152":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:46624:2025":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13746:52043":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:50360:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:49987:4596":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:10668:4270":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:50137:4940":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:5292:42775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:46355:4933":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:12521:50882":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:1457:4268":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"21:15052:63923":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"17:13192:51532":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:13394:51980":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:14520:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"17:12343:50869":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:47742:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"16:6101:5570":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:46493:11645":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:56264:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:56290:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:5927:5496":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:15913:1860":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:10376:54706":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:3085:2893":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:45754:2782":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:7453:5575":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"1:15389:55709":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"5:4515:5192":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:10200:46063":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:12334:7668":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"27:188:3669":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:3339:3518":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"21:17310:2234":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"2:53338:20733":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"21:12037:2051":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"16:4304:44838":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4377:42163":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:4697:55830":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"6:4127:42139":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"21:15046:63942":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"2:51384:4760":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:8954:5838":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:46940:2170":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:9717:4392":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:15876:59128":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:3793:3546":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:10902:4114":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:46001:4494":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"21:13333:2023":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"21:17040:2176":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"2:46583:2122":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:6085:43185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"21:16971:2175":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"17:13733:52042":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4073:42133":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:4631:2303":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"30:942:63908":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:38750:2891":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:14537:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:3323:3519":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:9765:55518":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:53347:20734":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"16:6464:5587":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"25:0:1645":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"1:4397:2945":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"12:937:4262":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:11045:45997":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:3387:3527":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:49240:4902":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"12:968:4264":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:22561:59570":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:52071:4753":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:23733:4503":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11539:46681":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:5130:42722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:13583:3076":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"6:1527:40014":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"5:2777:5210":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:24696:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:47538:4994":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:10807:4108":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"21:16811:2171":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"16:3064:5805":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:4477:2944":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:157:38822":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:12673:55206":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:4417:44876":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:543:39133":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"21:12507:2067":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"1:12061:2746":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13598:52031":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:8695:4427":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:4215:42146":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:14930:4287":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:46376:5074":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:5421:5468":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:4614:44948":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12431:50875":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:3375:5171":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"16:5996:5616":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:2166:2231":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:2062:2922":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"21:16713:2166":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"17:13842:52087":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"16:6424:5627":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:14000:52165":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:42:1013":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"5:7840:61024":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:5790:5491":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:13240:51536":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:47564:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:4709:4652":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:2793:4119":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:22508:59442":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:15915:1862":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"14:56:46405":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:1572:40020":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"21:18659:2975":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"2:22710:4765":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:9961:45995":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:6672:2661":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"21:13872:2137":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"9:0:1830":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:1690:40030":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:53068:4734":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"21:9758:162":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"17:12712:50956":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"21:6962:2999":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"1:12186:4310":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2902:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:4475:2943":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"21:8119:917":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"12:840:4256":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:6868:4164":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:10938:46291":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"21:10274:1663":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:3540:2781":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:10565:4324":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:46362:5072":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:3506:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:6688:5114":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:49997:4597":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:12211:4200":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:1450:4256":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"21:12591:2072":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"1:10564:4114":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:48458:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:11357:4048":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:8106:2746":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10052:46051":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"24:18:2992":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"11:0:1832":{"crate_id":11,"path":["adler"],"kind":"module"},"1:10696:5214":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"18:729:63907":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:49781:4581":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:694:5950":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:16224:2154":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"1:10943:2247":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:50141:4941":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:432:2256":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:994:5223":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"18:720:60052":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:374:5178":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:690:1638":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"6:599:39138":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:3990:42122":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:13465:52014":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:4704:44963":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"28:220:4266":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"16:6014:5617":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6072:5458":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:7571:5571":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:7804:5584":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:6852:42302":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:11499:46620":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"21:17143:2745":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"24:203:2021":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"1:7980:3681":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"1:13853:55205":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:11678:46731":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"6:4112:42137":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"18:857:5940":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:13884:52096":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7185:5642":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:1161:10033":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:3727:3544":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:24764:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"17:9886:45993":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:3370:4211":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:53404:20739":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:23623:4154":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:6324:4417":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"17:10558:46208":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"12:877:4210":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:11640:46728":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"21:18241:2303":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"16:6964:4992":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:3562:3537":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:10140:5848":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:46415:4987":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:13819:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:6881:42306":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"12:1762:63006":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:46915:33819":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"18:620:63910":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10236:5841":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:11616:46692":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"21:16802:2170":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"16:5707:5483":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:10219:2314":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"21:11600:2045":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:51119:4759":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:57638:59902":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:49675:4930":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:17221:2745":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:2492:4540":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:7333:5593":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:15305:4399":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"9:686:5257":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"1:11982:4289":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:5428:42786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"21:10924:2033":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"18:849:5939":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"21:12043:187":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"28:203:2659":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"1:1505:4261":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:2203:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"7:38:43835":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:5407:5467":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"30:977:5935":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:6152:5574":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:52185:4741":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10458:46108":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:7668:4283":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:13272:51579":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:12426:2065":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"12:2331:4193":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:23098:4704":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"5:1597:2169":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:48207:4547":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"12:2039:4213":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:48200:4548":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:22952:4704":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:7373:2746":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"21:591:2036":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"17:10403:5847":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"28:55:2231":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"1:15041:4296":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"6:4060:42131":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:5965:4467":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"26:0:1979":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"16:6999:5637":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"6:519:39129":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:23096:4715":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:48491:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:1200:5391":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5488:5474":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:22563:59568":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:23729:4114":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:9065:4433":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:14489:59262":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:24594:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:7737:4286":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:4477:44886":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:4341:42158":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"12:1651:5401":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"21:14649:2030":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"2:24628:3167":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"12:1235:5392":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"18:790:5934":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"1:14956:55282":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:4651:2922":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"31:0:1697":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"17:13532:52023":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:48503:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:14863:55520":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:12772:4926":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9799:45992":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"21:10525:2027":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"5:8254:4273":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:17969:2230":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"1:5724:4095":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:10933:3761":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"21:11392:2038":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"5:1235:5206":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:7797:4290":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"21:12762:2075":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:22799:4764":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"6:591:39137":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:10673:46213":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"6:563:39134":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11726:46789":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:5015:4835":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"30:820:5947":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:16661:2165":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"21:17237:2230":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"1:11161:4137":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"21:10419:2023":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:9133:45983":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:3978:42121":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:6204:4416":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:5652:4173":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:55906:4499":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:4599:61004":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"21:14394:2136":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"21:12049:2052":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"1:7260:54660":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7205:5644":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"12:2009:2746":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:9849:63887":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"18:782:2145":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"30:1013:4578":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"6:1700:40031":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:1729:4411":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:4386:44870":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:3163:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:6252:5623":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"9:469:43960":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"21:9814:3732":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"17:13582:52029":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9210:45984":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"30:896:60052":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:15140:4190":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"1:14719:4174":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"16:7146:5639":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:48988:5082":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"12:2309:60101":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:6176:43191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"31:197:1705":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"5:8194:2746":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"24:0:1732":{"crate_id":24,"path":["futures_task"],"kind":"module"},"6:1630:40026":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:32459:59936":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"27:608:3715":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"1:7800:4292":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"29:47:1652":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"17:12494:50880":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:4262:42149":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:11343:4468":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"16:5717:5485":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:47487:2745":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:7295:5592":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:3500:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"9:27:5308":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:47784:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:52342:4736":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:11194:4144":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"9:41:5309":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"21:15588:2040":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"21:12114:2056":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"6:1658:40027":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"18:136:52484":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:602:2037":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"17:11665:46730":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"9:1075:5327":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:6136:5613":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"16:6208:5621":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:6126:5618":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:9626:55207":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"21:14823:2144":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"1:823:9917":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:15921:1866":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:51086:4726":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12385:50873":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"21:18520:63927":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"6:4164:42142":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10912:46281":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:46744:2142":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:14160:2943":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"16:2912:5745":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:14997:2147":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"2:3250:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11378:5830":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"21:17152:2996":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"21:13956:2027":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:53419:20740":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:10864:46184":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:3197:2278":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"16:3018:5747":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"30:708:63910":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"6:6899:42309":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:32307:59901":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"5:3488:4210":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:8929:45978":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:7633:5157":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:161:38823":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"21:18474:2081":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"5:1441:4266":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"21:14207:2131":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"1:15933:1878":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:169:52486":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6269:5624":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:5379:4399":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"12:429:5394":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:1153:10030":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"10:0:1831":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:3558:3536":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:11124:2933":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"21:1833:2076":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"21:13644:2145":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"1:2187:4213":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"21:16127:2047":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"30:996:5937":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"9:900:43988":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:6219:5622":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:51635:4735":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:11809:46912":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:9237:4305":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"21:1570:2066":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"21:18383:2314":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"1:2598:54659":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"17:13865:52090":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:712:4505":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:6910:42310":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"14:231:5108":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"21:6891:2997":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"1:11349:4410":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:46960:33823":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:5166:2660":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"12:774:2746":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7073:5638":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:11226:55704":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"6:5221:42770":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"21:10273:1664":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"6:670:39172":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:3336:4212":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:1602:40023":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10211:46062":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:8344:4637":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:1511:4262":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:12357:2064":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"1:13948:4285":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10279:5821":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"0:116:1544":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:14544:2248":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"21:15243:2148":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"17:681:45976":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:7250:5648":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:6442:4160":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:18410:3734":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"0:142:1030":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"2:10269:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:50180:5008":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"17:12783:51027":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:53472:20743":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:10692:11029":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3524:2294":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"16:2816:5762":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:4265:2949":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"1:11331:4136":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:605:39139":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:1554:40018":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"31:166:1702":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"5:3894:5229":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:56316:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6214:43194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"27:467:5228":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"17:11328:46004":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:6812:43716":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:8370:5105":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:24526:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:13429:52009":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:3260:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11994:55277":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:14554:55273":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:22523:59442":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:52528:4742":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"21:8769:2172":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"1:10451:55524":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"14:244:44281":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:9732:4393":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"28:211:4268":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"27:474:3681":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"17:10635:46179":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:8860:2748":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:4641:44950":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:5189:4561":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5472:5473":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:12582:50886":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:4365:4385":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:14166:2130":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:13453:2125":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"16:7378:5579":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:9179:54668":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"21:15085:3077":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"16:2794:5503":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:6051:39953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:10282:4541":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:52264:4729":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"21:5869:1644":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"17:10407:5880":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:13172:51488":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:4241:42148":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:10821:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4470:42174":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:2181:4212":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:32359:59900":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"21:12972:2141":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"1:15127:4184":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:10106:5916":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"30:1025:5939":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10477:5844":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:1497:4259":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:4183:42143":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:46644:2027":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:3291:2252":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:4193:42144":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:88:38756":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"9:157:5276":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"6:4494:42176":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:8454:5152":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:45726:2750":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"20:39:4114":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"2:49976:4595":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:10041:46050":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"21:18416:2649":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"1:12067:3666":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:12231:4201":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:14847:55514":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:16868:2056":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"1:4991:4134":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"16:6780:5635":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:48762:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:6954:2485":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:11408:4162":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"26:65:53143":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"1:2192:4214":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:11932:50678":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:3365:5501":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:49718:4934":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"9:692:5259":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"5:6764:2922":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"16:5815:5492":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:160:5393":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"21:18144:2301":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"21:97:1665":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"2:49401:2933":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"16:2754:5502":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:51581:4728":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3317:4361":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:53378:20737":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:3333:4366":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:56303:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"20:44:1636":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"5:3044:62153":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8743:4436":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"12:2018:4210":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"21:14948:2146":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"21:11722:2040":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"1:12156:4432":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:46592:2123":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:2889:5763":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:6106:43188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"18:766:63908":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:14964:4200":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:11283:4048":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:11026:45996":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"14:47:44279":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"12:1100:4266":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:5228:42771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:10584:5910":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"21:13709:2145":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"2:8425:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:11191:4143":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:8321:5180":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:8849:5869":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:53241:4737":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:2850:4656":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12168:50857":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:12132:3667":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"21:11979:2049":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"12:853:4257":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:25202:4824":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:14484:55090":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:49623:4928":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:4325:42156":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:1607:2745":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:10839:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:1156:10032":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:6005:13359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:7392:5580":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:1646:4268":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:16952:2174":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"1:15926:1871":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"11:46:63005":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3159:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"21:18326:2312":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"16:7843:5652":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:4364:42161":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:12005:54691":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:3147:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:46369:5073":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:2314:5885":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:3333:3515":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"17:13054:51478":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:4215:2231":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:15929:1874":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4033:42127":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:50990:59540":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:7111:61001":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:53442:20741":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"24:21:2994":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"1:14021:55487":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4358:42160":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"27:502:3663":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"6:4517:42179":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:10365:45976":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13810:52083":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:49962:4594":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12756:50964":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:9368:45985":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:48774:3672":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"30:880:2145":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:15404:5419":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6807:5636":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:3268:2910":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:3328:3516":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:6949:5788":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:8198:3681":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"6:4317:42155":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:3241:5752":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"16:5561:5478":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:8289:5179":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:11990:59265":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:10701:2117":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"2:47547:38390":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:10128:5918":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"5:3329:2169":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"12:0:1833":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:1011:2169":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:6100:43187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"1:15931:1876":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:3377:3525":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:3647:2935":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6366:5408":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:24106:38186":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"5:1195:62154":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:45933:3538":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"27:521:3666":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"2:46703:2136":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"21:18250:2304":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"16:5975:5615":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:45:1996":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"5:8159:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10847:4379":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:10286:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:13040:4582":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:6795:4160":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11947:50679":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"28:71:64003":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:11338:4465":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:6792:4175":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:699:4323":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:10911:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6644:43557":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:9476:45988":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"20:194:2991":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"1:5503:4405":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"21:14515:2140":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"6:4046:42129":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:52311:4733":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:51660:4717":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:10489:5849":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:4306:42154":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:12153:201":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"16:5736:5486":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:3970:60986":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11254:5871":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:2753:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:3945:42117":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:1194:10034":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"16:3939:44523":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"16:7042:5792":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:22836:4766":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:45973:4124":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"21:11008:150":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"2:51708:4721":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:5998:43184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:48221:4549":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:9933:45994":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"21:10275:1660":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"1:13837:4284":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:8084:2172":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"21:6286:2055":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"1:9633:55528":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:12195:50859":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"5:8382:5106":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:13098:51481":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:5794:4100":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:13522:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"21:18129:2234":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"2:7835:4512":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:4699:60991":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"21:6760:63935":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"2:12954:4246":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:46395:4822":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"1:7654:4282":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:4347:42159":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"30:987:5936":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:11527:4237":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:24560:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:49684:4931":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:15916:1863":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"16:5855:5493":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:14157:2947":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"12:112:63014":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:10278:4547":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:12645:50951":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"17:10975:46268":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"30:920:63903":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:3772:44406":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46554:4519":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4227:42147":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9689:63888":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4255:4418":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:9236:2622":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:46333:4133":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:46601:59706":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:6744:5782":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:3408:3532":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:511:39128":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"12:2005:2169":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46573:2121":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:13772:52079":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:23901:4960":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:13331:51647":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"5:1694:5203":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:3715:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"21:17825:2295":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"1:3623:55516":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12741:50963":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:7216:5645":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6731:5781":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:1908:40172":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:56342:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9144:4308":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:3701:2297":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:11079:2250":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:2751:4118":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"12:2025:4211":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:13163:51487":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:3429:5504":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:5389:5067":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:6124:43189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:8167:5099":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:10149:45993":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"5:7611:5156":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:51485:4755":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:49193:4898":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:11885:4909":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:6518:5629":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12552:50884":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:5746:4094":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:11363:4419":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:12171:3732":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"21:13824:2024":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"5:1215:5205":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11835:46926":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:4535:44894":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:46503:11644":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:49142:4893":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:3549:44363":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7119:5508":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:11260:4890":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4459:42173":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"15:0:1835":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:49523:4895":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:49202:2143":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:9466:55235":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"5:8121:2231":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10081:5821":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:15892:55279":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"30:1005:5938":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:53367:20736":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13780:52080":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:50109:4939":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:5029:45038":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"30:888:4505":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4449:42172":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:53280:4757":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:7647:2518":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:51760:59552":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"24:407:3427":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"16:547:5487":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:12610:50901":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:9264:44359":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:49359:4768":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"21:10364:2027":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"24:237:2020":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"1:3345:4372":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"21:11141:2047":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"19:117:63915":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"21:10467:2032":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"21:13392:2023":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:13045:4583":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"16:7761:5651":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"27:509:202":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"17:12010:50687":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"21:9629:1655":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"16:4762:44971":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:4443:2169":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:9896:63883":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10926:46290":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:1533:40015":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:3981:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:4371:42162":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:10288:4550":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"20:27:1967":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"6:4293:42152":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:12636:2073":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"6:3881:42113":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"21:11783:2043":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"17:12118:50796":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"21:12843:2077":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"2:3503:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:1584:40021":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:49371:4915":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"5:7212:2231":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:10543:46207":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:45994:4493":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:3918:42116":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"1:7937:55197":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"6:1676:40029":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:56329:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:12733:4922":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"6:4203:42145":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4095:42135":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:4572:2170":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"11:54:5379":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:2401:11016":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"31:175:1700":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"1:12053:4316":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"14:216:44288":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:15380:29315":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:49850:4591":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:15432:2039":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"2:10557:4619":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"25:17:1646":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"2:32299:5011":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:3320:5807":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5185:42766":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"6:4410:42167":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:24080:38167":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"21:12255:2062":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"17:13477:52015":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4713:2930":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10253:5883":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:47504:4992":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"12:2045:4214":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:10179:46064":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:12946:51424":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:23994:4808":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"21:14297:2129":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"16:7870:5581":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:14030:1974":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4511:42178":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:6768:5784":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"15:248:5411":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:8271:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:46053:4786":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"21:13767:2126":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11111:2138":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:49279:4904":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:4922:45006":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:47556:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:10863:2299":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:45818:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:9740:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:17248:2231":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"2:52878:4730":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:1939:4210":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"1:8913:2173":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:5384:5466":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"7:85:43842":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:3156:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:10827:5908":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:1442:2746":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"21:9795:3733":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"2:47700:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9809:63876":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:11402:4896":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:5732:4096":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:51015:4758":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"31:117:1698":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"2:22495:4505":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:10117:5917":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:11604:46691":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:11374:4894":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:23041:4114":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"30:843:5949":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:15935:1880":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"14:0:1834":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:5407:42783":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:2262:5208":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:2907:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:13034:4578":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:13520:52020":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:1311:5922":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:5889:61007":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"21:11262:2048":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"21:10272:1661":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:11794:46911":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8651:4426":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11750:46899":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6858:42303":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"17:11434:46403":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:2399:11015":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"27:587:3672":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:9528:2931":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"20:96:1641":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"21:10281:2023":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"1:1637:4267":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"21:17133:2995":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:46428:4988":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:4902:4834":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:11246:54689":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"16:5505:5475":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:1717:40033":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"21:16907:2067":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:48473:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"15:230:5410":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:53495:20744":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"28:0:1980":{"crate_id":28,"path":["slab"],"kind":"module"},"5:4242:60986":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:5753:5489":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:660:5948":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:9769:63891":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"14:11:44279":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:7905:4711":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:2462:11034":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7786:5585":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:12507:50881":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13180:51530":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"17:11277:45966":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"1:1021:4347":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:24662:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:7856:5653":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:15245:4146":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:4043:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"21:18423:63934":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"1:11131:2302":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"12:1159:5389":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:2872:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"30:698:5945":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:4399:2946":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:632:39143":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"21:8121:1669":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"6:1547:40017":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"12:866:2231":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"30:966:5934":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:13743:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:50145:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:47952:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:11939:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:13627:52039":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:5159:42764":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:9551:5870":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:4643:60991":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:15326:4405":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"21:18259:2305":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"20:0:1635":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:28013:4709":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:5780:4098":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:6166:5619":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:578:3858":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"18:837:4578":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"12:2032:4212":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"21:16316:2168":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"6:584:39136":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:12982:51425":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"4:0:1828":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"18:0:1838":{"crate_id":18,"path":["memchr"],"kind":"module"},"21:18289:2308":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"21:15364:2038":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"6:5953:39952":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:607:45975":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"27:0:1666":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"16:6491:5628":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:1501:4260":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:53534:20745":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:1236:46065":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:15924:1869":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:3756:3545":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:5875:61003":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"17:10304:5824":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:51945:4761":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:4790:44974":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:24027:38150":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:12087:4318":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:1091:60986":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"21:1315:2055":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"16:5433:5469":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:2512:5881":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"5:3341:5170":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:6554:5630":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12247:50863":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"21:9837:3731":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"16:4350:44859":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:6984:2178":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"17:10160:46066":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:991:1639":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:1623:4266":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:5274:42773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:9600:63877":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:15910:1858":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:7337:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"30:958:2145":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:6923:43742":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:47470:2744":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:9839:5848":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:46734:2140":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:3145:5758":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"21:17230:2746":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"2:51534:4740":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:3412:3533":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:10317:5827":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"6:616:39141":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:7771:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"21:168:693":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"5:923:2131":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12725:50962":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"30:1042:5941":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:10887:46182":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:23424:4705":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"12:2303:63020":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:24798:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"21:18279:2307":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"2:48784:59619":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:7122:13361":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:11269:12687":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"21:18320:2311":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"1:13501:55196":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"5:3759:2169":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:47994:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:11147:45999":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:4425:42169":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:12462:5091":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:10095:5915":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:7815:61001":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4523:42180":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"21:17454:2176":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:46563:2120":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:5595:5480":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:50121:4943":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:11222:4889":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"21:67:1662":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"1:12181:4309":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"30:930:63900":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:48577:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:49266:4903":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:11115:2745":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:15914:1861":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:51192:59554":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11555:46682":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"21:17920:2117":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"21:14013:2124":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"21:14875:2133":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"17:13978:52129":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"6:610:39140":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:6690:4094":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4439:42171":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:6691:5634":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:11091:2169":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:3721:3542":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:13924:59578":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"30:0:1838":{"crate_id":30,"path":["memchr"],"kind":"module"},"1:10637:10028":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:5191:42767":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:49833:4590":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:11587:4239":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:4649:2249":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:18093:2299":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"16:7174:5641":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:24458:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"30:915:63914":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:2843:5743":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"21:17772:2294":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:47608:2169":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:4734:44968":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:10420:5879":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"20:169:1658":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"12:925:4258":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"21:17179:2068":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"5:1486:4269":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"31:192:1704":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"29:0:1649":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:45887:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4478:42175":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"12:396:5395":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"17:12408:50874":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"12:784:4259":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"21:17512:2238":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"}},"external_crates":{"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_executor","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"29":{"name":"futures_io","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"futures_core","html_root_url":null},"30":{"name":"memchr","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"futures_sink","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"slab","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"21":{"name":"futures_util","html_root_url":null}},"format_version":16}