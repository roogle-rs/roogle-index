{"root":"0:0:1864","crate_version":"0.3.28","includes_private":false,"index":{"2:12468:28451":{"id":"2:12468:28451","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12013:127","`FromStr`":"2:12012:2826"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41581:212","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12012:2826","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12012:2826","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81-21:6079:1785":{"id":"0:81-21:6079:1785","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6079:1785","glob":false}}},"2:12392:20090":{"id":"2:12392:20090","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41438:181","prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12396:20091":{"id":"2:12396:20091","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41438:181","prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12369:20662":{"id":"2:12369:20662","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12377:21962":{"id":"2:12377:21962","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43384:2673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69-21:424:1769":{"id":"0:69-21:424:1769","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1769","glob":false}}},"2:12400:2363":{"id":"2:12400:2363","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12052:8191","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::split_whitespace":"2:12378:26957","str::rsplit":"2:12406:20697"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43398:2674","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12447:28446":{"id":"2:12447:28446","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12077:8186","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12351:836":{"id":"2:12351:836","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12049:428"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12373:20686":{"id":"2:12373:20686","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12374:20687"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:1834":{"id":"0:52-31:100:1834","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1834","glob":false}}},"2:12472:20439":{"id":"2:12472:20439","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12360:28430":{"id":"2:12360:28430","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:48-31:65:1830":{"id":"0:48-31:65:1830","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1830","glob":false}}},"2:12389:20705":{"id":"2:12389:20705","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:589:1770":{"id":"0:70-21:589:1770","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1770","glob":false}}},"2:12436:28440":{"id":"2:12436:28440","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12052:8191","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::match_indices":"2:12433:28439"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43566:8207","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:1831":{"id":"0:49-31:68:1831","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1831","glob":false}}},"0:40-21:1293:1771":{"id":"0:40-21:1293:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1293:1771","glob":false}}},"2:12371:28431":{"id":"2:12371:28431","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12055:1448","str::slice_mut_unchecked":"2:12372:28432","crate::ops::Index":"2:3069:2565"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5516":{"id":"5:5516","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5517:29110","5:5518:8513","5:5521:29111","5:5524:29112","5:5532:29113","5:5533:29114","5:5534:2223","5:5535:21858","5:5536:21859"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:8-21:589:1770":{"id":"0:8-21:589:1770","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1770","glob":false}}},"2:12356:28429":{"id":"2:12356:28429","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12354:28428"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12433:28439":{"id":"2:12433:28439","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12052:8191","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::rmatch_indices":"2:12436:28440"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43548:8206","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5533:29114":{"id":"5:5533:29114","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2334","`String`":"5:7475:227"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2334","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2551","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12453:20706":{"id":"2:12453:20706","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12478:28453":{"id":"2:12478:28453","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4554:28453"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43715:8203","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-21:20:1080":{"id":"0:33-21:20:1080","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1080","glob":false}}},"2:12361:320":{"id":"2:12361:320","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12362:319","`u8`":"1:12066:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4576:1778":{"id":"0:62-21:4576:1778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4576:1778","glob":false}}},"5:5518:8513":{"id":"5:5518:8513","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6044:1786":{"id":"0:24-21:6044:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6044:1786","glob":false}}},"0:31-21:6628:1792":{"id":"0:31-21:6628:1792","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6628:1792","glob":false}}},"0:59-2:12635:136":{"id":"0:59-2:12635:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:12635:136","glob":false}}},"0:28-22:7:1790":{"id":"0:28-22:7:1790","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1790","glob":false}}},"2:12352:20642":{"id":"2:12352:20642","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12430:28438":{"id":"2:12430:28438","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12052:8191","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::matches":"2:12427:2090"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43620:8209","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12421:28436":{"id":"2:12421:28436","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:726":{"id":"0:37-21:104:726","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:726","glob":false}}},"0:34-21:6630:1794":{"id":"0:34-21:6630:1794","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6630:1794","glob":false}}},"2:12415:20699":{"id":"2:12415:20699","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191","str::rsplitn":"2:12418:20701"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43502:8180","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12474:20441":{"id":"2:12474:20441","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-21:424:1769":{"id":"0:7-21:424:1769","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1769","glob":false}}},"2:12367:20661":{"id":"2:12367:20661","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:63-25:9:1777":{"id":"0:63-25:9:1777","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1777","glob":false}}},"0:51-31:136:1833":{"id":"0:51-31:136:1833","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1833","glob":false}}},"0:18-29:27:1781":{"id":"0:18-29:27:1781","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1781","glob":false}}},"2:12445:28444":{"id":"2:12445:28444","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12465:28450":{"id":"2:12465:28450","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3664:1775":{"id":"0:74-21:3664:1775","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3664:1775","glob":false}}},"2:12383:20703":{"id":"2:12383:20703","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12450:28447":{"id":"2:12450:28447","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12354:28428":{"id":"2:12354:28428","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:1836":{"id":"0:54-31:120:1836","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1836","glob":false}}},"0:56:1097":{"id":"0:56:1097","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:726","0:59-2:12635:136","0:60-20:32:1767","0:62-21:4576:1778","0:63-25:9:1777","0:65-21:1293:1771","0:66-20:68:1772","0:67-20:97:1773","0:69-21:424:1769","0:70-21:589:1770","0:71-21:5040:1779","0:73-21:2760:1774","0:74-21:3664:1775","0:76-29:27:1781","0:77-29:17:1782","0:78-29:25:1783","0:79-29:20:1784","0:81-21:6079:1785","0:82-21:6044:1786","0:83-21:6074:1787","0:84-21:6061:1788"],"is_stripped":false}}},"0:10-20:68:1772":{"id":"0:10-20:68:1772","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1772","glob":false}}},"2:12376:26664":{"id":"2:12376:26664","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12049:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43374:8197","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2760:1774":{"id":"0:73-21:2760:1774","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1774","glob":false}}},"0:38-21:5133:961":{"id":"0:38-21:5133:961","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5133:961","glob":false}}},"0:77-29:17:1782":{"id":"0:77-29:17:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1782","glob":false}}},"0:43-27:0:1798":{"id":"0:43-27:0:1798","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1798","glob":false}}},"2:12375:26944":{"id":"2:12375:26944","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12049:428"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43368:8198","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5534:2223":{"id":"5:5534:2223","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:1773":{"id":"0:67-20:97:1773","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1773","glob":false}}},"2:12424:28437":{"id":"2:12424:28437","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:29112":{"id":"5:5524:29112","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:21858":{"id":"5:5535:21858","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12473:20440"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32-21:37:1793":{"id":"0:32-21:37:1793","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1793","glob":false}}},"0:60-20:32:1767":{"id":"0:60-20:32:1767","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1767","glob":false}}},"0:41-21:5081:1796":{"id":"0:41-21:5081:1796","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5081:1796","glob":false}}},"0:79-29:20:1784":{"id":"0:79-29:20:1784","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1784","glob":false}}},"0:55-31:125:1837":{"id":"0:55-31:125:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1837","glob":false}}},"0:78-29:25:1783":{"id":"0:78-29:25:1783","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1783","glob":false}}},"5:5517:29110":{"id":"5:5517:29110","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2334","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2551","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2334","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}},{"type":{"resolved_path":{"name":"Global","id":"5:7208:2551","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6074:1787":{"id":"0:83-21:6074:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6074:1787","glob":false}}},"2:12374:20687":{"id":"2:12374:20687","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12373:20686"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71-21:5040:1779":{"id":"0:71-21:5040:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5040:1779","glob":false}}},"0:27-20:131:1789":{"id":"0:27-20:131:1789","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1789","glob":false}}},"2:12439:28441":{"id":"2:12439:28441","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65-21:1293:1771":{"id":"0:65-21:1293:1771","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1293:1771","glob":false}}},"0:82-21:6044:1786":{"id":"0:82-21:6044:1786","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6044:1786","glob":false}}},"0:14-21:3664:1775":{"id":"0:14-21:3664:1775","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3664:1775","glob":false}}},"2:12441:28442":{"id":"2:12441:28442","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12362:319":{"id":"2:12362:319","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12066:1551"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12475:28452":{"id":"2:12475:28452","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4556:28452"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43697:8202","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12379:26939":{"id":"2:12379:26939","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12378:26957"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43681:8193","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12446:28445":{"id":"2:12446:28445","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12471:20437":{"id":"2:12471:20437","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39470:20575","Self::is_ascii":"2:12470:20436"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39470:20575","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12381:28433":{"id":"2:12381:28433","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43662:8205","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4-2:12635:136":{"id":"0:4-2:12635:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:12635:136","glob":false}}},"2:12406:20697":{"id":"2:12406:20697","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12052:8191","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::split":"2:12400:2363"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43416:8176","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12470:20436":{"id":"2:12470:20436","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12409:28434":{"id":"2:12409:28434","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12052:8191","str::split":"2:12400:2363","prim@char":"1:12049:428","`DoubleEndedIterator`":"2:7473:121","str::rsplit_terminator":"2:12412:28435"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43448:8211","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:1773":{"id":"0:11-20:97:1773","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1773","glob":false}}},"0:20-29:25:1783":{"id":"0:20-29:25:1783","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1783","glob":false}}},"2:12443:28443":{"id":"2:12443:28443","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12418:20701":{"id":"2:12418:20701","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12049:428","str::splitn":"2:12415:20699","self::pattern":"2:12052:8191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43520:8178","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12372:28432":{"id":"2:12372:28432","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12055:1448","crate::ops::IndexMut":"2:3073:2566","str::slice_unchecked":"2:12371:28431"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12459:28448":{"id":"2:12459:28448","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-21:6629:1795":{"id":"0:35-21:6629:1795","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6629:1795","glob":false}}},"2:12363:20659":{"id":"2:12363:20659","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41438:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:1777":{"id":"0:15-25:9:1777","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1777","glob":false}}},"0:26-21:6061:1788":{"id":"0:26-21:6061:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6061:1788","glob":false}}},"0:29-21:6631:1791":{"id":"0:29-21:6631:1791","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6631:1791","glob":false}}},"0:42-21:57:1797":{"id":"0:42-21:57:1797","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1797","glob":false}}},"2:12403:20695":{"id":"2:12403:20695","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:11868:8182","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:1835":{"id":"0:53-31:102:1835","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1835","glob":false}}},"2:12412:28435":{"id":"2:12412:28435","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12052:8191","str::split":"2:12400:2363","prim@char":"1:12049:428","str::split_terminator":"2:12409:28434"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43466:8210","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6102:1800":{"id":"0:44-21:6102:1800","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6102:1800","glob":false}}},"0:46:1675":{"id":"0:46:1675","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1830","`LocalPool`":"31:120:1836"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1830","0:49-31:68:1831","0:50-31:109:1832","0:51-31:136:1833","0:52-31:100:1834","0:53-31:102:1835","0:54-31:120:1836","0:55-31:125:1837"],"is_stripped":false}}},"0:45-21:5135:1801":{"id":"0:45-21:5135:1801","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5135:1801","glob":false}}},"2:12427:2090":{"id":"2:12427:2090","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12052:8191","`DoubleEndedIterator`":"2:7473:121","prim@char":"1:12049:428","str::rmatches":"2:12430:28438"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43602:8208","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12353:28427":{"id":"2:12353:28427","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12365:20660":{"id":"2:12365:20660","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41438:181"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10146:225","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6061:1788":{"id":"0:84-21:6061:1788","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6061:1788","glob":false}}},"0:50-31:109:1832":{"id":"0:50-31:109:1832","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1832","glob":false}}},"0:39-21:4576:1778":{"id":"0:39-21:4576:1778","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4576:1778","glob":false}}},"2:12378:26957":{"id":"2:12378:26957","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12379:26939"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43672:8194","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25-21:6074:1787":{"id":"0:25-21:6074:1787","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6074:1787","glob":false}}},"2:12382:26945":{"id":"2:12382:26945","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43690:8192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12359:20636":{"id":"2:12359:20636","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11612:8195"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1864":{"id":"0:0:1864","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5135:1801","crate::executor":"0:46:1675","crate::stream":"21:1293:1771","crate::channel":"27:0:1798","crate::future":"21:104:726","crate::sink":"21:4576:1778"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1675","0:56:1097","0:4-2:12635:136","0:5-20:32:1767","0:7-21:424:1769","0:8-21:589:1770","0:10-20:68:1772","0:11-20:97:1773","0:13-21:2760:1774","0:14-21:3664:1775","0:15-25:9:1777","0:16-21:5040:1779","0:18-29:27:1781","0:19-29:17:1782","0:20-29:25:1783","0:21-29:20:1784","0:23-21:6079:1785","0:24-21:6044:1786","0:25-21:6074:1787","0:26-21:6061:1788","0:27-20:131:1789","0:28-22:7:1790","0:29-21:6631:1791","0:31-21:6628:1792","0:32-21:37:1793","0:33-21:20:1080","0:34-21:6630:1794","0:35-21:6629:1795","0:37-21:104:726","0:38-21:5133:961","0:39-21:4576:1778","0:40-21:1293:1771","0:41-21:5081:1796","0:42-21:57:1797","0:43-27:0:1798","0:44-21:6102:1800","0:45-21:5135:1801"],"is_stripped":false}}},"2:12456:20707":{"id":"2:12456:20707","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41436:183","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12072:8188","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12473:20440":{"id":"2:12473:20440","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12477:2491":{"id":"2:12477:2491","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4557:2491"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43706:2492","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12350":{"id":"2:12350","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12351:836","2:12352:20642","2:12353:28427","2:12354:28428","2:12356:28429","2:12359:20636","2:12360:28430","2:12361:320","2:12362:319","2:12363:20659","2:12365:20660","2:12367:20661","2:12369:20662","2:12371:28431","2:12372:28432","2:12373:20686","2:12374:20687","2:12375:26944","2:12376:26664","2:12377:21962","2:12378:26957","2:12379:26939","2:12380:2354","2:12381:28433","2:12382:26945","2:12383:20703","2:12386:20704","2:12389:20705","2:12392:20090","2:12396:20091","2:12400:2363","2:12403:20695","2:12406:20697","2:12409:28434","2:12412:28435","2:12415:20699","2:12418:20701","2:12421:28436","2:12424:28437","2:12427:2090","2:12430:28438","2:12433:28439","2:12436:28440","2:12439:28441","2:12441:28442","2:12443:28443","2:12445:28444","2:12446:28445","2:12447:28446","2:12450:28447","2:12453:20706","2:12456:20707","2:12459:28448","2:12462:28449","2:12465:28450","2:12468:28451","2:12470:20436","2:12471:20437","2:12472:20439","2:12473:20440","2:12474:20441","2:12475:28452","2:12477:2491","2:12478:28453"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5521:29111":{"id":"5:5521:29111","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:21859":{"id":"5:5536:21859","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12474:20441"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:726":{"id":"0:58-21:104:726","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:726","glob":false}}},"2:12462:28449":{"id":"2:12462:28449","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5040:1779":{"id":"0:16-21:5040:1779","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5040:1779","glob":false}}},"0:19-29:17:1782":{"id":"0:19-29:17:1782","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1782","glob":false}}},"0:23-21:6079:1785":{"id":"0:23-21:6079:1785","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6079:1785","glob":false}}},"0:66-20:68:1772":{"id":"0:66-20:68:1772","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1772","glob":false}}},"0:5-20:32:1767":{"id":"0:5-20:32:1767","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1767","glob":false}}},"2:12380:2354":{"id":"2:12380:2354","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43652:2380","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5532:29113":{"id":"5:5532:29113","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7475:227"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7475:227","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:1781":{"id":"0:76-29:27:1781","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1781","glob":false}}},"2:12386:20704":{"id":"2:12386:20704","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12049:428","self::pattern":"2:12052:8191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12057:8187","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2760:1774":{"id":"0:13-21:2760:1774","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1774","glob":false}}},"0:21-29:20:1784":{"id":"0:21-29:20:1784","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1784","glob":false}}}},"paths":{"21:9624:2239":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"21:14005:33480":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"17:13024:19268":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:6076:13491":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"6:1569:10196":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:14230:33480":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"2:9705:145":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:21436:2653":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:1895:2604":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:4802:12794":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:14401:20054":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11687:15854":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:7532:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"11:399:30944":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"21:9328:2257":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"1:2219:2355":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:40222:2238":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"30:1219:20207":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"17:8953:15826":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:8557:2504":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:12062:764":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:12069:1550":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:4949:15400":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:3594:2517":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13554:19995":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"21:8496:33480":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"6:5858:13434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"21:7895:2174":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"2:47762:8087":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"17:11971:18727":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"28:60:2312":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"2:2531:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11951:18726":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:10265:15916":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:1184:15889":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:4644:23032":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:4032:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:6844:15703":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"11:1611:30935":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:506:9296":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:3447:2381":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:4915:2787":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:4197:8147":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:2625:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:2305:14723":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:42209:8134":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:10962:15988":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:43690:8192":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"16:6531:15693":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:1634:604":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:8397:2801":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:39950:8203":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:10318:2517":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:11586:15851":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:7677:200":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"21:6061:1788":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"6:5845:13475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12237:18745":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:43225:8158":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"27:468:20188":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"17:14346:20051":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:22145:27603":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:4652:12778":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:10369:2240":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"21:7364:151":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"6:6017:13486":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"21:14715:30880":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:41374:2713":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:12070:1547":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"21:12067:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"17:12196:18742":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"21:9170:33480":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"14:202:8232":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"5:7464:8146":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:2856:8523":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"6:1911:10374":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"17:11023:15993":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:21205:2926":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"30:1064:20222":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"21:8656:2198":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"11:1068:14638":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:11330:2847":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:11175:2842":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:1838:2536":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"6:4376:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:41410:2705":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:8320:2761":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"1:10787:2647":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:4910:12806":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:9038:25572":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"27:146:208":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"16:7128:15713":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:5929:13480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:4348:248":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:42188:8124":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:21441:2917":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"15:0:1984":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:3465:2324":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:8782:2200":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"6:4508:12765":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10036:15882":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:2864:14747":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:9121:2485":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:40283:2162":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10340:15919":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:2251:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10788:16031":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:6290:167":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"17:13778:15883":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:11387:22725":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:9650:15838":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"27:181:20178":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"5:7500:8234":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"21:8431:2189":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"1:4189:2756":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:43214:8167":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"30:980:141":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"2:31995:8286":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:11244:15852":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:46152:26805":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:47365:2981":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:42066:2859":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:3915:14822":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:7489:8233":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:10126:15903":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:5403:15648":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:41573:195":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:12252:18746":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:43374:8197":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"21:13761:2312":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"17:9912:15869":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:6657:10332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:14110:20035":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:11813:2174":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"1:7530:15817":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:10430:15969":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:44332:197":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:1631:10201":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:7473:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4951:12811":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:6941:2161":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"5:7451:2611":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:21794:28079":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"5:4393:2663":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"5:276:2334":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:10180:2159":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"18:80:20077":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:8050:15742":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"30:1404:32145":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"11:447:142":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:11098:16046":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:6169:22805":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:6499:29418":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"5:1473:2520":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"11:968:2530":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"30:880:20206":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"1:2409:1801":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:13071:19271":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:10800:22722":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:4422:2477":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"5:6453:2312":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:5891:13477":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:4051:2730":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:4881:1027":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:12136:18738":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"21:12317:2276":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:13934:33480":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"1:8169:2323":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:45584:2984":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:13487:19993":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:30153:2550":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:8840:2842":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"18:507:2261":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:45685:2950":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"6:4772:12790":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:31977:25471":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"7:79:14495":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"30:1169:20209":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"16:5588:15651":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"21:11179:2260":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"20:32:1767":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:8666:8187":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:21258:2922":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:5135:2858":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"21:10702:2251":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"17:12698:19247":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"21:12479:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"17:13897:20015":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:7928:2682":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11337:16081":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:9116:221":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:10536:8177":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"16:7391:15715":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"24:190:2157":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"16:5574:15650":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"27:432:20192":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"6:7287:14283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:2363:191":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:2666:2608":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"21:8335:2184":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"2:44430:26978":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:7247:2543":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:14378:20053":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13567:19996":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:4897:12805":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"16:8115:15745":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:12645:19243":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:1075:15881":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:14478:20060":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:6549:2868":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:8249:2700":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"9:177:14622":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:44125:8678":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"21:6255:20137":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"21:6961:33480":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"0:56:1097":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"5:3669:29418":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:14988:20134":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"2:9456:132":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7015:15711":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:8072:15743":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"26:43:33773":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"16:7597:31022":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:4784:397":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"27:11:33784":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"30:1475:20101":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"1:3741:2711":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:6200:2321":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"21:7638:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9711:32101":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"30:1533:20095":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:9823:15864":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:10619:8179":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"21:589:1770":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"2:2905:8531":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:11151:16074":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:9959:15879":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:5369:2235":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"16:6696:14667":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13202:19280":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"21:12619:32318":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"17:9933:15888":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"30:1161:20208":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"16:2526:14733":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:4320:2758":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"31:136:1833":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"1:6153:3054":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:2380:14727":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"29:0:1780":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:42468:27298":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:9998:15876":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:39017:8272":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"6:474:9291":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:10316:15921":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"27:149:20177":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"11:1663:144":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:9886:15867":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7438:2610":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2944:8540":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"21:12244:2181":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"16:7436:15716":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"22:0:2120":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:2783:228":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"30:1511:33832":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"16:3600:14758":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:12305:18750":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"26:53:33772":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"6:4438:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"18:113:20079":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"11:2194:30931":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:25797:250":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:9486:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"21:11565:33480":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:653:9354":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"9:52:14536":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:2970:29999":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:11598:8638":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:43962:8228":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10456:15940":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:41268:2701":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:14156:20040":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:2888:8529":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:41640:2518":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8990:107":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:8765:15820":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:41351:26879":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:12052:1078":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:47707:8082":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:40184:8488":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:8200:2177":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"21:6631:1791":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"6:4687:12780":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:9985:15877":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:14252:2370":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"5:7475:227":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"2:41496:2288":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"21:9311:33480":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"11:798:2525":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"28:55:2517":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"6:4306:12744":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:22076:26987":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:3171:2288":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:11407:15843":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"17:11261:16068":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:3568:163":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:6915:15706":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:5899:13478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:46693:2952":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"21:6795:33480":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:10561:15938":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:21906:2919":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11137:16043":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:534:2468":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:9033:25578":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:43368:8198":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:505:2463":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:9660:32121":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:536:31286":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4965:12813":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"30:1052:20217":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"6:5776:13468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"21:6637:2158":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"6:4552:12770":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:43987:8230":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"21:13323:32306":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"18:531:20106":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:13449:2202":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:4348:8286":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"18:564:20108":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:7210:2226":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13685:20002":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:22717:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"21:5133:961":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"11:749:2312":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6893:31057":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:43204:8166":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6261:15676":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:6271:20136":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"2:45703:2956":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:2779:2326":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"21:10653:2245":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"17:12959:19263":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"21:11663:33480":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"21:6444:32232":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"30:1394:20103":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:8808:2840":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:20853:28080":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:44145:8674":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:46907:2941":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"21:10792:33480":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"6:4889:12804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:1696:10208":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:40494:2254":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"5:1464:2519":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11573:15850":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"30:996:20097":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"1:3975:2724":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:4458:12758":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"16:6346:15680":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:2927:8536":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:6417:32394":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"2:4008:26979":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:7584:12993":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:10964:23015":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:39914:8313":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:11815:16090":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"21:14284:2371":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"16:7613:15728":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:9488:2650":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:42730:2820":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:7912:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:7767:2593":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:11623:25893":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:21469:2921":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:9594:33480":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:30223:26733":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:9861:8649":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"6:541:9299":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:9494:8134":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:8232:2380":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:12066:8189":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:7694:15732":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"31:0:1829":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"1:10167:23020":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"16:6467:15689":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:43384:2673":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:3032:14752":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"21:15001:32252":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"17:11710:15855":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:41581:212":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:1751:27288":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:46487:2992":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:45979:2945":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:3997:2726":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:41908:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"17:504:15816":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:6582:10147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"21:13725:2288":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:40049:26674":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:840:2288":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:47505:2987":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:11639:15853":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"30:142:20213":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"21:5743:2663":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"17:11910:18724":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"21:8871:2203":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"13:226:30945":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:1500:10188":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:1027:14637":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:5846:2312":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:5727:15659":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:41947:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:5120:20132":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"18:481:20103":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:3224:2688":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:22618:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"18:491:32145":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"21:15237:32330":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"24:0:1865":{"crate_id":24,"path":["futures_task"],"kind":"module"},"1:3522:2388":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:4448:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:9780:15841":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:646:2498":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"17:12790:19254":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"5:6812:8257":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:20883:28253":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:4921:15396":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:871:2519":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:1374:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:11048:16059":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"5:4194:2663":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:2472:14731":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:4234:2288":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:9972:15878":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12513:19236":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"6:6697:10315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"21:12508:2182":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"21:12443:2274":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"6:6634:2792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:3266:2691":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:5988:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:2772:223":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"24:9:20118":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"21:11685:2269":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:10186:15906":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"16:6944:31155":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:5673:15656":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:5076:12824":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:11070:22822":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"6:5964:13481":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:42701:26923":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8225:2674":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:1931:674":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11235:16077":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"2:43672:8194":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:6783:8255":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"9:0:1979":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"21:8692:33480":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:2576:22817":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:12717:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"6:1673:10205":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"21:14979:2394":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"17:13575:19997":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"21:9748:2158":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"14:31:14648":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:3348:2679":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"21:10547:33480":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:8686:15818":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:6714:13901":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:44121:8676":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:3069:2565":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:3461:14757":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"21:8103:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:6792:8487":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:3939:2723":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"21:4306:20122":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"1:7581:22802":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:10109:25887":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"30:1211:20206":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"2:12648:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:39958:2492":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"6:6735:13904":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:11214:2657":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"21:6991:2163":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:3257:8273":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9350:15800":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:4731:12785":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:12074:18733":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:12053:317":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:943:2527":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"21:9555:2238":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"6:6607:13898":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"21:13619:33480":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"28:42:2518":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"13:0:1976":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:12635:136":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"17:14308:20047":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:14056:20029":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:47727:8084":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:4037:2728":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5830:15663":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"21:14970:2393":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"21:14910:2254":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"6:587:9306":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"21:13335:2288":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:1641:8466":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:8574:2825":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:2921:8535":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"21:15180:32273":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"2:21357:2921":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:4796:12793":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:41564:8623":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:40193:8489":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:47788:8089":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"18:0:1987":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:4426:29423":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:12074:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:43548:8206":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"6:6031:13488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:8181:15749":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"21:7206:33480":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:7751:2592":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:6361:15682":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"6:4697:12781":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:573:9304":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:39244:2509":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:41512:2518":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"21:14846:2384":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"2:39928:8315":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:14108:2320":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"17:10507:15942":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"10:0:1980":{"crate_id":10,"path":["adler"],"kind":"module"},"6:6829:13909":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:39966:8202":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:11637:14681":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:4047:2729":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"30:1232:20208":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"2:7398:8485":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:9790:32105":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:22161:26868":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:2834:106":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:40065:2613":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:42693:8340":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"21:8457:33480":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"21:7387:33480":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"6:4370:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"21:10563:2247":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"21:9416:33480":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"21:7316:2170":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"21:13869:33480":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"2:12670:2187":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:62:8922":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:6805:13907":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4844:12799":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"20:131:1789":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"30:1114:2288":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"21:7822:2181":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"1:922:2524":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4500:2763":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:40240:26894":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13667:20000":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:6707:33480":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"17:13914:20017":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:6602:2871":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"21:14828:2382":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"21:8393:2186":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"1:8971:2863":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:7041:31366":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"21:13679:20120":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"6:6680:10317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"6:6145:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:13967:2295":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:40142:8156":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:5404:2832":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"9:357:14533":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:8205:15751":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"18:574:2261":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:13560:33480":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"2:2939:8539":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:256:32107":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:5905:15665":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"21:8713:2199":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"1:5575:2837":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:41869:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:2923:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:12057:8187":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:44375:3053":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:5634:15653":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:11070:2258":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"17:9070:15648":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"21:12760:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"6:6086:13492":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:40162:2563":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:47736:8085":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:358:2487":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:43342:8204":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:8926:15825":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:1671:1116":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:13957:223":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"1:8149:2291":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:2829:2327":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:12172:18740":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:5121:15452":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:8870:2881":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"20:143:20116":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"6:7549:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:2596:14736":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"7:0:1597":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5995:15669":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:9878:69":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"1:6902:22820":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"21:14419:33480":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"21:12169:2177":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"17:13973:20021":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:6968:15709":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:4344:15203":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:4330:12746":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"21:10474:2248":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"5:5982:8896":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:20900:28254":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:12293:18749":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:5866:15664":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:12048:961":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:4402:8288":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"16:7708:15733":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"16:6041:15671":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:11817:8684":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:8505:2822":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"11:1538:14642":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:42533:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:40704:8478":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:2788:14744":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:4648:23036":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4946:12810":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"21:4576:1778":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"1:8202:2233":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:40340:2251":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"30:924:20210":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"16:6792:15701":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:43620:8209":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:46009:2951":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9921:15894":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:44324:213":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:8996:2467":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:11367:16047":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:22948:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:2273:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"21:11781:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"1:1429:144":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:13834:2316":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"1:2382:2638":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:149:14700":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:6415:15686":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"30:1554:20097":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:8418:2188":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"22:7:1790":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"16:6545:15694":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"21:13689:2517":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"11:119:30919":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:2186:30934":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"30:1098:20210":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"21:14722:2379":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"21:10913:33480":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"2:6881:8494":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:4168:2754":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:4265:209":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:20881:28249":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"30:911:20209":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"2:3936:2663":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"15:288:14672":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:1986:186":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:47773:8088":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"21:8470:2191":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"1:2384:2639":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:2832:8114":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"5:5325:29418":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"21:402:22774":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:40305:2248":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:8978:15827":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10980:15838":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"24:15:20119":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"17:9701:15839":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:39886:8314":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:8557:2288":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"21:11692:2268":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"17:12970:19264":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"21:9093:33480":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:12280:18748":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:3391:2289":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:9106:167":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"11:311:30937":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:11886:18723":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:5404:2663":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"21:13734:2517":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:21219:8555":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"17:13010:19267":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:13676:20001":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:39470:20575":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"1:1573:2536":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"18:660:20095":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:10468:15971":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:21782:2913":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:47113:2975":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:12765:19252":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:2722:14741":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:5049:15428":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"1:11006:2843":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"21:10978:33480":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"24:12:20117":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"11:365:30926":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:14514:20062":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:6753:15700":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"5:3720:2377":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:9488:8125":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:1983:187":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9445:15834":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:11000:15995":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:43662:8205":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:11064:22806":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:3188:26195":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12983:19265":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:12073:1163":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:10088:2583":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"6:6045:13490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:3226:2689":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:11757:8685":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:9168:26665":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:8826:2841":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:11994:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:9768:33480":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:12123:18737":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:5787:2862":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:12015:25556":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6386:15684":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"21:14481:2311":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:14754:33480":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"17:13244:19283":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"30:1203:20097":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"2:4393:8287":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"6:4725:12784":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13451:19992":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:6729:13903":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"18:96:20078":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:10603:15976":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"11:736:2520":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"21:14837:2383":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"16:2359:14726":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:14033:20027":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:9277:15832":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:43976:8229":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:41504:2517":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:14434:20056":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:2494:2653":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:6238:20138":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"17:10112:15902":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"31:109:1832":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"21:14819:2381":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"5:3212:2536":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:40171:2233":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:2284:14695":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"6:4498:12764":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9896:15868":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"21:5125:20131":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"17:9607:15837":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"21:10399:33480":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:12052:8191":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:43296:8173":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"21:12890:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"1:6437:2864":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:3017:2330":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:42952:8159":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:10366:15926":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:4646:23034":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:2837:8503":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"21:10065:2261":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"6:6877:13913":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:3065:14754":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:7595:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:5661:15655":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10738:16030":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"18:548:141":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:39973:8309":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:0:1986":{"crate_id":17,"path":["object"],"kind":"module"},"16:8294:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:22023:26984":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:6086:2663":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:44314:207":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:10486:22810":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:7890:2548":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:9173:27625":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12888:19259":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"21:8139:2178":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"6:4756:12788":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"16:6569:15695":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"21:14489:109":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"17:10059:15880":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"21:6775:2158":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:12043:18731":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:9207:15830":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"21:12803:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"2:2900:8530":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:44172:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11173:16075":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:12267:18747":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:7618:14472":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:4537:12768":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:12050:1567":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4391:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:12945:2544":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:5578:2839":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:0:841":{"crate_id":6,"path":["libc"],"kind":"module"},"17:2178:15914":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:2760:1774":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"21:13795:33480":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"2:4155:8293":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:22651:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:10227:15917":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:11555:2712":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"21:13368:2292":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"16:7568:15726":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:11507:15847":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:4641:15308":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:37:1793":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"16:7582:15727":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:41791:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:10591:2473":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:822:2540":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:7363:2515":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:7472:14443":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"6:4608:12774":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"20:68:1772":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:20840:8331":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:31988:26908":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:45388:2971":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:11086:16073":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"21:14524:33480":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"1:3264:2690":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:12123:8215":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:21275:2653":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"21:13118:2282":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:3305:2687":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:30193:8516":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"17:12671:19245":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"14:160:14648":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:207:8123":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1585:2538":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:7573:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:7792:15738":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:10771:16006":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"16:4462:15273":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:3142:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2986:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10628:15978":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:13101:19273":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:500:9295":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:46077:3012":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:9697:141":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:5976:13482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:12012:2826":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"21:7016:33480":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:9455:32110":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"21:12915:2280":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"20:97:1773":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"21:5860:1777":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"2:30387:26858":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:7600:22800":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:2999:2119":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:42948:26381":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:4274:8278":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:1575:10197":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"21:14313:33480":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"2:32089:8504":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"21:11916:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:45722:3005":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:11582:8636":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:1818:2288":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13632:19999":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10420:15968":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:11124:16044":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"28:0:2123":{"crate_id":28,"path":["slab"],"kind":"module"},"2:41521:2805":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"23:0:2121":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"6:4874:12803":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"30:1451:8189":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"21:14994:2467":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"17:11191:15853":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:7259:9252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:43176:8165":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:9208:23089":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"6:6180:13521":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"5:5961:2858":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7768:15736":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"11:2049:2531":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:3529:2671":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:10929:15991":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:3406:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:22750:180":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:14068:20030":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4850:12800":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"5:7571:8252":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"16:6960:15708":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"30:1544:20096":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:1760:8566":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:14460:20058":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"21:4371:2297":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:2540:133":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:7567:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"26:37:33774":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"16:6513:15692":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:41674:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"16:2428:14729":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:8488:2821":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:8281:15753":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7006:15710":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:9372:15833":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:2614:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:12778:19253":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:5088:15443":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"11:1103:14639":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"21:14649:33480":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"2:43466:8210":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:6574:9342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"21:335:32258":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"5:7375:2516":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10903:15992":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:13723:20004":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"5:6900:247":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:22684:178":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:43833:8224":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"29:17:1782":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"21:9453:33480":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:4753:2742":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"6:4789:12792":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:12072:8188":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:6156:15672":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:7444:2333":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:43681:8193":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"18:727:20100":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:4924:2788":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:6024:13487":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:4805:28341":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:7225:2542":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4403:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:2638:2374":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"21:8757:33480":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:23395:222":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:7722:15734":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:7895:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"17:14221:20043":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:11324:23301":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"6:4820:12796":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:6753:13905":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"21:15009:2217":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"2:10463:8183":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:14448:20057":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"21:12413:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"1:3115:2692":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"6:7608:14471":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:43782:8221":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"18:582:8331":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:13868:20012":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:1520:10191":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"26:0:2122":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"21:6102:1800":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:20868:28080":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:6879:15704":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"5:1503:2524":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:11534:2710":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:47747:8086":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:39134:200":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:8293:2759":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:10165:15905":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"2:43251:8156":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:7660:15731":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"20:82:2114":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:39276:8543":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:10683:33480":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:12876:19258":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"21:11127:2259":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"17:14296:20046":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:483:22825":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"27:136:2873":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"5:4363:29423":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"16:3830:14785":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:21:1080":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"17:13710:20003":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:6376:15683":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:5808:13471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:8932:2877":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7534:15723":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:9564:15836":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:43185:2259":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:7664:2474":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:47255:2947":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"16:0:1985":{"crate_id":16,"path":["gimli"],"kind":"module"},"21:7981:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:14025:2319":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"21:10340:33480":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"17:11393:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6721:15699":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"16:8097:15744":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:12060:663":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13826:20009":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:30281:26880":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"27:451:2880":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"21:10228:2253":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"1:8298:2760":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:4422:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:12945:19262":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:6304:208":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"16:3232:14755":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"30:1140:20206":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"17:12373:19231":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"21:15165:32230":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"21:14857:2385":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"21:927:2201":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:6456:15688":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:4585:15300":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:558:2470":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:9689:2158":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"1:7669:2476":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:11195:8693":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:40504:2256":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:955:2529":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:5091:25907":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"9:450:14517":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:13283:2281":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"16:5435:31060":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:9102:15803":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"21:1293:1771":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"11:817:2527":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8916:2879":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:12061:767":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:2339:14725":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:9003:22721":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"21:2555:32395":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"5:35:2568":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:47613:2959":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"21:9533:33480":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"2:44141:8680":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:7936:2377":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"11:1501:14640":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:3797:14776":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:40122:2628":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:14355:20052":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:416:165":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"1:3679:2707":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:10214:15918":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"6:4558:12771":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:11295:16079":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"21:13410:2191":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"21:15062:32292":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"21:7254:33480":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:4919:12807":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"6:4706:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:2921:212":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"21:12774:2286":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"17:10750:15986":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"21:13170:2283":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"17:12554:19239":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:1840:2589":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:7318:15714":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:3303:2686":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"30:1418:20077":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"2:10605:8181":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"11:844:2529":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"21:8975:33480":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:2150:15955":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"9:486:14516":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"30:1261:20211":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"16:7544:15724":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"21:13014:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"21:7323:2169":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"2:12278:112":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:14324:20049":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:1924:2605":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6189:31399":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:7474:15718":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:2893:8533":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:3014:2329":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11719:15856":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:760:2521":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:1411:2288":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"30:144:20214":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"17:11788:16089":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5982:15668":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:11062:16071":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:6720:13902":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"21:338:2172":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:14954:2391":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"16:5798:15662":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:4408:22800":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"1:7882:2648":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13259:19284":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"21:6684:2159":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"1:8244:2708":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8121:2652":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"2:45478:2937":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"21:5135:1801":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"17:14013:20025":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12184:18741":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11381:16084":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:7029:21958":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:40518:2258":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:42438:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"21:14671:2377":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"21:13309:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"17:9003:15828":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"21:6720:2162":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"2:21690:2932":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"21:6628:1792":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"11:2168:30929":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:46101:3013":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:4269:8277":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"9:393:14518":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:878:2541":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"11:285:30921":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"5:1482:2522":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:9745:8338":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:12280:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"1:8006:25895":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:39222:205":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"31:65:1830":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"16:5743:15660":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:12685:19246":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13162:19277":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12750:19251":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:40037:2614":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:4719:15362":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:12077:8186":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:589:2490":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:10386:8182":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"21:23:2131":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"21:5040:1779":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"17:2012:15920":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"21:12044:2161":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"5:5373:2197":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"6:1690:10207":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"5:1102:29619":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:261:32111":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:2543:241":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:7645:2489":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"16:7513:15721":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:6881:2162":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:21343:2920":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:44405:8106":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:10822:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:45787:2915":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:782:2247":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:707:8189":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:10520:15972":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:1076:2533":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:2254:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:11833:8686":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:4751:2741":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:9927:28317":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"2:10136:2653":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:10443:2840":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"21:10159:33480":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"2:2841:2907":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:6987:26210":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:47651:2993":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5046:12820":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"21:7497:2182":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"11:695:2524":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:568:9303":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:11201:16040":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:261:29418":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:5455:2835":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:11104:8170":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"30:1457:20093":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"2:3051:8118":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:11611:8100":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:8338:2790":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:8164:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:2881:14748":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2862:8526":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10292:15838":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"16:7360:31432":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:13087:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"21:5918:2267":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"6:7281:14282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"18:599:20219":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:7503:15720":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:14024:20026":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:31941:2844":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:2326:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:2969:14751":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:4032:29418":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:3073:2566":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:12465:16034":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"14:187:14656":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:42718:145":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:13981:20022":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:1779:2572":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:8017:2176":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:43277:8172":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:7526:2332":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:41487:8546":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"1:7541:25912":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:8713:15819":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:47567:3008":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:21467:2927":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6583:15696":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"21:12374:2273":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"11:97:30920":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:9111:220":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"21:13362:2291":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"5:3204:2538":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:3183:30036":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:43602:8208":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"21:10237:2160":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"21:7186:2164":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"6:5872:13435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:10685:15985":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:1568:2521":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"11:723:2519":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:7931:26666":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:5137:193":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:43286:8175":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11272:16078":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:1011:29418":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:42428:27290":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:30187:8251":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"21:7956:2180":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:29961:2714":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:1557:2288":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:8262:2179":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"6:123:8977":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:42195:8125":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"1:8854:2843":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:40711:26917":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"30:936:20211":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"2:1825:2557":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:7920:25918":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"5:2959:8108":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:7054:31401":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"6:4465:12759":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:3912:2190":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"28:208:2532":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"21:7400:2182":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"16:7621:15729":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4430:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:40079:2615":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:45833:2979":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:4477:12761":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"0:0:1864":{"crate_id":0,"path":["futures"],"kind":"module"},"21:7303:33480":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"21:10849:33480":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"15:306:14673":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:49709:2934":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"21:14605:2376":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"17:11761:15858":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"21:15098:32231":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"1:5646:2874":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10714:16028":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"21:6313:20135":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"16:6279:15677":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:12711:19248":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:932:2526":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:4975:12814":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"21:7676:2185":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"21:14337:2372":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"21:7778:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:12068:1549":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:39938:8316":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"21:8611:2197":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:8399:194":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"17:11872:16092":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:43706:2492":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:14173:20042":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:5249:192":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:4807:2743":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:14163:20041":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:11794:8687":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"21:14771:2380":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"6:1590:10198":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:14536:20064":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:9081:21970":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:2960:30001":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2935:8538":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"14:221:14658":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:12697:194":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8238:2709":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:9752:15840":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"21:11326:33480":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"2:43804:8222":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"18:681:20097":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:8016:2322":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:12047:379":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:4709:2789":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:1709:10209":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:40727:8480":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:13802:20007":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"11:2060:2532":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:12890:140":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13739:20005":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"30:1018:20218":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"21:8292:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:1557:10195":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:638:2496":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"21:13513:2294":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"1:6546:2867":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:676:234":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:7855:2649":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"18:699:20099":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"31:102:1835":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"2:4449:8289":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:0:508":{"crate_id":2,"path":["core"],"kind":"module"},"1:11405:23290":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:10334:2835":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:40364:8492":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:2366:2633":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:44117:8673":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"21:12116:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:3419:2663":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"11:1845:2537":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:10851:22658":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"16:5760:15661":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:11399:23289":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:41713:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:5082:12825":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:44010:8212":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:10146:225":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:9617:32122":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"21:7522:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:3764:14767":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"21:9917:33480":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"2:40263:2160":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:1717:10210":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:2846:2909":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"21:12972:2278":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"21:9199:2212":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"6:6037:13489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:5424:2833":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"21:15119:32239":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"5:1776:2521":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:0:1440":{"crate_id":1,"path":["std"],"kind":"module"},"1:727:142":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"6:6627:13900":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:3515:2312":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:2832:14746":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6318:15678":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:12024:18730":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:14145:20039":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"21:6629:1795":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"21:11156:33480":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"21:10750:2252":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"17:14316:20048":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:43264:8157":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:6817:2912":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"21:11701:2168":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"2:1737:8567":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:43819:8223":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:13422:19991":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"21:13147:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"2:44193:2911":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:10547:15973":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"5:0:291":{"crate_id":5,"path":["alloc"],"kind":"module"},"28:217:2530":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:7894:8484":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"15:327:14677":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:5632:208":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:1681:10206":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:4164:2663":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"21:5818:2289":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"21:10500:33480":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:5509:2836":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:13890:20014":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:7514:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:11493:2711":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"6:5814:13472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:6473:2870":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10012:15838":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:8286:2704":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"21:13261:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"21:13404:194":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:2160:605":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:14803:33480":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"6:526:9297":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:13494:2293":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"21:9028:33480":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:7447:32265":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"1:5390:2831":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:1579:2537":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"21:4353:20124":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"21:6044:1786":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"2:43502:8180":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:41422:2706":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10616:15977":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:9984:22904":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"5:7287:29469":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:6630:1794":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"16:6352:15681":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:5017:15420":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:5832:2505":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:14522:20063":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:12031:22636":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"21:13045:2279":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"27:72:20189":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:12853:3054":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"1:7739:2534":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"6:7304:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7555:2521":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:4835:12798":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:2368:2634":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:6742:14666":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11547:15849":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:4557:15296":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:3846:2712":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"21:9939:2232":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"2:21904:2653":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:1506:10189":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:482:9292":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:22212:26935":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"21:12659:31406":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"6:579:9305":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:11053:22774":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:6256:2873":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:8167:15748":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:685:111":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"11:0:1981":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:7644:2653":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13135:19275":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"27:124:20173":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"6:4742:12786":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"21:11404:33278":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:22324:2716":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:4986:15413":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:41331:27291":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:43448:8211":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"30:949:20097":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"2:2915:8534":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"21:12309:2277":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:3185:24058":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:2810:14745":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"21:15052:2216":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:40254:2159":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:42202:8133":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:6802:8256":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:4059:2732":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:12066:1551":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10139:15904":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"17:12598:19241":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:11111:16045":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:364:2488":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:7771:25471":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"5:2962:29489":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:9481:112":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:3020:2331":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:7150:2291":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"11:1121:2533":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"5:1442:2518":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:4343:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"17:11617:15852":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10646:16025":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:4812:12795":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7884:15741":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:622:2494":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"21:13344:2289":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"11:332:30924":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:12020:2503":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"21:6079:1785":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"30:1493:33831":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"5:2690:29484":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:8042:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:46569:2940":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:40752:2290":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"6:4994:12816":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"6:5838:13474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:14134:20038":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:14100:20034":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:6139:13519":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"21:1089:2211":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"17:12086:18734":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:7381:25577":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:6243:15675":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:11833:21965":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"21:13709:2288":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"17:14282:20045":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:11868:8182":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"16:5384:15647":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:44149:8675":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:10988:22666":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"11:986:2531":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3270:26656":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"31:100:1834":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"2:4338:8285":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:44417:8104":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:39898:26690":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"21:57:1797":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"17:13966:20020":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:21128:2930":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:3240:237":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"30:1518:20106":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"17:9852:15865":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:40018:8308":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"14:0:1983":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"21:10823:2254":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"5:7279:200":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"5:3800:2521":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"21:7701:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:3655:14759":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:7872:2651":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:11327:16080":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:7316:2518":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:22185:2715":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:9176:25922":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"2:21072:2925":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"2:22:702":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:1590:2539":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:14090:20033":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"21:9230:2233":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"1:1067:2532":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:8559:2807":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:14463:33480":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"21:7920:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:46723:2958":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:14126:20037":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:3441:15994":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:8814:188":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:22849:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"21:11891:2176":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"2:46230:26686":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:1536:10193":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:5552:2240":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"21:14904:2390":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:42484:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"21:12534:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"2:30209:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:9959:26997":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:10097:15874":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:3191:26194":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:43850:8225":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:3649:2518":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:14001:20024":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:781:2190":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:39118:202":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"30:1126:20097":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"17:9390:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"21:11005:2165":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"17:10698:16007":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:778:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:22336:2718":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:39985:8310":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:14042:20028":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"21:14396:2374":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"21:14347:2373":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"17:10478:15966":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:12063:765":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:5827:13473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:41649:185":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"10:44:14627":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"1:10777:23003":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:9060:22668":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"14:40:18725":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"18:538:20107":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:590:20218":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"30:1526:20104":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"16:5419:15649":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:20898:28251":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:9500:8132":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"17:11535:15848":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:7391:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:42456:110":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:12054:1418":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:4055:8113":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12830:19256":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:46757:3007":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:11630:14681":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:8884:2878":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"30:1010:20098":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"1:11307:22814":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:4889:15388":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:7538:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:5612:15652":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:2851:8524":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"14:165:14649":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"21:7234:2166":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:331:2467":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"17:13816:20008":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:10916:15990":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"6:562:9302":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:3010:2328":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2888:22829":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:9488:32108":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:13876:20013":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"21:12353:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"2:39056:8119":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:9574:32116":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"21:12578:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"2:9740:8337":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"21:8360:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:9467:2236":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"1:7860:2650":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"24:169:2155":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"1:6201:25566":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:41436:183":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:6651:29418":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:21172:2931":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:8158:1777":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:14074:33480":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"16:7523:15722":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:13113:19274":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"6:4520:12766":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:10383:15912":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:4862:15385":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10551:2686":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:4491:12763":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:595:9307":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4589:12773":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:5760:2861":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"5:4002:2312":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:7828:15739":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:6616:2872":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:8181:2325":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"21:8863:2202":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"17:13792:20006":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"6:547:9300":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:42933:8666":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:3945:2722":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:11389:15842":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"21:9207:2213":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"17:12225:18744":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:41988:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:12071:812":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:9430:110":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:43398:2674":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:4628:12776":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"21:6906:33480":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:2450:14730":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10949:15987":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"20:0:1766":{"crate_id":20,"path":["futures_core"],"kind":"module"},"21:13391:33480":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"1:4973:2797":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:4382:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"6:5070:12823":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12658:19244":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:8239:15752":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:1513:10190":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:8364:2740":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:3322:8117":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:14083:20032":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:7208:2551":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:1514:200":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"21:9493:33480":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"17:13949:20019":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"11:644:2517":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:10726:16029":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:9140:2657":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:1527:10192":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"3:234:212":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"21:39:2133":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"17:434:14697":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:2461:29487":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"21:13750:2311":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"17:12111:18736":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"21:7618:2183":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"16:3888:14819":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:1517:14641":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"27:483:2820":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"6:6616:13899":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:2872:2908":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:44153:8693":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:47903:8094":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:41245:155":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"1:8212:2254":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:7394:8486":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:5994:208":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"21:15056:2215":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"2:46411:2980":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"21:4220:32398":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"21:3664:1775":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"1:913:2522":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:39871:2492":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:12842:107":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4940:12809":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"21:9049:2209":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"2:39283:8260":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"30:1072:20206":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"2:9492:8133":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:6433:2292":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:6332:15679":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"21:15192:32310":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"21:11205:33480":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"17:12473:16032":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1638:10202":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13148:19276":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:629:29616":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:6901:15705":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:22220:26799":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:2499:2371":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:14160:33480":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"18:755:20101":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:5027:12819":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:1495:10187":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"21:6608:32229":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:45454:2977":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"21:7083:33480":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:4831:818":{"crate_id":2,"path":["core","iter"],"kind":"module"},"21:6074:1787":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"16:6226:15674":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"25:0:1776":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"1:1842:2590":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"30:901:20208":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"16:5816:31288":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"21:13639:32309":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"21:14699:2378":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"6:6814:13908":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40202:2236":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:43125:26966":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:39297:8269":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4478:2762":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:13989:20023":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:10575:15974":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:853:2517":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:11998:22726":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:6268:31408":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5996:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:2876:2910":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:7137:25432":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:42027:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"6:7555:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:10000:2261":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:44129:8677":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:46199:26705":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"27:497:20191":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"11:793:2522":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:8195:15750":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5909:13479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"10:36:30916":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:11845:16091":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:2321:190":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"21:9213:2214":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"5:6572:2518":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:43306:8174":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:13586:2295":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"2:11137:8171":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"21:13718:2518":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"2:6189:8491":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"11:2180:30930":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"11:2201:2515":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:22274:26715":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:11187:22656":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:5440:2834":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:8219:2673":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:21034:2653":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"21:4142:2296":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:22915:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"21:13743:2518":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"17:13922:20018":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:11226:16076":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10084:15875":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"6:5017:12818":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:47716:8083":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"30:1582:33811":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"21:7748:2173":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"6:4783:12791":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"21:10634:33480":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:43520:8178":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:22310:2717":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"27:439:2878":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"29:27:1781":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"2:41285:2702":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:4240:2757":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:949:2528":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:12098:18735":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"11:2033:2530":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9198:23099":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"16:2766:14743":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:22783:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:4053:14936":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:10591:8178":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"21:12951:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"1:5639:2873":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11306:15855":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:4020:26943":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"11:1852:2538":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4931:12808":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:1922:8120":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:11372:21961":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:12072:1607":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:10973:2836":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:2868:8525":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:4749:2738":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:44205:8694":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:10494:15944":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:2547:240":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:10842:2323":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:2357:184":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:8304:2751":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:41632:2517":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"11:836:2528":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:6401:15685":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:2696:14740":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12810:19255":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:13040:19269":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:11437:32322":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"5:1118:29997":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:9531:32109":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11251:2485":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:43898:8226":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"21:8947:2207":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"21:14867:2386":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"2:47864:8093":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:2548:14734":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"24:135:2156":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"21:11624:2266":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"21:11535:2264":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"1:918:2523":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:10545:2688":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"21:10123:2242":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"11:1012:2532":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12621:19242":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:400:15815":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:2789:231":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:766:20094":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:2780:8115":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:1663:10204":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:40032:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:13353:2290":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"17:10240:15884":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"21:10871:2256":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"21:14707:2315":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"2:45532:2973":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:4985:2663":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"27:127:20174":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"1:8547:2823":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"18:636:20222":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:6320:3055":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"8:0:1978":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:10294:2288":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11991:18728":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:11612:8195":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:10758:2791":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:2214:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:11232:22713":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"21:13478:33480":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"17:12007:18729":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:8986:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:4712:2762":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5322:15629":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"21:11727:33480":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"11:805:2526":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:12422:19232":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"31:38:33844":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"5:4074:2517":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"5:1273:2532":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:9762:32112":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:5492:2663":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"21:11108:33480":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"17:12576:19240":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:47826:8091":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:9521:15835":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:1058:2531":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:9481:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"11:1048:30928":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"30:1042:20221":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"21:13898:2317":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"21:7151:33480":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:13851:20011":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"21:12846:2275":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"17:10440:15970":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"28:30:20194":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"1:9026:25870":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4766:12789":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"6:4485:12762":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:532:9298":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:2049:2554":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"30:966:20097":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"1:8948:2880":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"28:76:33786":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"21:11398:32286":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"30:1428:20078":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"6:6598:9177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:7526:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7736:15735":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:10351:25781":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"21:5081:1796":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:46457:2986":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:2784:109":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:31981:15752":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"14:215:14657":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"21:11510:32308":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"16:7554:15725":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"18:644:2261":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:8134:15746":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:13693:19990":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"6:5886:13476":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:4:1040":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:7852:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:9369:33480":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"6:4317:12745":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:43997:8231":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:1561:2518":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:13298:19286":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13546:19994":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"21:11838:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:39103:8541":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"16:6425:15687":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"21:12194:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:4176:2755":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"30:1190:20211":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"1:10860:22747":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:15:2093":{"crate_id":2,"path":["core","write"],"kind":"macro"},"21:10466:2250":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"1:4138:25435":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:7887:2545":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:10343:2674":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:1672:29418":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"21:7126:2160":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"6:4864:12802":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"30:1439:20079":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"30:1037:20220":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"17:12543:19238":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:6843:33480":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:7558:32265":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"6:494:9294":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:40733:2289":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"21:14584:33480":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"17:10410:15933":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"21:11969:2175":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"2:45933:2939":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"21:8078:2175":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"17:9242:15831":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:4417:15252":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"17:8825:15822":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:5544:2291":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"21:11300:2262":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"21:13199:33480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"1:5060:25907":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:8794:15821":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"27:187:20179":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"2:40292:8490":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:21685:2924":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:3581:2288":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:14076:20031":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:7431:134":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:10397:15967":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"21:424:1769":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"5:7408:2612":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"18:736:20093":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:2933:14750":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:4124:8292":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"30:1027:20219":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"21:10312:2162":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"21:13823:2315":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"1:3744:2710":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"6:5784:13469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"17:11358:16083":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"21:14373:33480":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"6:7520:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"21:9660:33480":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"6:4666:12779":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"16:5963:15667":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"21:6823:2167":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"18:690:20098":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"14:7:14648":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:12055:1448":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:1492:2523":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:43356:8201":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4986:12815":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:21086:8555":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"24:309:20130":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:47689:3014":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:15150:32237":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"2:22585:179":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:4830:2737":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"6:1595:10199":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:14543:2375":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"21:8992:2208":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"11:667:2523":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:45408:2936":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"5:1302:2533":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"21:7280:2168":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"11:1831:2521":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:21084:27918":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"21:8834:33480":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"5:2141:29514":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"21:7053:2165":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"21:10728:33480":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:3245:135":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:5753:2860":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:12669:32269":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"1:8563:2824":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:4718:12783":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:6784:13906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"5:2966:29998":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:9328:2673":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:1826:2312":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"6:554:9301":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"30:1084:20208":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"25:9:1777":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"1:6650:219":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"9:507:14520":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"5:1426:2517":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:43566:8207":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"21:10588:33480":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:10588:15975":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:41554:2806":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"18:624:20217":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:2170:29511":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:8465:2820":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"30:1148:20207":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"5:4846:206":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:21036:2923":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"21:13222:2285":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"17:10197:15932":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:5610:2158":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:11473:15845":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"30:1574:20099":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:6083:14694":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"21:11041:33480":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"21:9390:2235":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"5:7308:2518":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:32002:8593":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:926:2525":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:11074:16072":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:2131:2463":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:2172:8556":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"18:719:20092":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"24:296:33694":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"6:1545:10194":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:907:2521":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:10023:15839":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:41624:2288":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:43925:8227":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:12531:19237":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"21:9262:33480":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"6:4680:2721":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:12734:2272":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:14269:20044":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:1649:10203":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"5:7422:26674":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:4527:15290":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:6077:22833":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:42740:26968":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:10960:2593":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:7492:15719":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:3049:14753":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:40212:2237":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11490:15846":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:41387:2704":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"16:5939:15666":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:5930:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:8985:25562":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:2495:8335":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"18:609:20220":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:4392:2752":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"21:4823:2318":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"16:7651:15730":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:40272:8496":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"21:10944:2255":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"16:6485:15690":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:5776:235":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"5:2243:29537":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:863:2518":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:9046:15713":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:12722:2190":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"30:1503:20102":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"7:32:14488":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"17:12737:19250":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"11:1822:2518":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:45885:2991":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:11161:2841":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:8659:15798":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:39158:201":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"17:14118:20036":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:2223:29520":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"21:11268:33480":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"2:2910:8532":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:46253:26881":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4750:12787":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"6:4397:12594":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:41752:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:3735:2554":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"13:110:30991":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:8981:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:6427:32393":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"1:5978:2873":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"16:2618:14737":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:13611:19998":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"27:369:2873":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"17:11742:15857":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:10832:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"21:13767:2313":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"2:2794:2478":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:8903:2876":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:40718:2292":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:5712:15658":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"17:11162:16039":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:8862:2288":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:12484:16033":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"30:888:20207":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"17:11316:16070":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"16:6687:15698":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:6199:166":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"17:12437:19233":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"27:0:1798":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"2:41302:2703":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"21:2568:32247":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"2:42493:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:47811:8090":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4957:12812":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:12059:661":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"16:6499:15691":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:12997:19266":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:15204:32238":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"2:3285:8116":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:40760:8483":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"17:13286:19285":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"9:330:14573":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:13188:19279":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:582:15817":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:44133:8681":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"21:9279:2234":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"17:13055:19270":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"18:521:20102":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:44388:161":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:1764:628":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:2598:2675":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"30:958:20215":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"1:10782:23295":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"6:4471:12760":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:8895:15824":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:5648:15654":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"17:12846:19257":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"27:366:208":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"17:10278:15915":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"21:327:2171":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"16:2644:14738":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:10458:2243":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"1:7865:2647":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:2574:14735":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:7582:159":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"30:1002:20097":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"17:3565:16012":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:9438:2392":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:5010:12817":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:2562:2373":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:3217:30040":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"27:489:20190":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"5:895:2288":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:45432:2972":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:119:8976":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:6011:8497":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"6:6053:30761":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:10447:15941":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2534:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:1781:2573":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:22816:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:2744:14742":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:14898:2389":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"2:2931:8537":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:40742:8481":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:11934:18725":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:42511:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8342:2792":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:13812:2314":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"2:9490:8124":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:2394:2644":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"11:2174:27168":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:0:1768":{"crate_id":21,"path":["futures_util"],"kind":"module"},"1:897:2312":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:45602:2990":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"20:17:2113":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"17:9867:15866":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"19:0:1058":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:6818:15702":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:10259:2846":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"6:4640:12777":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:11448:15844":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:12911:19260":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"6:5802:13470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:2321:14724":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:9051:15799":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"6:6850:13911":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:488:9293":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"21:11745:2173":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"21:11227:2249":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"21:11349:2263":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"2:39999:8312":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"18:652:2261":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:10577:8180":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"16:2907:14749":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5746:13406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:41830:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:1044:2530":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:7217:2518":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13838:20010":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"6:4526:12767":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:1564:2312":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:21291:2916":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:46055:3006":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:10425:8169":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:40231:2239":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:9498:8131":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:13758:19989":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:21460:2653":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"17:8848:15823":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:9159:2906":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"27:140:20175":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"30:1253:20210":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"21:10262:33480":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:1523:2553":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:10548:2690":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"6:4618:12775":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"20:92:2653":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"17:13215:19281":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:2884:8527":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"11:657:2518":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:40112:2629":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:43697:8202":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:44367:3052":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5053:12821":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"30:1240:20209":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"17:11215:16042":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"6:6843:13910":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:43194:8168":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:4160:2753":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:7718:2501":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"21:9118:2210":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:40324:2249":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"28:46:2288":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"29:20:1784":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"21:20:1080":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"2:44030:8213":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"30:1182:20210":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"16:4835:15382":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:7257:29516":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"21:2709:2267":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"31:125:1837":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"2:39992:8311":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:10812:2651":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"21:14878:2387":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"1:8312:2709":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"18:515:20105":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:40315:8495":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:12065:762":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:46031:2957":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:6600:15697":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:10107:25440":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"27:154:2879":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"6:4415:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:3167:2567":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:46333:2974":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:39178:204":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"5:1138:29620":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:4634:2727":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:12067:1548":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"21:12685:2271":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"17:14420:20055":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:12208:18743":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:42709:8339":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:11357:22662":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13906:20016":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:104:726":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:9496:196":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:7342:31420":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:21337:2918":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"21:15038:33480":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"11:1858:2539":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"21:8405:2187":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"1:6364:166":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"15:394:14684":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:45740:3011":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:12091:2178":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"2:22258:26708":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:2216:2630":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"1:7690:2473":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12724:19249":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:2209:15939":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"21:8225:33480":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"30:1467:33836":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"5:1257:2530":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:22197:26766":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:4578:2780":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:8011:25576":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"16:7090:31297":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:46647:2946":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:5317:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"30:973:20098":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"0:46:1675":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"21:9853:33480":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"17:3232:15989":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:7067:31349":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"6:4545:12769":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:1733:10211":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:5060:12822":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:2170:8555":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"2:2782:229":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:8154:15747":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:3513:22575":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:7284:2805":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:671:20096":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6859:13912":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:6560:31273":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"17:10661:16026":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6165:13520":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"1:4003:2727":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:7271:2518":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:1702:2748":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:10672:16027":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:8415:2819":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"21:14961:2392":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"16:4745:15364":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:6195:28404":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:45863:2985":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"21:8639:33480":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:6980:8476":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:12496:19235":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"21:10206:33480":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"2:45562:2978":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"5:3178:2537":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"21:4476:2203":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"2:43652:2380":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"17:9137:15804":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:4774:15369":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:9507:2237":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"16:2504:14732":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11351:16082":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:7269:31424":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12154:18739":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:12056:1532":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:12452:19234":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"21:15135:32233":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"21:8509:207":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"21:12558:2284":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"17:14469:20059":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"21:13436:33480":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"5:3238:2539":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:22882:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:47443:2953":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"31:68:1831":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"21:7349:33480":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"21:14432:2233":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"17:8594:15801":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:11281:16069":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"1:884:2520":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:10534:15943":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"9:237:2820":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:12064:766":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:2880:8528":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:10498:8176":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:9172:15829":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"29:25:1783":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:11178:8164":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"21:11375:33480":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"17:11661:15802":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:7561:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"30:1274:20097":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"1:7733:2502":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5696:15657":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:13228:19282":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:7862:15740":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:4613:15304":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:3504:2392":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:9493:22828":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:39200:203":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"11:403:30939":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:2537:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:11470:22770":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"21:10522:2246":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"17:13085:19272":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10370:15913":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:2406:14728":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"30:1564:20098":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:641:2497":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4293:12743":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:7435:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"16:4806:15377":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"5:2035:2377":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"16:5363:15646":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:3315:14756":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"5:6969:29463":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"30:0:1987":{"crate_id":30,"path":["memchr"],"kind":"module"},"1:1817:2583":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:42748:26910":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:10637:15979":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"6:4570:12772":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:6944:29435":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:2223:2360":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"31:120:1836":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"16:6204:15673":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:7744:2535":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:1288:2531":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:9945:15884":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:4623:8302":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:6171:196":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:43715:8203":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"5:7237:2312":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"21:6145:2267":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"2:6929:26503":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:3989:2725":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"20:27:2653":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"2:30757:185":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:9288:2589":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"21:14889:2388":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"21:10604:2244":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"2:8558:2808":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"21:14936:33480":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"21:9978:33480":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"2:44137:8679":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"18:614:20221":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:4856:12801":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"21:13698:20121":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:12934:19261":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:6929:15707":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"6:6003:13485":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:45663:2944":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:30785:8331":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"9:426:14519":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8878:2518":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:1548:2663":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"3:0:453":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:40354:2252":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:4497:15284":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"11:630:2288":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:15067:2218":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:14195:2321":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:3230:8542":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"21:12826:2287":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"16:7462:15717":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:22129:26735":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:1603:10200":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:39877:8276":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:22237:26745":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7102:15712":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:45633:2938":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14335:20050":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"21:9809:2241":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"17:9086:15649":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:7782:15737":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:14499:20061":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:9944:22817":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:12049:428":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:47841:8092":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"4:0:1977":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:22303:28408":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:12062:18732":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:2670:14739":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:3251:8274":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"21:10090:33480":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:5619:8255":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:21335:2653":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6017:15670":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:4826:12797":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"17:13274:15855":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13174:19278":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"12:0:1982":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:3330:2521":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:43416:8176":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:45500:2943":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"30:1482:20094":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}