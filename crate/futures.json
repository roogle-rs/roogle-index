{"root":"0:0:2053","crate_version":"0.3.30","includes_private":false,"index":{"2:12949:21948":{"id":"2:12949:21948","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12400:8406","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12996:29914":{"id":"2:12996:29914","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65-21:1291:1960":{"id":"0:65-21:1291:1960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:1960","glob":false}}},"0:60-20:32:1956":{"id":"0:60-20:32:1956","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1956","glob":false}}},"0:66-20:68:1961":{"id":"0:66-20:68:1961","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1961","glob":false}}},"2:12894:943":{"id":"2:12894:943","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12254:455"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12919:21946":{"id":"2:12919:21946","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12918:21945"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5611:30619":{"id":"5:5611:30619","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12902:21465":{"id":"2:12902:21465","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12132:8419"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4-2:44062:150":{"id":"0:4-2:44062:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:44062:150","glob":false}}},"0:19-29:17:1971":{"id":"0:19-29:17:1971","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1971","glob":false}}},"0:58-21:104:801":{"id":"0:58-21:104:801","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:801","glob":false}}},"2:12938:21150":{"id":"2:12938:21150","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12961:21952":{"id":"2:12961:21952","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415","str::rsplitn":"2:12964:21954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43257:8404","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3786:1964":{"id":"0:74-21:3786:1964","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:1964","glob":false}}},"0:49-31:68:2020":{"id":"0:49-31:68:2020","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:2020","glob":false}}},"0:70-21:587:1959":{"id":"0:70-21:587:1959","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:1959","glob":false}}},"0:38-21:5264:1105":{"id":"0:38-21:5264:1105","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1105","glob":false}}},"0:46:1863":{"id":"0:46:1863","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:2019","`LocalPool`":"31:120:2025"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:2019","0:49-31:68:2020","0:50-31:109:2021","0:51-31:136:2022","0:52-31:100:2023","0:53-31:102:2024","0:54-31:120:2025","0:55-31:125:2026"],"is_stripped":false}}},"2:13020:21501":{"id":"2:13020:21501","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12895:21497":{"id":"2:12895:21497","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13018:21506":{"id":"2:13018:21506","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20-29:25:1972":{"id":"0:20-29:25:1972","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1972","glob":false}}},"0:11-20:97:1962":{"id":"0:11-20:97:1962","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1962","glob":false}}},"5:5614:21504":{"id":"5:5614:21504","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13019:21502"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-21:20:1225":{"id":"0:33-21:20:1225","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1225","glob":false}}},"2:12893":{"id":"2:12893","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12894:943","2:12895:21497","2:12896:29896","2:12897:29897","2:12899:29898","2:12902:21465","2:12903:29899","2:12904:334","2:12905:21917","2:12906:21913","2:12908:21914","2:12910:21915","2:12912:21916","2:12914:29900","2:12915:29901","2:12916:21941","2:12917:21942","2:12918:21945","2:12919:21946","2:12921:28504","2:12922:27689","2:12923:21476","2:12924:28508","2:12925:28522","2:12926:2542","2:12927:29902","2:12928:28505","2:12929:21958","2:12932:21959","2:12935:21960","2:12938:21150","2:12942:21151","2:12946:2551","2:12949:21948","2:12952:21950","2:12955:29903","2:12958:29904","2:12961:21952","2:12964:21954","2:12967:21956","2:12970:21957","2:12973:2274","2:12976:29905","2:12979:29906","2:12982:29907","2:12985:29908","2:12987:29909","2:12989:29910","2:12991:29911","2:12992:29912","2:12993:29913","2:12996:29914","2:12999:21961","2:13002:21962","2:13005:29915","2:13008:29916","2:13011:29917","2:13014:29918","2:13016:21505","2:13017:21697","2:13018:21506","2:13019:21502","2:13020:21501","2:13021:21700","2:13022:21701","2:13023:21702","2:13024:29919","2:13026:2679","2:13027:29920"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13019:21502":{"id":"2:13019:21502","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12973:2274":{"id":"2:12973:2274","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12584:8415","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::rmatches":"2:12976:29905"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43357:8432","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5612:30620":{"id":"5:5612:30620","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:294:2523","`String`":"5:7608:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2523","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12896:29896":{"id":"2:12896:29896","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:587:1959":{"id":"0:8-21:587:1959","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:1959","glob":false}}},"2:12908:21914":{"id":"2:12908:21914","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12946:2551":{"id":"2:12946:2551","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12584:8415","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::split_whitespace":"2:12924:28508","str::rsplit":"2:12952:21950"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43153:2874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12952:21950":{"id":"2:12952:21950","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12584:8415","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::split":"2:12946:2551"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43171:8400","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12926:2542":{"id":"2:12926:2542","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43407:2568","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12987:29909":{"id":"2:12987:29909","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:2024":{"id":"0:53-31:102:2024","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:2024","glob":false}}},"2:13026:2679":{"id":"2:13026:2679","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4681:2679"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43461:2680","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51-31:136:2022":{"id":"0:51-31:136:2022","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:2022","glob":false}}},"2:13008:29916":{"id":"2:13008:29916","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:2025":{"id":"0:54-31:120:2025","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:2025","glob":false}}},"0:56:1241":{"id":"0:56:1241","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:801","0:59-2:44062:150","0:60-20:32:1956","0:62-21:4707:1967","0:63-25:9:1966","0:65-21:1291:1960","0:66-20:68:1961","0:67-20:97:1962","0:69-21:422:1958","0:70-21:587:1959","0:71-21:5171:1968","0:73-21:2766:1963","0:74-21:3786:1964","0:76-29:27:1970","0:77-29:17:1971","0:78-29:25:1972","0:79-29:20:1973","0:81-21:6217:1974","0:82-21:6182:1975","0:83-21:6212:1976","0:84-21:6199:1977"],"is_stripped":false}}},"2:12928:28505":{"id":"2:12928:28505","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43445:8416","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12976:29905":{"id":"2:12976:29905","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12584:8415","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::matches":"2:12973:2274"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43375:8433","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2766:1963":{"id":"0:73-21:2766:1963","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:1963","glob":false}}},"2:12922:27689":{"id":"2:12922:27689","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12254:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43129:8421","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13014:29918":{"id":"2:13014:29918","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12545:137","`FromStr`":"2:12544:2819"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41413:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12544:2819","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12544:2819","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31-21:6767:1981":{"id":"0:31-21:6767:1981","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:1981","glob":false}}},"2:12929:21958":{"id":"2:12929:21958","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:801":{"id":"0:37-21:104:801","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:801","glob":false}}},"2:12897:29897":{"id":"2:12897:29897","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12925:28522":{"id":"2:12925:28522","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12924:28508"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43436:8417","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12970:21957":{"id":"2:12970:21957","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6212:1976":{"id":"0:83-21:6212:1976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:1976","glob":false}}},"2:12916:21941":{"id":"2:12916:21941","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12918:21945","str::split_at_mut":"2:12917:21942"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12982:29907":{"id":"2:12982:29907","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12584:8415","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::match_indices":"2:12979:29906"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43321:8431","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-29:20:1973":{"id":"0:21-29:20:1973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1973","glob":false}}},"2:13005:29915":{"id":"2:13005:29915","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13011:29917":{"id":"2:13011:29917","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12979:29906":{"id":"2:12979:29906","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12584:8415","`DoubleEndedIterator`":"2:7966:131","prim@char":"1:12254:455","str::rmatch_indices":"2:12982:29907"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43303:8430","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5596:30616":{"id":"5:5596:30616","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:294:2523","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:294:2523","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5613:2411":{"id":"5:5613:2411","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:28508":{"id":"2:12924:28508","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12925:28522"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43427:8418","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26-21:6199:1977":{"id":"0:26-21:6199:1977","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:1977","glob":false}}},"0:84-21:6199:1977":{"id":"0:84-21:6199:1977","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:1977","glob":false}}},"0:50-31:109:2021":{"id":"0:50-31:109:2021","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:2021","glob":false}}},"0:27-20:131:1978":{"id":"0:27-20:131:1978","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1978","glob":false}}},"0:39-21:4707:1967":{"id":"0:39-21:4707:1967","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:1967","glob":false}}},"0:76-29:27:1970":{"id":"0:76-29:27:1970","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1970","glob":false}}},"2:12989:29910":{"id":"2:12989:29910","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12914:29900":{"id":"2:12914:29900","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12260:1609","str::slice_mut_unchecked":"2:12915:29901","crate::ops::Index":"2:38889:2756"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5266:1990":{"id":"0:45-21:5266:1990","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:1990","glob":false}}},"0:28-22:7:1979":{"id":"0:28-22:7:1979","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1979","glob":false}}},"0:82-21:6182:1975":{"id":"0:82-21:6182:1975","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:1975","glob":false}}},"0:13-21:2766:1963":{"id":"0:13-21:2766:1963","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:1963","glob":false}}},"2:13021:21700":{"id":"2:13021:21700","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:39003"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59-2:44062:150":{"id":"0:59-2:44062:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:44062:150","glob":false}}},"0:55-31:125:2026":{"id":"0:55-31:125:2026","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:2026","glob":false}}},"2:12999:21961":{"id":"2:12999:21961","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:28504":{"id":"2:12921:28504","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12254:455"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43123:8422","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4707:1967":{"id":"0:62-21:4707:1967","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:1967","glob":false}}},"0:23-21:6217:1974":{"id":"0:23-21:6217:1974","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:1974","glob":false}}},"2:12993:29913":{"id":"2:12993:29913","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12610:8410","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13016:21505":{"id":"2:13016:21505","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:29902":{"id":"2:12927:29902","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43417:8429","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12905:21917":{"id":"2:12905:21917","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12271:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12917:21942":{"id":"2:12917:21942","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12916:21941","str::split_at_mut_checked":"2:12919:21946"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69-21:422:1958":{"id":"0:69-21:422:1958","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:1958","glob":false}}},"0:71-21:5171:1968":{"id":"0:71-21:5171:1968","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:1968","glob":false}}},"5:5595":{"id":"5:5595","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5596:30616","5:5597:8748","5:5600:30617","5:5603:30618","5:5611:30619","5:5612:30620","5:5613:2411","5:5614:21504","5:5615:21503"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12942:21151":{"id":"2:12942:21151","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41272:191","prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6769:1983":{"id":"0:34-21:6769:1983","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:1983","glob":false}}},"0:67-20:97:1962":{"id":"0:67-20:97:1962","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1962","glob":false}}},"2:12918:21945":{"id":"2:12918:21945","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12919:21946"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12991:29911":{"id":"2:12991:29911","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-27:0:1987":{"id":"0:43-27:0:1987","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1987","glob":false}}},"2:12903:29899":{"id":"2:12903:29899","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12964:21954":{"id":"2:12964:21954","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12254:455","str::splitn":"2:12961:21952","self::pattern":"2:12584:8415"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43275:8402","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6770:1980":{"id":"0:29-21:6770:1980","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:1980","glob":false}}},"0:42-21:57:1986":{"id":"0:42-21:57:1986","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1986","glob":false}}},"2:12915:29901":{"id":"2:12915:29901","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12260:1609","crate::ops::IndexMut":"2:3158:2757","str::slice_unchecked":"2:12914:29900"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12923:21476":{"id":"2:12923:21476","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43139:2873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:21956":{"id":"2:12967:21956","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:1971":{"id":"0:77-29:17:1971","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1971","glob":false}}},"0:79-29:20:1973":{"id":"0:79-29:20:1973","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1973","glob":false}}},"2:13017:21697":{"id":"2:13017:21697","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39243:8559","Self::is_ascii":"2:13016:21505"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39243:8559","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13022:21701":{"id":"2:13022:21701","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:39003"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6240:1989":{"id":"0:44-21:6240:1989","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:1989","glob":false}}},"0:41-21:5212:1985":{"id":"0:41-21:5212:1985","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:1985","glob":false}}},"2:12910:21915":{"id":"2:12910:21915","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12992:29912":{"id":"2:12992:29912","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32-21:37:1982":{"id":"0:32-21:37:1982","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1982","glob":false}}},"0:48-31:65:2019":{"id":"0:48-31:65:2019","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:2019","glob":false}}},"2:12906:21913":{"id":"2:12906:21913","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41272:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2053":{"id":"0:0:2053","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:1990","crate::executor":"0:46:1863","crate::stream":"21:1291:1960","crate::channel":"27:0:1987","crate::future":"21:104:801","crate::sink":"21:4707:1967"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1863","0:56:1241","0:4-2:44062:150","0:5-20:32:1956","0:7-21:422:1958","0:8-21:587:1959","0:10-20:68:1961","0:11-20:97:1962","0:13-21:2766:1963","0:14-21:3786:1964","0:15-25:9:1966","0:16-21:5171:1968","0:18-29:27:1970","0:19-29:17:1971","0:20-29:25:1972","0:21-29:20:1973","0:23-21:6217:1974","0:24-21:6182:1975","0:25-21:6212:1976","0:26-21:6199:1977","0:27-20:131:1978","0:28-22:7:1979","0:29-21:6770:1980","0:31-21:6767:1981","0:32-21:37:1982","0:33-21:20:1225","0:34-21:6769:1983","0:35-21:6768:1984","0:37-21:104:801","0:38-21:5264:1105","0:39-21:4707:1967","0:40-21:1291:1960","0:41-21:5212:1985","0:42-21:57:1986","0:43-27:0:1987","0:44-21:6240:1989","0:45-21:5266:1990"],"is_stripped":false}}},"2:13023:21702":{"id":"2:13023:21702","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:39003"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5597:8748":{"id":"5:5597:8748","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12932:21959":{"id":"2:12932:21959","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81-21:6217:1974":{"id":"0:81-21:6217:1974","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:1974","glob":false}}},"2:13024:29919":{"id":"2:13024:29919","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4680:29919"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43452:8426","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25-21:6212:1976":{"id":"0:25-21:6212:1976","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:1976","glob":false}}},"2:12904:334":{"id":"2:12904:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12905:21917","`u8`":"1:12271:1734"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:1966":{"id":"0:15-25:9:1966","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1966","glob":false}}},"2:13002:21962":{"id":"2:13002:21962","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41270:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13027:29920":{"id":"2:13027:29920","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4678:29920"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43470:8427","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40-21:1291:1960":{"id":"0:40-21:1291:1960","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:1960","glob":false}}},"5:5603:30618":{"id":"5:5603:30618","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:2023":{"id":"0:52-31:100:2023","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:2023","glob":false}}},"0:63-25:9:1966":{"id":"0:63-25:9:1966","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1966","glob":false}}},"5:5600:30617":{"id":"5:5600:30617","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7608:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12958:29904":{"id":"2:12958:29904","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12584:8415","str::split":"2:12946:2551","prim@char":"1:12254:455","str::split_terminator":"2:12955:29903"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43221:8434","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-21:6768:1984":{"id":"0:35-21:6768:1984","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:1984","glob":false}}},"5:5615:21503":{"id":"5:5615:21503","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13020:21501"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7608:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6182:1975":{"id":"0:24-21:6182:1975","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:1975","glob":false}}},"2:12912:21916":{"id":"2:12912:21916","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10676:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5171:1968":{"id":"0:16-21:5171:1968","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:1968","glob":false}}},"0:10-20:68:1961":{"id":"0:10-20:68:1961","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1961","glob":false}}},"0:14-21:3786:1964":{"id":"0:14-21:3786:1964","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:1964","glob":false}}},"2:12985:29908":{"id":"2:12985:29908","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12935:21960":{"id":"2:12935:21960","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12254:455","self::pattern":"2:12584:8415"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12605:8412","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12955:29903":{"id":"2:12955:29903","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12584:8415","str::split":"2:12946:2551","prim@char":"1:12254:455","`DoubleEndedIterator`":"2:7966:131","str::rsplit_terminator":"2:12958:29904"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43203:8435","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12590:8411","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-20:32:1956":{"id":"0:5-20:32:1956","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1956","glob":false}}},"0:7-21:422:1958":{"id":"0:7-21:422:1958","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:1958","glob":false}}},"0:18-29:27:1970":{"id":"0:18-29:27:1970","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1970","glob":false}}},"2:12899:29898":{"id":"2:12899:29898","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12897:29897"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78-29:25:1972":{"id":"0:78-29:25:1972","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1972","glob":false}}}},"paths":{"27:181:21237":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"16:4468:16082":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:22504:27913":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:39981:2426":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:2049:8342":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"21:14925:2564":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"2:1929:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:42753:8383":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:11133:3053":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"9:424:15324":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:45787:3155":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"21:21:1225":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"17:10284:16648":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:41992:8349":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"21:9131:2396":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"21:9887:2346":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"21:11318:2449":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"17:12342:16853":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"18:491:33624":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:13473:19628":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"16:8118:16554":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:38905:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"21:5950:2482":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"21:12697:2475":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"2:2723:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:4502:16093":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:5736:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"6:5212:13523":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:8109:2840":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"6:5477:13555":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:6471:14263":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"21:9694:2427":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"2:45455:3160":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"17:12353:16887":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:11482:24555":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"5:7514:2705":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:4127:2941":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"21:10639:33950":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:14271:20152":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:3264:16800":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:7075:31105":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:41894:3070":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"5:294:2523":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:7503:2704":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:2961:8336":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"17:11877:16797":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:7559:16532":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:39911:8380":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:9622:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:46245:8302":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:10702:2436":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"1:3593:2576":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:5225:13525":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8476:2568":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:15249:20908":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:5912:2504":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:1939:2793":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:3413:2879":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:598:21278":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:8456:2443":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:5466:13553":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:22589:2917":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:14517:2513":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"30:1515:21166":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"6:6505:14221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6991:32687":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"21:57:1986":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"21:15148:2570":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"30:1229:21267":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"6:5502:13558":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"11:2369:15450":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"21:8095:2368":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"17:597:16638":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:14933:20888":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:13538:19633":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:6813:16510":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:16212:21122":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:44116:3270":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:6581:3075":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:12584:8415":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"11:2304:2721":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"1:1063:2723":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:30186:2740":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13046:16623":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"30:1250:21269":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"21:14574:2558":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"5:721:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:43221:8434":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5630:13570":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:43554:8446":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:4386:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7755:16544":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"21:12899:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"5:7428:30699":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"11:430:32322":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5083:13513":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:6478:14264":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:8488:2908":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:7456:2709":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"1:8174:24686":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:15078:16695":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:6574:16501":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"21:15209:2576":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"21:10017:71":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"21:8532:2374":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"21:6394:21196":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:6915:14322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:15760:20947":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"16:6066:16477":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"21:331:2655":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"1:12272:1716":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:13723:20120":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"9:357:15338":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"21:14716:2562":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"21:10597:2432":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"6:6706:14282":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:42271:27965":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:10832:24722":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"21:15438:33773":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"6:8294:13741":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:3475:15566":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:30218:8475":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:4843:2955":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13899:20129":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:12278:1320":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:43760:8436":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:45263:3159":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:4273:8516":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:22101:8790":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:13400:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:16235:21124":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:21339:3133":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:7429:10548":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:15769:20948":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:6460:14262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"21:10931:33950":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"21:15523:33762":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"1:1578:2709":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11583:16752":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:10818:16657":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"11:787:2711":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"6:6636:14274":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:765:21154":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:16198:21121":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"2:41775:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:9828:2346":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"17:15214:20906":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:9219:2655":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:43203:8435":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:13961:33727":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"17:13766:16845":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"13:226:32335":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:2736:2562":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:11595:23848":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:40283:2447":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:10877:16658":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:6689:3078":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"11:1896:2712":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"17:12089:16799":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:9257:2398":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"21:10262:2431":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"1:4897:2956":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:10479:33950":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"16:6427:16490":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:836:2481":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:46119:3190":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:13418:3272":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"16:6782:16509":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:4316:8371":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:11341:16730":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"21:10367:2442":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"16:7857:16549":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"16:5960:16473":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:21202:28461":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"5:1724:31074":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"16:4560:16105":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"10:44:15432":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:41270:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8555:2909":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:6597:14270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"21:11824:2458":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"30:1039:21280":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"6:5565:13564":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"21:6769:1983":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"16:3899:15628":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:7168:16523":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:46393:8312":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:42734:8894":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"23:0:2309":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"2:22432:28517":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:7927:2662":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:9101:3094":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"21:12333:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:7356:8729":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"17:12238:16856":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:11142:16656":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:15390:20922":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10759:16656":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"30:1015:21277":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"21:13524:33920":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"17:13797:20123":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:2684:15549":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:46340:8309":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:10837:24711":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"1:3486:2859":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"21:8921:2388":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"21:9632:33950":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"17:12768:16618":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:22540:27941":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:2281:642":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:11324:16744":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"30:978:153":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"21:6240:1989":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:31846:8333":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:10170:16458":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:13844:20126":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:40023:2347":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:11419:16656":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:12116:8867":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"21:12456:2467":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:11144:2353":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"21:15321:33679":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"17:15356:20918":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:22482:28209":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"21:779:2378":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"1:4839:2951":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:8099:2842":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:15596:20935":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:41344:2709":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:8019:2521":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:5236:13526":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:6621:14272":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"21:15042:2567":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"16:6758:15476":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:15197:20904":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:2175:16766":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"9:447:15322":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"16:8073:16552":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"21:15157:2571":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"28:46:2481":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"2:11130:8405":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:13308:19617":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:16249:21125":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:13437:19626":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"21:10841:2440":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"16:7648:16538":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:1863:8800":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:11843:15490":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"21:11884:2361":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"1:10498:3051":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"25:0:1965":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"21:14863:2563":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:46265:8304":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"24:190:2345":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"21:6212:1976":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"2:42006:8357":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:43893:8902":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:45210:3141":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:7584:14709":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:45064:3139":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:6617:3083":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:1426:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"6:5031:13508":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"21:11344:33950":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"21:12255:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:22049:3263":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"21:8217:2363":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"17:15368:20919":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:8402:1966":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"17:403:16636":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:4395:8502":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"6:7412:10550":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:43375:8433":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:10025:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"11:1923:2728":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"30:1415:21137":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"6:5407:1173":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"21:14633:33950":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"16:7888:16550":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"18:635:21281":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:10819:2481":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"2:40498:2482":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"21:15511:33761":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:42313:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"5:4922:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"21:14482:33950":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"21:14991:2565":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"2:45502:3216":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"6:8351:15277":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:31816:2519":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:5376:13544":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"21:9369:2421":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:39904:2845":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:1628:10435":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:6562:14269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"5:2087:2565":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:42953:8391":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:9175:8411":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"27:124:21232":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"6:1485:10420":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"7:31:15293":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:542:32552":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:8482:2909":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:42296:8346":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"17:10092:16646":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:10419:16612":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:10727:33950":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:13801:33950":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"16:2708:15550":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:13224:2375":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:8798:3037":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:45646:3183":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5181:13520":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:941:2481":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"21:6429:187":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"30:1237:21268":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"6:497:9527":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:10244:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"21:4275:2489":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:41855:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:7356:2731":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:45373:3194":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:32960:8763":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12478:16893":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"21:12383:2369":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"21:13319:2473":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"5:3806:2744":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:8341:15276":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"11:1883:2481":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:9497:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:13173:16942":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:41396:8851":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:46045:3184":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2471:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:42013:8358":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"30:899:21267":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"1:9247:24646":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:10676:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:14066:20140":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:6689:14280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"21:8401:2367":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"29:17:1971":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"17:14449:20164":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:41405:2307":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:44075:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"15:0:2167":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:7539:16530":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:11702:16785":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:11534:24482":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:16105:21114":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"17:11256:16715":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:9995:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:21967:3261":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"15:288:15481":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:15010:20892":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"17:12543:16900":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"17:14994:20879":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"28:30:21253":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"21:6583:33741":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"5:5842:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:12286:8913":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:13785:16844":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:11497:16725":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:10035:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:7393:33950":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:8247:13734":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"18:96:21138":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:12257:1223":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:45470:3209":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:8012:15080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"21:14657:2560":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"16:3778:15576":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:9781:16639":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1062:31074":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:8536:2972":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:2985:23765":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:12271:1734":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:5039:13509":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"5:2101:2744":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"21:10605:2439":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"21:10117:33950":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"21:9338:2400":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"1:3020:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:39755:8532":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:46355:8310":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:43123:8422":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13015:16626":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"11:1910:2726":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"5:7420:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10866:2844":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"31:136:2022":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"21:9569:2424":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"1:2271:2823":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:11405:16727":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"21:7917:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:1510:10424":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:3208:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13116:16940":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:5064:13512":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:2307:30814":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:40476:8714":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:6577:2485":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:6714:14283":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"17:16093:21113":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"21:12717:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"2:22232:3256":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"16:5385:16457":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:38920:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"11:673:2481":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:15176:20902":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:0:2168":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:1574:2481":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:10451:2350":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"6:5445:13551":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:38230:8775":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:3126:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:13187:19611":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:10710:16655":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:11115:16689":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"6:517:9528":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:15608:20936":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"16:7306:32807":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:356:2675":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:15:2277":{"crate_id":2,"path":["core","write"],"kind":"macro"},"5:2195:2651":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:3314:8777":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:4031:2859":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"16:6385:16487":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:10456:28404":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"21:11866:33950":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"2:2634:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"20:143:21176":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"16:2838:15556":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:15039:20894":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:15521:20932":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"16:6962:16516":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:8529:2904":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"21:12913:2477":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"1:8782:3036":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:10524:16652":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:31743:8510":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:5314:13536":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:1692:2961":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:22099:28224":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"6:5643:13572":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5122:13516":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:14235:20149":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:5174:2934":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"31:38:35370":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"2:12544:2819":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:46177:3162":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:41736:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:1885:2779":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"5:1534:2713":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:3354:27810":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"21:8778:33950":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"0:46:1863":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:11144:27063":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"1:1596:2726":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:2768:15553":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"6:5665:13574":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:10666:2846":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:15289:20912":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:11647:16783":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:2443:2832":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:12818:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:9984:16644":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"1:5189:24668":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5415:13548":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:15273:20910":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:21248:28468":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:10661:16654":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:14189:20147":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:45548:27926":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:39991:2427":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6749:16508":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"28:60:2504":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"1:1072:2724":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:43954:8926":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:4966:2892":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:3829:2911":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"16:6872:16512":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:41394:2692":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:4514:8511":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"17:13594:19637":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:15224:2578":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"6:4985:13503":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11214:16687":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8165:2706":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"21:14327:33950":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"2:32901:3123":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"27:127:21233":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"17:13325:19618":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:45519:28035":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"21:15382:33912":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"18:706:8413":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"18:735:21153":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:6442:16492":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:23064:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:2234:16751":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"21:14117:33950":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"16:8136:16555":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"21:20:1225":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"6:5290:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"30:1523:21164":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"5:1325:2723":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:5112:13515":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"27:467:21247":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"2:41319:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"18:608:21279":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"30:1069:21265":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"1:2453:2837":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:15463:20930":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:15720:20944":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:33019:8762":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"31:120:2025":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"21:15166:2572":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"2:10284:2853":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"5:4422:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:15748:20946":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:43357:8432":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:13497:19630":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:2696:2875":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"18:538:21167":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46219:3217":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:33561:8767":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:21456:3131":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:8393:8720":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:9300:23251":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:5436:13550":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:46000:3150":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:15655:20941":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"5:2525:30707":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"21:10686:33950":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:45079:3175":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:6614:28501":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5146:13518":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:2715:2456":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"1:8160:2707":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:42531:3033":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:16079:21112":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"1:2674:27260":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"29:25:1972":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:10488:27802":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:0:2169":{"crate_id":17,"path":["object"],"kind":"module"},"6:7467:14702":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:45335:3182":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5320:13537":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:9824:8347":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"21:7325:2352":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"16:2592:15545":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"21:13246:2470":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"21:7697:33753":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"30:1179:21269":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"21:15177:2573":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"1:9093:2481":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:9763:2428":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"6:8197:15240":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"21:2769:994":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"function"},"1:637:2684":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"5:1340:2722":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:13473:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:7100:31114":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:22199:3257":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"20:68:1961":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"5:1494:2709":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:2606:2846":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:12597:16906":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"17:13999:20135":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13399:19623":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:531:21166":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:45196:3193":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:3036:30719":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"20:0:1955":{"crate_id":20,"path":["futures_core"],"kind":"module"},"21:13714:33950":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"2:41336:2708":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:3614:15567":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:7580:16534":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:6082:3086":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:15616:20937":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:4897:13492":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:45128:3146":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:31750:8828":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"16:5700:16460":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"16:6466:16494":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:10218:16616":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:6257:3272":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"6:5489:13557":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:5415:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:2934:3122":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:41453:2481":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"18:521:21162":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"6:5244:13527":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"21:7887:2361":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"1:1581:2504":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"1:5347:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:3196:15564":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:7221:27248":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"16:3925:15631":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:13691:2485":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"20:97:1962":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"1:8116:2844":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:7631:8458":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:45356:3188":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"21:14667:2561":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"21:8474:2372":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"1:11205:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"16:2508:15541":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:10315:3057":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"18:573:2450":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"7:78:15300":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:7813:16547":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:8015:2783":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:41250:2906":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12189:16882":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"21:13658:2481":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:33215:8765":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:33734:8769":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:503:2651":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"6:8288:13740":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12969:16614":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:12590:8411":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:2878:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:5347:16455":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"16:4830:16191":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"21:12618:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"6:7452:14700":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"21:10298:33950":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"2:39672:8537":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:14503:20168":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"21:7488:33950":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"18:670:21156":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:9174:3093":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:10600:2888":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:12277:1794":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"24:296:35211":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"6:5457:13552":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"21:2766:1963":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"16:6353:16486":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:730:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:22154:8790":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"21:5875:2859":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"30:993:21157":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"17:15410:20924":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:4799:3002":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:45277:3208":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:2477:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:37651:8774":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:7864:27263":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"21:9010:2391":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"11:837:2716":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:7251:8723":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:11367:16696":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"16:2528:15542":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"16:6494:16496":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:4459:8509":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:1809:665":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8104:2843":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:22555:28044":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:586:9538":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"31:125:2026":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"5:4268:2859":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:10236:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:43099:8428":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"16:5817:16467":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:7462:2357":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"2:45675:3189":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:3406:8341":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"21:11543:33758":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:10855:24650":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"1:7645:24461":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"17:16176:21119":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"17:10068:16624":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:16050:19615":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"5:3249:30869":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:3597:16823":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"2:21260:28457":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"21:11295:33950":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"2:7643:2484":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11187:23850":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"5:3647:2481":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:8463:2873":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"11:2352:2723":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:10904:27060":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:4885:13491":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:7561:14707":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"21:8538:205":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"2:30250:28030":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"21:14001:21180":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"20:82:2300":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"5:6049:9127":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:46276:8305":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:43901:8925":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"21:7961:2369":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"17:13753:20122":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"21:13047:2466":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:22011:3262":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:41413:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:1707:10443":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"27:149:21236":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:8635:33950":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"2:3077:8339":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:5675:3048":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:1686:10441":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"21:13423:2476":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"1:481:27256":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:3669:15568":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:2438:15538":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:2764:2797":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"6:7306:9575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:4093:2940":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"30:1166:21268":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"17:12572:16656":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:32608:8761":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"16:6560:16500":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"21:10962:2443":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"17:13774:16843":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"21:7661:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:7111:32685":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:4747:8525":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:1824:2762":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:15434:20927":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:6491:14220":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:22471:2915":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"21:7636:2370":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"1:6098:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"21:4707:1967":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:10279:2851":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:11557:16780":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"11:396:32314":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:7633:32625":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"30:1145:21266":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"2:3129:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:9059:3052":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11788:16837":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"30:1500:21162":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"1:2660:2561":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:13235:19613":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:43303:8430":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:10828:33598":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:42242:8346":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:4771:16178":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"30:142:21272":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"30:1258:21270":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"2:43129:8421":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6802:15475":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"30:999:21157":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"2:37541:8772":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:5910:2346":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"21:12798:32821":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"2:43778:8437":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:2418:15537":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:3364:2886":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10137:16610":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:46317:8308":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:5250:13528":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:5857:3071":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:11567:23725":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:15313:20914":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:45164:3181":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:11829:24636":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"22:0:2308":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"1:9399:3119":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:2636:15547":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"30:947:21157":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"16:2854:15557":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:0:948":{"crate_id":6,"path":["libc"],"kind":"module"},"17:15678:20942":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:13064:16622":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:41210:2904":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"30:934:21270":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"16:5400:16458":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:31687:3055":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:10988:8407":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:11853:16840":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:5598:13567":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"21:5266:1990":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"21:11209:2447":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"30:1508:35352":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"22:7:1979":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"2:3494:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:41478:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:4029:2936":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:1862:2773":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"21:9733:33950":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"21:8896:33950":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"27:487:21249":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"2:22417:27938":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5014:13506":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:45713:3143":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:8384:2734":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:9948:2430":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"21:5171:1968":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"2:1741:8699":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7388:2746":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:12254:455":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:4891:13323":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:557:2658":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:1663:10438":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4250:2966":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:2295:8790":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"21:15230:2443":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"6:5160:13519":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"21:12982:2479":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"2:33388:8766":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:6747:33739":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:11061:8401":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:2440:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:12792:16620":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:3810:15585":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"14:202:8456":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"30:964:21157":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"16:5781:16465":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:8226:16561":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"29:27:1970":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"17:15376:20920":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"17:15092:20895":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:11247:33950":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"1:12255:1755":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:14912:20887":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8446:2421":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"21:335:33852":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"2:41328:2481":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:4856:16194":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10406:23753":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:45111:3140":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:41232:2905":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"21:12030:2364":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"5:6388:3273":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:2382:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:12030:16803":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"27:136:3086":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"1:9208:24478":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"11:364:32316":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:6417:14258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"18:754:21161":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:8795:2386":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"1:3243:26694":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:6408:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:45181:3187":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"14:214:15466":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5002:13505":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:22448:28037":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:43171:8400":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:8301:16563":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7355:16524":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:40134:8728":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:8268:2514":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4787:13483":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:5200:13522":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"21:11439:2451":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"11:2326:2722":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"21:39:2321":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"21:13510:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"17:12318:16668":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:4864:13488":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"16:6231:16481":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:1699:10442":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:6435:14259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:41010:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"5:3026:30723":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:10720:33606":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"21:3786:1964":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"1:10389:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"5:868:2729":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"21:7345:33950":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:5052:13511":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"21:9646:2426":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:45601:3177":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:2441:2831":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:588:2678":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"21:13030:2480":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"1:11431:2820":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"16:867:32820":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"1:12274:1728":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:1723:10444":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"21:8499:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:5483:13556":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"17:12107:16656":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"21:8303:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:4570:8513":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:10155:16457":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:6760:3085":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:13553:19634":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:7980:2689":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"20:92:2846":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"21:15074:33950":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"17:11063:16700":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11026:16680":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14079:20141":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"18:507:2450":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:42749:28253":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:1653:10437":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:15426:20926":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:43445:8416":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"17:12289:16850":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:4308:2481":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:30599:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:12599:8413":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:9492:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"5:828:2436":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:42259:2424":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:45248:3153":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:21351:3130":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"16:150:15509":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:2394:15536":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"11:1903:2725":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"5:6907:8479":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"15:306:15482":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:40507:8717":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:45487:3215":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"20:17:2299":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"2:41092:28032":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"31:102:2024":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"2:39721:8539":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:9323:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"21:14430:2512":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"21:13371:2474":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"5:3032:30710":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8190:2565":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"21:7100:33950":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:21458:3130":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:2998:15561":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:10924:2783":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"17:10915:33597":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:32842:3121":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:8493:2900":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:5897:16471":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:1975:744":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:46198:3196":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:8093:16553":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:42287:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:4:1186":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"18:613:21280":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5742:16462":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"6:570:9536":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:3244:2726":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:4986:16911":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:7769:16545":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"5:669:30858":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:15836:20953":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"19:0:1203":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"27:72:21248":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"18:481:21163":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:6120:16480":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"16:3842:15594":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"26:43:35298":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"8:0:2161":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:4738:23641":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"21:12673:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"1:7794:16638":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13344:19619":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:12076:16798":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"21:11537:33921":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"5:7339:2741":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:14847:20883":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:41502:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"21:925:2389":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:4976:16222":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7473:16526":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:14386:20160":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:3934:2912":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"17:15333:20916":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:7043:3125":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"6:6880:13398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:5235:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:928:2717":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:15454:33747":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"24:9:21178":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"2:2401:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"16:4352:16012":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:13676:2483":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"11:351:32304":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:8154:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"21:6452:3074":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:8431:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:9450:33950":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:3018:8768":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8000:2782":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:14040:2709":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"1:4141:2943":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:7293:23253":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8426:2517":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"21:10319:2347":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"2:3095:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11730:16787":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:8182:2882":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12213:16884":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:3737:2709":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:5756:16463":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:2888:2667":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:12040:21473":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"21:8570:2377":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"6:5617:13568":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:43452:8426":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"21:6934:33950":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:11514:33950":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"21:7442:33950":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"17:13526:19632":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:533:2656":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"18:589:21277":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12929:16667":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:31817:8739":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:9684:28573":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:5863:16470":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:15168:20901":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:2274:2543":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:43600:8449":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:7155:33950":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:9679:29654":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:2458:15539":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"10:0:2163":{"crate_id":10,"path":["adler"],"kind":"module"},"5:7545:2801":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:11688:16750":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:21758:3126":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:22087:3266":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"21:13575:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"2:38960:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"17:12422:16890":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:43028:8380":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:15035:32277":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"21:14056:2708":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"16:4743:16173":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"16:6588:16502":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15138:20899":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:7061:16521":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:12605:8412":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"11:2536:32332":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:4641:16117":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:14977:20890":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:14489:20167":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"11:1566:15447":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:42502:28503":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:6930:8480":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"15:327:15486":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:4724:2940":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:6738:14286":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:45846:3144":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:10842:2840":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:12221:24469":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:11166:16694":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:12758:33901":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"2:43275:8402":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"30:909:21268":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"17:12530:16901":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:30626:8554":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"16:5107:16261":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:2469:2712":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"30:1569:21158":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:12043:16801":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"11:844:2717":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:7368:2504":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:14516:20169":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9144:3092":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:2788:15554":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"21:14969:33950":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"2:3158:2757":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:4913:16205":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13375:19621":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"5:2287:30883":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"21:14783:33950":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"2:43257:8404":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:15635:20939":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:15102:20896":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:8742:3035":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"21:8648:219":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"6:7348:14697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11715:16786":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"6:8317:13744":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:2944:8760":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"17:16032:19614":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"2:7357:8730":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:485:9525":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"21:9401:33950":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"2:22140:3267":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"6:6447:14261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"21:7777:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:1517:10425":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"20:27:2846":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:12362:16888":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"5:824:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5636:13571":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:21278:2846":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"17:12464:16892":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:41658:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:16069:21111":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:5266:13530":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"21:1291:1960":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"17:13568:19635":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:7537:14705":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:12647:2370":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"17:15445:20928":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"30:1123:21157":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"5:7031:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:7314:10379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"16:6927:16514":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:12100:8865":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:8541:2973":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:11465:33950":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"17:12408:16880":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:13972:20133":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:40124:2441":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:6606:16503":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:43461:2680":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1585:10432":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:12485:16894":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"21:12206:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"21:14065:2709":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"2:42232:27928":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:3603:2504":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:21231:28467":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:10932:3047":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:10039:8356":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"5:2234:30783":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:13438:3269":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"5:7608:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:12259:1577":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:10249:24649":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"18:718:21152":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"21:1087:2399":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:11116:8402":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"30:1049:21276":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"2:43470:8427":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"13:109:32382":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:587:1959":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:9461:2779":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"2:31848:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"30:1401:33624":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"5:4073:2504":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:12205:24602":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"21:8156:2364":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"17:12388:16879":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"17:12264:16854":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:9048:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:21280:3134":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"21:9508:33950":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"2:39655:2680":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:41461:2708":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:10885:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"2:12323:8915":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:44137:3268":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"1:3279:2888":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"16:5006:16229":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:12273:1722":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"1:5864:3072":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"14:187:15465":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"28:0:2311":{"crate_id":28,"path":["slab"],"kind":"module"},"16:4062:15745":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:6542:14268":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"21:14279:237":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"30:1545:21156":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:5936:2693":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"11:123:32324":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"27:434:21251":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"17:12508:16895":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:4242:8515":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:10606:2886":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:32236:8759":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:40000:2428":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"21:6284:2456":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"17:12201:16883":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:11235:24537":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"30:1454:21153":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"16:6849:16511":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:15023:20893":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:11016:16679":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:4155:8332":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:12695:16902":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:13251:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"11:1087:32323":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"21:4353:34392":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"1:9267:16523":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"17:15944:19612":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"18:659:21155":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:4424:16061":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:9346:2401":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"14:165:15458":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:43427:8418":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:43533:8445":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:1648:2859":{"crate_id":2,"path":["core","mem","maybe_uninit","clone_from_slice","Guard"],"kind":"struct"},"1:9355:3082":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"2:12346:8912":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:2808:15555":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:8155:16556":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:2728:15551":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:3014:15562":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:2956:8335":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:5191:13521":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1593:10433":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:4035:2935":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"21:9555:33950":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"6:4909:13493":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"21:9188:2397":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"21:14604:2559":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:15376:2403":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"21:10661:2435":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"2:8387:2738":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:9345:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:5515:13559":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"16:5914:32599":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:39829:28190":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:538:9531":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11567:16781":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"21:4540:27263":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"24:169:2343":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"6:5546:13562":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13959:20132":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:5992:1966":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"2:11102:8404":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:3025:8327":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:15058:20878":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:14311:20155":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"21:8181:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:3240:24401":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:7400:26155":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"27:481:3033":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"16:5367:16456":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:13528:2733":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:22073:2846":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"21:10345:33950":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"21:15299:2582":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"11:1142:15446":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:564:9535":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"16:2748:15552":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:6721:14284":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"6:6678:14279":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:13089:16939":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:43869:8904":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11817:8319":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:1098:16693":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3366:2887":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:4228:26158":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"21:8596:33950":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"2:45923:3178":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:5995:16474":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2548:15543":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"15:394:15493":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:10350:16650":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:621:2682":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"21:7840:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:8265:13737":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:8563:2974":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"21:13835:2487":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"17:14868:20885":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11825:16818":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:7014:16519":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:5277:13531":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:9336:2859":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"1:8126:2841":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"18:515:21165":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:6815:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"16:4614:16113":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:7509:16528":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:6540:2504":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:12808:33905":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"16:7321:3018":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"21:4607:2391":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"2:21729:2846":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"21:9086:2395":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"1:12276:917":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:25464:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11841:16839":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"30:1095:21269":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"17:12659:16898":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:6480:16495":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"21:12965:2478":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:7516:14704":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:46370:8311":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:3329:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:14968:20889":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"30:1208:21265":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"6:8006:15079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:4174:8499":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"16:6976:16517":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:3575:2580":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:11773:16836":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:7052:16520":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:11517:27250":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:10037:8355":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"11:811:2712":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"6:7984:9482":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:8414:2515":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:7448:2709":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"29:0:1969":{"crate_id":29,"path":["futures_io"],"kind":"module"},"17:11898:16817":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"21:11576:33895":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"2:4120:28177":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"16:5769:16464":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"21:10401:33950":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:8809:3038":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:40062:8726":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:14788:20882":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"21:14011:2708":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"6:5671:13575":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"6:6532:14267":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:43885:8907":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"30:1024:21278":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"16:7695:16541":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"11:0:2164":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:43112:8425":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:725:2846":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:12265:717":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:5557:13563":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"21:7020:2350":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"17:14372:20159":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13211:19612":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:9671:16613":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:32422:8758":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:9529:2423":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:4543:2665":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:6556:33760":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"5:6028:3069":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:726:2918":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"21:6770:1980":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:42549:28454":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:4942:13497":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"16:6278:16482":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:5423:13549":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"1:5158:24668":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"28:55:2708":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:21214:28461":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:12683:16903":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"11:1107:15445":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:7805:24638":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:12400:8406":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"11:856:2718":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:4837:13487":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"16:4940:16209":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:21882:3132":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"5:3283:30864":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:43436:8417":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"21:6566:33954":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"2:41176:28207":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"21:6377:21197":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"1:7994:2690":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"21:6823:2347":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"17:12621:16904":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:30224:8690":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:5488:3043":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:6874:14320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:2591:2559":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:5538:3046":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:5102:13514":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:2644:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:11915:16842":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:3518:2569":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"5:7621:8457":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:11662:8390":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"17:10018:16617":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:39748:8426":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"16:7006:16518":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12399:16889":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:7421:28311":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2297:8791":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"17:13252:19614":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:14356:20158":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:13536:2460":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"6:5344:13540":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:8393:2484":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:1680:10440":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:7845:27253":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:4330:2970":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:6648:16506":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"21:6767:1981":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:13412:19624":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:21447:2846":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:43321:8431":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:39740:2680":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:2435:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:39661:8500":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"21:11649:33935":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"1:12260:1609":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"27:146:220":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"17:12949:16668":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:21770:28469":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:3119:2520":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"11:299:32309":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"29:20:1973":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"21:12942:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"17:13855:20127":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:43897:8903":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11743:16788":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:11293:16717":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:5445:2423":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"21:15281:2580":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"17:12863:16664":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:15116:20897":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:40483:2485":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"24:135:2344":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"21:15308:21194":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"17:15957:21109":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"5:2112:2745":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:39971:2425":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:6729:14285":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"24:12:21177":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"16:7618:16537":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:15822:20952":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:559:9534":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:39711:8538":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:14156:2508":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"21:10204:2450":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"27:154:3092":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"21:14347:2511":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"17:15400:20923":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"16:7741:16543":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"27:0:1987":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"2:4907:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:5502:3044":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:11761:2912":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:6317:16484":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:6667:2709":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:41048:2902":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"21:8557:2376":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"21:6338:186":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"16:7799:16546":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"21:12513:2464":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"21:8364:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:15324:20915":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"21:9418:2422":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"21:15372:2404":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"21:6182:1975":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"2:7473:8712":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6664:14277":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:10813:3004":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"17:4821:16905":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:6900:14321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"21:15556:33910":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"30:144:21273":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"6:4800:13484":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:14560:20172":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:7428:16525":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"17:12900:16666":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"9:482:15321":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:4500:31096":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:43041:8381":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"16:7656:16539":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"30:1587:35342":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"16:2878:15558":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"6:5677:13576":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"21:14020:21181":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:10905:16659":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:2631:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:6746:3084":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"21:13882:33950":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"17:13606:19638":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"30:1479:21154":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"2:1734:641":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"21:13908:2488":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"17:11153:16657":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:6619:2513":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:11128:16688":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11606:24709":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:14038:20138":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:37596:8773":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"21:9467:2446":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"1:4065:2937":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"21:7419:2356":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"1:9350:3081":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"17:10439:16651":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:939:2718":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5472:13554":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"1:1607:2728":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:3584:27008":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:6419:8733":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:15342:20917":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:46148:3211":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"18:80:21137":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11354:16729":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:11755:16789":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:4108:28178":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:7690:2712":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:1207:16701":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:39856:2804":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"17:10534:33591":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:40525:8719":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:3321:2890":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13986:20134":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"30:878:21265":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"17:14284:20153":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:867:2710":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"21:8339:2365":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"17:11102:16690":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:9226:24544":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"17:16223:21123":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13387:19622":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:10603:2890":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:15222:20907":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:279:31074":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11581:21475":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"21:7503:165":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"1:4266:2968":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:10538:33950":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:39781:8535":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12851:16663":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:2607:8558":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6342:32823":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:2612:15546":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:859:2709":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"21:11802:33950":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"6:7602:14710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"27:452:3093":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"1:7932:2664":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:2548:32312":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11865:16841":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12443:16881":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:42519:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:5678:3050":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"11:2423:2709":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:5382:13545":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"21:12856:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"21:14089:2505":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"17:13674:20119":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"21:11952:2362":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"5:7398:30878":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"18:581:8554":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:14256:33950":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"21:5251:21192":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"21:13152:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"11:2124:2721":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:7250:26403":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:5008:923":{"crate_id":2,"path":["core","iter"],"kind":"module"},"6:8300:13742":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:6504:16497":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"6:491:9526":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:15126:20898":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:15473:20931":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:31725:26342":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:4979:13502":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"27:187:21238":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"5:5708:8479":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"21:15417:33772":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:44146:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:40469:28502":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:14177:20146":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:9085:3054":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"27:11:35308":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:39962:8725":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:2637:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:40110:2440":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"31:100:2023":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"11:434:32318":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:40009:28476":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"6:1547:10428":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:4928:28432":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:3456:2482":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"11:1887:2709":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"9:53:15341":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"21:7045:33950":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:15646:20940":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:6519:14265":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"5:1575:2743":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:33078:8764":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:42510:2854":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:11764:16790":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"28:42:2709":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"1:2425:2826":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:1840:8801":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:12225:16857":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:3396:2712":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"16:6634:16505":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:5307:16438":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:1828:2712":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"21:8034:2362":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"17:10671:33603":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:13272:19615":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"21:14739:33950":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"21:8278:2366":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"21:10822:33950":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:2780:33936":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"function"},"16:2303:15504":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11075:16696":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:945:2719":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:7529:2666":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:4668:2993":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11740:2910":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2660:15548":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:563:21168":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:7823:16548":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:38942:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:21331:2846":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11836:15490":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:9340:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:15206:20905":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"16:6079:16478":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:14031:2481":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"17:13292:19616":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:16187:21120":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:12275:1710":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"21:6056:2456":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"30:1271:21157":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"2:22582:28488":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:16269:19624":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"21:11010:2445":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"30:1200:21157":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"21:6859:2350":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:3473:16805":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"21:23:2319":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:39243:8559":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"21:8544:2375":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"16:2572:15544":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:22:772":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:1535:10427":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"21:13008:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"2:21734:3136":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:46236:8301":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:3335:8497":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:39732:8427":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"21:5256:21191":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"1:12258:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"6:1580:10431":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:41816:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5046:13510":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:14529:20170":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:6532:16498":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:14876:20886":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:12362:8914":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:14475:20166":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:39884:2817":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:11812:16796":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"4:0:2160":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:29788:2914":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:43877:8905":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4410:2971":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:5401:31074":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13509:19631":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1496:10422":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:10868:2874":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"21:6199:1977":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"7:0:1784":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:5927:16472":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:10648:2661":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"2:41384:3019":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:14575:16626":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:7573:2799":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"18:0:2170":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:12584:16657":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"1:8263:24460":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"21:13484:2472":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"21:13685:2484":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"1:12266:861":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"21:9672:33950":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"11:1160:2724":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:4087:2939":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:39767:8533":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:1007:2721":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:13814:20124":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:1854:27929":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:7966:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"11:1051:2723":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"1:4137:2942":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:12993:16669":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"11:832:2713":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6746:14287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"17:14341:20157":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:4045:2378":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"28:208:2723":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"16:4718:16171":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:43737:8454":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:42334:8348":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10982:16677":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:15190:20903":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:5134:13517":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:39813:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:1968:2794":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3018:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"5:5449:2385":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:7991:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:43747:8455":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:7891:8721":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"5:5996:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:43726:8453":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"11:883:2720":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:951:2720":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:4590:2976":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"21:7586:33753":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:45388:3142":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:2379:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:40075:2437":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"21:7265:2348":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"5:3028:30724":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5219:13524":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"24:15:21179":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"11:2231:15440":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"2:38893:8776":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:5581:13565":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"16:7604:16536":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:43889:8908":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"24:309:21190":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:4390:8501":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"21:15290:2581":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"21:10867:33950":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"30:971:21158":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"17:11189:16692":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"21:6982:33950":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:5283:13532":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:11269:16716":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"14:0:2166":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"9:238:3033":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"21:6846:33950":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"6:4992:13504":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:11700:2911":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:3251:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:13276:2378":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:8258:24690":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:2876:8334":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12494:16858":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:39818:2803":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"21:15387:2406":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:13772:2390":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"21:6962:2355":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"16:6895:16513":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:40259:2443":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"30:1490:35354":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"1:10228:2773":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"21:422:1958":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"6:6821:14293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:21246:28465":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"11:742:2715":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:22311:28186":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:9232:33950":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:39698:8536":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:914:2714":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:4523:8512":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:1826:2763":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:40085:8731":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:8306:13743":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:1463:2481":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:10027:8350":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:10988:33950":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"21:8609:2379":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"1:10121:24430":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:8328:13745":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"21:13462:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"21:12108:2363":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"1:12264:701":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:41395:3021":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:40269:2445":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"21:7757:2371":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"17:15799:20950":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:7910:16551":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:39953:8724":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"2:45292:3214":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:40053:2350":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"30:956:21274":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"21:5675:2484":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"2:22613:2931":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:3369:8338":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4952:13498":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:31736:28790":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:12658:8439":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:43063:8399":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:42902:29625":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:11027:27242":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:5750:3087":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"21:12055:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:13738:20121":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:2756:30847":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"30:1464:35355":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"21:11977:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:39020:2698":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:12671:16934":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:5070:3009":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:9352:2402":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"6:6629:14273":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"6:5329:13538":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"2:44124:3271":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"31:65:2019":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"21:9592:33950":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:640:2685":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4824:13486":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"30:1448:8413":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"2:46432:8313":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:14723:20880":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"28:217:2721":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"17:15814:20951":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:8259:16562":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"28:76:35328":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"21:9907:33950":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:2628:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:5306:13535":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"30:1007:21158":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"1:11120:3052":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:465:9522":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14752:20881":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:5352:13541":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"30:922:21269":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"21:8059:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11540:3058":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:9254:24458":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:6650:14275":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"11:102:32331":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:13202:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:9280:24565":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"16:872:32818":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"17:15992:21110":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:43417:8429":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40032:2348":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12647:16899":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:13024:16670":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"21:15274:2579":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"5:3791:2565":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"21:14289:2488":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"14:7:15457":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:11010:27243":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:11117:33950":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"16:6456:16493":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4149:2945":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:523:9529":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:21229:28463":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:14414:20162":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:5037:16237":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:1526:10426":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:11634:16753":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"6:8271:13738":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"6:5370:13543":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:11089:16691":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:2566:33842":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"2:1771:1261":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"5:1153:30924":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"21:15314:2655":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"21:11763:2455":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:922:2716":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:13922:20130":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:860:32819":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:46256:8303":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:12433:16626":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:11042:16681":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"30:1559:21157":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13877:20128":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"5:7412:2709":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:31759:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"21:15019:2566":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"21:11920:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"21:15484:33764":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"0:0:2053":{"crate_id":0,"path":["futures"],"kind":"module"},"1:8704:3033":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:44173:8323":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:42991:8393":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:9328:3074":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"17:11537:16745":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:4587:16109":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:1544:2714":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:10964:3054":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22364:28210":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11674:16784":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:6398:16488":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"21:15329:2405":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"21:12133:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:362:2676":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:10911:8406":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:6768:14290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"6:6657:14276":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"30:1034:21279":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"17:10399:2873":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:10390:8877":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:10029:8349":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"21:15139:2569":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"21:8831:33950":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"5:4238:2859":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:12371:16667":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:7359:14698":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:15701:20943":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"21:11407:33950":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"16:6433:16491":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"5:3740:31074":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:893:2504":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"30:1425:21138":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"21:400:27243":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:37486:8771":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1478:2708":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"21:10376:2348":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"17:14111:20143":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:1169:30721":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"14:40:19613":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"21:37:1982":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"1:5522:3045":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"30:1111:2481":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"27:441:3091":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"2:45825:3210":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:14402:20161":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"21:12419:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"2:41353:3018":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:12707:16660":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:7570:16533":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"21:13288:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"17:12175:16870":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"21:14844:33950":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"1:5743:3086":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:7098:32746":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:44185:28515":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"24:0:2054":{"crate_id":24,"path":["futures_task"],"kind":"module"},"21:6768:1984":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"11:2140:2722":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:4802:2975":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:261:32818":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:15734:20945":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"27:371:3086":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"6:5536:13561":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:12270:836":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"30:1216:21266":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"2:39683:27958":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:9132:3089":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:10031:8357":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"31:109:2021":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"2:2883:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"30:1158:21267":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"5:6940:8481":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:2902:15559":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:41697:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:11840:2356":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"1:3832:2910":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:45758:3149":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:10843:2708":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"26:53:35299":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"2:45306:3128":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"17:11443:16733":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:687:2708":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"21:14752:2421":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"17:10251:16647":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12808:16621":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:7339:14696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:11023:8400":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:6811:14292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:39000:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:6620:16504":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:8656:3032":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:40517:2483":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:5891:3014":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:43569:8447":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"21:13116:2471":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"6:7546:14706":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"13:0:2159":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:9213:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:1559:10429":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"30:1436:21139":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"6:1565:10430":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:7952:2661":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"21:10139:2450":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"6:4876:13490":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"18:643:2450":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"30:1579:21159":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"5:1516:2710":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:3341:8496":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"11:1917:2727":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:15383:20921":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"21:8120:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:12610:8410":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:14220:2509":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:13759:33950":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"21:10889:2441":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"17:15151:20900":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:43873:8906":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"6:532:9530":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"21:12308:2365":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"2:44083:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:44062:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"11:1603:15449":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:8431:29658":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:39774:8534":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:15569:20933":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:11369:2821":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"21:6776:2346":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"1:7908:2846":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:903:2712":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"1:6471:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"6:6524:14266":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:2355:15534":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"21:4503:2490":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"6:8259:13736":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22602:2916":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:12261:1695":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:9363:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:6749:31074":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:14904:33950":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"17:15778:20949":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:41198:2913":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"1:5553:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:45096:3180":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"21:2553:34390":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"2:45569:27942":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11595:16782":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"21:15123:33950":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"17:13485:19629":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:6698:14281":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"1:9109:2709":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:6047:16476":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:45049:3174":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"30:1187:21270":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"2:7937:2522":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"30:1081:21267":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"11:2569:2704":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11170:2849":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:12724:16661":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:5296:13534":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:10044:16645":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"21:327:2359":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:2640:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:10769:33588":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"3:0:482":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:7192:2353":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"1:4079:2938":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5260:13529":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:39844:2802":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:545:9532":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46302:8307":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:45808:3161":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:5802:16466":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:6608:8727":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11661:16754":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:7446:14699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:3329:15565":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"1:6181:27245":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"5:7597:8370":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"2:21333:3129":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:10541:27214":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:10247:23756":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:3278:2725":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"5:7558:28190":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:0:538":{"crate_id":2,"path":["core"],"kind":"module"},"31:0:2018":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"17:15931:19611":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:3123:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:21192:8554":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:43054:8396":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:39070:8492":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:4736:23639":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:6273:27217":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:12251:16855":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:43073:8397":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"21:12873:2463":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:10887:33605":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"11:2383:2481":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:31760:2518":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"5:40:2758":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:2203:16726":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:3767:2907":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:15582:20934":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"11:875:2719":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:10773:33950":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"5:6586:31074":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:6692:3079":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"9:330:15378":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"21:13941:33950":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"21:7290:33950":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:4132:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"9:502:15325":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:9634:23761":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"11:2443:2504":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"17:10997:16678":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"5:217:8345":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:7539:2370":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"18:689:21158":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:4971:13501":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:11524:16778":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:7703:2414":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:4279:2969":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:43865:8901":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"18:726:21160":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:1189:30922":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:2323:15532":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"21:14396:33950":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"6:7366:3005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:11605:16777":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"14:160:15457":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:9799:33950":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"5:4148:2708":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"21:12183:2349":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"21:12492:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"11:328:32311":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:45586:27925":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:16151:21117":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"16:7132:32528":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"18:680:21157":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12252:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:9886:16641":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"11:2403:2708":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"1:9195:3073":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"21:13597:2461":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"1:3246:26695":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:11574:15440":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:2925:8738":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:3108:2306":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:43407:2568":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:11460:24632":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"21:7373:2354":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"17:10954:16676":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:16121:21115":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"16:4531:16099":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:4841:2954":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"21:14134:2506":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"2:9064:3020":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:6948:16515":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"26:0:2310":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"21:13817:2486":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"21:11831:2457":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"9:0:2162":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"21:11488:2452":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"21:14145:2507":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"21:13348:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"21:10078:2420":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"16:5075:16252":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:5624:13569":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:39874:2818":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"21:9114:33950":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:16259:19622":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:11227:16686":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14436:20163":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:8727:3034":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:5014:3001":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13146:16941":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:10876:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"18:698:21159":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:12824:2462":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"16:6412:16489":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"17:12454:16891":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:7085:32737":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:9259:24462":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:38889:2756":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:5719:2859":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:43712:8452":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:14855:20884":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:2966:8337":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"5:4103:31074":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:5653:13573":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"1:10895:2515":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"21:5264:1105":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"17:14325:20156":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:5061:2859":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"9:178:15427":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"20:32:1956":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"17:14545:20171":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:11493:16738":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2279:2548":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"21:5212:1985":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:43919:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:2374:15535":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:7727:16542":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:15469:33769":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"5:7585:2800":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:12300:16886":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:6407:3274":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:7549:16531":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:10792:2434":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:22520:27949":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:13173:2469":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"17:15266:20909":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:10613:2437":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"17:14260:20151":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"21:14191:33950":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"1:2499:1990":{"crate_id":1,"path":["std","io"],"kind":"module"},"17:12557:16696":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"5:1525:2711":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:11152:8925":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:1309:2721":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"6:5020:13507":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:43002:8382":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:46090:3156":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"30:886:21266":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"16:2936:15560":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:38845:8340":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"21:15358:33950":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"1:12269:855":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:9115:3091":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:30239:8346":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:14012:20136":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:1555:2715":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:12328:16851":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:1354:2724":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"21:15027:2507":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"16:2478:15540":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:4920:2950":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6160:15503":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8584:3005":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:104:801":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"21:9309:33950":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:41580:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"6:8282:13739":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"5:7348:2709":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:9737:16611":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"1:880:2711":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:4882:16197":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4924:13495":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:8175:16557":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13832:20125":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"10:36:32302":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"21:15187:2574":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"30:1530:21155":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:13636:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"21:7080:2349":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:7924:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"18:623:21276":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"11:2554:32330":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:2037:16732":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"11:1066:15444":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:479:9524":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4811:13485":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:13455:19627":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"5:7706:8476":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:6609:14271":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"31:68:2020":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"5:3304:2728":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:16138:21116":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:2562:32327":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:10612:16653":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:43675:8451":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"30:0:2170":{"crate_id":30,"path":["memchr"],"kind":"module"},"6:473:9523":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"1:9072:3053":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4568:2975":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:11366:2438":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:22227:3258":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"17:12150:16804":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:43648:8450":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:14025:20137":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"21:8750:2385":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"1:5607:3047":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:11144:8403":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6670:14278":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"21:6217:1974":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"1:12253:1105":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"5:4437:31096":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:4482:2965":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:12226:2691":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:38809:8495":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"16:5415:32777":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"21:14047:2481":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"6:1639:10436":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:0:2165":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:11629:8389":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"16:7397:32834":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:41064:2903":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"30:1472:21161":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"2:10473:27260":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"21:13400:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"16:5722:16461":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:41541:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:553:9533":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:43583:8448":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:43943:3124":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"21:13215:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"21:15198:2575":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"21:11180:33950":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"21:12582:2465":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"14:220:15467":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:3871:2712":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"30:1391:21163":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:3634:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:10020:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:8029:15081":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"30:1137:21265":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"17:14246:20150":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:6409:14257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"21:7526:33950":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"2:10950:8395":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:11467:16731":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:11706:8388":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:6756:14288":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"2:45696:3195":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"27:368:220":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"5:6153:2859":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:45438:3154":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:15301:20913":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:12516:16910":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"21:15218:2577":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"17:10317:16649":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:6360:3086":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"21:9002:2390":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"6:6763:14289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:5796:2429":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"21:14072:2503":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"1:645:2686":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:8606:2953":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"21:4954:2510":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"6:4959:13499":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:12279:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:11704:33950":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:12268:849":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:10185:16615":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:774:2710":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:11547:16779":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:3029:15563":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:10573:33607":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"11:2542:29671":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:7909:2677":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:8138:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"21:10229:33950":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:5846:16469":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9916:16642":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:4467:2859":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:14986:20891":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:12448:2468":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:918:2715":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:8188:16558":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:13424:19625":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:14298:20154":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"6:5400:13547":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:3536:2516":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:42981:8392":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"11:1025:2722":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:39940:2421":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:15456:20929":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:849:2708":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"21:9167:33950":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:7928:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"21:4486:21184":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"17:15624:20938":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3603:2868":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:42962:2448":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:13581:19636":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"21:14801:2503":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"17:437:15506":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:12887:16665":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"16:6543:16499":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:9807:16625":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1490:10421":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"11:800:2504":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"18:651:2450":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:14552:33950":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"17:14051:20139":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:45231:3147":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5390:13546":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"6:6775:14291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:7461:14701":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:15281:20911":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"6:4965:13500":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7528:16529":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"21:12230:2366":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"1:1590:2725":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"21:4439:21182":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"2:2929:3120":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"21:8973:33950":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:7485:14703":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"16:6300:16483":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"21:9992:33950":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"1:3281:2889":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:14131:20144":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"21:6914:2346":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"1:12267:843":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:15418:20925":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:9938:16643":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:1503:10423":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"6:8253:13735":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"21:11266:2448":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"2:43153:2874":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:7887:8722":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"11:1891:2504":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:42971:8394":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:7330:9406":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:11674:2453":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:5623:2859":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:4258:2967":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:31729:16562":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"11:2151:2723":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:43139:2873":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:35610:8770":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:4802:16186":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"27:495:21250":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"26:37:35300":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:41999:8350":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"21:15256:33950":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"17:14463:20165":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:7389:10565":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"21:12552:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"21:338:2360":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"5:5211:3069":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:11612:24714":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:1585:2712":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"14:31:15457":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"16:5831:16468":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:13946:20131":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"21:7455:2358":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"1:10913:27058":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"5:3270:2727":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:45417:3148":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:14212:20148":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:31761:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:5528:13560":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:7590:16535":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:6665:16507":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:10508:2429":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"2:42541:28455":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:924:2730":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:578:9537":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:11021:27216":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:2712:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5588:13566":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:7575:14708":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:3237:2481":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:11677:23762":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"25:9:1966":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"1:8547:2964":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14599:20174":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:9159:3090":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:7686:16540":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:12056:16802":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"27:140:21234":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"21:7815:2373":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"21:15091:2568":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"21:11052:33950":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"2:22496:27950":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"21:7222:33950":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:256:32820":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:11510:16724":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:14587:20173":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"0:56:1241":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"17:11051:16706":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:6335:16485":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:5336:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"5:1566:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"11:1582:15448":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"21:13091:33950":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"21:9606:2425":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"17:11799:16838":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:2205:30849":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:9381:2849":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:7379:32835":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:8075:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:16165:21118":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"6:6441:14260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:40094:2438":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:10622:33592":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:7497:16527":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:5361:13542":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:1040:2721":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"21:7130:2351":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"21:11083:2444":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"21:13727:205":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"16:6940:32757":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:9042:3051":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:1054:2722":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"21:10743:2433":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"6:4916:13494":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:8639:3013":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:11392:16728":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:5686:16459":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:15499:33771":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"16:6098:16479":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:6305:24473":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:8792:2481":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"21:8242:33950":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:3323:2891":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:4932:13496":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:0:1601":{"crate_id":1,"path":["std"],"kind":"module"},"21:14083:2504":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"2:41032:2901":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:12237:24559":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"5:3660:2708":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:6379:14192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"16:2338:15533":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"20:131:1978":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"6:1671:10439":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:12132:8419":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"30:1061:21281":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"2:45143:3176":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:42494:2852":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:11313:16718":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"1:909:2713":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:38980:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:3324:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:40492:8716":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:4469:8510":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:14091:20142":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:44162:8325":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:39800:8531":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"21:10056:33950":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"17:11621:16755":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"6:4870:13489":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:21880:2846":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:6026:16475":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"11:1676:32325":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:1602:2727":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"11:710:2714":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"21:13733:2379":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"9:392:15323":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:10947:24536":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"21:13667:2482":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"2:41619:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"16:8216:16560":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:6788:32059":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:9977:2580":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:12127:16806":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:10033:8358":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:9629:2843":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"21:14693:33950":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"2:46291:8306":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:7144:16522":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:11242:16714":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:9755:16609":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:43083:8398":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:39050:8778":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8580:3003":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"1:8469:2874":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:513:16637":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"17:13363:19620":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:9858:16640":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:44065:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:12278:16885":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"21:6410:21195":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"1:4734:23637":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"17:12824:16662":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:43881:8909":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:1887:2780":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:39931:2754":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:2427:2827":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:41469:2709":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:5005:3000":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:14147:20145":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:0:1957":{"crate_id":21,"path":["futures_util"],"kind":"module"},"2:40041:8732":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6263:32787":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:1621:10434":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"21:8852:2387":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"16:8202:16559":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:113:21139":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:7378:2732":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"11:700:2709":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:14809:119":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"2:39057:8484":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:22185:2846":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}