{"root":"0:0:1765","crate_version":"0.3.26","includes_private":false,"index":{"2:11562:31328":{"id":"2:11562:31328","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11556:31325":{"id":"2:11556:31325","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:4488:1679","glob":false}},"2:11477:31314":{"id":"2:11477:31314","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11470:31311":{"id":"2:11470:31311","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1576":{"id":"0:46:1576","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1731","`LocalPool`":"31:120:1737"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:48","0:49","0:50","0:51","0:52","0:53","0:54","0:55"],"is_stripped":false}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:104:691","glob":false}},"2:11587:21661":{"id":"2:11587:21661","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1691","glob":false}},"2:11589:21665":{"id":"2:11589:21665","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5294:2143":{"id":"5:5294:2143","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11593:2452":{"id":"2:11593:2452","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4496:2452"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50417:2453","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2740:1675","glob":false}},"2:11563:31329":{"id":"2:11563:31329","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11493:28514":{"id":"2:11493:28514","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:50085:8115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11567:31331":{"id":"2:11567:31331","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:8109"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1674","glob":false}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1670","glob":false}},"2:11553:31324":{"id":"2:11553:31324","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:8109","`DoubleEndedIterator`":"2:7120:120","str::match_indices":"2:11550:31323"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50277:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1673","glob":false}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:109:1733","glob":false}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3580:1676","glob":false}},"2:11541:31321":{"id":"2:11541:31321","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11550:31323":{"id":"2:11550:31323","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"2:11553:31324","`DoubleEndedIterator`":"2:7120:120","self::pattern":"2:11169:8109","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50259:8124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11480:25742":{"id":"2:11480:25742","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11560:31327":{"id":"2:11560:31327","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11496:27805":{"id":"2:11496:27805","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11495:27772"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50392:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11488:31315":{"id":"2:11488:31315","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12341:1363","str::slice_mut_unchecked":"2:11489:31316","crate::ops::Index":"2:2970:2521"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11576:31332":{"id":"2:11576:31332","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11169:8109","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11594:31337":{"id":"2:11594:31337","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4493:31337"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50426:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11479:25746":{"id":"2:11479:25746","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11471:31312":{"id":"2:11471:31312","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11582:31334":{"id":"2:11582:31334","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11169:8109","prim@char":"1:12335:409"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11484:25744":{"id":"2:11484:25744","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:5047:1702","glob":false}},"2:11500:25785":{"id":"2:11500:25785","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:11751:135","glob":false}},"0:0:1765":{"id":"0:0:1765","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::executor":"0:46:1576","crate::io":"21:5047:1702","crate::channel":"27:0:1699","crate::future":"21:104:691","crate::stream":"21:1285:1672","crate::sink":"21:4488:1679"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:46:1576","0:56:1046","0:4","0:5","0:7","0:8","0:10","0:11","0:13","0:14","0:15","0:16","0:18","0:19","0:20","0:21","0:23","0:24","0:25","0:26","0:27","0:28","0:29","0:31","0:32","0:33","0:33","0:34","0:35","0:37","0:38","0:39","0:40","0:41","0:42","0:43","0:44","0:45"],"is_stripped":false}},"2:11490:25768":{"id":"2:11490:25768","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11491:25769"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11513:19627":{"id":"2:11513:19627","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:12335:409","`None`":"2:48127:176","self::pattern":"2:11169:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11591:31336":{"id":"2:11591:31336","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4495:31336"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50408:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:1285:1672","glob":false}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1735","glob":false}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:5991:1686","glob":false}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1738","glob":false}},"2:11469:22734":{"id":"2:11469:22734","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:5045:920","glob":false}},"2:11478:310":{"id":"2:11478:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11479:25746","`u8`":"1:12352:1459"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1737","glob":false}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1674","glob":false}},"5:5292:31990":{"id":"5:5292:31990","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:5956:1687","glob":false}},"0:8":{"id":"0:8","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1671","glob":false}},"2:11497:2317":{"id":"2:11497:2317","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50363:2343","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11570:22909":{"id":"2:11570:22909","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11169:8109","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11473:31313":{"id":"2:11473:31313","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11471:31312"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11509:19626":{"id":"2:11509:19626","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12335:409","`None`":"2:48127:176","self::pattern":"2:11169:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5296:21663":{"id":"5:5296:21663","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11590:21666"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11564:31330":{"id":"2:11564:31330","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:8109"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11194:8104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1668","glob":false}},"2:11535:25783":{"id":"2:11535:25783","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11532:25781","self::pattern":"2:11169:8109","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50231:8094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:2740:1675","glob":false}},"2:11544:1979":{"id":"2:11544:1979","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:7120:120","prim@char":"1:12335:409","str::matches":"2:11544:1979","self::pattern":"2:11169:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50313:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:4993:1697","glob":false}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:131:1690","glob":false}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:5986:1688","glob":false}},"2:11517:2326":{"id":"2:11517:2326","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"2:11495:27772","`DoubleEndedIterator`":"2:7120:120","str::rsplit":"2:11523:25779","prim@char":"1:12335:409","self::pattern":"2:11169:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50109:2626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11538:31320":{"id":"2:11538:31320","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1671","glob":false}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1685","glob":false}},"5:5277:31987":{"id":"5:5277:31987","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2295","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:2525","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2295","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:2525","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11498:31317":{"id":"2:11498:31317","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50373:8123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:37:1694","glob":false}},"2:11489:31316":{"id":"2:11489:31316","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"2:11488:31315","`str`":"1:12341:1363","crate::ops::IndexMut":"2:2974:2522"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:5973:1689","glob":false}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1670","glob":false}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:6014:1701","glob":false}},"2:11532:25781":{"id":"2:11532:25781","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11169:8109","prim@char":"1:12335:409","str::rsplitn":"2:11535:25783"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50213:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11585:31335":{"id":"2:11585:31335","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:11130:2790","FromStr::Err":"2:11131:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48269:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11130:2790","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11130:2790","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11467":{"id":"2:11467","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10732:1363","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11468:796","2:11469:22734","2:11470:31311","2:11471:31312","2:11473:31313","2:11476:23978","2:11477:31314","2:11478:310","2:11479:25746","2:11480:25742","2:11482:25743","2:11484:25744","2:11486:25745","2:11488:31315","2:11489:31316","2:11490:25768","2:11491:25769","2:11492:27807","2:11493:28514","2:11494:2364","2:11495:27772","2:11496:27805","2:11497:2317","2:11498:31317","2:11499:27808","2:11500:25785","2:11503:25396","2:11506:25398","2:11509:19626","2:11513:19627","2:11517:2326","2:11520:25777","2:11523:25779","2:11526:31318","2:11529:31319","2:11532:25781","2:11535:25783","2:11538:31320","2:11541:31321","2:11544:1979","2:11547:31322","2:11550:31323","2:11553:31324","2:11556:31325","2:11558:31326","2:11560:31327","2:11562:31328","2:11563:31329","2:11564:31330","2:11567:31331","2:11570:22909","2:11573:25786","2:11576:31332","2:11579:31333","2:11582:31334","2:11585:31335","2:11587:21661","2:11588:21664","2:11589:21665","2:11590:21666","2:11591:31336","2:11593:2452","2:11594:31337"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1684","glob":false}},"2:11558:31326":{"id":"2:11558:31326","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5281:31988":{"id":"5:5281:31988","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1678","glob":false}},"2:11486:25745":{"id":"2:11486:25745","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:6534:1696","glob":false}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1682","glob":false}},"2:11523:25779":{"id":"2:11523:25779","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11169:8109","str::split":"2:11517:2326","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50127:8092","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:6536:1692","glob":false}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:5986:1688","glob":false}},"2:11506:25398":{"id":"2:11506:25398","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1684","glob":false}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:5973:1689","glob":false}},"2:11492:27807":{"id":"2:11492:27807","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:50079:8116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11526:31318":{"id":"2:11526:31318","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11169:8109","prim@char":"1:12335:409","str::split":"2:11517:2326","`DoubleEndedIterator`":"2:7120:120","str::rsplit_terminator":"2:11529:31319"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50159:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11494:2364":{"id":"2:11494:2364","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50095:2624","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11468:796":{"id":"2:11468:796","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12335:409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11590:21666":{"id":"2:11590:21666","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5276":{"id":"5:5276","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5187:1363","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5277:31987","5:5278:2627","5:5281:31988","5:5284:31989","5:5292:31990","5:5293:31991","5:5294:2143","5:5295:21662","5:5296:21663"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6535:1695","glob":false}},"2:11588:21664":{"id":"2:11588:21664","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1732","glob":false}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3580:1676","glob":false}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1673","glob":false}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:6533:1693","glob":false}},"5:5278:2627":{"id":"5:5278:2627","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:104:691","glob":false}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1683","glob":false}},"2:11503:25396":{"id":"2:11503:25396","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11169:8109","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:5991:1686","glob":false}},"2:11573:25786":{"id":"2:11573:25786","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:11169:8109","prim@char":"1:12335:409"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1699","glob":false}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:4952:1680","glob":false}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1683","glob":false}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1668","glob":false}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:11751:135","glob":false}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1678","glob":false}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1682","glob":false}},"2:11579:31333":{"id":"2:11579:31333","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12335:409","self::pattern":"2:11169:8109"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11547:31322":{"id":"2:11547:31322","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"2:11544:1979","prim@char":"1:12335:409","`DoubleEndedIterator`":"2:7120:120","self::pattern":"2:11169:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50331:8127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1734","glob":false}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1736","glob":false}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1685","glob":false}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:5956:1687","glob":false}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1731","glob":false}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:4952:1680","glob":false}},"5:5295:21662":{"id":"5:5295:21662","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11589:21665"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:4488:1679","glob":false}},"5:5293:31991":{"id":"5:5293:31991","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:288:2295","`String`":"5:7148:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:288:2295","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6899:2525","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11482:25743":{"id":"2:11482:25743","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48127:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48125:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9350:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1046":{"id":"0:56:1046","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:58","0:59","0:60","0:62","0:63","0:65","0:66","0:67","0:69","0:70","0:71","0:73","0:74","0:76","0:77","0:78","0:79","0:81","0:82","0:83","0:84"],"is_stripped":false}},"2:11499:27808":{"id":"2:11499:27808","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50401:8110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11491:25769":{"id":"2:11491:25769","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11490:25768"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11495:27772":{"id":"2:11495:27772","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11496:27805"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50383:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11529:31319":{"id":"2:11529:31319","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"2:11517:2326","prim@char":"1:12335:409","self::pattern":"2:11169:8109","str::split_terminator":"2:11526:31318"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50177:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11189:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:1285:1672","glob":false}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1698","glob":false}},"2:11476:23978":{"id":"2:11476:23978","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10737:8113"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11520:25777":{"id":"2:11520:25777","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11169:8109","prim@char":"1:12335:409"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10993:8098","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11174:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5284:31989":{"id":"5:5284:31989","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7148:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7148:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:20:1029","glob":false}}},"paths":{"5:6503:8181":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:2952:8036":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:6742:2835":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:9831:15768":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:12674:18891":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:6969:30896":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"6:7237:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:7910:2428":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13580:19567":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"21:13445:19656":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"1:12339:308":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:3010:14529":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"5:3118:2494":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:2261:14472":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:11724:21651":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"5:6961:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:6919:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:12550:18834":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"18:690:19631":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"12:646:2475":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"21:7139:2066":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"2:38204:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:2662:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:1021:15654":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11661:18537":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"16:3599:14551":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"18:80:19613":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:9857:15748":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4461:12532":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"14:187:14440":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:48878:8051":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"24:169:2055":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"14:160:14430":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"20:27:2698":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"2:21945:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:2658:2287":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11740:22718":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:49438:2780":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"21:13456:2204":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:2665:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:46937:8121":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:52954:2936":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:9442:22029":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"21:7427:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:5504:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:12730:18896":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:12341:1363":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4816:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"5:2056:30970":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:3157:8206":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:9488:15667":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"6:4152:12501":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"5:219:8041":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:11714:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:11800:18604":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:11812:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"21:12355:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"1:6163:22702":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"14:221:14439":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:1686:10160":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:4408:21636":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"17:11436:18418":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:5517:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:11288:16225":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:48362:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:53214:2949":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:46566:2467":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:9539:15665":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:10875:15626":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:10633:34432":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"21:11577:2068":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"6:5672:13187":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:2794:8454":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8477:2343":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"16:4357:15069":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:2085:32077":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:4286:12515":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:6953:9210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:14899:34210":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"9:896:14220":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:9542:2626":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:52094:2890":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:49417:8264":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:8510:14466":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:7249:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:6605:29587":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:20097:28413":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:12850:18989":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:11128:27183":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"2:54148:8010":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"15:175:14447":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"1:11133:2587":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:1541:10147":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:2777:2885":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12198:18692":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:7148:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4506:12535":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:13071:19430":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:10303:8086":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:48185:2204":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"21:8044:2079":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"21:14960:34207":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"6:4329:12520":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:3162:24703":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:10497:15822":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"21:6332:34336":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"16:4297:15057":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"21:10245:34432":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:2828:8457":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1203:2488":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:49917:8082":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:2280:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:6629:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:53000:2940":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4716:12560":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:54118:8008":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:5905:2840":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"21:4285:2213":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"21:7269:2077":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"1:11491:2803":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:4621:12549":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"12:1836:2476":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4665:12555":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"21:12319:2191":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"6:567:9261":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:8158:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:4797:12567":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:50912:8632":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"2:4368:2436":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:51839:2966":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"6:4096:12496":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:7102:27848":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:10796:15571":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12797:18944":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:13059:19429":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:8362:34432":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"16:7825:15511":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:6719:33101":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:3854:14710":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:9885:15770":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:8494:14468":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:13374:19516":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:8668:8050":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:20944:30405":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"9:956:14222":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4726:12561":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:12816:18946":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"21:9970:2180":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"1:8685:2654":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:7046:8410":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:4689:15161":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"9:676:14228":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:6818:2832":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:49999:8091":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:47024:8243":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2661:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:48201:2476":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:47395:2175":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12884:19054":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:11974:18616":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"21:8240:2085":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"6:5587:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"21:13465:2476":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"17:13594:19601":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:8776:2752":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:12593:2192":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"21:9905:2180":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"12:738:2478":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:2228:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:11186:16052":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"1:1620:2494":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:21366:27997":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:4534:12538":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:9339:15646":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:4849:15201":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6109:15448":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4139:12500":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:575:9262":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:5412:2159":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"20:131:1690":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"17:9303:15652":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:8569:23279":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"2:48438:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:661:2454":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:2651:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"16:6865:33022":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:8951:34077":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:10790:2800":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:21846:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:990:2485":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7840:22735":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2385:2593":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:9250:15633":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:20932:2888":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:13366:19515":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:11254:2182":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"2:4749:780":{"crate_id":2,"path":["core","iter"],"kind":"module"},"21:14832:2117":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:9517:2475":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:8295:15592":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"21:10607:2170":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"2:2752:8445":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"21:10558:2164":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"17:11606:18529":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:1525:10145":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:11689:2074":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"17:9691:15690":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"9:188:14271":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:20310:2902":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"4:0:1863":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:11315:16229":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"21:2547:34374":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"17:11199:16053":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:50363:2343":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"21:13714:34432":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"17:9293:15653":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:11178:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"21:12792:2196":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"5:1378:2476":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:47168:2519":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:5405:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:592:9265":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"21:8298:2087":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"5:7170:8153":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:11972:2972":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:8441:15597":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:9818:8095":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:11997:18617":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:10520:15823":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:47298:8415":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:10882:8622":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:21780:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:51909:28026":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"21:10217:2062":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"21:7228:2069":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"12:861:2487":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"21:14774:2429":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"1:8648:2661":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:9550:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:11188:2284":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"21:14690:2173":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:6466:22976":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11123:23644":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:21453:2673":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:2383:2592":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:53958:2964":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"5:5993:2973":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:9501:15652":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"31:65:1731":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"21:10509:2163":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"2:29663:28006":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"18:96:19614":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:6349:34211":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"5:5085:30911":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:9577:15671":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:6479:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:7166:14146":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:4702:2463":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:4662:15158":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:21274:28479":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:12355:1458":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:7214:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:47630:8406":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:10615:2810":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"16:7388:15497":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:7653:2073":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"17:12251:18696":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"27:149:19711":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:12185:2194":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"6:1600:10153":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:11637:22943":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"21:11561:2186":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"30:844:19634":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:11617:18530":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:11323:22931":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:11174:8105":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:51074:2971":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"21:9398:34432":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"5:4929:2822":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:900:2475":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"18:707:8107":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"9:920:14221":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:6846:2061":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"1:4749:2724":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:3048:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"21:13241:2209":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"24:190:2057":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"16:2557:14512":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"21:9135:2152":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"21:10468:2166":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"2:2763:8447":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10822:15623":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"21:1285:1672":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"6:4379:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"12:300:32946":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:5837:2807":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:53030:2943":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:3263:14532":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:11302:22919":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:47648:8408":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"27:366:203":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"17:12211:18693":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:515:19641":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:1747:28510":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:1611:2267":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"21:6811:34432":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"12:1845:2479":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:58312:28532":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:7183:23746":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:50408:8120":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"21:12521:2202":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"1:10833:22711":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"21:12120:2082":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"21:14818:34432":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"2:46425:8462":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:11957:24463":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"21:12289:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"1:12351:725":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"21:14385:2339":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"21:13091:2205":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"21:11013:34432":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"1:2516:2334":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:12860:18990":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"21:327:2071":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"2:53064:2925":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:49426:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:7237:15486":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:9430:2429":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:6243:2839":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"5:872:2204":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"21:10849:2174":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"28:185:19727":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"1:6706:2828":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"18:574:2180":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:8118:2588":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"27:146:203":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"21:6958:2065":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"17:9382:15651":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:57:1698":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"21:12719:2195":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"2:51013:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"30:716:34117":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:4551:12540":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:20372:2895":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:6635:30950":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:9594:2058":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"17:9601:15669":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:46968:8239":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:20063:30401":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"21:12637:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"2:50694:8145":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:11158:2588":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:50836:8613":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:46915:8246":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:11691:22311":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:51940:2946":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:52506:28013":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"30:816:19632":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:8304:189":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"0:46:1576":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"16:2341:14503":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"30:761:2180":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"17:8241:15590":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:49889:8081":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"14:202:8155":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:21747:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"5:4225:30925":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:22044:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:46925:8247":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:11183:8107":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"27:489:19724":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"21:5772:1678":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"20:82:2002":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:48176:8468":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:9165:34095":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:10529:22937":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"6:4653:12553":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"2:46991:8240":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:11235:16105":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:7143:2293":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:8631:15599":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:46998:8241":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:1082:30517":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:5749:32827":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11407:22696":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:9405:2827":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"28:23:2204":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"1:4122:2668":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:9804:8097":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"9:586:14253":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:46962:2453":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:1002:2487":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:5727:13193":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"16:7044:33417":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"21:14984:34213":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"17:11125:16013":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:4144:14976":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:5534:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:6665:22936":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:2490:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:3632:14560":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:12225:18694":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:8599:2355":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"21:13436:2475":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"17:13203:19468":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:521:19638":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:1637:2497":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"12:119:32945":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:4723:29285":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"21:14750:2356":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"2:46873:8245":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:5381:8179":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:6816:33384":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:10476:15820":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"21:14127:2336":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"21:14741:2355":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"12:1832:2204":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11311:2801":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:9274:15635":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10403:15621":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:4778:12566":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:49907:8084":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"6:1714:10163":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"17:1771:15670":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:10332:15815":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:13492:19550":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:12317:23916":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:11368:16245":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:6028:2825":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:1733:8492":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:12306:2462":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"14:0:1869":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:47592:8403":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"5:6996:2476":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:48243:2766":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:7603:15508":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:3067:2523":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:12003:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:2918:2291":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:1105:2489":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:11298:2544":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"1:9865:2585":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"2:50856:8618":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:3635:2476":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:9071:34082":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:2411:14506":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:7942:15517":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:965:2481":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"16:6781:15479":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:9662:8099":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:13192:19467":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"21:6589:2059":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"17:10894:15627":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:10108:15728":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"24:309:19665":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"1:8447:2152":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"21:8880:34432":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"12:98:32952":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:7298:15491":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:0:1355":{"crate_id":1,"path":["std"],"kind":"module"},"6:62:8870":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"30:0:1873":{"crate_id":30,"path":["memchr"],"kind":"module"},"21:9118:2115":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"1:9465:22948":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"21:14930:34212":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:8110:15567":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:9658:15716":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:50844:8615":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:5494:15427":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:1707:2708":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"30:769:2180":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"12:985:2488":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:4280:12514":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:50313:8126":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:10506:15788":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10774:15622":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"5:1234:2489":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:6269:9174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"18:644:2180":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:5628:15433":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:54034:8002":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:46685:8195":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"9:111:14235":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:8871:15603":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:49838:30335":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2909:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:5472:15426":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"17:11515:18421":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"29:17:1683":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:29621:8175":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"21:11084:2179":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"21:14479:2341":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"1:8398:2207":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:2769:8446":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:20523:2898":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:47228:2157":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:582:8251":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:8933:34432":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:6221:19670":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"17:10608:15614":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:8418:15596":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:8526:15572":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:21184:28007":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:6270:15459":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:8666:8049":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:47148:8072":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:8457:2173":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:12134:18627":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:9526:15666":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:4210:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:6375:10083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"12:1628:32936":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"9:33:14292":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:10707:8571":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4515:12536":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11168:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"30:665:140":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:11774:18602":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:4559:12541":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:6660:30948":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:56990:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13354:19480":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:20335:2891":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11989:14456":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:11547:15774":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:54210:8012":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"5:1062:30539":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:5374:15420":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:23:2030":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"6:1518:10144":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:4019:2667":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:51116:8022":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:9477:22974":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:50085:8115":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6059:33444":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:5203:14468":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:386:15584":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:39413:22938":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"30:741:34128":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10583:15613":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:10682:15618":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:8516:2098":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:10818:34432":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"1:11548:22030":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"21:10588:34432":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:1087:2112":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"6:4398:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"27:154:2843":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"6:4527:12537":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"6:135:8937":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"2:49225:8556":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"17:12265:18697":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46945:8238":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"21:14599:2344":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"8:0:1864":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:7166:15484":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:20492:2698":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:4565:12542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:46901:8244":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"16:5447:15424":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"21:10371:2169":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"2:21258:28021":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:47118:2583":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:53920:2944":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"21:7800:2074":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"1:6815:2831":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:14789:2118":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"21:9995:34432":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:3479:2204":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:4335:12521":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:20095:28411":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"17:9371:15608":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"21:5986:1688":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"5:7118:2565":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:420:14474":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"5:7043:2473":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:7059:2765":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:47005:8242":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:3237:2644":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11576:18429":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2930:14527":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:12359:1101":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:50605:8141":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"18:507:2180":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:8872:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:4437:12530":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"16:7278:15489":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:13426:19655":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"21:13614:2271":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"17:9644:15662":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:12060:18622":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:12432:2188":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"16:6567:15470":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:6545:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"1:1967:2563":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:54095:8007":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"30:883:19637":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:9722:15715":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:8658:8042":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"12:2069:2489":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"18:755:19636":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:12348:727":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:11146:23014":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:21465:2676":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"16:5878:14471":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:4977:2724":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:52029:2923":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"21:9335:109":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"17:11343:16231":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:13527:19558":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:7042:8411":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:3972:28216":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:12926:19058":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:7135:33435":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"31:68:1732":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"21:14684:2353":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"16:5388:15421":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:47289:2062":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:12896:19056":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:39377:2808":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:46864:8209":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"17:13413:19522":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:29587:2506":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:46626:15521":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:5122:15402":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"21:11657:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"21:14768:19669":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"2:21714:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:11961:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:10942:8621":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:4056:2212":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:48328:2476":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"21:7886:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:9233:2176":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"1:524:22713":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"21:12250:2190":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"17:11485:18419":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:7426:15499":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"11:44:14407":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"26:43:35764":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:49927:8083":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"12:60:32957":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:1604:2204":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:50540:8139":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:54014:8000":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:9242:2800":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"9:622:14241":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"21:11303:34359":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"17:11087:16011":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:9318:2841":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:13404:19519":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:6953:2476":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:14658:2350":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"17:8822:34080":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:4300:12517":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"6:1562:10149":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:11620:22725":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:9820:15767":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"12:834:2485":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"18:699:19632":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:5996:15443":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:402:22696":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:50489:8132":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"31:0:1730":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"6:7289:14175":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:6509:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"12:669:2481":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9805:15766":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:12980:19420":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:2579:2336":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:46339:8205":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:3671:2479":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"17:13047:19428":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:9873:15769":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"5:1219:2490":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"30:798:19630":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:12894:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"16:6298:15461":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"21:5655:2615":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"2:11130:2790":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:4575:12543":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:2816:8455":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"29:27:1682":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"1:3159:23515":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4221:2681":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"21:10064:34432":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"17:13221:19475":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:545:9258":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:6981:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:9947:15772":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:14678:2352":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"21:10539:34432":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"6:5733:13194":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:12356:1455":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:13007:19422":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:12046:18621":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"17:9328:15647":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"29:25:1684":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"21:6625:2062":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"5:7225:2479":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"21:10427:2165":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:6896:2063":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:2663:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:10993:8098":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:11967:2079":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"2:50557:8140":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:49990:8088":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9671:15683":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"21:12946:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"21:7606:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"30:753:34109":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"21:13082:2204":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:20284:2901":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:6704:15476":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:960:2480":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"21:14487:2270":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"6:4761:12564":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:1903:15704":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"21:13505:2204":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"21:14734:2354":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"2:21341:28484":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:273:30911":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"5:6474:8179":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:47599:28503":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:7255:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:48269:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:10075:15731":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:4:993":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:52876:2948":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:9458:15682":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"21:11132:2168":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"21:13225:34432":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"1:9424:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"14:215:14433":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"30:707:28543":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:7220:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"17:11708:18597":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:11822:2667":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"12:725:2477":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"24:0:1766":{"crate_id":24,"path":["futures_task"],"kind":"module"},"1:5657:2795":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:4662:2712":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:5554:13146":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:8662:8052":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"21:8375:2092":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:2974:2522":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:855:2498":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:6513:34206":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"6:4644:12552":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:10975:2177":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"2:4294:8217":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:3409:2344":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:8748:2665":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:7905:2418":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"22:7:1691":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"12:697:2482":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:50127:8092":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:48514:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"5:952:30911":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:5582:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:2822:8456":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"21:7159:34432":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:49189:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"21:10133:2172":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"21:8197:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:979:2484":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:1889:2550":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:7267:15488":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:9909:15727":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13176:19465":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:13184:19466":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:50019:8090":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:13183:34432":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"17:8272:15591":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:2900:2007":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:11761:18601":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:8754:2721":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:11161:16050":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"21:14617:2346":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"16:6463:15467":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:50159:8129":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:7329:15494":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:13436:19523":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:22077:2675":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:2781:8449":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"6:4698:12558":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:7333:21642":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:10336:8087":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11841:18607":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"16:7511:15504":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"21:7292:34432":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"16:5664:15434":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"21:14323:2338":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:49104:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:4102:12497":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3140:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"21:8739:34432":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:8365:2606":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"31:120:1737":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"5:5804:2615":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:6179:19671":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"17:9155:15609":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:10321:15780":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"21:8265:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:11309:34232":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:3927:2615":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"6:1654:10157":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5949:15442":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2474:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:5541:15430":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:5695:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:10845:15624":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"21:10754:34432":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"21:5032:19667":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:51785:2945":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:12237:18695":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"31:102:1736":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"6:1738:10165":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"16:7929:15516":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:3165:24707":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:14534:34432":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"21:5730:2205":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"10:0:1866":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:6569:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"17:562:15586":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:9609:2880":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:545:2424":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:3249:15753":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:11813:18605":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:736:19635":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"21:14269:108":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"17:11559:18426":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"24:12:19652":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"1:8141:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"16:2605:14514":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:8939:2782":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:4913:24993":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:51970:2934":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:5045:920":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"21:20:1029":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"21:13737:217":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"21:10883:34432":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"31:125:1738":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"6:5605:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:51104:8024":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:5839:15441":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:50417:2453":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:2806:8452":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:13382:19517":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"21:14647:2349":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"16:2727:14519":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:9143:22730":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:6434:22733":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"16:6743:15478":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"21:8323:2089":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"21:6533:1693":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"2:2437:2698":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:4321:2689":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:1367:2475":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"16:2579:14513":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:1505:10142":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"12:0:1868":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:4606:15150":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"30:788:19629":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"22:0:2011":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"9:863:14219":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"16:6877:15481":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"13:220:32959":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"16:4262:15046":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:5782:13197":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:8055:15569":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:52338:2942":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"5:6939:30967":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:3492:2475":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"16:7980:15520":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"6:7266:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1964:2510":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"2:52459:27839":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"16:4817:15193":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9304:2838":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:2133:32105":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:1756:8491":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:678:2457":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"1:9571:2847":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11528:15775":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:49456:28542":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:12464:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"1:11530:2610":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"21:7523:2084":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"1:10936:2430":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:9790:8094":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"16:5761:15437":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:9366:2844":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1668:10158":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"21:13472:2104":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"1:2253:2318":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"16:6161:15452":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:6415:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"17:12087:18624":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:8162:15588":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1603:30911":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4367:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:47311:2167":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:50717:8130":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:11424:22695":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"30:836:19633":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:49401:8265":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:12029:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4179:12502":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"6:1550:10148":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:9561:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:6998:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:719:2461":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:8426:2286":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:5095:2696":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"18:491:34118":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:608:9267":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:6954:22936":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:5359:22917":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:4993:1697":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"5:3144:2497":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:9735:8093":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:1046:30524":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:1950:2340":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"21:11500:2183":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:1864:2542":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:47346:2170":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:5737:15436":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4683:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:9118:34099":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:2571:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"16:8014:15521":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:6914:2499":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:20366:2893":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:4605:12547":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8464:2624":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:5741:13195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:8393:15595":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:5072:2703":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:20247:2900":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:50511:8133":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:9419:23002":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"3:0:433":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:7787:2768":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:1722:10164":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:686:2460":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4737:12562":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"21:13747:2211":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:47218:2156":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"30:681:19644":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:20413:2896":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10721:15620":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:9653:2058":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"21:13100:2206":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"21:13008:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"16:6359:15465":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:13536:19559":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:2562:34216":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"2:47260:2059":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"6:4274:12513":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"16:7469:15501":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"16:2389:14505":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6690:15475":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"21:7683:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:57003:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:11061:34432":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"1:5898:2839":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"21:12507:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"30:632:19641":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:8105:2078":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"1:5014:2697":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:2486:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:21314:2672":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:2916:15730":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:6517:14444":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:1580:10151":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"21:13975:2276":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:52718:2956":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:6975:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:5595:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:29627:8437":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:8182:2340":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"18:719:19633":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12630:18888":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:22011:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"6:7226:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:1091:2488":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:3614:2510":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:54054:8004":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"21:12698:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"2:2477:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2557:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:4706:12559":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:10894:2643":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:8013:2544":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:9930:15747":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"21:14836:2116":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"2:2757:8444":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:1668:1065":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:46617:8183":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:11479:2802":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"21:12229:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"17:13141:19440":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"30:97:19614":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"12:2080:2490":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:3958:2663":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:20780:2920":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:11418:22607":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"12:1555:14424":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"31:136:1734":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"16:6330:15463":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"5:4255:2615":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"21:14117:2335":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"17:12361:18772":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"21:10405:34432":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:7821:22728":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"21:7056:34432":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"27:483:2780":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"5:7242:8176":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"21:7352:34204":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"17:13518:19557":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"30:655:19643":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:10385:15816":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"21:13940:34432":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"2:11764:2077":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:21237:28039":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:4103:8223":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5793:15439":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:11799:21638":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"12:751:2267":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:8849:2770":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:10420:15809":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:51031:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12972:19393":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"21:9714:2160":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"17:11137:16014":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:6651:8401":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:3934:2475":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"17:9350:15645":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"12:853:2486":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"5:6079:30950":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"21:13196:2103":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"1:5671:2796":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:2921:2292":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:3352:2205":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:51807:2933":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"21:21:1029":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"16:4545:15137":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"21:13366:34432":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"26:37:35766":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:20497:2892":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:3077:2204":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"21:6786:2062":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"1:5238:2757":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"1:8772:2749":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"12:1065:32953":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:51066:2970":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"7:32:14191":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"21:14781:34192":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"1:8262:2283":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:4611:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:9223:15632":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"5:1404:2478":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"29:20:1685":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"1:4510:2717":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"6:513:9255":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:8774:15570":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:2871:31019":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"21:9075:34432":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"16:6790:15480":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:9350:2843":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:14878:34209":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"21:13805:2274":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"6:4317:12519":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:7783:22910":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:13082:19431":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"17:10752:15621":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:6800:2207":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"5:4055:2615":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:47321:8419":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"21:14199:34432":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"1:12360:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:5523:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:7956:15518":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:353:2446":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:6376:15466":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:50900:2886":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"21:5830:2184":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"2:7788:2767":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:21326:27984":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"12:659:2476":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"27:451:2845":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"17:11106:16012":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:4598:12546":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10708:15619":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8981:2783":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:5328:22917":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:2907:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"21:15017:34360":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"5:5731:8844":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"16:6284:15460":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"21:6535:1695":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"17:9553:15607":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:11149:16049":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12176:18643":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:11792:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:50848:8616":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"5:3084:2495":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:2747:2884":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:581:9263":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"12:1859:2495":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"21:11280:34432":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"5:7055:2474":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:6163:19672":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"2:48628:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:12022:18619":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7249:15487":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:8137:15587":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:4394:8220":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"27:497:19725":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:2251:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:9296:2204":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:14093:34432":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"2:2150:578":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:6345:15464":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:671:19629":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:1413:2480":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:49641:8600":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"21:3826:2091":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"6:5692:13189":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:8128:2589":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"2:52170:2959":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:56581:2969":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:5691:2797":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:50683:8144":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"31:100:1735":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"21:424:1670":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"2:10737:8113":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"16:6496:15468":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"21:11231:34432":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"21:6866:34432":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:10304:34432":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:9624:8085":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"7:0:1502":{"crate_id":7,"path":["unwind"],"kind":"module"},"20:32:1668":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"21:7757:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:6921:34432":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:4222:8211":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:11787:18603":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:8212:15589":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:8589:22993":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"30:81:19613":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:12347:730":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:632:30969":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:3468:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:2832:8458":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:20323:2698":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:6735:15477":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"21:10142:2060":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"2:48320:2475":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"21:13260:2210":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"1:10897:2639":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"21:8310:2088":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"2:7786:2769":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:7221:2070":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"6:1636:10155":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:52764:2960":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:51023:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:5525:15429":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:4417:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4659:12554":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:50277:8125":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"21:335:34221":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"21:781:2091":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"18:599:34117":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:8561:2099":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"24:135:2056":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"23:0:2012":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"1:8111:2587":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:4329:2691":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:39417:8520":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:3427:2285":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:3996:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:9764:15719":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"27:468:19712":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"2:52192:2962":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:53562:2937":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:4427:12529":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"2:11189:8106":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:12070:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:9529:2158":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"21:14010:34432":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"16:4635:15155":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"27:187:19714":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"1:8899:2780":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10310:15814":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"17:10528:15611":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"21:14212:2152":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"27:181:19713":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"2:47071:8542":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:4590:2718":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:48666:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"5:6908:2476":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:8802:30500":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"20:92:2698":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"6:6392:10086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10159:15736":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"25:9:1678":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"2:4076:8222":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"30:638:19638":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:11536:15773":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:8540:2658":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:1887:10301":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"31:109:1733":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"17:13279:19477":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:598:2433":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:49409:28507":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"25:0:1677":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"9:709:2780":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6186:15454":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:49898:2178":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4354:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:49167:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:52408:2928":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"21:4322:22735":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"17:10221:15811":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"9:977:14224":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13393:19518":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"12:1866:2496":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:56938:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5625:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:9382:2845":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"18:481:19639":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:54133:8009":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12874:18992":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:1695:10161":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:54171:8011":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"27:136:2839":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"20:97:1674":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"6:5541:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:12103:18625":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:7574:23281":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11341:2804":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:4449:12531":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:12156:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"2:11751:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:9493:2204":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"27:72:19723":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"16:7309:15492":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"21:37:1694":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"2:54023:8001":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:46544:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"6:4231:12508":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:7659:15510":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:13158:19463":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:47370:8416":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:12354:1457":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"21:13854:34432":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"1:8174:2635":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:4488:1679":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:50669:8143":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"12:393:32954":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"18:652:2180":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:8729:2719":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:0:1872":{"crate_id":17,"path":["object"],"kind":"module"},"1:10702:24054":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:12748:18898":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:288:2295":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:10111:34432":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"21:13386:34231":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"30:114:19615":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:11734:18599":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"16:4921:15225":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"21:104:691":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:47360:2171":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"9:827:14317":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12617:18836":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:1532:10146":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:10997:15830":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12695:18892":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"12:274:32940":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"28:19:2476":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"1:3199:2642":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:3221:8035":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11511:8630":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:600:9266":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:8649:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"1:8414:2284":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:8405:1678":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:14842:34363":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"21:12193:2193":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"17:12781:18943":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:39426:8424":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:48590:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"21:10379:2167":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:7079:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"21:6728:2067":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"5:6990:2476":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"21:14669:2351":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"1:7884:2448":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4257:12511":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:14153:34432":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:11070:16004":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"14:31:14430":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:8339:15593":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:6017:15444":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"9:649:14242":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"21:7402:2083":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"6:4540:12539":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:10233:15812":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:5715:2822":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:8596:15598":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"30:556:34118":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"2:6469:8412":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"21:13115:2208":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"21:14429:34432":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"12:1003:2489":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:50860:8630":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"28:37:2267":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"17:11721:18598":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:52010:28020":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:8911:34086":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"21:9565:34432":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"21:14583:34432":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"6:6352:10109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"12:2205:2473":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:11104:2751":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"16:5614:33288":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:12008:18618":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:10776:2175":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"1:2613:2628":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"5:6193:30911":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11174:16051":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"21:11173:34432":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"21:11621:2073":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"1:4022:2666":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:3863:2267":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:8664:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:7111:34432":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:9460:2157":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"21:14915:34214":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"18:766:19637":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"26:0:2013":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"21:8618:2100":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:2811:8453":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:2483:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:13547:2268":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"2:46440:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:4267:2685":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:11594:18473":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"21:9104:2113":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"21:7254:34432":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"21:11568:2185":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"2:51715:28030":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:48871:8043":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:13100:19433":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:6524:13613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:954:2479":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:6860:2146":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:8166:23029":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:3304:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:8997:2785":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:5433:15423":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:49977:8073":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"21:14716:34432":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"2:46378:8037":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:12836:18987":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12337:15624":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:4574:15142":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:48885:8052":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"16:7396:15498":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4206:12350":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:8926:8263":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:47278:8420":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:5684:13188":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"1:6702:2208":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:887:2204":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"20:143:19651":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"17:10139:15607":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"30:624:2180":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:22476:2669":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"5:784:2166":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:3355:8185":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"17:8881:34078":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:9485:15482":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:6171:15453":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:9317:15648":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"6:5713:13191":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:54043:8003":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"11:0:1867":{"crate_id":11,"path":["adler"],"kind":"module"},"6:1500:10141":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:10182:15734":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"6:4810:12569":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:10973:15829":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:52362:2924":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:5660:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:13214:19474":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"17:9791:15720":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:47269:2060":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:53420:2968":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4247:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4294:12516":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:6591:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"16:7319:15493":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:51695:28028":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:47409:2177":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"21:10274:2159":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"6:4185:12503":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"1:7980:2492":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"16:2509:14510":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"12:320:32938":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:8654:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"21:10452:34432":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:4459:2716":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:9438:34432":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"2:2840:8460":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"30:731:34104":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"21:6542:2058":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"1:7090:2887":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"21:12573:2203":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"2:49448:28529":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:628:2450":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:57016:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:6534:1696":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:8656:8043":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:14502:2342":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"17:8752:2624":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:1434:2482":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"5:3559:30911":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"12:353:32943":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:3110:2496":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:6885:2837":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"30:546:19639":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13231:19476":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:50053:8122":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"6:5841:12410":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:6612:34432":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"5:36:2526":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"5:5133:2098":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:11883:2668":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:47043:2568":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7847:15512":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7637:15509":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"21:11992:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"5:1423:2481":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:2438:8259":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"12:1044:14419":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:8798:2700":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"9:505:14402":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:50704:8146":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:6903:15482":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:2911:2289":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13024:19423":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:6054:2826":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:5706:2798":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:47190:8413":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:12485:18832":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:9274:2803":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:48261:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:1595:10152":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:1701:10162":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:4361:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:4558:8232":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:8734:2720":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:10363:2162":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"2:4019:8030":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9712:15718":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"2:21040:2894":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:10356:22990":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:50373:8123":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6409:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"17:13148:19441":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:5411:15422":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"21:338:2072":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:11032:2178":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"2:50840:8614":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:11643:2811":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:10697:34432":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"2:7197:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"14:7:14430":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:52384:2927":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10270:15786":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"27:124:19707":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"16:534:33370":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"21:11920:2061":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"17:11217:16054":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:10455:15810":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"1:12345:630":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:1548:2615":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"5:679:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12934:19059":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:1511:10143":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:586:9264":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"1:996:2486":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4200:12505":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:3475:20070":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"21:14032:2333":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"1:8470:2626":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:4808:2615":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:7474:8409":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:10028:2161":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"17:9433:15643":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"1:8506:2656":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"16:5219:14466":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:4786:15186":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"12:2198:32947":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"7:79:14198":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:7083:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:2257:2323":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"12:815:2483":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:4273:2686":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"12:1085:14420":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:727:19634":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:12148:18628":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:14451:2340":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"1:10891:2641":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"0:0:1765":{"crate_id":0,"path":["futures"],"kind":"module"},"17:11259:16215":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:52640:2967":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"21:12481:2189":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:12307:18705":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"20:17:2001":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"2:7120:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:9021:15606":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"21:13575:34432":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"2:21349:27985":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"21:7861:2081":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:11194:8104":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:11411:34193":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:2728:8031":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:12346:631":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:11240:8135":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:51891:2958":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:6472:14445":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:2366:30529":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12334:920":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"16:6829:33360":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:296:35740":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"1:6418:2972":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"16:4441:15081":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"30:691:2180":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:6014:1701":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:11395:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:47640:2206":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"5:1445:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"6:539:9257":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:13138:34432":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"16:2433:14507":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:50879:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:12335:409":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:8380:29012":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6572:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"6:4629:12550":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:12353:1456":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"5:6147:2267":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:9283:15655":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:8609:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:9288:2804":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:9031:34088":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:2970:2521":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"21:331:2429":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"1:11862:2666":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:2749:14520":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:20116:28410":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:2825:14523":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"21:13523:2476":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"2:2322:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12349:18769":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:29402:2671":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:47038:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:47621:2205":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:8211:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:14626:2347":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"1:1887:2549":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:7497:15503":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"21:14759:2357":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"21:11767:2076":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"21:13070:34370":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"16:6593:15471":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:3089:30977":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:21912:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:12278:18698":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:46640:8217":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"17:11639:18531":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"21:14945:34208":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:51739:2965":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:6700:34432":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:7890:15514":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5835:13224":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:11330:16230":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:47330:2168":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:2367:14504":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"5:4288:30925":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:4413:15077":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"27:0:1699":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"21:6107:163":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"1:12349:728":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:6538:13614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:12609:18835":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:1826:2530":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:29649:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:4213:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:5456:2207":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"5:3123:30982":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4446:2715":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:10728:2173":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"21:4735:2273":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:50095:2624":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"21:12410:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"1:9566:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:36:32933":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"6:5568:13147":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:1574:10150":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7288:15490":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:8008:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:931:2478":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"2:9158:27691":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:50067:8119":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:9312:2476":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:12514:18833":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:50383:8112":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:12969:2201":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"12:1534:14423":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:50426:8121":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:7959:2455":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"21:8852:2108":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:9108:15608":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:4267:12512":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:4899:2686":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:4721:15169":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"18:538:19643":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5480:13174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"12:810:2480":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:8056:15522":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"15:214:14452":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:2836:8459":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:13514:2475":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"21:5047:1702":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:50832:8612":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:21403:28044":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:6668:33393":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"27:369:2839":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"12:1120:14421":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:6500:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:5016:2701":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"9:800:14353":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"16:3402:14533":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:3466:2355":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:1931:15664":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:4745:12563":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3274:2639":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:1821:2513":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:49660:8075":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"21:4952:1680":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"1:8680:2664":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:14:1982":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:12638:18890":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:131:8936":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:21439:2674":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:14551:2343":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"1:8740:2711":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:6654:15473":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:8475:15568":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7970:15519":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"6:5510:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10283:15785":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:1632:577":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"21:13592:2269":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"21:10167:34432":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:13151:189":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"1:1123:2491":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10245:15813":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"28:53:35794":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:1632:2496":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:7243:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:39:2032":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"21:6146:19673":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"1:11718:21649":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:4025:2615":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"12:1840:2267":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:2894:14526":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:9673:34432":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:11845:2075":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"16:6123:15449":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:10921:15827":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:5720:13192":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4430:2713":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:48337:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"5:1395:2477":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:5510:15428":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:12301:23274":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:10479:21648":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:21:667":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:2785:8448":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"31:38:35803":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"27:432:19726":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"2:50177:8128":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:21038:2698":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"16:7483:15502":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:4438:2714":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:13492:34432":{"crate_id":21,"path":["futures_util","stream","select_all","_","__Origin"],"kind":"struct"},"12:2190:32950":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:5834:2805":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:52140:2955":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:12073:18623":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:2875:31018":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:1615:2479":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13114:19435":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"21:11110:34432":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"1:681:2459":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:9844:34241":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"17:10445:15624":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:4217:8210":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:10958:8623":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:4385:15073":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:1248:2491":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:47615:8405":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:52240:2947":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"5:1357:2204":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:574:2431":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"21:6536:1692":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"27:11:35767":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"21:8597:34432":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"12:762:2479":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:11939:18614":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:646:9296":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"5:6266:2476":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"12:2184:28414":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"0:56:1046":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"2:3984:28168":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"21:6748:34432":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:10121:15729":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:2250:2586":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46480:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:5163:15419":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:7990:2493":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"17:13459:19526":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:10207:15800":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:5558:15431":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:9897:15771":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:3382:2615":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:47606:2208":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:1626:2495":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"27:127:19708":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"17:13031:19424":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"18:0:1873":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:5129:2154":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:50231:8094":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:47381:2173":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:12948:19060":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"21:9321:34432":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"17:11054:16003":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:487:9251":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"30:824:8107":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6316:15462":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:3145:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:20078:30401":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:46885:28035":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:49241:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"9:0:1865":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"21:8897:2109":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:20364:2698":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:5596:15432":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:5973:1689":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"17:11271:16218":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:58291:28509":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"16:7093:15483":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"21:8687:2101":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"2:20775:2897":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:2465:14508":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"2:56964:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11198:25223":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12964:19392":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:484:22718":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:8660:8051":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13557:19560":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"21:3580:1676":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"6:501:9253":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4346:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:6021:2824":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:560:9260":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"21:11539:34432":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"21:10085:2059":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"1:7895:24471":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:8886:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10546:15612":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:6521:2839":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:0:801":{"crate_id":6,"path":["libc"],"kind":"module"},"2:50079:8116":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:46984:8120":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:9697:8092":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5443:13117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:14972:34205":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"21:8336:2090":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"17:11853:18608":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:6676:15474":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"21:7208:34432":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"17:11300:16226":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:9126:29244":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:54080:8006":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"12:387:32958":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:6293:9133":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:2993:14528":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"21:4134:34373":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"17:10062:15733":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:8998:34432":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:8612:2659":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:50109:2626":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:6923:2267":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:53672:2957":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"5:7159:8152":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:3484:2351":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:47246:28198":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:6259:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:4974:2750":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"16:2320:14502":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:4690:982":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"30:726:34108":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:5991:1686":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"12:1872:2497":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"5:2865:31043":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"16:3566:14542":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"17:12756:18940":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:47208:2155":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"21:8768:2103":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"18:614:34104":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:9475:15668":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:3319:2632":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:53750:2941":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"21:12917:2200":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:2845:8461":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:46500:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"6:7208:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:8991:34079":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:3235:2643":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:1454:2509":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"30:807:19631":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:9274:34432":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"17:10854:15625":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:11356:16244":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"6:5472:13173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12955:19072":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:2487:14509":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:7279:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:12177:22709":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:56951:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8625:2660":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"21:8167:2080":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"17:11034:15943":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"18:609:34108":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:9350:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:5891:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:12768:18942":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"21:4267:19659":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10257:15787":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:5774:2801":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:5815:15440":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:7225:22721":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:1828:2531":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"21:14847:2119":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"1:4771:2725":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:11893:18610":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:52794:2963":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:4749:15173":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:8701:15601":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"1:12333:367":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"21:9184:2153":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"6:5861:13225":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:11873:18609":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:9023:2111":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"17:12322:18706":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"21:14176:2337":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"15:0:1870":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:11676:22313":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:11706:22596":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7872:15513":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:8991:2204":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:12352:1459":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"5:3236:2479":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"21:9412:2156":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"17:10088:15732":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"21:13333:2211":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"16:5981:33391":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:50213:8096":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"16:2657:14516":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:3130:8463":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:487:15585":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"21:13530:2266":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"16:7567:15507":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"21:14608:2345":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"18:531:19642":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:12384:2083":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"16:6052:15446":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:13340:19479":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"17:9446:15656":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"6:4126:12499":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:5877:8421":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:5180:2747":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:7117:33441":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"30:777:19628":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:9499:34432":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"17:13478:19532":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:11982:14456":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:48400:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"16:6842:33093":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:21290:27964":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:6448:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:3091:2645":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"15:193:14448":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"5:4094:2204":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:47128:2582":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:6558:8418":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"29:0:1681":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:10919:8624":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:5656:30255":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"21:7463:34204":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"6:6311:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"1:9008:2786":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:4259:2684":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:554:9259":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:2399:2597":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"17:13134:19439":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"6:507:9254":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:47199:8414":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:7092:2294":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"5:3893:30911":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"1:1608:2476":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:50401:8110":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:13307:34432":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"21:7727:2082":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"2:51869:2954":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4239:12509":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:3184:8034":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"21:7581:2086":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"17:10625:15615":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:359:2447":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"17:8796:15602":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:10655:2171":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"5:6931:2500":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4592:12545":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"21:12550:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"5:781:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:13572:19565":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"21:8401:34432":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"21:11943:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"17:10642:15616":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"14:165:14431":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:9422:15644":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:12761:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"2:48125:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"21:13888:2275":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"1:12336:1475":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:8523:2657":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"21:8414:202":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"1:8674:2665":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10394:15817":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:9193:34091":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:7470:2504":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:11748:18600":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:13506:19556":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"20:68:1673":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"16:5235:33369":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"1:6871:2836":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"1:2411:2603":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"19:0:1009":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:5606:2267":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"21:9758:34432":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"21:7825:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:11205:2181":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"1:10685:2799":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"5:5540:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4191:12504":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:49938:8074":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:21387:27973":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:50526:8136":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:242:34076":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7557:15506":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:9751:15691":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"21:13056:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"2:4145:8064":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"21:14637:2348":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"1:2653:2337":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:9263:15634":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:20050:8251":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:2282:14500":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:5780:15438":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"30:648:19642":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:9362:15607":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:7131:2566":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:8106:2585":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"16:6146:15451":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:12342:1441":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:7892:8105":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:519:9256":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"21:14495:32915":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"6:6329:2752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:6619:15472":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"21:6988:34432":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"26:53:35765":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"16:6137:15450":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:4317:2688":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:11951:18615":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"18:636:34109":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:49137:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:52537:27837":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"16:3716:14596":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:47177:2152":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:20516:2698":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:5585:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"12:632:2204":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:7772:15586":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:564:19644":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"30:872:19636":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:48742:2823":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:2773:2883":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"21:10493:34432":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:50824:8609":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"21:9295:2154":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"1:973:2483":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:4215:2682":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"2:50009:8089":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:48210:2765":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8483:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"18:113:19615":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:4339:8218":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:7343:15495":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6070:15447":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"5:1699:2479":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"21:2740:1675":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"16:5184:14470":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:11503:25227":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:29827:27963":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"6:4496:12534":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:2871:22715":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"21:6322:34230":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"12:1852:2494":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"21:13678:2272":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"6:6302:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:4284:8216":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:2793:14522":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:9340:2698":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:10350:15622":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"21:11342:34337":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"17:13327:19478":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11909:18611":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:4768:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:4251:2683":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:8216:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:2595:31090":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:6241:15457":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:9627:15676":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"21:13785:34432":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"2:49656:28375":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8660:2662":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"6:4581:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:7088:2567":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"21:589:1671":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"21:11603:34432":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"17:10296:15784":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:5498:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"21:11870:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:10949:15828":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:11837:2091":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:2046:2424":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"21:7983:2075":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"2:21432:28533":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"28:0:2014":{"crate_id":28,"path":["slab"],"kind":"module"},"6:6430:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"1:5189:2748":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"16:2631:14515":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:9216:34432":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"17:8666:15600":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:9248:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12909:19057":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:47055:27848":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2535:14511":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:50392:8111":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:1320:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2231:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:2659:8033":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:6034:15445":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"21:8544:34432":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:9520:23266":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"24:9:19653":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"5:3690:30911":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:3188:14531":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:12338:1027":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:8722:2660":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:7543:15505":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:9043:8583":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:5018:2702":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"28:193:2490":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"2:29721:28005":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"17:9681:15717":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"21:5956:1687":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"21:10946:34432":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"6:4673:12556":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"1:12358:1512":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:8922:2781":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"18:660:19628":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"28:202:2488":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"21:6055:2184":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"2:21131:27998":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:9844:15726":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"18:624:34128":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:56977:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:11785:2088":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:6341:30911":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:8101:2584":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:8561:15573":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:3151:8207":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:1962:15688":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:10460:2542":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:918:2477":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:7997:2537":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:5720:2799":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:3276:2640":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:8130:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:48552:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:4911:24991":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"18:681:19630":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:6342:22702":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:48476:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"21:12834:34432":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"1:9590:2610":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:6554:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:8776:2104":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"16:6252:15458":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:4348:8219":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:52560:27838":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:7909:15515":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"21:14304:34432":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"9:19:14291":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:2715:2288":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:25286:2670":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:2771:14521":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"28:32:2475":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:3367:8189":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:7883:2698":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"21:14064:2334":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"1:910:2476":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"1:4909:24989":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"21:13030:2198":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"1:2401:2598":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:50737:8131":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"21:14364:34432":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"16:153:14477":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"12:2178:32951":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:3457:14534":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:8831:2758":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:46522:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"12:1138:2491":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:6200:15455":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:4489:2680":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:9778:15692":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:0:1871":{"crate_id":16,"path":["gimli"],"kind":"module"},"21:14261:2266":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"16:7357:15496":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:1639:8390":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"21:5037:19666":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"21:8662:34432":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:51087:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:4888:15216":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11828:18606":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11247:16106":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"21:14243:34432":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"20:0:1667":{"crate_id":20,"path":["futures_core"],"kind":"module"},"21:9783:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"2:21813:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:2285:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"14:40:15830":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:52047:28010":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:21978:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:49128:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:7211:15485":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:6277:10082":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:20525:2896":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:7091:2064":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"6:4635:12551":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:6210:15456":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"5:2864:8026":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"5:7071:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"1:9499:22051":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:12084:2524":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"27:439:2841":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"6:4804:12568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"5:2153:32082":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:3197:2641":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:8375:30333":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:46456:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:9167:34432":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"6:4307:12518":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"16:6528:15469":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13091:19432":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:6198:164":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"2:9585:8098":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"6:6424:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:47237:2158":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:10360:15781":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:12291:18704":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:969:2482":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:12739:18897":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13126:19438":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:49964:8072":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:2589:22730":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"16:2683:14517":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:4519:15135":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"12:822:2484":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:13157:2092":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"21:12662:2197":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"17:9738:15693":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:48864:8042":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:51992:2938":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"12:777:14417":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"12:1518:14422":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"21:0:1669":{"crate_id":21,"path":["futures_util"],"kind":"module"},"21:9372:2155":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"21:12045:2078":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:944:2267":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:8368:15594":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"12:2053:2488":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:8921:8262":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"5:3602:2340":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:3026:14530":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"27:140:19709":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"2:53996:2929":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:6899:2525":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:7974:2458":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7435:15500":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:8252:22939":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:967:15650":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:6097:2834":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:48704:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:1811:598":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:2867:31017":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:1678:10159":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:2842:14524":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"12:1029:2490":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:12033:18620":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2742:2882":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"13:0:1862":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:4115:12498":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"6:1643:10156":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:8069:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:9858:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"2:20118:28408":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:11939:8013":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"6:5876:13226":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:10670:15617":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"21:7543:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"9:592:14240":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:7372:33186":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:0:486":{"crate_id":2,"path":["core"],"kind":"module"},"1:8257:22960":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:12357:774":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:11500:18420":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"9:382:14326":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"6:495:9252":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:52286:2935":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:48312:2204":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:9700:15689":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:50828:8611":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:2868:14525":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:7947:34432":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:49155:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:7931:2430":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:2789:8450":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:2705:14518":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"13:108:33004":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:46599:8464":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:6680:2058":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:10374:15783":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"21:13541:2267":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"24:15:19654":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"16:2300:14501":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:1608:10154":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10466:15819":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:4713:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"21:927:2102":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"21:9112:2114":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"17:12118:18626":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:53874:2926":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:48252:8547":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:51761:2953":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"21:7185:2068":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"17:11684:18538":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:50259:8124":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:8981:15605":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:50331:8127":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:8954:2110":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"1:3491:2623":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:21879:2438":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:3169:30451":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:9183:15610":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:10723:8573":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"30:853:19635":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:5489:2058":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:2316:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"16:4217:15025":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:5699:13190":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:9776:8096":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:50632:8142":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:8017:22938":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"21:13603:2270":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"6:4212:12506":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:53812:2961":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:4224:12507":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:9472:22963":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:3484:2267":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"21:7305:2083":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:52316:2939":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:9337:2842":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:3689:14593":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:48193:2475":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"21:12865:2199":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"21:7031:2060":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"30:699:8251":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:9870:22732":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:9672:2549":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9061:15607":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"6:6322:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:9260:2802":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10490:15821":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:12340:1333":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:11014:15942":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:8941:15604":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:54069:8005":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"16:5703:15435":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:2915:2290":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:12164:18629":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:12350:729":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"21:13649:34432":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"17:9401:15649":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:4327:15063":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:3125:15735":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"21:13109:2207":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"1:1114:2490":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"2:1915:8038":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:4843:2740":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:11169:8109":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:38221:8251":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:46633:29573":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:13168:19464":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:10910:2065":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"17:9631:15663":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"18:590:28543":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:1938:2562":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:5772:13196":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:247:34083":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:10434:15818":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:49122:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:2480:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4475:12533":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"21:2689:2184":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"2:7467:2501":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"17:13039:19425":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"21:7922:2076":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"5:6493:8180":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:46858:2453":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"21:4220:19657":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"1:4307:2687":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5460:15425":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:3599:20113":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"1:11567:2847":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:50852:8617":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:2801:8451":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:2670:2437":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"}},"external_crates":{"28":{"name":"slab","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"futures_sink","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"29":{"name":"futures_io","html_root_url":null},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"futures_util","html_root_url":null},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_executor","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"24":{"name":"futures_task","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}