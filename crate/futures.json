{"root":"0:0:1931","crate_version":"0.3.29","includes_private":false,"index":{"2:12533:20229":{"id":"2:12533:20229","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12573:28621":{"id":"2:12573:28621","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12189:8253","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::match_indices":"2:12570:28620"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43785:8269","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65-21:1293:1838":{"id":"0:65-21:1293:1838","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1293:1838","glob":false}}},"0:4-2:12772:146":{"id":"0:4-2:12772:146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:12772:146","glob":false}}},"2:12510:21145":{"id":"2:12510:21145","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12511:21146"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:29293":{"id":"5:5520:29293","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2399","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:20788":{"id":"5:5538:20788","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12610:20786"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:1902":{"id":"0:53-31:102:1902","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1902","glob":false}}},"2:12543:21156":{"id":"2:12543:21156","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12189:8253","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::split":"2:12537:2427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43635:8238","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:1834":{"id":"0:60-20:32:1834","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1834","glob":false}}},"2:12570:28620":{"id":"2:12570:28620","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12189:8253","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::rmatch_indices":"2:12573:28621"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43767:8268","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:20228":{"id":"2:12529:20228","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41657:199","prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12558:21162":{"id":"2:12558:21162","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12607:20789":{"id":"2:12607:20789","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:8574":{"id":"5:5521:8574","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:29297":{"id":"5:5536:29297","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2399","`String`":"5:7490:251"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2399","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496:20751":{"id":"2:12496:20751","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11749:8257"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2760:1841":{"id":"0:13-21:2760:1841","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1841","glob":false}}},"0:15-25:9:1844":{"id":"0:15-25:9:1844","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1844","glob":false}}},"0:78-29:25:1850":{"id":"0:78-29:25:1850","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1850","glob":false}}},"0:81-21:6204:1852":{"id":"0:81-21:6204:1852","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6204:1852","glob":false}}},"0:27-20:131:1856":{"id":"0:27-20:131:1856","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1856","glob":false}}},"2:12567:28619":{"id":"2:12567:28619","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12189:8253","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::matches":"2:12564:2156"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43839:8271","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12487":{"id":"2:12487","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12488:875","2:12489:20782","2:12490:28610","2:12491:28611","2:12493:28612","2:12496:20751","2:12497:28613","2:12498:345","2:12499:344","2:12500:21118","2:12502:21119","2:12504:21120","2:12506:21121","2:12508:28614","2:12509:28615","2:12510:21145","2:12511:21146","2:12512:26553","2:12513:26604","2:12514:20755","2:12515:26529","2:12516:26570","2:12517:2418","2:12518:28616","2:12519:26554","2:12520:21164","2:12523:21165","2:12526:21166","2:12529:20228","2:12533:20229","2:12537:2427","2:12540:21154","2:12543:21156","2:12546:28617","2:12549:28618","2:12552:21158","2:12555:21160","2:12558:21162","2:12561:21163","2:12564:2156","2:12567:28619","2:12570:28620","2:12573:28621","2:12576:28622","2:12578:28623","2:12580:28624","2:12582:28625","2:12583:28626","2:12584:28627","2:12587:28628","2:12590:21167","2:12593:21168","2:12596:28629","2:12599:28630","2:12602:28631","2:12605:28632","2:12607:20789","2:12608:22342","2:12609:20790","2:12610:20786","2:12611:20785","2:12612:28633","2:12614:2554","2:12615:28634"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12502:21119":{"id":"2:12502:21119","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31-21:6753:1859":{"id":"0:31-21:6753:1859","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6753:1859","glob":false}}},"2:12504:21120":{"id":"2:12504:21120","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:344":{"id":"2:12499:344","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12493:28612":{"id":"2:12493:28612","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12491:28611"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:66-20:68:1839":{"id":"0:66-20:68:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1839","glob":false}}},"2:12519:26554":{"id":"2:12519:26554","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43909:8254","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-21:6754:1862":{"id":"0:35-21:6754:1862","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6754:1862","glob":false}}},"2:12514:20755":{"id":"2:12514:20755","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43603:2736","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12599:28630":{"id":"2:12599:28630","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12564:2156":{"id":"2:12564:2156","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12189:8253","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::rmatches":"2:12567:28619"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43821:8270","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6186:1855":{"id":"0:84-21:6186:1855","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6186:1855","glob":false}}},"0:23-21:6204:1852":{"id":"0:23-21:6204:1852","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6204:1852","glob":false}}},"2:12490:28610":{"id":"2:12490:28610","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:345":{"id":"2:12498:345","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12499:344","`u8`":"1:12026:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12520:21164":{"id":"2:12520:21164","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:28616":{"id":"2:12518:28616","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43881:8267","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12497:28613":{"id":"2:12497:28613","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-21:5258:1002":{"id":"0:38-21:5258:1002","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5258:1002","glob":false}}},"2:12610:20786":{"id":"2:12610:20786","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6756:1858":{"id":"0:29-21:6756:1858","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6756:1858","glob":false}}},"2:12500:21118":{"id":"2:12500:21118","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41657:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12611:20785":{"id":"2:12611:20785","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12612:28633":{"id":"2:12612:28633","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:28633"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43916:8264","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6199:1854":{"id":"0:83-21:6199:1854","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6199:1854","glob":false}}},"2:12546:28617":{"id":"2:12546:28617","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12189:8253","str::split":"2:12537:2427","prim@char":"1:12009:453","`DoubleEndedIterator`":"2:7571:126","str::rsplit_terminator":"2:12549:28618"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43667:8273","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:1849":{"id":"0:77-29:17:1849","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1849","glob":false}}},"2:12615:28634":{"id":"2:12615:28634","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:28634"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43934:8265","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12552:21158":{"id":"2:12552:21158","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253","str::rsplitn":"2:12555:21160"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43721:8242","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-20:68:1839":{"id":"0:10-20:68:1839","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1839","glob":false}}},"0:50-31:109:1899":{"id":"0:50-31:109:1899","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1899","glob":false}}},"0:7-21:424:1836":{"id":"0:7-21:424:1836","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1836","glob":false}}},"0:43-27:0:1865":{"id":"0:43-27:0:1865","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1865","glob":false}}},"2:12584:28627":{"id":"2:12584:28627","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12214:8248","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12561:21163":{"id":"2:12561:21163","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12602:28631":{"id":"2:12602:28631","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12605:28632":{"id":"2:12605:28632","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12150:132","`FromStr`":"2:12149:2889"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41800:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12149:2889","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12149:2889","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:1903":{"id":"0:54-31:120:1903","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1903","glob":false}}},"2:12580:28624":{"id":"2:12580:28624","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4701:1845":{"id":"0:62-21:4701:1845","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4701:1845","glob":false}}},"0:51-31:136:1900":{"id":"0:51-31:136:1900","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1900","glob":false}}},"2:12555:21160":{"id":"2:12555:21160","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12009:453","str::splitn":"2:12552:21158","self::pattern":"2:12189:8253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43739:8240","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12517:2418":{"id":"2:12517:2418","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43871:2444","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12491:28611":{"id":"2:12491:28611","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3780:1842":{"id":"0:74-21:3780:1842","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3780:1842","glob":false}}},"2:12511:21146":{"id":"2:12511:21146","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12510:21145"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12537:2427":{"id":"2:12537:2427","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12189:8253","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:12009:453","str::split_whitespace":"2:12515:26529","str::rsplit":"2:12543:21156"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43617:2737","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-21:4701:1845":{"id":"0:39-21:4701:1845","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4701:1845","glob":false}}},"5:5539:20787":{"id":"5:5539:20787","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12611:20785"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:589:1837":{"id":"0:8-21:589:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1837","glob":false}}},"2:12549:28618":{"id":"2:12549:28618","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12189:8253","str::split":"2:12537:2427","prim@char":"1:12009:453","str::split_terminator":"2:12546:28617"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43685:8272","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6755:1861":{"id":"0:34-21:6755:1861","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6755:1861","glob":false}}},"0:69-21:424:1836":{"id":"0:69-21:424:1836","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1836","glob":false}}},"0:46:1741":{"id":"0:46:1741","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1897","`LocalPool`":"31:120:1903"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1897","0:49-31:68:1898","0:50-31:109:1899","0:51-31:136:1900","0:52-31:100:1901","0:53-31:102:1902","0:54-31:120:1903","0:55-31:125:1904"],"is_stripped":false}}},"0:45-21:5260:1868":{"id":"0:45-21:5260:1868","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5260:1868","glob":false}}},"2:12576:28622":{"id":"2:12576:28622","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1864":{"id":"0:42-21:57:1864","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1864","glob":false}}},"2:12526:21166":{"id":"2:12526:21166","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63-25:9:1844":{"id":"0:63-25:9:1844","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1844","glob":false}}},"0:21-29:20:1851":{"id":"0:21-29:20:1851","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1851","glob":false}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:29293","5:5521:8574","5:5524:29294","5:5527:29295","5:5535:29296","5:5536:29297","5:5537:2289","5:5538:20788","5:5539:20787"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:55-31:125:1904":{"id":"0:55-31:125:1904","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1904","glob":false}}},"0:41-21:5206:1863":{"id":"0:41-21:5206:1863","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5206:1863","glob":false}}},"0:82-21:6169:1853":{"id":"0:82-21:6169:1853","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6169:1853","glob":false}}},"2:12509:28615":{"id":"2:12509:28615","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12015:1510","crate::ops::IndexMut":"2:3077:2628","str::slice_unchecked":"2:12508:28614"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:761":{"id":"0:58-21:104:761","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:761","glob":false}}},"2:12515:26529":{"id":"2:12515:26529","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12516:26570"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43891:8256","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40-21:1293:1838":{"id":"0:40-21:1293:1838","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1293:1838","glob":false}}},"2:12540:21154":{"id":"2:12540:21154","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12005:8244","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48-31:65:1897":{"id":"0:48-31:65:1897","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1897","glob":false}}},"2:12506:21121":{"id":"2:12506:21121","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10279:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:1901":{"id":"0:52-31:100:1901","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1901","glob":false}}},"0:28-22:7:1857":{"id":"0:28-22:7:1857","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1857","glob":false}}},"2:12508:28614":{"id":"2:12508:28614","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12015:1510","str::slice_mut_unchecked":"2:12509:28615","crate::ops::Index":"2:3073:2627"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12512:26553":{"id":"2:12512:26553","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43587:8260","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5165:1846":{"id":"0:16-21:5165:1846","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5165:1846","glob":false}}},"0:49-31:68:1898":{"id":"0:49-31:68:1898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1898","glob":false}}},"5:5527:29295":{"id":"5:5527:29295","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12614:2554":{"id":"2:12614:2554","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:2554"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43925:2555","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2760:1841":{"id":"0:73-21:2760:1841","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1841","glob":false}}},"2:12593:21168":{"id":"2:12593:21168","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12596:28629":{"id":"2:12596:28629","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12209:8250","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:29296":{"id":"5:5535:29296","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12582:28625":{"id":"2:12582:28625","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12609:20790":{"id":"2:12609:20790","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6169:1853":{"id":"0:24-21:6169:1853","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6169:1853","glob":false}}},"2:12488:875":{"id":"2:12488:875","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12009:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12587:28628":{"id":"2:12587:28628","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:29294":{"id":"5:5524:29294","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:589:1837":{"id":"0:70-21:589:1837","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1837","glob":false}}},"0:11-20:97:1840":{"id":"0:11-20:97:1840","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1840","glob":false}}},"0:19-29:17:1849":{"id":"0:19-29:17:1849","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1849","glob":false}}},"0:0:1931":{"id":"0:0:1931","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5260:1868","crate::executor":"0:46:1741","crate::stream":"21:1293:1838","crate::channel":"27:0:1865","crate::future":"21:104:761","crate::sink":"21:4701:1845"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1741","0:56:1139","0:4-2:12772:146","0:5-20:32:1834","0:7-21:424:1836","0:8-21:589:1837","0:10-20:68:1839","0:11-20:97:1840","0:13-21:2760:1841","0:14-21:3780:1842","0:15-25:9:1844","0:16-21:5165:1846","0:18-29:27:1848","0:19-29:17:1849","0:20-29:25:1850","0:21-29:20:1851","0:23-21:6204:1852","0:24-21:6169:1853","0:25-21:6199:1854","0:26-21:6186:1855","0:27-20:131:1856","0:28-22:7:1857","0:29-21:6756:1858","0:31-21:6753:1859","0:32-21:37:1860","0:33-21:20:1122","0:34-21:6755:1861","0:35-21:6754:1862","0:37-21:104:761","0:38-21:5258:1002","0:39-21:4701:1845","0:40-21:1293:1838","0:41-21:5206:1863","0:42-21:57:1864","0:43-27:0:1865","0:44-21:6227:1867","0:45-21:5260:1868"],"is_stripped":false}}},"0:33-21:20:1122":{"id":"0:33-21:20:1122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1122","glob":false}}},"0:56:1139":{"id":"0:56:1139","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:761","0:59-2:12772:146","0:60-20:32:1834","0:62-21:4701:1845","0:63-25:9:1844","0:65-21:1293:1838","0:66-20:68:1839","0:67-20:97:1840","0:69-21:424:1836","0:70-21:589:1837","0:71-21:5165:1846","0:73-21:2760:1841","0:74-21:3780:1842","0:76-29:27:1848","0:77-29:17:1849","0:78-29:25:1850","0:79-29:20:1851","0:81-21:6204:1852","0:82-21:6169:1853","0:83-21:6199:1854","0:84-21:6186:1855"],"is_stripped":false}}},"2:12523:21165":{"id":"2:12523:21165","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12578:28623":{"id":"2:12578:28623","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12583:28626":{"id":"2:12583:28626","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-20:32:1834":{"id":"0:5-20:32:1834","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1834","glob":false}}},"0:20-29:25:1850":{"id":"0:20-29:25:1850","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1850","glob":false}}},"0:26-21:6186:1855":{"id":"0:26-21:6186:1855","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6186:1855","glob":false}}},"0:37-21:104:761":{"id":"0:37-21:104:761","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:761","glob":false}}},"0:76-29:27:1848":{"id":"0:76-29:27:1848","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1848","glob":false}}},"0:67-20:97:1840":{"id":"0:67-20:97:1840","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1840","glob":false}}},"0:14-21:3780:1842":{"id":"0:14-21:3780:1842","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3780:1842","glob":false}}},"0:32-21:37:1860":{"id":"0:32-21:37:1860","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1860","glob":false}}},"0:79-29:20:1851":{"id":"0:79-29:20:1851","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1851","glob":false}}},"0:25-21:6199:1854":{"id":"0:25-21:6199:1854","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6199:1854","glob":false}}},"2:12489:20782":{"id":"2:12489:20782","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12516:26570":{"id":"2:12516:26570","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12515:26529"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43900:8255","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12590:21167":{"id":"2:12590:21167","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12009:453","self::pattern":"2:12189:8253"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12194:8249","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71-21:5165:1846":{"id":"0:71-21:5165:1846","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5165:1846","glob":false}}},"5:5537:2289":{"id":"5:5537:2289","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18-29:27:1848":{"id":"0:18-29:27:1848","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1848","glob":false}}},"2:12513:26604":{"id":"2:12513:26604","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12009:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43593:8259","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12608:22342":{"id":"2:12608:22342","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39604:21068","Self::is_ascii":"2:12607:20789"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41655:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39604:21068","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6227:1867":{"id":"0:44-21:6227:1867","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6227:1867","glob":false}}},"0:59-2:12772:146":{"id":"0:59-2:12772:146","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:12772:146","glob":false}}}},"paths":{"16:3600:14897":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:12971:2354":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"6:5044:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:9878:8399":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:13298:19424":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"18:755:20239":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11191:15992":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:41868:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:10724:8240":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"21:12041:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:44144:8289":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:9172:15968":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"5:4849:225":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:2225:30164":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:7980:26406":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:13685:20140":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:15382:2284":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"2:2992:8179":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"6:1537:10256":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4789:12905":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:44352:8743":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"5:1778:2584":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"17:12496:19373":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:6334:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:44216:8293":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"21:13019:2355":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"1:727:152":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:8472:2885":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"21:7947:2247":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"17:13876:20151":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:10370:16052":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:4021:27417":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:5372:2301":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13816:20146":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:43593:8259":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"21:11562:32752":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"6:6700:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:45886:3006":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:7828:15878":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:434:14836":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6666:10210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:5015:12932":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:42049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:41851:2580":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"6:4698:12897":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1650:10266":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:3185:2752":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10456:16079":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"21:9100:32769":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"6:7610:13107":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:39356:224":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:10737:24029":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:22012:2981":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"6:123:9039":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:7839:2708":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"21:11870:2239":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"2:44336:8735":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"17:13188:19417":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"5:2961:8170":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10980:15977":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"21:4701:1845":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"17:12437:19371":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"21:13706:32769":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"2:10596:8245":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:548:9363":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"21:15172:2449":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"2:43423:8228":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:9277:15971":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:9617:32244":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"5:7272:30154":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:47985:8149":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"21:11749:2332":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"15:288:14811":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:2897:8594":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:8883:2941":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:1568:2584":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"17:12473:16170":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:44364:8736":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:43433:8229":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:2914:8593":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:2850:2971":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"21:8325:2243":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"1:9048:20774":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"21:0:1835":{"crate_id":21,"path":["futures_util"],"kind":"module"},"31:65:1897":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"1:926:2588":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:4468:2826":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:11975:24391":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:3814:2775":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"21:10003:70":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"21:13108:2346":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"17:11062:16209":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"17:12531:19375":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:12834:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"6:4783:12904":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"21:6043:2333":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"2:2948:8601":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"21:15022:2383":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"6:4496:12876":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:11980:2566":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:7718:2598":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:1525:2616":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:10750:16124":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:2406:14867":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:43667:8273":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:6363:20276":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"21:14796:2379":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"1:11147:23728":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"21:6324:183":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"1:8845:2581":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"30:1394:20241":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:6862:8548":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"16:7677:218":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10903:16130":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"30:1526:20242":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"16:3915:14961":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:1561:2581":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"21:5165:1846":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"1:11135:2904":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:7990:2390":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:8793:2903":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"6:4922:12922":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"21:8020:2240":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"5:6827:8319":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:6361:15821":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:7466:2672":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"21:9893:32769":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:7111:26302":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:3065:14893":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:12074:18871":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7725:2653":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:6920:32769":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:6079:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"30:1511:34017":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"26:37:33953":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:2931:8597":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:5943:2357":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"21:14282:2363":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:9084:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:39268:218":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:22250:27185":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:8239:15891":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:11635:32373":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"16:7436:15855":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"21:15193:2451":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"2:9623:8187":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:13922:20156":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"30:1219:20345":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"21:7428:32769":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"2:4860:2755":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:12543:19376":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"16:3049:14892":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:10437:2228":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"21:13901:2363":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"16:4719:15501":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:14056:20167":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6261:15815":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"5:2051:2617":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8915:2942":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:5075:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:1826:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:12790:19392":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:3244:262":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:10966:2905":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"16:5403:15787":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"21:11826:2234":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"17:13244:19421":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"11:785:2380":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13259:19422":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:2798:2542":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7568:15865":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:22181:26978":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:13454:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"21:4267:2364":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"21:6845:2228":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:13802:20145":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:46300:3074":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:21278:2993":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:21381:2714":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:7515:23786":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"21:15413:32368":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"17:3565:16150":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:507:9359":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"9:393:14654":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1710:10272":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11596:14820":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13286:19423":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:12034:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:9578:32769":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"2:39431:8330":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:2618:14876":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"30:880:20344":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"21:15316:32350":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"17:8686:15957":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:44340:8738":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:12737:19388":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"21:14510:2389":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:22921:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"30:1126:20235":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"21:8045:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"22:0:2186":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"5:7504:8295":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:7664:2537":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:6228:12779":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:4801:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:6762:2224":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"21:6542:32878":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"16:4921:15535":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"21:15324:2283":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"2:22325:26962":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:41472:27173":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:13868:20150":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:9780:15980":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"17:10738:16168":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"21:8838:2265":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:41773:2869":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:6499:15830":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"21:10465:32769":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"6:5992:13614":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:10782:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"16:6753:15839":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:6274:228":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"1:11793:22829":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"30:1554:20235":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:1604:10263":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"21:14184:32769":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"5:4350:273":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:40372:2305":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:588:9369":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:7657:13114":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:10646:16163":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"1:4144:2818":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:12005:8244":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"30:1140:20344":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"20:97:1840":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:43785:8269":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"21:13751:32769":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"16:7651:15869":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:5612:15791":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"21:9117:2274":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"17:11226:16214":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"17:10023:15978":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:4686:12896":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:22302:26972":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14536:20202":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:14734:32769":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"17:10012:15977":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:47950:8146":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:43575:8263":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"14:215:14796":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"27:181:20316":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"17:13274:15994":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:2860:8584":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:9072:2273":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"21:4533:23985":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"2:39410:8604":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"11:1051:14775":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"21:14662:2437":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"6:4932:12923":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"6:7616:13108":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:46556:3036":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4893:12918":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:5435:31477":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:4488:12875":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:41386:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:2744:14881":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:11074:16210":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13554:20133":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"18:582:8392":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"21:15480:32365":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"16:8181:15888":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"21:13144:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"1:10077:26432":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"21:589:1837":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"6:7598:13105":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:21547:2979":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:42010:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:533:9361":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"27:149:20315":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"11:1541:14779":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"21:7525:2248":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"21:15161:2448":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"21:14545:32769":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"16:6818:15841":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"11:992:2593":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"21:12683:2350":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"1:5358:2894":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"21:9153:32769":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:12030:1612":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"18:548:151":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:7496:8546":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:1501:10251":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"21:6415:184":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"1:9027:23722":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10059:16019":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:1913:10438":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"24:169:2221":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"1:11958:23749":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"18:719:20230":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:2670:2669":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:30072:2777":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"21:7031:32769":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:8281:15892":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"5:7390:2579":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14420:20193":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:536:31157":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:9589:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:7534:15862":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:22690:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:22010:2714":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"21:8996:2269":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"11:860:2591":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:14076:2380":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"2:22317:27209":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:10811:23723":{"crate_id":1,"path":["std","sys","unix","kernel_copy","FdHandle"],"kind":"enum"},"2:11311:8226":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"21:12659:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"2:9571:2456":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:2766:14882":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"30:1203:20235":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"1:1557:2356":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:40505:8553":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:6741:10395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:14282:20183":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:43470:8218":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:7405:2234":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"16:6513:15831":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:3232:14894":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"18:624:20355":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"21:10759:32769":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:402:23976":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"5:2968:29611":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:4033:27408":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:3326:8181":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:14001:20162":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"21:9332:2279":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"18:113:20217":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:5696:15796":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"21:12369:2247":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"2:46680:3048":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:9985:16016":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12027:1613":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:14033:20165":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:12010:1632":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:47666:3015":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"21:14567:2434":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"2:43404:2325":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:2173:8616":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"1:1044:2593":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"5:6587:2581":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:3223:2753":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"30:996:20235":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"1:6403:2360":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:5104:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"1:3971:2790":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:9752:15979":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5921:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:5217:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:32122:27690":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"5:5945:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:4719:2804":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:12554:19377":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:7722:15873":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"21:14423:2388":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"17:9328:2736":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"11:2494:2578":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"5:7302:28584":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"18:507:2327":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:43821:8270":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:5928:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:10920:2654":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:12086:18872":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:12465:16172":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:11024:23994":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"21:10713:32769":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:3712:2773":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"27:0:1865":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"1:7707:2565":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:14469:20197":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:10430:16107":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"1:4136:2817":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:15450:32376":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"2:43767:8268":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:8660:2871":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:580:9368":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:1752:27207":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:11267:23998":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"18:590:20356":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:9619:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:11742:15996":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:11211:159":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"28:0:2189":{"crate_id":28,"path":["slab"],"kind":"module"},"6:6927:14046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"17:9207:15969":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:12260:8277":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:21443:2980":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"30:1404:32280":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"21:13083:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"18:80:20215":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"28:208:2595":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"20:0:1833":{"crate_id":20,"path":["futures_core"],"kind":"module"},"1:7638:2538":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"29:20:1851":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"16:6415:15825":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:6943:14048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"1:9951:23383":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:7248:2359":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:4989:12928":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"1:5723:2922":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:13650:2356":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:41740:2868":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:4157:2819":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:12241:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"11:1687:154":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:12020:695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"5:824:2603":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"21:11523:32370":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"6:4529:12880":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:4416:8349":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:1924:2666":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"5:1275:2595":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"21:4948:2386":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"6:4676:12895":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:8594:15940":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:47959:8147":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"1:6443:2932":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"21:12794:32372":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"6:4908:12920":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"27:485:2883":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"28:55:2580":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:21142:2985":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:5059:26403":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"30:142:20351":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"17:8659:15937":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:46232:3013":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:7702:14608":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11617:15991":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:10112:16041":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:4106:26305":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:1764:660":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:2864:14886":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:5023:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:14346:20189":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1591:10261":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:40256:2689":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"18:521:20240":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:3073:2627":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:7006:15849":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"14:187:14795":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:4878:12916":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:21192:8615":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"11:324:31069":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"21:12842:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"11:389:31062":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:423:31082":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:6960:23794":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"21:9555:114":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"17:12062:18870":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:32115:15891":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"21:14272:245":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"2:41859:2581":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"21:8289:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:11304:2326":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:44206:8292":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"21:927:2267":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"9:486:14652":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:4364:12864":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:2895:20549":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"21:9515:2301":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"16:2722:14880":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:11991:23744":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10468:16109":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:10792:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:11295:16217":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:4640:8363":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"15:394:14823":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:5680:2224":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:30327:8577":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"11:2473:31075":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:8265:2823":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:884:2583":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5117:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"21:9632:2303":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"21:8081:2246":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:2325:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"11:666:2356":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:14920:2440":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"5:2245:29786":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"5:880:2604":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:4288:2821":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:43496:8234":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9531:32249":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:40325:8549":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"30:888:20345":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"21:15495:32366":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:11327:16218":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"5:2143:30156":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:11749:8257":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"21:14711:2438":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:10227:16056":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10383:16051":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"27:146:228":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"5:7223:2614":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9488:32262":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:5130:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:10453:24001":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:21234:2992":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"2:43739:8240":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:42937:155":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"17:12970:19402":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"5:7232:2581":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"6:4375:12865":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"5:5861:2380":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:2334:2580":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"6:569:9366":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:46324:3075":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:9607:15976":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:2339:14864":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:44023:8284":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:7884:15880":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4434:12869":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:14110:20173":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:5474:2723":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"5:1475:2583":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"21:8142:2242":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"20:17:2179":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"30:1518:20244":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"0:46:1741":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"17:10547:16111":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"2:44640:8166":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:40107:8370":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"2:22822:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:504:15955":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:5152:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"21:15134:2445":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"2:23020:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"1:3472:26515":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"30:1418:20215":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"17:13723:20142":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:5146:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:6517:2929":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:10916:16128":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"21:11281:32769":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"21:11963:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"5:4365:29717":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"17:582:15956":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:46278:3068":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4841:12911":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"21:14065:2379":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"6:4724:12899":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:10714:16166":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"21:10305:2225":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"1:6407:2926":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:3041:137":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4745:12900":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:5867:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:7343:9315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:10042:32769":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"29:25:1850":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"30:1064:20360":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"17:14355:20190":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:2317:2356":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"18:671:20234":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:10625:32769":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"9:330:14709":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:3044:138":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"30:980:151":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"11:1862:2599":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:11570:8162":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:40424:2228":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"9:52:14672":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7621:15868":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"18:707:8251":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"17:11473:15984":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:39151:8333":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11582:26435":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"21:14804:113":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"5:2964:29610":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:2881:14887":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:2904:8591":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"21:12859:2338":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"21:781:2256":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"21:8203:2241":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"16:2832:14885":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"30:924:20348":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"1:7355:24402":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"21:3780:1842":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"10:44:14763":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:11124:16182":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:10669:8239":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:6959:29694":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40084:8265":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:10718:2854":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:7504:15956":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13422:20129":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5123:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:6915:15845":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12778:19391":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:43444:8220":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:8899:2939":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:43344:26539":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:7102:15851":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"6:4556:12884":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:47130:3003":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"24:296:33868":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"1:2366:2694":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:41843:2356":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:10591:2316":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"2:2171:8615":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:6204:15812":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"6:4616:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:11030:23997":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"21:12434:2343":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"17:256:32259":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"2:44611:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"21:13764:2268":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"17:12846:19395":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:15069:32769":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"16:6569:15834":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"16:4889:15527":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:43891:8256":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:6813:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:14100:20172":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"26:43:33952":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"21:2709:2333":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"1:10802:2391":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"21:9934:2307":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"2:42703:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"1:10301:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:10710:8242":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:12633:2248":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"1:943:2590":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"30:1042:20359":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"1:7829:2710":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:10561:16077":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"16:5017:15559":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:9945:16023":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:871:2582":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:23500:244":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:1429:154":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:4004:2380":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:12598:19379":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:40413:8557":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:1528:10255":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:44344:8740":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"21:20:1122":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"21:12405:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"6:6100:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"17:11389:15981":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"30:911:20347":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"17:3232:16127":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4776:12903":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:2305:14862":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:45945:3067":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:8382:2882":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:2925:8596":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:2644:2438":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:9070:15787":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:3261:8334":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:11098:16184":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"21:8988:2268":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"16:6844:15842":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"15:306:14812":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5574:15789":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:515:20243":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:7910:2441":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:46634:3042":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:43483:8219":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:8364:2864":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:149:14839":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:21575:2983":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:12724:19387":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:2784:8177":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:40152:8369":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:2892:8590":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"5:6101:2723":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:30521:26888":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:8848:15962":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:14068:20168":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:12645:19381":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"1:6573:2933":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:11507:15986":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"21:13039:2341":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"21:10853:32769":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"6:1718:10273":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:22379:26897":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:4892:2851":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:4137:8353":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:46010:2977":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"5:5376:2263":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11162:16177":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"9:177:14758":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12136:18876":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:6944:31204":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:3943:2787":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:7708:15872":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:40868:8541":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"21:13415:2351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"16:5661:15794":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:11359:26315":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"5:4236:2356":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:41556:26916":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"1:2368:2695":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"16:7128:15852":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:4455:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3654:2581":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:39378:2572":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:44038:8285":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"5:3332:2584":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"5:2172:29795":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:41932:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:48011:8151":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"2:43909:8254":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:30357:26931":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:45755:3035":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:40032:26919":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:10420:16106":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:25902:275":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:4461:12872":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:6189:31497":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13693:20128":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:8769:8249":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:46202:3007":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"30:1457:20231":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"2:11735:8700":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:2286:2595":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:45926:3018":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:6960:15847":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"18:574:2327":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:11660:2330":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:43515:8235":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:8331:2803":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"11:2368:2380":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"21:6809:2225":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"21:10583:2309":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"11:829:2589":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"24:12:20255":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"8:0:2044":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:8524:2356":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:41715:2356":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:2498:2714":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:2919:8595":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:10139:16043":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"6:4566:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"5:1290:2594":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:6832:32769":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"21:14320:32769":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"30:1161:20346":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"2:44368:8737":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"16:7544:15863":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:4717:2801":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6764:10380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"18:644:2327":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"21:11788:32769":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:6270:2389":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:9078:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:6226:15813":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5727:15798":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"21:12016:2242":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"2:41409:2764":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:10827:2317":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"21:5985:1844":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:9521:15974":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:9660:32243":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"21:104:761":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"16:2380:14866":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:46375:27072":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"5:4166:2723":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:47336:3037":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:4798:2800":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"17:13973:20159":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:8279:2772":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:13040:19407":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10628:16116":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:9614:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"16:6879:15843":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:4068:8175":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:40645:2322":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"21:14778:32769":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"2:40283:8218":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:596:9370":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:2541:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:7533:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:14173:20180":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:4168:8354":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:1817:2644":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:8305:2853":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:13340:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"30:1544:20234":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:43916:8264":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"21:12784:31564":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"6:6248:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"21:14149:2384":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"2:4822:28534":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:11151:16212":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"6:4814:12908":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10410:2902":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"5:4076:2580":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:4557:15435":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"11:1036:2595":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:41426:2765":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:10279:247":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:4939:1069":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:10603:16114":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"5:6335:3117":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:2150:16093":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:11381:16222":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"2:44356:8741":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:6017:15809":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"6:6868:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:22429:2779":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:12209:8250":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:40495:2318":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:14335:20188":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:12024:800":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"25:0:1843":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"21:8556:2255":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"2:44628:8168":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:2209:16078":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:357:31064":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:44229:8274":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:14986:2441":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"21:335:32760":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:6227:1867":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"21:2555:33442":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"17:11201:16178":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"5:5634:8317":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"5:6666:29677":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:43881:8267":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:40092:2555":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:840:2356":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:7651:13113":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:7590:8314":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"21:15367:2282":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:21900:27318":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:2928:234":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"2:44069:8287":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:10948:23758":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"21:15353:32769":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"21:9355:2299":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"10:0:2046":{"crate_id":10,"path":["adler"],"kind":"module"},"26:0:2188":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"6:6913:14045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"6:5982:13613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:9873:8398":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"11:2085:2595":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:0:316":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:8953:15965":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:9625:8195":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:10190:2327":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"16:6968:15848":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:41706:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2544:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:47912:3076":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"13:110:31132":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:555:9364":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:40166:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:4473:12873":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:21441:2714":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6742:14805":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"21:11425:2328":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"17:11337:16219":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"16:4585:15439":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"21:15030:31024":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:32136:8652":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"0:0:1931":{"crate_id":0,"path":["futures"],"kind":"module"},"6:654:9417":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:4986:15552":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:10084:16014":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:8125:1844":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:8154:15886":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:2696:14879":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:11514:2775":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:6691:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:12983:19403":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:11166:32769":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"2:47728:3049":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"21:12216:2244":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"16:5905:15804":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:11719:8698":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"11:0:2047":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:43561:8266":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:4721:2805":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:11970:8748":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"30:1018:20356":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"1:3378:2723":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6086:13620":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:14514:20200":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"21:11233:32769":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"17:14499:20199":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:12267:18885":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:11448:15983":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"21:15086:2444":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"2:32111:23433":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:7869:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:8116:2359":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:13989:20161":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:41783:8685":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"24:309:20268":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:5009:12931":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:12499:2339":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"21:13165:2344":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"6:4388:12866":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:14316:20186":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:1703:2811":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"21:12538:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"2:40276:2713":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:22855:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"21:21:1122":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"21:7683:32759":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"2:44416:2973":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:3519:2380":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10949:16125":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"21:12192:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"17:10520:16110":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4360:2815":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:119:9038":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"11:1072:31087":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:13949:20157":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"21:11690:32769":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:7574:23985":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10447:14771":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:6587:2934":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:10515:2753":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"1:7846:2712":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:12196:18880":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6583:15835":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:12671:19383":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"17:13071:19409":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:11661:15941":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"21:6396:20274":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"6:1691:10270":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:2884:8589":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:636:20360":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:3583:2356":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:364:2551":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"11:1869:2600":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"21:11451:32769":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"17:14118:20174":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:6171:24375":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:41971:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:21791:2986":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"6:4351:12863":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"30:1211:20344":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"2:7308:2292":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:10186:16045":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"5:1104:30141":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"1:3424:2392":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:40100:8264":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"30:1533:20233":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:40353:2303":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:1484:2585":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"21:10808:32769":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:44537:227":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11261:16206":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"21:10362:2226":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"17:11490:15985":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:7503:15859":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:4208:2820":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:3264:2750":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:39312:223":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46946:3020":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:40020:8375":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:10125:2327":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"16:2504:14871":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:483:23983":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"5:1674:29677":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:12576:19378":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"21:15285:2457":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"1:8829:2356":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:7582:15866":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:4641:15447":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:6804:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:6963:8555":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:6781:10378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"21:15213:2453":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"16:0:2051":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7856:2709":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:14296:20184":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12810:19393":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"17:12237:18883":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:13828:2362":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"27:72:20327":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"21:5260:1868":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"1:8781:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:11710:15994":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:47939:8145":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:9295:32769":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:1842:2651":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:7619:2552":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:14747:2299":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"30:1274:20235":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"30:1232:20346":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"16:2284:14834":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11872:16230":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"27:453:2942":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"17:11934:18863":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"5:6798:8317":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:4462:15412":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:5372:2895":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:40893:2358":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:42657:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4800:12906":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:11332:22831":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"2:10631:8238":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"30:1503:20240":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"17:11358:16221":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:40404:2226":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"21:11130:2231":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"2:40446:2314":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9921:16033":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:483:9355":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:15219:2454":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"1:3481:2452":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9998:16015":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:4549:12883":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:11173:16213":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:45631:2998":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:9680:2304":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"1:416:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11023:16131":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"6:4902:12919":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"21:37:1860":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"21:13954:32383":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"17:11845:16229":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:21006:27420":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:11931:8749":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"21:14839:32769":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"6:4738:2784":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:7262:2606":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:4914:12921":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:1576:10260":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2367:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:5423:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:40456:8556":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"21:7743:2249":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"28:46:2356":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"2:45963:3073":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:15:2159":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:43934:8265":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:3144:24955":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:9165:24691":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"1:4027:2795":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:8136:2391":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:6279:15816":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"11:1127:14777":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:6352:15820":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"28:76:33981":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"2:44348:8739":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:8659:2567":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:3240:2602":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"21:2568:32335":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"21:9174:2275":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"2:42127:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:47970:8148":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"21:10875:2318":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"6:7645:13112":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:39252:221":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:10933:2898":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:3441:16132":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:897:2356":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:46086:3047":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"21:13875:32769":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"17:13024:19406":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:1120:28563":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6798:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:47836:3021":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10661:16164":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10534:16081":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:2670:14878":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:22363:26960":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:4901:856":{"crate_id":2,"path":["core","iter"],"kind":"module"},"21:7006:2228":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"14:0:2049":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:2161:637":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:39237:8602":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"21:11810:2335":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:11367:16185":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:10788:16169":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:3965:2789":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"1:12033:1219":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"21:12568:2340":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"21:6756:1858":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"16:7269:31568":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:2214:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:4710:12898":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:10284:32769":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"6:7679:13116":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"6:6222:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"6:7388:14420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"1:10518:2749":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"24:0:1932":{"crate_id":24,"path":["futures_task"],"kind":"module"},"2:7529:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:955:2592":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:40901:8544":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:11453:2774":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"21:1293:1838":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"21:13809:2361":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"1:8821:2905":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"21:4431:20260":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"17:9137:15943":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"6:6263:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"21:15276:2456":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"1:2382:2699":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"21:9749:2305":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"5:5791:259":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:2774:32780":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"foreign_type"},"21:8907:2266":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"17:11244:15991":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"6:4977:12927":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:40852:8539":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:10292:15977":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:12032:1672":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"30:1253:20348":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"6:495:9357":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:48064:8154":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:7643:2540":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:10672:16165":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"21:8959:32769":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:11687:15993":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:8134:15885":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:7555:23980":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:8963:2531":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:9994:8711":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:10476:2737":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:6318:15817":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"21:11330:32769":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"21:9436:32769":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"17:13826:20147":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:12305:18888":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:7713:2597":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:12007:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:5052:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"21:13683:2360":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"5:276:2399":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:41615:2768":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:0:2052":{"crate_id":17,"path":["object"],"kind":"module"},"21:14013:20259":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:9790:32258":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:11215:16180":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:2428:14868":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:2793:255":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"5:207:8185":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:13238:2345":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:43395:8227":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"21:9243:2276":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"17:13611:20136":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"18:481:20241":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:2943:8600":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:10103:32769":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"2:41731:2581":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"18:491:32280":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"30:1037:20358":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"2:3234:8603":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:1779:2633":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"6:5969:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:40133:8373":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:12184:18879":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:6047:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:2499:8396":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:11316:16208":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:14434:20194":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"31:109:1899":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"11:1145:2596":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:30343:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:45825:3052":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:1521:10254":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:10248:2308":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"17:9762:32256":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:11281:16207":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:45785:3040":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:12484:16171":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"11:1855:2584":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:22723:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"16:5995:15808":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:43171:8221":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:9633:8194":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:10494:2306":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"21:8595:2257":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:40312:2299":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:5105:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:10331:32769":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"1:7985:24401":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"14:221:14797":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"6:6934:14047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:14460:20196":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:11306:15994":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"21:7903:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"18:564:20246":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:11121:2903":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:1505:2587":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2783:2394":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:41443:2766":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:1672:1159":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"2:3023:2185":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:12899:2352":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"1:1931:706":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:1781:2634":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"21:7512:32769":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"2:44052:8286":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:21004:27418":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:7660:15870":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"21:15143:2446":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"6:7639:13111":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:14138:2383":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"2:21178:2987":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"16:5673:15795":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:2939:8599":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:3488:2731":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"21:8764:32769":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:4835:15521":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:1076:2596":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:1738:8626":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:22987:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:7574:2584":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:40183:26970":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:6171:214":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:7286:2581":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:7647:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:8205:15890":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"21:12604:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"16:6721:15838":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:43925:2555":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:12111:18874":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:11086:16211":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"21:8228:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:11351:16220":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:5562:2723":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"1:3225:2754":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:10688:2313":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"21:13725:2257":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"1:7741:2654":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"16:2810:14884":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7284:2868":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:10036:16021":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:2907:14888":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:11237:8232":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"6:4870:12915":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"28:217:2593":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"17:12513:19374":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:10637:16117":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"30:1148:20345":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"2:9627:8196":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:40381:26531":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9459:20561":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"21:7116:2229":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"21:10215:32769":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:3722:2441":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:43871:2444":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:8192:2737":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:7834:2711":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"2:42428:8196":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:12149:2889":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"6:7633:13110":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:42920:27176":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:3797:14915":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:3147:23235":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:1570:10259":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:3350:2357":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"22:7:1857":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"2:48087:8155":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:10269:2714":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:47478:3009":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"20:32:1834":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"21:15152:2447":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"17:14076:20169":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"21:6755:1861":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"1:11493:2773":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:1549:2723":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:589:2553":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:44372:8755":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:534:2532":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:8713:15958":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6682:9239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:8882:32769":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:9494:32769":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"11:772:2583":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:4614:20589":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:12014:1478":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:10924:23793":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"21:10599:2314":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"21:7448:2235":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"5:35:2629":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:2841:8564":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"1:1579:2600":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:12415:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"6:1734:10274":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3907:2786":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:563:9365":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:40659:2324":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:7513:15860":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"30:1190:20349":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"2:40883:8542":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"21:10647:2312":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"17:1075:16020":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"21:4496:2365":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"21:6948:2233":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"21:15251:32769":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"17:10494:16082":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"1:8169:2299":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"21:10948:2320":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"5:6468:2380":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:40845:26528":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:5609:2935":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"11:122:31066":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:13487:20131":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:20959:27314":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"29:17:1849":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:4824:12909":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"21:7359:2232":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"16:7474:15857":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:43685:8272":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"21:14688:32769":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:12711:19386":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"21:15309:2531":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"21:13502:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"17:10726:16167":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:5028:26403":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:7365:14418":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"11:2351:2581":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"2:20974:27314":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:8926:15964":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"11:2479:31073":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:7694:15871":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:638:2559":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:2833:2395":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"21:14475:32769":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"5:1466:2582":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:22954:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"21:10387:32769":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:4595:12888":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"20:82:2180":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"16:4053:15075":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:2972:29609":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:45611:3033":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:4847:12912":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"27:470:20326":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"21:7763:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:10397:16105":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:2219:2419":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:43900:8255":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:10738:8243":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:2178:16053":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:40433:8551":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"31:120:1903":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"21:7622:2248":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"5:1413:2356":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:6226:2935":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"21:7141:32769":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:22128:26980":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:1596:10262":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:14213:2385":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"30:949:20235":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"2:21573:2989":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:42414:8188":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"21:15303:20272":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"1:5616:2936":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"30:1493:34008":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"1:8216:2763":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:5285:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:6071:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11761:15997":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"31:136:1900":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"4:0:2043":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10575:16112":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:22266:26903":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:6159:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:14145:20177":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"16:5648:15793":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"6:4860:12914":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"21:8460:2250":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"2:22888:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:6929:15846":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:327:2237":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"2:9629:214":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:9404:2300":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"1:1590:2602":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:4005:2791":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"20:68:1839":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:45856:3000":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5816:31195":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:11894:8747":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:14221:20181":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"27:124:20311":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"1:12021:801":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:4806:15516":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:30321:8313":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:3949:2723":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"1:12015:1510":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5111:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:44547:235":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"21:8387:2245":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"17:9564:15975":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"30:1428:20216":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"2:2888:8588":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"6:4401:12867":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:7379:32769":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:10974:32769":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"1:11174:2718":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:897:2380":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:43635:8238":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:9372:15972":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"14:40:18863":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"21:9453:2323":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"17:13667:20138":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:7276:32769":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:907:2584":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"21:7474:32769":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"17:11951:18864":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:46710:3054":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:759:2582":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4523:12879":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"1:8870:2938":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:784:2313":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:853:2580":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"11:1850:2380":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:40465:2315":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:39604:21068":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"20:143:20254":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"16:7462:15856":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"7:0:1662":{"crate_id":7,"path":["unwind"],"kind":"module"},"17:11272:16216":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:5976:2920":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:2501:2435":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:14340:2387":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"1:4883:2850":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"20:131:1856":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"11:1562:14780":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:4616:20591":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"1:3307:2742":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"2:41792:213":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:13914:20155":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:400:15954":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7792:15877":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:2969:14890":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"21:11252:2325":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"5:3185:30161":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"21:12294:2243":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"2:44555:215":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"21:1089:2277":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"21:7977:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:7668:13115":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13851:20149":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:913:2585":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"21:338:2238":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"1:3647:2770":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"11:680:2580":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:5477:2898":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"16:7597:31410":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:9701:15978":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8775:2902":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:10278:16054":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:13101:19411":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:5419:15788":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:10126:16042":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"1:9088:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"21:11069:2321":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"1:12022:798":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"21:13659:2357":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"1:922:2587":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:11535:15987":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:10752:8241":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:9838:155":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"21:13207:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"16:5830:15802":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:8952:24396":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"21:8781:2264":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"2:45807:3046":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40048:8374":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"11:703:2586":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:14522:20201":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"21:4037:2256":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"17:13890:20152":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:9271:27586":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"30:1439:20217":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"1:11589:14820":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:2574:14874":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"5:3802:2584":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:7624:2397":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:12959:19401":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:21888:2975":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:6259:8552":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:12859:2256":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:8179:2320":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:32075:2906":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:11639:15992":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:11317:22884":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:4446:2825":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:2359:14865":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"11:2260:2594":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"21:12928:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"5:2692:29673":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:14127:2382":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"6:6107:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:13280:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"2:9416:8186":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"17:10962:16126":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:5408:2897":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"30:1010:20236":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"17:13778:16022":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:12945:19400":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:44598:3115":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"6:1674:10268":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"16:3830:14924":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:39:2199":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:8993:26398":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:46916:3014":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:5955:13568":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:261:29677":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"6:6128:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:1639:10265":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"16:6268:31566":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3038:136":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"5:5138:2920":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"27:371:2935":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"17:9650:15977":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:11430:20551":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9102:15942":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:3262:2749":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"13:226:31133":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:39190:8180":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"21:13994:20258":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:40334:8550":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:13676:20139":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:918:2586":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"11:2394:2584":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:11137:16181":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5712:15797":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44391:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:43505:8237":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"21:6186:1855":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"17:12172:18878":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9574:32266":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"21:7489:162":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"16:6901:15844":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"21:5669:2359":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"31:102:1902":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"5:1494:2586":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10616:16115":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:10060:28488":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:13710:20141":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:11155:8755":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:11886:18861":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:6156:15811":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:4283:8338":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"21:8167:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:7041:31507":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"17:13148:19414":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"21:8417:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:5328:29677":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"16:6456:15827":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"16:8050:15881":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"7:78:14631":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:21463:2983":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"20:92:2714":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"29:27:1848":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"21:12997:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"2:45655:3034":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:331:2531":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"2:41655:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"16:2472:14870":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"5:1013:29677":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:41800:234":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:2582:23991":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:1986:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:12208:18881":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"21:12442:2342":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:11103:32769":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"9:426:14655":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"21:13363:2349":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"27:11:33963":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:2845:2969":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"21:9218:32769":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:4362:8347":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"17:14042:20166":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"16:7736:15874":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:22:734":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:5866:15803":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"5:1444:2581":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:41893:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:2012:16059":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"30:1052:20355":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"16:8195:15889":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13838:20148":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"21:7826:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:7391:15854":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:8455:2884":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"30:1261:20349":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"1:6139:24003":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:46056:3041":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:7479:8208":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"21:2763:924":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"foreign_type"},"2:13028:150":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:41634:2769":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"11:1525:14778":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"16:6893:31515":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:2909:8592":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:6792:15840":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:32129:8347":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"30:1482:20232":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"1:1058:2594":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"16:8167:15887":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:5088:15582":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13135:19413":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9003:15967":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:40072:8377":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11192:23072":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:8097:15883":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:20946:8392":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:4440:12870":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"31:68:1898":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"2:4211:8209":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:30919:8392":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:21325:8615":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"1:4941:2860":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"6:6136:30930":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"11:822:2588":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"21:11500:32769":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"21:6733:32377":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"21:12810:2337":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"2:21190:27098":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"14:31:14787":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:12830:19394":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:40213:2676":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:2303:14781":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"5:7453:2671":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:2866:8587":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:3255:8335":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"6:1507:10252":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"11:101:31074":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"27:187:20317":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"30:1451:8251":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"21:14858:2439":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"21:9338:2280":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"6:6819:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:1635:636":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:1496:10250":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:1564:2380":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"19:0:1100":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:10588:16113":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:12123:18875":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6531:15832":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:42166:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:8271:2814":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:13739:20143":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:1140:30142":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:6376:15822":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:14083:20170":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"0:56:1139":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"2:39334:222":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"31:125:1904":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:14049:2580":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"9:237:2883":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:5948:2935":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:9912:16008":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10771:16144":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:6718:2855":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:4436:2541":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:12934:19399":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2788:14883":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:43603:2736":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"21:5206:1863":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"17:13174:19416":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:14163:20179":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4628:12892":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"21:15037:2443":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"11:483:152":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:261:32255":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:11000:16133":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:7027:26562":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4584:12887":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"18:0:2053":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:4647:12893":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:9350:15939":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:43617:2737":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:2361:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11910:18862":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:11048:16197":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:727:20238":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:40363:2304":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:42912:8401":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:9013:15852":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"21:7441:2236":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"27:127:20312":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"21:12094:2241":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"2:7985:2608":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:8253:2767":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"30:1072:20344":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"1:6621:241":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:4602:2790":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4603:12889":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4535:12881":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:7992:8545":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:4613:15443":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:8530:2253":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"21:5250:20269":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"1:8211:2771":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"21:8350:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:6120:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:39292:220":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"30:901:20346":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"1:8957:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:40171:2675":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"21:15225:2320":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"6:4449:12871":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:9867:16005":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:10318:20566":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"21:14082:2381":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"2:3034:2396":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"27:140:20313":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"1:12029:1615":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"17:14401:20192":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"21:6199:1854":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"17:13202:19418":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:13575:20135":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:1895:2665":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"21:2760:1841":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"17:10366:16065":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"20:27:2714":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"6:5885:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"5:7378:2578":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:2526:14872":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:4428:29717":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"6:542:9362":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"11:1842:2356":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:11719:15995":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:7894:23233":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"6:4884:12917":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:7078:8537":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"5:7423:2673":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7782:15876":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"30:1002:20235":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"2:44181:8290":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"21:7311:2230":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"16:7360:31559":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:43587:8260":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:48034:8152":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"21:8264:2244":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"21:14628:32769":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"2:3249:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:9276:28191":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:5730:2923":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:5548:2901":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"1:5802:2568":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:42088:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:8485:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:5322:15768":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:41579:2776":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:4288:8339":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"24:9:20256":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"21:7208:32769":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14040:2356":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"16:7054:31511":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:44001:8283":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:22441:2781":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"6:5859:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"1:3463:2456":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"21:8524:212":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"21:15552:32789":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:15519:32371":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"1:8186:2736":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:2551:265":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5910:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:43413:8230":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:42949:2883":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:21449:2982":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:10747:2708":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"21:5258:1002":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"21:14389:32769":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"21:6900:2224":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"1:6047:23987":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:4279:229":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:5829:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5891:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4578:12886":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:5545:2899":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:7622:13109":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:32223:8565":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"21:7251:2226":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"2:10558:8231":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:14448:20195":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:3183:2751":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"11:1882:2602":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"5:3671:29677":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12024:18868":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"3:234:234":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:6012:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:8260:2822":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"11:298:31059":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:12012:1120":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:44249:8275":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:40395:2225":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:30891:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:5622:2306":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"11:1846:2581":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:11013:23976":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:6514:29677":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"11:868:2592":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:42712:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"18:766:20232":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:44195:8291":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"6:6898:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:9830:151":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"21:4345:33443":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"21:14652:2436":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"2:4:1083":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:1840:2650":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4854:12913":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:693:2581":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:5634:15792":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:12016:1597":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"17:9051:15938":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:932:2589":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:6696:14806":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"30:966:20235":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"14:7:14787":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:501:9358":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:12025:796":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:5121:15591":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"11:1010:2594":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:5939:15805":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:40011:8337":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:7252:2380":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:7542:2398":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:9823:16003":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:43839:8271":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:21311:2988":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:11235:16215":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:736:20231":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:629:29607":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:13567:20134":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"27:136:2935":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:1923:8182":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:12028:1614":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:14134:20176":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4428:12868":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:42675:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"17:10507:16080":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:10929:16129":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:43525:8236":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"9:0:2045":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12698:19385":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:42752:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:46156:3001":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:574:9367":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:7371:14419":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"21:12703:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"5:7323:2581":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"30:1582:33990":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"2:43152:8728":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:22415:2780":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:23:2197":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"6:1514:10253":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:12621:19380":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"21:10778:2311":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"21:9324:2278":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"30:1114:2356":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"21:9873:2224":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"1:9143:26417":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:9896:16007":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12252:18884":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"10:36:31056":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:5588:15790":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:47790:3070":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:7613:15867":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:13934:32769":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"2:12189:8253":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"5:4034:29677":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:42959:26984":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4666:12894":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:5602:228":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"11:841:2590":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:7618:2714":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"21:4478:20262":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"21:6552:32877":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"2:41723:2580":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:40005:2555":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:10135:23799":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"21:15118:32769":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"16:2450:14869":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:7002:22478":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:12019:693":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"21:13793:32769":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"21:11938:2240":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"17:11586:15990":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"30:1098:20348":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"17:12293:18887":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:10340:16058":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:2568:2437":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10265:16055":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:13546:20132":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:44428:8756":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"16:3032:14891":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5384:15786":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:14013:20163":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"21:6438:20273":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"1:3406:2445":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:44590:3114":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6467:15828":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"11:817:2585":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:45908:3012":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:9711:32257":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8938:2925":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"21:13677:2359":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:2935:8598":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:7604:13106":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:6915:272":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"5:7331:2581":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:3077:2628":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"21:10524:32769":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"29:0:1847":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:21397:2978":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:1642:8527":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"9:507:14656":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"30:1564:20236":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:8825:15961":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:12785:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:3709:2774":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"18:531:20244":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:42246:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"18:660:20233":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:43721:8242":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:7571:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:2216:2691":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:5743:15799":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:4546:2843":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:12154:18877":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:646:2561":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:12008:1002":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:14324:20187":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"6:6114:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4610:12890":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:48049:8153":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:5963:15806":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:12194:8249":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"25:9:1844":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"21:9785:32769":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"16:6687:15837":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:12744:32802":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"17:13966:20158":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:8765:15959":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"21:15377:33804":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"16:4417:15391":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"30:1574:20237":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:3888:14958":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:12685:19384":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:9089:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6332:15818":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"11:2238:2593":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"21:14058:2581":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"5:1516:218":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:14126:20175":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:2776:245":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"21:11529:32785":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:22756:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"17:11815:16228":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"2:46254:3019":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"18:690:20236":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:22342:26946":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11290:2909":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:11906:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"1:9447:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"1:4612:20587":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:12888:19397":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"6:475:9354":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"18:681:20235":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13451:20130":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:12990:3116":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:46980:3069":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:12422:19370":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"21:11852:32769":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"6:1664:10267":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"5:7490:251":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"5:3219:30153":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:8794:15960":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"18:652:2327":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:5997:8958":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"11:731:2587":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:8851:2940":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:10165:16044":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:2037:2441":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:46792:3002":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:14024:20164":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:1428:2580":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:3957:2788":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:7067:31199":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:48126:8156":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"26:53:33951":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"30:1182:20348":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"5:678:258":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:7692:14607":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:10698:16145":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:3150:23246":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:2872:8586":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:22234:26902":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:46870:3008":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:42647:27190":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"21:10917:32769":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"30:936:20349":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"2:49950:2996":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"21:8582:32769":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"15:327:14816":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"27:499:20329":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"1:1983:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:4764:12902":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:12765:19390":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:2786:253":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:6041:15810":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"11:796:2584":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"16:6600:15836":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:13476:2347":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"1:12009:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:8309:2855":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:10478:16104":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"21:13311:2348":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"18:609:20358":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:40859:2360":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:1632:10264":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"21:6380:20275":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"12:0:2048":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:42730:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:43167:27021":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:12214:8248":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"18:96:20216":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:2321:14863":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:6788:2974":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:11547:15988":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:12658:19382":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:40062:8376":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"15:0:2050":{"crate_id":15,"path":["addr2line"],"kind":"module"},"21:6169:1853":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"17:13010:19405":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:7902:2745":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:14033:2581":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"5:6984:29707":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"18:599:20357":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:9621:8188":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:7342:31578":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:1585:2601":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"17:10214:16057":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:8541:2888":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:9107:2718":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"6:4955:12925":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"21:14024:2356":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"1:4677:2852":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:42285:2921":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"21:9978:32769":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"2:20989:27421":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"11:2074:2594":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"5:3570:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:11195:2324":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"5:6817:8318":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:4395:2723":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"6:4480:12874":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:6081:8558":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:11284:24388":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:4527:15429":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:5760:15800":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:10077:23991":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:505:2527":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"21:13528:32731":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"21:12169:2227":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"17:14269:20182":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:622:2557":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"21:6569:32364":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"17:9972:16017":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:10742:26475":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"21:14899:32769":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"17:13632:20137":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"13:0:2042":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:42967:26985":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:11352:2315":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:45677:3039":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10685:16123":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10316:16060":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:7318:15853":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6401:15824":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:30287:2613":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:4774:15508":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:10996:2322":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"5:1259:2593":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13792:20144":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:358:2550":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:8661:2870":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:6658:9405":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"21:12951:2353":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"16:3655:14898":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6545:15833":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:40635:2320":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:1067:2595":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:8106:32769":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:4949:15539":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"18:699:20237":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:10064:2298":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"1:9073:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"21:14249:32769":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"2:2547:266":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:4808:12907":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:10092:27487":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:12911:19398":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"2:47930:8144":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"16:6425:15826":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:21542:2714":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:40303:2625":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13228:19420":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:7556:14579":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:45701:2999":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"16:6386:15823":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:8807:2904":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:2223:2424":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"11:1876:2601":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:7873:2239":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"1:6520:2930":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"21:9387:32769":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"1:10820:23731":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:40874:2357":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:45723:3005":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:7692:2564":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:4019:2793":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"30:958:20353":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"2:42407:8187":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"21:11393:32769":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"1:0:1502":{"crate_id":1,"path":["std"],"kind":"module"},"9:357:14669":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:1573:2599":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:8837:2943":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:5140:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:7554:15864":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"17:9455:32248":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"11:2461:31071":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:13668:2358":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"2:11270:8233":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"1:12026:1616":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:22408:27199":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"21:8817:32769":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:2933:14889":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10097:16013":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:9592:2302":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"21:11474:2329":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"24:190:2223":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"16:2596:14875":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:41592:2767":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"16:4745:15503":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:6059:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"27:368:228":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"21:15182:2450":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"21:14110:32769":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"5:3173:2356":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:42928:8400":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:8199:2444":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:8895:15963":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"21:4601:2269":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"1:6873:23995":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5033:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:12807:2253":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"31:100:1901":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"17:11971:18865":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11365:24145":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"17:13113:19412":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:8115:15884":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"21:8621:32769":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"21:6270:2333":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"30:1084:20346":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"11:2058:2593":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:10410:16072":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:10427:2356":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"11:1092:14776":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"30:1467:34009":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"1:10772:2712":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:5982:15807":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"21:7801:2251":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"21:8543:2254":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"6:527:9360":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:6837:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:4775:2806":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:424:1836":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"17:10240:16023":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12750:19389":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"27:434:20330":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"21:13392:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"6:5004:12930":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"21:14599:2435":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"16:4497:15423":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:2384:2700":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5085:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"2:40246:2690":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:14156:20178":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"28:30:20332":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"2:44117:8288":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"21:13719:212":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"21:7178:2231":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"17:11788:16227":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:7988:2611":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"11:427:31083":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:4352:8346":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:4407:8348":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"21:10353:2319":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"11:1635:31079":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:40126:8372":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6243:15814":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:7768:15875":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:7240:2605":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:5964:228":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"5:3206:2601":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:21140:2714":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"1:2930:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:22290:2778":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"30:1475:20239":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"16:7862:15879":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:4947:12924":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8148:2393":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"6:6711:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:641:2560":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:39417:8322":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:7492:8547":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:6083:14833":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:1558:10258":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13758:20127":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"1:9126:2968":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:4680:2825":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:7523:15861":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:10729:2310":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"5:3180:2600":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"9:450:14653":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"7:31:14624":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:40343:2302":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"5:4988:2723":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9933:16027":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:3315:14895":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"14:202:8294":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"21:9719:32769":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"16:6560:31520":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:5974:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:3596:2580":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:11347:20754":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:2394:2705":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"21:5245:20270":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"21:8736:2263":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:15507:32375":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"21:10672:32769":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:5363:15785":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:10451:2580":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:22789:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:10519:8244":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:7680:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4344:15342":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:21796:2994":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:11954:8746":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:9000:24403":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"1:8205:2772":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"21:8634:227":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"2:42207:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:13083:2607":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"21:7066:2227":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"17:14308:20185":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:9175:24694":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:10075:20569":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:949:2591":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7090:31514":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"28:42:2581":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"2:47874:3055":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:3171:219":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:6889:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:21566:2714":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:42421:8195":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:5049:15567":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"30:973:20236":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"17:11111:16183":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:6123:3116":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:10056:2644":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:12023:799":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"21:8518:2252":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"16:3461:14896":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:10197:16071":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:3764:14906":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"11:2165:14771":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:4830:12910":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:2604:2738":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"21:12119:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:489:9356":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:1546:10257":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:21364:2984":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"5:2133:2527":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:12098:18873":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12373:19369":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:9852:16004":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"21:5868:2723":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"17:13897:20153":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"5:2463:28558":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"30:1169:20347":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"16:6485:15829":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:9454:2711":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"1:9083:243":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:40481:2317":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"5:1304:2596":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"30:1240:20347":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"16:5798:15801":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:10227:2908":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:44360:8742":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"11:344:31076":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"21:9658:32769":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"1:12031:850":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"5:7437:26970":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11573:15989":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8432:2883":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:14090:20171":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:4862:15524":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"5:3737:2617":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:2836:8176":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:9005:24386":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:2880:2972":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12043:18869":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"16:2548:14873":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:47588:3043":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:11407:15982":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"18:538:20245":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5897:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:9959:16018":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"27:491:20328":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"21:15014:2442":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"5:3214:2599":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:4516:12878":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13055:19408":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"16:7492:15858":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"5:7406:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"30:144:20352":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"1:558:2534":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:1697:10271":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:44653:27198":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"21:15294:2458":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"1:12013:342":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:2487:31067":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11991:18866":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"27:154:2941":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:1761:8625":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:13906:20154":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:9254:2650":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:23053:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"27:441:2940":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"21:11817:2334":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"21:12319:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:3274:27414":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"21:15371:2281":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"6:6169:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"21:6968:32769":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:7331:32769":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:2644:14877":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:15204:2452":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"6:62:8984":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"30:0:2053":{"crate_id":30,"path":["memchr"],"kind":"module"},"2:12772:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"30:1027:20357":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"1:7745:23433":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"28:60:2380":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"2:2876:2970":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"5:7515:8296":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:8978:15966":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:863:2581":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:40199:2674":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:7294:218":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10512:2751":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:40119:8371":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:4128:2816":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4506:12877":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:7572:32759":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:3289:8178":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"17:14478:20198":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:6204:1852":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"17:1184:16028":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:1682:10269":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:4463:8350":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:12007:18867":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:2787:252":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:9886:16006":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"18:614:20359":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:2855:8585":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"21:12478:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"21:15434:32369":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:13516:33810":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"21:57:1864":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"21:9814:2224":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"1:8530:2887":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:5757:2924":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:14378:20191":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12452:19372":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:46108:3053":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"21:12885:32769":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"17:12876:19396":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"24:15:20257":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"16:8072:15882":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:8514:2886":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:5392:2896":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:8029:27584":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:5941:13567":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9086:15788":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"21:14004:2580":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"17:9242:15970":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:12979:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"23:0:2187":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"16:6346:15819":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"21:9618:32769":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"6:4998:12929":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:9445:15973":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:11038:32769":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"2:46422:27071":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8287:2824":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"31:0:1896":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"2:20987:27423":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:7886:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"21:14964:32769":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"21:7086:32769":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:12997:19404":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:47996:8150":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:10440:16108":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"21:13589:32743":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"14:165:14788":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"6:4543:12882":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:9631:8193":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"6:6961:14049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46453:27024":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:5068:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:8970:23484":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"14:160:14787":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"11:2467:26595":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:6753:1859":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"1:2409:1868":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:12203:8251":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:13162:19415":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:10760:23761":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"5:2962:29857":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13085:19410":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:46476:27076":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:4968:12926":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"21:15269:2455":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"2:30415:26932":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"21:15465:32358":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"6:4755:12901":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:3913:2785":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:10558:2537":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"5:4196:2723":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"17:13215:19419":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:6265:27193":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:12280:18886":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:42687:27171":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"31:38:34023":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"21:9541:32769":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"24:135:2222":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"17:12225:18882":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"16:7015:15850":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:4015:2792":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:13981:20160":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"21:6754:1862":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":27}