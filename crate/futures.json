{"root":"0:0:1747","crate_version":"0.3.23","includes_private":false,"index":{"29:47:1666":{"id":"29:47:1666","crate_id":29,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:48:53980"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3807:225":{"id":"2:3807:225","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3808:181","2:3809:3586","2:3810:687","2:3811:370"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3812:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8844:157":{"id":"2:8844:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8845:2762","2:8846:924","2:8847:3045","2:8850:3046","2:8851:496","2:8853:3047","2:8856:3048","2:8857:3049","2:8858:3050","2:8859:2288","2:8861:2536","2:8863:3051","2:8864:3052","2:8866:843","2:8869:2529","2:8876:2515","2:8878:2516","2:8881:2514","2:8882:2537","2:8883:2526","2:8885:2527","2:8887:3053","2:8890:1311","2:8891:2304","2:8892:2525","2:8896:2523","2:8899:2521","2:8900:2531","2:8901:2541","2:8903:2532","2:8904:2276","2:8906:3054","2:8909:3055","2:8911:3056","2:8921:3057","2:8936:3058","2:8938:3059","2:8942:3060","2:8951:2520","2:8954:3061","2:8956:3062","2:8959:277","2:8966:295","2:8973:3063","2:8980:3064","2:8989:3065","2:8999:1016","2:9006:3066","2:9013:2220","2:9014:3067","2:9015:3068","2:9027:3069","2:9034:3070","2:9046:3071","2:9053:3072","2:9054:2518","2:9059:3073","2:9062:3074","2:9065:2519","2:9066:3075","2:9068:3076","2:9070:3077","2:9072:416","2:9075:3078","2:9078:999","2:9081:3079","2:9084:605","2:9087:3080","2:9090:909","2:9092:828","2:9094:794","2:9096:714","2:9098:697","2:9100:3081","2:9101:3082","2:9109:3083"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:9738:1671","glob":false}},"2:13686:60841":{"id":"2:13686:60841","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:39:1665","glob":false}},"2:8652:2271":{"id":"2:8652:2271","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8654:37656","2:8656:6250","2:8657:58462"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13799:56211":{"id":"2:13799:56211","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:4468:1657":{"id":"21:4468:1657","crate_id":21,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:4469:924","21:4470:769","21:4471:843","21:4474:2514","21:4475:2515","21:4478:2516","21:4482:2517","21:4485:2276","21:4487:2518","21:4492:433","21:4493:496","21:4494:2519","21:4495:2520","21:4499:295","21:4502:277","21:4505:2521","21:4506:2522","21:4508:2523","21:4511:2524","21:4515:2525","21:4520:2526","21:4523:2527","21:4526:2528","21:4528:2529","21:4531:2530","21:4535:2304","21:4536:1311","21:4537:2531","21:4538:2532","21:4539:2533","21:4540:1945","21:4542:2534","21:4544:2259","21:4545:2535","21:4546:2536","21:4548:2288","21:4550:2537","21:4551:2538","21:4552:2539","21:4553:2540","21:4555:2303","21:4557:2541","21:4559:2542","21:4561:2543","21:4563:2544","21:4564:2545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:195:1719","glob":false}},"2:13679:60838":{"id":"2:13679:60838","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13706:2294":{"id":"2:13706:2294","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49967:2320","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3501:3575":{"id":"2:3501:3575","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3503:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3157:135":{"id":"2:3157:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3159:682"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13715:56366":{"id":"2:13715:56366","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15744:1874","self::pattern":"2:13302:4703"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:5885:1658":{"id":"21:5885:1658","crate_id":21,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:5886:2238","21:5888:2693","21:5891:2239","21:5894:293","21:5897:2696","21:5900:2697","21:5902:2698","21:5904:2605","21:5905:3224","21:5906:3060","21:5909:3229","21:5912:3230","21:5915:3233","21:5919:3054","21:5921:3228","21:5922:3225","21:5925:3226","21:5929:2389","21:5930:3059","21:5934:3227","21:5935:3231","21:5936:3232","21:5937:3235","21:5938:3234"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryStream","id":"20:127:1656","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3446:3564":{"id":"2:3446:3564","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3448:267"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10540:119":{"id":"2:10540:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10541:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:142:1032":{"id":"0:142:1032","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144","0:147","0:150","0:154","0:157","0:161","0:164","0:167","0:171","0:174","0:177","0:181","0:184","0:188","0:191","0:194","0:197","0:201","0:204","0:207","0:210"],"is_stripped":false}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:17:1660","glob":false}},"2:23357:14186":{"id":"2:23357:14186","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23358:59859","2:23359:59860","2:23360:59861"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23350:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5520:4186":{"id":"1:5520:4186","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5521:54266","1:5522:54579"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:96:1655","glob":false}},"2:13699:56348":{"id":"2:13699:56348","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15750:1879"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13703:2341":{"id":"2:13703:2341","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49699:2950","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:42:1667","glob":false}},"2:13772:60855":{"id":"2:13772:60855","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3359:220":{"id":"2:3359:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9504:4315":{"id":"2:9504:4315","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:12742:5170":{"id":"2:12742:5170","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12743:2762","2:12744:59369"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13800:60861":{"id":"2:13800:60861","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15744:1874"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50012:5012","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13802:4232":{"id":"2:13802:4232","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15744:1874"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50021:4233","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:127:1656","glob":false}},"5:6498:224":{"id":"5:6498:224","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1400"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13797:56209":{"id":"2:13797:56209","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:9721:1669":{"id":"21:9721:1669","crate_id":21,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9722:2288","21:9724:2295","21:9726:2296","21:9728:2297","21:9730:2299","21:9732:2300","21:9734:2303","21:9735:2304"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13708:30170":{"id":"2:13708:30170","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50005:5011","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13767:60852":{"id":"2:13767:60852","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13682:60840":{"id":"2:13682:60840","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15750:1879"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3415:3558":{"id":"2:3415:3558","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3417:181","2:3418:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13695:56329":{"id":"2:13695:56329","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10550:189":{"id":"2:10550:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10551:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3509:3577":{"id":"2:3509:3577","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3511:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:190:1718","glob":false}},"5:6168:61498":{"id":"5:6168:61498","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13722:6016":{"id":"2:13722:6016","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47750:176","self::pattern":"2:13302:4703","prim@char":"1:15744:1874"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13680:60839":{"id":"2:13680:60839","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13759:60849":{"id":"2:13759:60849","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13302:4703","prim@char":"1:15744:1874","`DoubleEndedIterator`":"2:8687:120","str::rmatch_indices":"1:15750:1879"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49863:5003","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13747:60846":{"id":"2:13747:60846","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10533:109":{"id":"2:10533:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10534:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:8154:1683","glob":false}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:10420:1678","glob":false}},"2:3489:3573":{"id":"2:3489:3573","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:181","2:3492:1236"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:27:1983":{"id":"20:27:1983","crate_id":20,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:28:2232"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14027:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23108:4835":{"id":"2:23108:4835","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23109:60118","2:23110:1230","2:23111:1231","2:23112:60119","2:23113:60120","2:23114:60121","2:23115:60122","2:23116:60123","2:23117:60124","2:23118:60125"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23072:4834":{"id":"2:23072:4834","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23073:4758","2:23074:60118","2:23075:1230","2:23076:1231","2:23077:41107","2:23078:60163","2:23079:60164","2:23080:60165","2:23081:60166","2:23082:60167","2:23083:60119","2:23084:60120","2:23085:60121","2:23086:60122","2:23087:60123","2:23088:60124","2:23089:60125"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:9756:1668","glob":false}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:14027:138","glob":false}},"2:10552:4639":{"id":"2:10552:4639","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10553:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13685:54716":{"id":"2:13685:54716","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12766:5134"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3388:2268":{"id":"2:3388:2268","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:42:1667":{"id":"29:42:1667","crate_id":29,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:43:53988","29:44:53989","29:45:52852","29:46:52853"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:988:1653","glob":false}},"2:8639:136":{"id":"2:8639:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8641:685"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10548:4638":{"id":"2:10548:4638","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10549:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:17:1660","glob":false}},"5:6183:61500":{"id":"5:6183:61500","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"25:17:1660":{"id":"25:17:1660","crate_id":25,"name":"Sink","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:19:127","25:20:14430","25:21:52851","25:22:52852","25:23:52853"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6344:4179":{"id":"1:6344:4179","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6345:58548","1:6346:58549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8606:4669":{"id":"2:8606:4669","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8608:3077"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13700:56349":{"id":"2:13700:56349","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15750:1879"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:8152:919","glob":false}},"2:13776:60857":{"id":"2:13776:60857","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15744:1874","self::pattern":"2:13302:4703"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3603:132":{"id":"2:3603:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3605:181","2:3606:379"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7582:4361":{"id":"1:7582:4361","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7583:58869"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:116:1556":{"id":"0:116:1556","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:115:1712","`LocalPool`":"31:190:1718"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:118","0:121","0:124","0:127","0:130","0:133","0:136","0:139"],"is_stripped":false}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:9795:1682","glob":false}},"2:3597:130":{"id":"2:3597:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3599:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3600:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4771:4198":{"id":"1:4771:4198","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4772:2184","1:4773:58452"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9127:2766":{"id":"2:9127:2766","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23208:4219":{"id":"2:23208:4219","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23198:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6648:4168":{"id":"1:6648:4168","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6649:58372"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3355:218":{"id":"2:3355:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23405:4782":{"id":"2:23405:4782","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24042:4759","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23396:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3484:3571":{"id":"2:3484:3571","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3486:181","2:3487:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3495:3574":{"id":"2:3495:3574","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3497:181","2:3498:1239"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9131:4568":{"id":"2:9131:4568","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8167:4569","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:9751:1670","glob":false}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:9751:1670","glob":false}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:988:1653","glob":false}},"2:13794:4898":{"id":"2:13794:4898","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13241:4337","`FromStr`":"2:13241:4337"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47875:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13241:4337","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13241:4337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3442:3561":{"id":"2:3442:3561","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3443:181","2:3444:915"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:10421:1677","glob":false}},"2:3505:3576":{"id":"2:3505:3576","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3507:355"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3818:3586":{"id":"2:3818:3586","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3820:55393"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:169:1672","glob":false}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:9738:1671","glob":false}},"2:4078:68":{"id":"2:4078:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4079:1432"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3420:3563":{"id":"2:3420:3563","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3422:181","2:3423:1358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:118:1713","glob":false}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:97:1679","glob":false}},"2:24042:4759":{"id":"2:24042:4759","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24043:4758"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24038:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:96:1655","glob":false}},"2:13676":{"id":"2:13676","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12755:1343","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13677:795","2:13678:56319","2:13679:60838","2:13680:60839","2:13682:60840","2:13685:54716","2:13686:60841","2:13687:305","2:13688:56330","2:13689:56326","2:13691:56327","2:13693:56328","2:13695:56329","2:13697:4303","2:13698:60842","2:13699:56348","2:13700:56349","2:13701:5030","2:13702:4732","2:13703:2341","2:13704:30185","2:13705:30175","2:13706:2294","2:13707:60843","2:13708:30170","2:13709:56364","2:13712:56365","2:13715:56366","2:13718:3063","2:13722:6016","2:13726:2303","2:13729:30052","2:13732:56358","2:13735:60844","2:13738:60845","2:13741:56360","2:13744:56362","2:13747:60846","2:13750:60847","2:13753:1959","2:13756:60848","2:13759:60849","2:13762:60850","2:13765:60851","2:13767:60852","2:13769:60853","2:13771:60854","2:13772:60855","2:13773:60856","2:13776:60857","2:13779:12702","2:13782:56367","2:13785:60858","2:13788:60859","2:13791:60860","2:13794:4898","2:13796:5177","2:13797:56209","2:13798:56210","2:13799:56211","2:13800:60861","2:13802:4232","2:13803:60862"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:8167:4569":{"id":"2:8167:4569","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8168:59543","2:8169:59544","2:8170:2540","2:8171:59540","2:8172:59545","2:8173:59542","2:8174:59541"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8602:4670":{"id":"2:8602:4670","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8604:3076"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13718:3063":{"id":"2:13718:3063","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15744:1874","self::pattern":"2:13302:4703","`None`":"2:47750:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13741:56360":{"id":"2:13741:56360","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15744:1874","self::pattern":"2:13302:4703","str::rsplitn":"1:15750:1879"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49817:4974","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23145:4760":{"id":"2:23145:4760","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23146:4758","2:23147:1250","2:23148:1275"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:42:1667","glob":false}},"2:4866:4833":{"id":"2:4866:4833","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4867:2762","2:4868:3088","2:4869:3046"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13738:60845":{"id":"2:13738:60845","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13302:4703","str::split":"1:15750:1879","prim@char":"1:15744:1874","str::split_terminator":"1:15750:1879"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49781:5000","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:43:1015","glob":false}},"2:13796:5177":{"id":"2:13796:5177","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:258:2038":{"id":"24:258:2038","crate_id":24,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["24:261:58433","24:262:579"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"2:13726:2303":{"id":"2:13726:2303","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:4703","prim@char":"1:15744:1874","str::split_whitespace":"1:15750:1879","str::rsplit":"1:15750:1879"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49713:2952","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3474:3569":{"id":"2:3474:3569","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3476:181","2:3477:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6574:4222":{"id":"1:6574:4222","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6575:56134","1:6576:57997"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:39:1665","glob":false}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1343","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:61497","5:6165:2953","5:6168:61498","5:6171:61499","5:6183:61500","5:6184:61501","5:6185:2123","5:6186:56207","5:6187:56208"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3726:3583":{"id":"2:3726:3583","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3728:60238","2:3729:60239","2:3730:56364"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:2900:183":{"id":"2:2900:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2902:605","2:2903:909"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:2156:1654","glob":false}},"2:8687:120":{"id":"2:8687:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8688:56035","2:8689:56036","2:8690:56037","2:8691:56038","2:8695:56039","2:8698:6016"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:166:1717","glob":false}},"2:3600:131":{"id":"2:3600:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3602:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3603:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:164:1716","glob":false}},"2:3086:2912":{"id":"2:3086:2912","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3085:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3154:149":{"id":"2:3154:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3156:58422"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:844:223":{"id":"5:844:223","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:5194","5:846:54701","5:847:54702"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3467:3572":{"id":"2:3467:3572","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:181","2:3469:954"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:8042:1381","glob":false}},"21:9738:1671":{"id":"21:9738:1671","crate_id":21,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9739:2237","21:9740:2233","21:9741:1962","21:9743:2306","21:9745:2307","21:9747:2293"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncWrite","id":"29:42:1667","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3436:3562":{"id":"2:3436:3562","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3438:181","2:3439:1105"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3231:115":{"id":"2:3231:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3232:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13785:60858":{"id":"2:13785:60858","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13302:4703","prim@char":"1:15744:1874"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13709:56364":{"id":"2:13709:56364","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13302:4703","prim@char":"1:15744:1874"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6650:4169":{"id":"1:6650:4169","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6651:54248"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6646:4166":{"id":"1:6646:4166","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6647:56180"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3454:3566":{"id":"2:3454:3566","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3456:895"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13701:5030":{"id":"2:13701:5030","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15744:1874"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49683:4994","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1680","glob":false}},"2:2936:177":{"id":"2:2936:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2937:416","2:2938:2220","2:2939:3067","2:2940:57864"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2905:124","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2946:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13744:56362":{"id":"2:13744:56362","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13302:4703","prim@char":"1:15744:1874","str::splitn":"1:15750:1879"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49835:4975","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:7997:1662":{"id":"21:7997:1662","crate_id":21,"name":"SinkExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:7999:2242","21:8004:2243","21:8008:2920","21:8011:2921","21:8013:2244","21:8014:2233","21:8015:2235","21:8017:2237","21:8018:2240","21:8019:2236","21:8020:2241","21:8023:2922","21:8025:2923","21:8027:2924","21:8028:2925","21:8029:2926","21:8030:2927"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sink","id":"25:17:1660","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10546:4637":{"id":"2:10546:4637","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10547:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5906:2134":{"id":"5:5906:2134","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:181","5:5909:433"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:9503:2640":{"id":"2:9503:2640","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13762:60850":{"id":"2:13762:60850","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15744:1874","str::match_indices":"1:15750:1879","self::pattern":"2:13302:4703","`DoubleEndedIterator`":"2:8687:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49881:5004","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3430:3559":{"id":"2:3430:3559","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:181","2:3433:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13241:4337":{"id":"2:13241:4337","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13242:126","2:13243:54583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4486:2332":{"id":"1:4486:2332","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4487:1962","1:4488:2306","1:4490:3885","1:4491:2237","1:4492:2307","1:4493:3886","1:4494:3887","1:4503:2532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:47:1666","glob":false}},"2:3890:3590":{"id":"2:3890:3590","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3148:75":{"id":"2:3148:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3150:306"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13689:56326":{"id":"2:13689:56326","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8643:151":{"id":"2:8643:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8644:2762","2:8645:2764","2:8646:770"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:9721:1669","glob":false}},"2:2867:104":{"id":"2:2867:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2868:409","2:2869:411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13712:56365":{"id":"2:13712:56365","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15744:1874","self::pattern":"2:13302:4703"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"29:39:1665":{"id":"29:39:1665","crate_id":29,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:40:53969","29:41:53970"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:14027:138","glob":false}},"2:13691:56327":{"id":"2:13691:56327","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47750:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3347:211":{"id":"2:3347:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10771:142":{"id":"2:10771:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10772:716","2:10774:56149"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13788:60859":{"id":"2:13788:60859","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13302:4703","prim@char":"1:15744:1874"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13771:60854":{"id":"2:13771:60854","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9124:2765":{"id":"2:9124:2765","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4504:2328":{"id":"1:4504:2328","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4505:2302","1:4506:38071","1:4507:58875","1:4508:4074"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3659:3581":{"id":"2:3659:3581","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3661:756"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3655:3580","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5582:4191":{"id":"1:5582:4191","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5583:54266"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3356:217":{"id":"2:3356:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6165:2953":{"id":"5:6165:2953","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3462:3567":{"id":"2:3462:3567","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3464:1106"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5910:2078":{"id":"5:5910:2078","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:181","5:5913:1675"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13704:30185":{"id":"2:13704:30185","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15750:1879"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49987:5009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:44:1650","glob":false}},"2:13702:4732":{"id":"2:13702:4732","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15744:1874"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49689:4995","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13798:56210":{"id":"2:13798:56210","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:9751:1670":{"id":"21:9751:1670","crate_id":21,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9752:2302","21:9753:4074"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncSeek","id":"29:47:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13312:4702":{"id":"2:13312:4702","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13314:4705","2:13315:59078","2:13316:59079","2:13317:59080","2:13318:59082","2:13319:59081","2:13320:59083"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2946:184":{"id":"2:2946:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2948:999","2:2949:828","2:2950:794","2:2951:714","2:2952:697"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5504:4184":{"id":"1:5504:4184","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5505:54181","1:5506:54183","1:5507:54182","1:5508:54184"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13782:56367":{"id":"2:13782:56367","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13302:4703","prim@char":"1:15744:1874"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13705:30175":{"id":"2:13705:30175","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15750:1879"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49996:5010","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3594:2269":{"id":"2:3594:2269","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3595:579"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10554:4640":{"id":"2:10554:4640","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10555:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:4468:1657","glob":false}},"2:10542:4635":{"id":"2:10542:4635","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10543:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9130:4216":{"id":"1:9130:4216","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9131:58843","1:9132:58844","1:9133:58845","1:9134:58846","1:9135:58847","1:9136:37658","1:9137:58842"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13803:60862":{"id":"2:13803:60862","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15744:1874"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50030:5013","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2842:97":{"id":"2:2842:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2844:1944"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13753:1959":{"id":"2:13753:1959","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15744:1874","str::matches":"1:15750:1879","self::pattern":"2:13302:4703","`DoubleEndedIterator`":"2:8687:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49917:5006","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13779:12702":{"id":"2:13779:12702","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13302:4703","prim@char":"1:15744:1874"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3655:3580":{"id":"2:3655:3580","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3657:181","2:3658:755"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13756:60848":{"id":"2:13756:60848","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15750:1879","prim@char":"1:15744:1874","`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:4703"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49935:5007","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5560:4183":{"id":"1:5560:4183","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5561:54720","1:5562:54721","1:5563:54722","1:5564:54723"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10816:4243":{"id":"2:10816:4243","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10817:146","2:10818:31491","2:10819:56241"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13769:60853":{"id":"2:13769:60853","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1747":{"id":"0:0:1747","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::future":"21:168:694","crate::io":"21:8154:1683","crate::stream":"21:2156:1654","crate::sink":"21:7282:1661","crate::channel":"27:0:1680","crate::executor":"0:116:1556"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:116:1556","0:142:1032","0:4","0:7","0:11","0:14","0:18","0:21","0:25","0:28","0:31","0:34","0:38","0:41","0:44","0:47","0:51","0:54","0:57","0:60","0:63","0:66","0:69","0:73","0:76","0:79","0:80","0:82","0:85","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113"],"is_stripped":false}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:206:1715","glob":false}},"5:6187:56208":{"id":"5:6187:56208","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15750:1879"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11175:214":{"id":"2:11175:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11177:181","2:11178:56326","2:11179:56327","2:11180:56328","2:11181:56329","2:11182:755","2:11183:756"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11166:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:9756:1668","glob":false}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:687:1652","glob":false}},"1:6224:4163":{"id":"1:6224:4163","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6225:4484","1:6226:4485","1:6227:54596","1:6228:54597","1:6230:54601","1:6232:54598","1:6233:54599","1:6235:54600"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6186:56207":{"id":"5:6186:56207","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15750:1879"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:9721:1669","glob":false}},"2:3352:2267":{"id":"2:3352:2267","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5512:4185":{"id":"1:5512:4185","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5513:54266","1:5514:56017","1:5515:56018"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:5885:1658","glob":false}},"2:10781:146":{"id":"2:10781:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10782:653","2:10783:1962","2:10784:54309","2:10785:54310","2:10786:54311","2:10787:54312","2:10788:54313","2:10789:54314","2:10790:54315","2:10791:54316","2:10792:54317","2:10793:54318","2:10794:54319","2:10795:54320","2:10796:54321","2:10797:1536"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:4468:1657","glob":false}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:687:1652","glob":false}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:168:694","glob":false}},"2:3812:137":{"id":"2:3812:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3814:688"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3807:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6185:2123":{"id":"5:6185:2123","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4511:2949":{"id":"1:4511:2949","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4512:2292","1:4513:53938","1:4514:54438","1:4516:2301","1:4517:2298","1:4519:2303","1:4520:2294"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4429:2321","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14426:141":{"id":"2:14426:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14427:278","2:14428:519","2:14429:281","2:14430:1082"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:44:1650":{"id":"20:44:1650","crate_id":20,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:45:175","20:46:127","20:47:52844"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14027:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:39:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:7997:1662","glob":false}},"21:988:1653":{"id":"21:988:1653","crate_id":21,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:989:2692","21:991:2693","21:994:2694","21:998:2239","21:1001:2238","21:1003:2695","21:1005:293","21:1008:2696","21:1011:2697","21:1013:2698","21:1015:2389","21:1016:2699","21:1017:2700","21:1019:769","21:1020:2701"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryFuture","id":"20:44:1650","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13765:60851":{"id":"2:13765:60851","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14510:4311":{"id":"2:14510:4311","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14511:58311","2:14512:58312","2:14513:58313","2:14514:58314","2:14515:58315","2:14516:58316","2:14517:2532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:18:3010":{"id":"24:18:3010","crate_id":24,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:19:4155","24:20:4156"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14042:150":{"id":"2:14042:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14043:181","2:14044:150","2:14045:769"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4129:4693":{"id":"2:4129:4693","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4130:58490"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5438:4226":{"id":"1:5438:4226","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5439:5934","1:5440:54716"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3151:74":{"id":"2:3151:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3153:60670"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"21:687:1652":{"id":"21:687:1652","crate_id":21,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:688:843","21:691:2602","21:693:2517","21:696:2603","21:698:2604","21:700:2605","21:701:2521","21:702:2606","21:703:2531","21:704:2541","21:706:2533","21:707:2607","21:708:2608","21:709:1945","21:711:2534","21:713:2609","21:714:2610","21:715:2611","21:716:2612"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14027:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6577:4163":{"id":"1:6577:4163","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6578:54409"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1673","glob":false}},"2:13687:305":{"id":"2:13687:305","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15761:1888","str::as_mut_ptr":"1:15750:1879"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6746:4165":{"id":"1:6746:4165","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6747:58478"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3518:3579":{"id":"2:3518:3579","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:1240"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13321:4705":{"id":"2:13321:4705","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13323:4725","2:13324:924","2:13325:59372","2:13326:59373"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13698:60842":{"id":"2:13698:60842","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3659:3581","`str`":"1:15750:1879","str::slice_unchecked":"1:15750:1879"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5432:4228":{"id":"1:5432:4228","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5433:54738","1:5434:5288"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10544:4636":{"id":"2:10544:4636","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10545:661"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13697:4303":{"id":"2:13697:4303","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15750:1879","`str`":"1:15750:1879","crate::ops::Index":"2:3655:3580"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13773:60856":{"id":"2:13773:60856","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15744:1874","self::pattern":"2:13302:4703"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13332:4707","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13729:30052":{"id":"2:13729:30052","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13302:4703","prim@char":"1:15744:1874"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13094:4968","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:1075:4230":{"id":"1:1075:4230","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1076:5194","1:1077:5177","1:1078:56207","1:1079:56208","1:1080:56209","1:1081:56210","1:1082:56211"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:10422:1674","glob":false}},"2:8712:2270":{"id":"2:8712:2270","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8713:795","2:8714:56319"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8844:157","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:44:1650","glob":false}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:168:694","glob":false}},"5:6171:61499":{"id":"5:6171:61499","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8455:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13688:56330":{"id":"2:13688:56330","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15761:1888"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13693:56328":{"id":"2:13693:56328","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11175:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3450:3568":{"id":"2:3450:3568","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3452:1359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:61497":{"id":"5:6164:61497","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:5187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:5187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:115:1712","glob":false}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:7282:1661","glob":false}},"2:10483:2332":{"id":"2:10483:2332","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10484:1536","2:10485:58277","2:10487:3887"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2845:4747":{"id":"2:2845:4747","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2847:60642"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2842:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13732:56358":{"id":"2:13732:56358","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:15750:1879","prim@char":"1:15744:1874","self::pattern":"2:13302:4703","`DoubleEndedIterator`":"2:8687:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49731:4971","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:96:1655":{"id":"20:96:1655","crate_id":20,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:97:2762","20:98:3088","20:99:3046"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5526:4187":{"id":"1:5526:4187","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5527:58058","1:5528:58059","1:5529:54266","1:5530:58060","1:5531:4484","1:5532:4485","1:5533:58061","1:5534:1307","1:5535:58062","1:5536:58063","1:5537:58064","1:5538:58065","1:5539:58066","1:5540:58067","1:5541:58068","1:5542:58069"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:7282:1661","glob":false}},"20:127:1656":{"id":"20:127:1656","crate_id":20,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:128:175","20:129:127","20:130:52931"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:122:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1664","glob":false}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:47:1666","glob":false}},"2:23733:4761":{"id":"2:23733:4761","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23734:1273","2:23735:1272","2:23736:1270","2:23737:1269"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23145:4760","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3425:3560":{"id":"2:3425:3560","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3427:181","2:3428:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:42:1015","glob":false}},"2:3164:228":{"id":"2:3164:228","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3166:127","2:3167:1419"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3637:2799":{"id":"2:3637:2799","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3639:238","2:3640:206","2:3641:60588"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5574:4189":{"id":"1:5574:4189","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5575:57983"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13678:56319":{"id":"2:13678:56319","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3570:116":{"id":"2:3570:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3571:222","2:3572:544"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:10419:1675","glob":false}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:173:1714","glob":false}},"2:3479:3570":{"id":"2:3479:3570","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481:181","2:3482:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4429:2321":{"id":"1:4429:2321","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4430:2295","1:4431:2296","1:4433:58133","1:4434:2299","1:4435:2300","1:4436:2297","1:4437:57904","1:4439:58134","1:4440:2532","1:4441:2341","1:4442:2288","1:4444:2304"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3255:127":{"id":"2:3255:127","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3256:5087","2:3258:58488","2:3259:58489","2:3260:58490"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10533:109","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10540:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23738:14205":{"id":"2:23738:14205","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23739:59408","2:23740:59409","2:23741:59410"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23733:4761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13677:795":{"id":"2:13677:795","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15744:1874"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6472:4187":{"id":"1:6472:4187","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6473:58555","1:6474:54550","1:6475:54551","1:6476:54553","1:6477:54552","1:6478:54554","1:6479:54555","1:6480:54557","1:6481:54558","1:6482:54561","1:6483:54562","1:6484:54563","1:6485:54564","1:6486:54565","1:6487:54566","1:6488:54559","1:6489:54560"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6184:61501":{"id":"5:6184:61501","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:2272","`String`":"5:8455:216"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2272","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8200:5187","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8455:216","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:15:3011":{"id":"24:15:3011","crate_id":24,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:16:63906","24:17:4366"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:2156:1654","glob":false}},"1:5570:4188":{"id":"1:5570:4188","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5571:58059"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:49:1664":{"id":"29:49:1664","crate_id":29,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:50:53937","29:51:53938"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3357:106":{"id":"2:3357:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2867:104","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13327:4706":{"id":"2:13327:4706","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13329:56035","2:13330:60426","2:13331:60427"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13321:4705","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2905:124":{"id":"2:2905:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2900:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3795:3584":{"id":"2:3795:3584","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3726:3583","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3853:3589":{"id":"2:3853:3589","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3352:2267","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:67:1676","glob":false}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:127:1656","glob":false}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1664","glob":false}},"2:3583:1989":{"id":"2:3583:1989","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3584:546"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3570:116","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3160:229":{"id":"2:3160:229","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3162:127","2:3163:1420"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:9756:1668":{"id":"21:9756:1668","crate_id":21,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9757:2292","21:9758:4036","21:9759:2301","21:9761:2298","21:9763:2294"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"29:49:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:110:1984":{"id":"20:110:1984","crate_id":20,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:111:2232"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1655","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3458:3565":{"id":"2:3458:3565","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:560"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13707:60843":{"id":"2:13707:60843","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49977:5008","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13750:60847":{"id":"2:13750:60847","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47750:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13791:60860":{"id":"2:13791:60860","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15744:1874","self::pattern":"2:13302:4703"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13332:4707":{"id":"2:13332:4707","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13327:4706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3513:3578":{"id":"2:3513:3578","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3515:1237"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14027:138":{"id":"2:14027:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14028:181","2:14029:1015"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:5885:1658","glob":false}},"2:13735:60844":{"id":"2:13735:60844","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15750:1879","str::rsplit_terminator":"1:15750:1879","prim@char":"1:15744:1874","`DoubleEndedIterator`":"2:8687:120","self::pattern":"2:13302:4703"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49763:4999","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13312:4702","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6246:4160":{"id":"1:6246:4160","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6247:58429","1:6248:38219","1:6249:58430","1:6250:58431","1:6251:58432","1:6252:58433"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10355:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:7997:1662","glob":false}},"2:23019:4755":{"id":"2:23019:4755","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23020:4758","2:23021:60118","2:23022:60457","2:23023:60458","2:23024:60459","2:23025:41107","2:23026:60460","2:23027:60461","2:23028:60462","2:23029:60463","2:23030:60464","2:23031:60465","2:23032:60466","2:23033:60467","2:23034:60468","2:23035:60469","2:23036:60167","2:23037:60470","2:23038:59409","2:23039:59408","2:23040:59410","2:23041:60119","2:23042:60120","2:23043:60121","2:23044:60122"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3357:106","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23121:4172","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"2:50460:5020":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:46696:4879":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:5048:4139":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"6:6027:42422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:4163:4449":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:9160:5948":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:13361:51519":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:18102:2132":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"6:545:38344":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"14:189:43820":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:10167:57914":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"21:18527:2325":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"6:4075:41356":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:3454:3566":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:294:63833":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:9920:45534":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"27:606:3759":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"1:11020:4206":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:1504:4270":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:46312:4649":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:3084:4425":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"12:750:2184":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:14160:2139":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"21:18377:2250":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"2:3807:225":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"9:927:43193":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:5303:5608":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"21:17568:2252":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"1:5867:4471":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:11968:50224":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:7415:5587":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"1:2185:4237":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"28:0:1996":{"crate_id":28,"path":["slab"],"kind":"module"},"2:5723:781":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:10223:5904":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:15767:1894":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"6:607:38350":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"31:195:1719":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"1:10862:2264":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:18649:2334":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"16:6490:5647":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"5:4709:60760":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:12196:2068":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"1:11133:4465":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:52303:4817":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"30:0:1854":{"crate_id":30,"path":["memchr"],"kind":"module"},"16:3103:5842":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:6214:42430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"27:188:3713":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"21:9429:1660":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"2:5117:4915":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12573:50427":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:12282:50407":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:1606:39237":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:11962:3711":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:1600:39236":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"27:0:1680":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"1:10617:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:23202:4217":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:25055:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"21:9795:1682":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"1:12490:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:5348:5610":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:5984:4480":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"21:4218:63870":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"1:14766:4356":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:6724:4170":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:5753:4534":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:5676:9006":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"17:12700:50502":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:4434:41393":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"12:1147:4277":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:3446:3564":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:23198:4172":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:4803:44527":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:3795:3584":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"30:1060:6025":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"9:0:1846":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"6:6856:42955":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"21:14265:2147":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"5:2005:4235":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:1662:39241":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:8466:5178":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:14118:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:9646:63600":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:6173:5639":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:46609:5013":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"21:18559:2328":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"1:2179:4236":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"12:1203:5474":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"5:3106:60681":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:51993:4789":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:14:1962":{"crate_id":2,"path":["core","write"],"kind":"macro"},"21:10566:2039":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:13440:51554":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:10552:4639":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:5560:4183":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"21:17326:2763":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"17:13094:51022":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:9130:4216":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"5:4017:4235":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"18:885:6025":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:17504:2251":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"21:1845:2092":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"6:6135:42426":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"16:3521:43904":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13452:51555":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"21:16463:2183":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"2:48887:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"21:18548:2327":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"16:3051:5888":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:53733:19721":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"21:12300:201":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"18:857:6023":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:2173:33473":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:607:45515":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:8254:2764":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:4468:1657":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"1:894:4383":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:49623:4986":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:6060:5606":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:1491:4267":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:14390:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:10949:45809":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:9826:5972":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:1449:4265":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:1636:4276":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"5:2619:5307":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:14975:4306":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:51901:4800":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:4063:2968":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"21:14257:2149":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"17:0:1853":{"crate_id":17,"path":["object"],"kind":"module"},"2:5004:4914":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"9:157:5359":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"5:777:61747":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"30:1004:6021":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:13961:51671":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:7073:57900":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:4362:41384":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"5:1518:4277":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12482:50421":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:3086:4426":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"21:18722:2097":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"1:14683:55995":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"12:764:2763":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"27:515:3709":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"17:13073:51021":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:15744:1874":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"21:17420:2246":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"24:380:63947":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"12:2032:2184":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:11946:4258":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"30:1032:6023":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:22870:60662":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:15093:4462":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:3077:5889":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:3824:3588":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:13817:51627":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"31:173:1714":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"5:3905:60759":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:18768:63866":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:46914:59169":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13660:51581":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"21:18820:2404":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:9883:63677":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:12957:50965":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:1017:4404":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"15:248:5494":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:22804:4599":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:13327:4706":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:14861:2157":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"21:10844:2046":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"21:6995:3017":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"21:14662:2155":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:2900:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:3877:41336":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"6:4379:41386":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:51614:4784":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:13992:2962":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"6:593:38348":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:53718:19720":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"21:9874:2164":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"21:18341:2317":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"1:10954:4201":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"16:6931:5874":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1537:39229":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"12:2280:4277":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:7121:5661":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"5:8432:5287":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:10643:45734":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"21:17431:2247":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"1:5520:4186":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"3:321:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"6:4296:41376":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"21:17362:2084":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"1:6224:4163":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12302:50408":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:25490:4864":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:10266:5970":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:50236:4717":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:47875:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:8760:4313":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"21:14735:2154":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"5:7547:60759":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"16:6026:5562":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:46557:4875":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:15769:1896":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4230:41371":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"5:3407:5195":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:52379:4824":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"17:11130:45539":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:11086:54423":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"12:2412:62954":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:2953:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:49731:4971":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"6:5229:41997":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:6925:41531":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"16:6630:5863":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:7379:5589":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:9131:4568":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12003:50271":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:56536:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:48768:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:13859:51636":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:1654:4278":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10291:5961":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:7919:4404":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:11814:4358":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:3388:2268":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:3104:5194":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"31:206:1715":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:3479:3570":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:10912:2950":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"6:4446:41395":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:10422:45647":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:8602:4670":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:6482:54561":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:11597:4972":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:49671:4837":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"21:17316:3013":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"1:11291:4318":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:1701:4265":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:7110:5660":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"17:1236:45605":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13887:51660":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"18:801:6018":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:10781:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:12038:4289":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:46573:4877":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"30:1071:6026":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:15857:2059":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"2:5248:4650":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:9254:59071":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:50012:5012":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:48052:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:4447:2265":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5923:5632":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4081:41357":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:13177:4476":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:52585:4801":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"18:811:6019":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:1694:39244":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:49512:2158":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:3340:5818":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:14969:4305":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:5194:4649":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:32578:4314":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:8525:4500":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:9505:4456":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"22:0:1993":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"17:510:45514":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:17131:2189":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"2:51969:4788":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:13421:51550":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"1:10966:4202":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"14:0:1850":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:6034:12299":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:13147:51028":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:57897:59909":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"21:12190:187":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"1:15743:1873":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:12499:56003":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:6484:54563":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"1:1622:4275":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:7436:4351":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"27:460:3760":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"2:51555:4795":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:10166:45604":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:10466:4279":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"21:14796:2046":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"21:18213:2315":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"29:47:1666":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"13:0:1843":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:3839:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:11166:4172":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:13180:51073":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"6:6184:42428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:4429:2321":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13377:51547":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"17:4008:45723":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:7714:5231":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"17:12746:45544":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:25121:5042":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:46298:4846":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:5433:42012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:11314:5986":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:1418:2184":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:2487:4838":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:51392:4794":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:5443:5616":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:24857:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:8847:4497":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:16960:3275":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"2:50689:4675":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"21:18658:3775":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"1:3100:4430":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"16:7169:5582":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"14:216:43829":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:5998:5585":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:51525:4807":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:17346:2184":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"18:820:6020":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:2163:2184":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13293:51186":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:4198:44330":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"1:10217:55985":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4454:41396":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:11122:4115":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:57876:59880":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"31:118:1713":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"21:16609:2175":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"2:23350:4172":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:12057:4290":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:7042:57900":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:13281:51184":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:47867:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:5526:4187":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:13735:51584":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:3430:3559":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:10548:4638":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:14300:4223":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:8606:4669":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"16:4351:44411":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:56562:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:11071:2049":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"5:7306:2247":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:14153:2071":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"21:10421:1677":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"21:13669:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"1:5582:4191":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:49987:5009":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:46937:2041":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"21:12998:2094":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"15:269:5498":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"30:853:142":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:3972:41344":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:6050:5634":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:4275:2963":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:15742:1872":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"21:168:694":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"6:565:38345":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:12209:2069":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"2:48524:4637":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:6967:42981":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"7:85:43081":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:11409:45943":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"12:399:5478":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"18:774:2160":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"5:3814:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:25022:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:51755:4820":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:32404:5107":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:2845:4747":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:1149:9000":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:3576:43905":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"1:12528:57902":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"5:5962:60781":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:13378:4710":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:4148:41365":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"27:550:3712":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"17:12455:50419":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"30:957:2160":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:10395:2402":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:3352:2267":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:4416:41391":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:50436:5023":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"17:12634:50492":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:56549:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:7063:5656":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:5948:60762":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"5:8477:5179":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:4179:41367":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:49613:4985":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:10304:5960":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"16:6190:5640":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:16322:2168":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"21:15193:63882":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"24:258:2038":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"5:1055:5202":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:8154:1683":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"5:1719:4267":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"21:13298:2136":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"5:383:5266":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"5:8344:4242":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:626:38353":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"21:13119:2156":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"2:24038:4172":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:2543:5987":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"30:836:6031":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:7017:2193":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"17:13155:51070":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:5737:4531":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:52225:4829":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:46985:4608":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:8240:60721":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:5685:5625":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:47253:2185":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:53459:4787":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"16:5374:5612":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:24370:4901":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:56166:4841":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"9:776:5389":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"18:829:6021":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"20:110:1984":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:4459:2764":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"26:49:52684":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"9:692:5342":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"16:7659:5667":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"27:585:3716":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"1:10355:4172":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:13037:51020":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:547:5810":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"24:407:3451":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"18:754:63849":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:4036:60759":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:6243:42432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:14927:4297":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"30:708:63840":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"21:10672:2043":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:3160:229":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"21:13258:2135":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"6:4356:41383":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:52799:4810":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"16:6342:5643":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"21:10231:2617":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"2:51424:4827":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:11701:46329":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:10093:5999":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"5:6498:224":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:15761:1888":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"30:843:6032":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:14510:4311":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7768:5573":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:13784:4354":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:1721:39247":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:5745:5628":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:50115:4708":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"5:844:223":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:52539:4797":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:4538:41405":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:5311:42003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"21:11155:150":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"2:46113:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:10215:4954":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"1:14391:54427":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:4411:44423":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:8270:5191":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:3105:60833":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:9746:45531":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:4771:4198":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:3987:41192":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:3365:2929":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:3314:5817":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"2:28300:4678":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:47858:37584":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:46876:2135":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:50608:2798":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"0:142:1032":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"17:10435:5906":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12015:50327":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:15735:2056":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"5:4372:2763":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:53703:19719":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:49996:5010":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"17:13975:51705":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:53639:19715":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:9275:43899":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"21:42:1015":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"2:0:489":{"crate_id":2,"path":["core"],"kind":"module"},"1:3419:55999":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:3357:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"12:2072:4239":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:12318:50409":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:15131:4463":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:3554:4235":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"21:661:55995":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:48304:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10187:45603":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:13600:2140":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"21:18507:2323":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"17:12527:50424":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"6:1544:39230":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:46886:2136":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"12:1238:5475":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:2035:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"5:5906:2134":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"12:2269:4276":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"21:15810:2042":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"20:127:1656":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"16:7721:5578":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"12:2052:4236":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:9183:5924":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:3981:41345":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:23121:4172":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"21:8152:919":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"5:984:2146":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:6381:5579":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:47807:2764":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"21:16999:2187":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"1:7416:4350":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:46536:30744":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:46715:5066":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"2:10483:2332":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10598:45751":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"5:8209:2764":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:13794:51626":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:10650:2958":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:4439:44427":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:6858:5871":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6099:5636":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:11246:4167":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:10536:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:50701:4673":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:5293:42001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:46966:4616":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:11774:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:12348:50412":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"1:1485:4235":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:1311:6005":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:11457:45945":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:9958:63421":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"21:11191:2063":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"21:12909:2091":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"27:521:3710":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"6:6931:41532":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:46530:4233":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:2403:10007":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:4665:60798":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"21:14970:2159":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:46727:5067":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:6687:2039":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4195:2964":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"2:53543:4825":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4287:41375":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:24385:37350":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:3484:3571":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:9796:63469":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12183:50400":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:12160:6615":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:4848:4348":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"16:5784:5629":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:51947:4785":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:10931:4200":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"21:8042:1381":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"5:1909:60759":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:24281:37344":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"6:3920:41340":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:5216:41996":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"30:995:6020":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"11:46:62948":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3148:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"6:4198:41368":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"21:17865:2256":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:3474:3569":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"21:10614:2048":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:32644:60356":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"21:16140:2170":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"21:10032:3778":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"2:12198:4989":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"21:10977:2045":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"18:661:6031":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:2936:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:50651:2382":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11234:5947":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:32744:60349":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:3353:4562":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"21:11288:2063":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"2:14077:2068":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:15766:1893":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"19:0:996":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"6:5260:41976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"14:244:43822":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:5438:4226":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:3154:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"24:0:1746":{"crate_id":24,"path":["futures_task"],"kind":"module"},"5:1673:2763":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12070:50335":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:10634:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:10489:45649":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:13986:2964":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:37870:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:13472:51557":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:15223:54293":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:11486:4969":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:4509:41401":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:15754:1881":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"21:18671:63875":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"17:13331:51189":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:11003:4205":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:1760:5299":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"21:12738:2088":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"1:3841:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:4410:41390":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:1152:9002":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:15763:1890":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:50287:4719":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"30:1024:6022":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:10004:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"17:10558:45749":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:3458:3565":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"21:17047:2072":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"12:1784:62949":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10853:1660":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5366:42005":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:1502:4275":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:8849:5945":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:49541:4981":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:50273:4718":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:10048:45607":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"21:18907:2993":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"1:820:8891":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"6:5331:42004":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:13321:4705":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9786:45532":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:11666:4976":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:7874:235":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"21:15390:2163":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:9553:55997":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:6557:5649":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:6057:39195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13873:51654":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"21:9218:2941":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"12:183:5480":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:11985:50227":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"17:13507:51563":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10925:45831":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"20:96:1655":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:10542:4635":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:50005:5011":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:8403:59836":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:10738:2263":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:12250:50405":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"5:3960:5294":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"5:7473:2764":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:14339:2375":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"21:18640:2333":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"2:53581:4790":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:48136:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:1558:39232":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:5113:4121":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:13557:51569":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:23357:14186":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:47799:2763":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:2512:5959":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:17695:2254":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"16:3402:5553":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11068:5925":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:7184:5876":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:3436:3562":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:7464:4353":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:49683:4994":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:50485:4292":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:10028:45590":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:10058:6004":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:11956:45755":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"5:1533:4276":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:51454:4815":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:9625:4702":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:3594:2269":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"14:194:43821":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:1500:4269":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"18:0:1854":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:5161:4463":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:16274:2063":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"2:14329:1990":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:49689:4995":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:571:38346":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"17:10127:5972":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"12:815:4269":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:50432:5021":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"12:940:4271":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:10009:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"27:481:3705":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"21:17086:2083":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"16:5427:5615":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:1748:39250":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:9539:5946":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:7519:4355":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:50428:5018":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:9676:63647":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"21:18726:2096":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:10658:2317":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"21:17335:3014":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"1:1132:4417":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:9466:45528":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:12417:50416":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:11876:2184":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"16:4660:44504":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:3509:3577":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:49713:2952":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:10917:2041":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"6:4098:41359":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"21:12662:2084":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"1:1533:4274":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:5289:5565":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:46357:4855":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:4526:41403":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:11181:45542":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"27:509:202":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:49072:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:4144:4697":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"6:4067:41355":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"6:4386:41387":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:51300:59879":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:2464:6615":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"12:379:5479":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:5982:39168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:8275:4256":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"2:2271:4684":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"30:929:63849":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:47816:5071":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"16:5257:43900":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:5499:5150":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"12:933:4270":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13323:51188":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:11355:2184":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:777:2764":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:14028:2041":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"1:2698:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:24497:5056":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:13306:51187":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"21:10420:1678":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:46670:5156":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"9:1075:5410":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:7449:5575":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:10831:5972":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13271:51122":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"21:11686:2055":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"17:11591:46232":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"18:651:6027":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:69:5227":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:9706:45530":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4048:41352":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:5643:4526":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"29:0:1663":{"crate_id":29,"path":["futures_io"],"kind":"module"},"1:9426:58425":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"5:4694:236":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"21:7997:1662":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"29:42:1667":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"18:152:52025":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:6562:2247":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"9:234:5367":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"17:8954:5926":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:672:38383":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"21:16411:2182":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"21:14493:2150":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"27:487:3706":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"18:766:63835":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"21:2156:1654":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"5:2284:5198":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"1:15152:4469":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5238:43902":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"21:6654:2192":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:8643:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46545:4874":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:12093:50336":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"2:46928:2040":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:14395:2143":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"16:4975:44579":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:10821:4556":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:586:38347":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:11168:45541":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:23261:4758":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:51871:4796":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:3243:5836":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:7208:5665":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:14067:4122":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:8712:4509":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"30:941:63835":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"16:2792:5552":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:13404:51549":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"3:0:431":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:9960:162":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"16:3686:43914":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:10051:3777":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"6:5398:42008":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:15751:1880":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:1521:4272":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:9291:45507":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"6:4135:41363":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"1:15760:1887":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5745:4532":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:12053:2060":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"2:2262:4683":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:8850:4373":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:23208:4219":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:13721:51583":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:2191:4238":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"21:11613:2062":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"16:4495:44435":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:11341:3716":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:10546:4637":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:13138:51027":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:49935:5007":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:18862:2400":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"1:9648:8891":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"5:8224:2247":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"21:9513:2164":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"12:1183:5473":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:53335:4802":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:12983:4998":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:18835:2403":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:11447:4968":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"21:9721:1669":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"6:5186:41993":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:0:800":{"crate_id":6,"path":["libc"],"kind":"module"},"21:14019:2152":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"17:13029:51018":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:6080:39169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:12742:5170":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:1712:39246":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:8477:4491":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:4:981":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"6:3907:41339":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"25:17:1660":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"21:13415:2138":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"1:2955:4421":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:7741:5668":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:5566:5620":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:50672:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:14942:4298":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"30:698:6028":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:13352:51202":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:12543:50425":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"14:47:43820":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10115:6001":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:17954:2311":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"16:4840:44540":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7684:5577":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:46975:2147":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"12:466:62959":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:10455:5989":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:1551:39231":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9421:56014":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:12660:50494":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"21:12990:2093":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"1:1475:2247":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:5512:4185":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"13:121:43775":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6012:5564":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:11530:46222":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"12:880:4235":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:10445:45648":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:12165:4988":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"12:1103:4275":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"21:9756:1668":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"6:6902:41528":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:22817:60633":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:8175:3716":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:24956:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:7351:60759":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:1680:39243":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:9127:2766":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:53397:4822":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"6:6120:42424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5274:41977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:12184:2067":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"21:13480:2039":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"17:10545:45748":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:612:38351":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:24302:4905":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:10594:4422":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"21:18151:2246":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"17:11945:45754":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"27:574:3715":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"21:17437:2248":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"16:6518:5581":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:2946:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:5362:5611":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:47262:2186":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"30:895:59887":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:161:38032":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"1:15764:1891":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10577:4225":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"17:13196:51074":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:2328:5304":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:12442:50418":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:3157:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:11349:2392":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"6:5488:42016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7868:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10356:4380":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:4127:41362":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:5122:4916":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"27:565:3714":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"6:5541:42043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:50464:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:5273:43899":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:12009:4370":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:3853:3589":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"28:71:63950":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:1496:4268":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:5178:41992":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"28:203:2677":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"2:8167:4569":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13129:51026":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:10642:4443":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:5158:4462":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:15494:55987":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"6:5288:42000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"16:5639:5622":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"17:10198:45602":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:3007:5830":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:11680:4977":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"21:16209:2171":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:46173:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"21:18805:2616":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"16:6980:5654":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:24334:37332":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"1:5574:4189":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:12170:50399":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:11930:3713":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:7264:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:681:45516":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:11892:2764":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:13536:4363":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:11305:45544":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"28:50:2763":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"21:13346:2137":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"16:4599:44491":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:7906:2536":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:51923:4803":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4373:41385":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"21:10419:1675":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"2:3655:3580":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:5974:38262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"21:14541:2151":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"18:739:63854":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:50598:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:1669:39242":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"18:712:4599":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11109:11603":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"16:7200:5584":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"1:11786:4356":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:11810:46466":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:18732:4017":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:5766:4535":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:48517:4635":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"6:4474:41398":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"21:18017:2313":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"5:8215:5203":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"21:7282:1661":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"7:38:43074":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:6246:4160":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"30:1041:6024":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"21:16755:2179":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"2:3151:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:24318:59985":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:9558:56015":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"12:787:4268":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5426:42011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"17:9988:45588":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:50298:4720":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"5:8549:5228":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:3812:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"21:6302:2071":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"2:3597:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:15749:1878":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:618:38352":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:2525:4415":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:5605:5621":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"21:15657:2057":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"18:720:59887":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:2842:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:9587:63820":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:7980:3725":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:11220:4221":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"5:8232:5204":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:49763:4999":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:3297:5890":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:521:38340":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:13369:51520":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"6:1740:39249":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:11196:4115":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"6:4061:41354":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"5:7736:5232":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"1:10874:2266":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"21:69:2014":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:8268:2648":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:6943:41534":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"12:856:4266":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:51777:4823":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:3356:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"2:24410:37369":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:24791:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:23733:4761":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"21:16972:2184":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"17:13747:51619":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"6:601:38349":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"21:11467:2066":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"5:1072:2184":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:7294:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"20:44:1650":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"21:13021:2132":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:53505:4805":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:10318:5972":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"21:595:2667":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"2:5268:2678":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"18:668:6032":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"12:2392:62958":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:12298:60574":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"27:502:3707":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"21:67:1676":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"1:15745:1875":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:3793:3810":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:5210:41995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"18:782:2160":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:17493:2250":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"28:41:2184":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"10:0:1847":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"5:0:278":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:3570:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:10390:5968":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:4218:41370":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:5447:42014":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:14426:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"26:65:52686":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"2:21:673":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:5609:2679":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:47918:2184":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:5530:5619":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"27:495:2648":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:49298:5174":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:1710:4266":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:12196:50401":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"9:469:43199":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"1:696:4379":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:11002:45833":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:11433:2184":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:50497:5094":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"2:8639:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:7100:5659":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:13059:5005":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"21:15451:2166":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"1:1075:4230":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:4234:2966":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"16:3221:5835":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:7402:4349":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:4753:2941":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"21:14614:2153":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"5:8532:4235":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:15715:9005":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"6:4242:41372":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:900:4384":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"28:220:4275":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:47047:2155":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:50456:5019":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:11652:4975":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:4236:2967":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:11907:50218":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:1531:39228":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:3518:3579":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"21:18392:2319":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"1:9414:58427":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"6:4160:41366":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11102:45538":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:24210:5039":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:602:2053":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"2:39050:2910":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12620:50491":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"12:0:1849":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:8419:5286":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:16990:2186":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"1:14705:55963":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"5:3948:2317":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"16:7025:5558":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:634:38354":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:11450:4333":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:14042:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:1441:2764":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"12:2066:4238":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:2981:5840":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"16:6604:5650":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"9:749:5344":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:8926:4369":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:1431:2763":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6141:5638":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:13302:4703":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:2405:10008":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13612:51580":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:15249:5502":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"21:18489:2321":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"12:2059:4237":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:50130:4711":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:10516:45650":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:13584:51572":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:13908:51662":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"21:6790:63878":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"2:3442:3561":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"31:115:1712":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"2:2198:1052":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"30:965:6017":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:6229:42431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:46597:5159":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"12:114:62963":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:8961:57905":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:13853:56001":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"21:9353:2185":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"6:4005:41347":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:11177:4530":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:50161:4715":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:18537:2326":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"21:11539:2054":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:48801:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:53608:19712":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:13989:2966":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:3155:5832":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:24358:4900":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:2314:5963":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:48510:4636":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"12:1682:5485":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:22872:60666":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:49591:4983":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:51679:4828":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:51280:59878":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"21:13971:2040":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"5:5388:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:32544:3550":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:47782:2762":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"31:190:1718":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"2:53257:4818":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:5887:5815":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:3513:3578":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"5:8403:5067":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:49452:4973":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:17637:2191":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"6:6671:42795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"18:837:4705":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:5488:2941":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"27:533:3711":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"2:46743:5068":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:10587:4196":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:51370:4806":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:32584:5097":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:5217:5820":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:9431:45527":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"12:1703:5486":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:14778:4357":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:3896:41338":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:48178:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:50659:2383":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:49917:5006":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:49657:5078":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"11:54:5462":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"5:2396:5303":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:6075:5566":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:10775:45721":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:11671:46272":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:7754:5669":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:12026:50328":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:7814:4404":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:53795:19723":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:1576:39234":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:2248:4679":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:11844:54271":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"2:46677:5157":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:46153:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:11768:4354":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"21:11025:2047":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"12:952:4272":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:24890:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:49084:3716":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:6106:4481":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"21:17150:2190":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"21:17404:2763":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:4129:4693":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"28:211:4277":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"16:7238:5586":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:637:2160":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:11013:45536":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"21:10428:2039":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"2:52145:59890":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:9064:45521":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:3600:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:3467:3572":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:7079:5657":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12406:50415":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"30:986:6019":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"12:843:4265":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:7129:4615":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:23932:4218":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"16:4271:44379":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"9:996:5408":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12687:50496":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:783:8891":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"6:1567:39233":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9836:63478":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"16:5948:5825":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:4055:41353":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:10571:5928":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:539:38343":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"5:8449:60682":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"12:2398:59859":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:15755:1882":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"1:14320:54568":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"12:895:5464":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:53665:19717":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:1704:39245":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:3102:4431":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:11404:2952":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:9561:5951":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:4765:60760":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:10473:10014":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"6:527:38341":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"22:7:1673":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"2:3359:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:46617:5153":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:51595:59951":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:22849:60667":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:24509:5055":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:48010:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:6610:2139":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:10874:45722":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:7141:5663":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"6:4277:41374":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"21:17223:2191":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"17:11640:46270":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11603:46267":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"21:18516:2324":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"1:15071:4208":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:10253:5898":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:9259:43900":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:4370:2185":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12674:50495":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"12:162:5476":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11837:57920":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"1:7450:4352":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:7762:3725":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:3743:5916":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:14223:59192":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"21:18664:2667":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"1:8076:4404":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:9396:45526":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"30:949:2160":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"17:11563:46230":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"21:591:2052":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"21:14249:2142":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"1:14325:4196":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"6:5247:41999":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:14027:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"9:1020:5409":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:50308:4721":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:51725:4816":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:8297:2764":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:46239:3582":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:46994:2148":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6468:5646":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9087:45522":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"12:472:62960":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:24758:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:14556:4229":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"21:15022:2148":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:50444:5026":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:15756:1883":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"20:122:4172":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"9:722:5343":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"21:1312:2071":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:11638:4974":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"12:2045:4235":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:2170:2247":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:10240:5895":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:46129:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:9738:1671":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"1:12497:4420":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"14:231:5181":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"6:4020:41349":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"17:12770:50570":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13549:51568":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:10382:4403":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:11890:50217":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:48750:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:6688:42796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"12:869:2247":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"30:976:6018":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:13914:2141":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"5:4509:2184":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6089:5635":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"6:3933:41341":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"6:5998:38221":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:3770:43950":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:2174:4235":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:39090:2132":{"crate_id":2,"path":["core","error","Chain"],"kind":"struct"},"17:9361:45525":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:12222:50403":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10530:45747":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:13539:51567":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:6472:4187":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:12004:4503":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"6:580:3904":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:6746:4165":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:32940:4750":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5149:41948":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:11188:4474":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:5698:5626":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:3825:2184":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:7992:4618":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"21:599:2668":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"5:4308:60759":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:3890:3590":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"16:7155:5664":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:47750:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:6129:42425":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"21:43:1015":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"2:3836:4570":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"17:11017:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"21:12261:2072":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"5:6340:5231":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"31:166:1717":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"24:15:3011":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"2:3583:1989":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:13070:2133":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:23072:4834":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:3402:4237":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"12:979:4274":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:8097:4606":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"16:6407:5644":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:32592:60360":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"16:7295:5572":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:9756:63687":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"21:12654:2083":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"1:6904:12302":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"12:971:4273":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11822:54546":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"17:10015:45589":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"29:39:1665":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:13094:4968":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:22832:60633":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:46790:10540":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"27:598:3758":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"17:11615:46268":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:13428:51553":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:47228:32895":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:24476:37370":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:3231:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:46640:5154":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"17:12758:50567":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"30:904:63852":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12892:50963":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:53147:4798":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:47244:32897":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"6:5567:42044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:1152:60759":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:15726:54290":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:12469:50420":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:46195:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:3255:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:6007:42420":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11354:5921":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13463:51556":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:9505:2639":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:49552:4982":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:10476:5990":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:46820:4609":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:50209:4716":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11713:46438":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8261:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13233:51117":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"2:8652:2271":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"12:1121:4276":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:3415:3558":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"21:45:2012":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"21:15144:2162":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:9004:45519":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:14381:2264":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:24923:3186":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:47934:2764":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10450:9001":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:6268:42434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:3603:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:1547:4278":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13257:51120":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:10456:4245":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:8167:4404":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:11273:12303":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:8626:57905":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"21:12504:2080":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"20:0:1649":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:8419:2126":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"6:1912:39386":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6979:42982":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:7228:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"18:729:63852":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:7719:56273":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"18:611:6028":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:4110:41360":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:10918:2952":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:13342:55960":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:3497:2314":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:7471:5563":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:52122:59950":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:11238:2392":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"17:10211:45608":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:13332:4707":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:46845:2132":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:0:1334":{"crate_id":1,"path":["std"],"kind":"module"},"21:15095:2161":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"2:46066:2800":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:3494:43903":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46663:5155":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:23019:4755":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"21:8861:2187":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"1:10582:4420":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:11423:4330":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:49699:2950":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:46039:2768":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:46305:4847":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:25088:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"5:444:2272":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"30:869:6033":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:18874:2406":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"17:12383:50414":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"21:10475:2040":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"6:6665:42794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:15214:28298":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:3395:2184":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:3637:2799":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:11800:4357":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:15762:1889":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"21:11409:2064":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:8687:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:14374:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:6643:38298":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:13730:3095":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"27:21:63948":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:23108:4835":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"17:9240:5899":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:11884:4255":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:10905:2153":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"16:2813:5845":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:2554:4416":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:12360:50413":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"24:21:3012":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:46905:2138":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"5:8389:5285":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"21:10422:1674":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"5:8356:4282":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"30:914:63854":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:542:5540":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:10407:4122":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:6533:5858":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"6:5204:41994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:22851:60664":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:10147:45606":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"16:6873:5071":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"18:866:6024":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:6775:5246":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:12019:4262":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"18:645:6030":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:50448:5024":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:10660:45753":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:13167:51072":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"24:18:3010":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"2:53628:19714":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:10550:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"18:621:63840":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"30:170:52026":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:3726:3583":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:2748:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:14350:4422":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:3425:3560":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:2959:5829":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:12014:4371":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:11037:4347":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:4968:4913":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:10801:5919":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:24431:37360":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:7054:56012":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"16:2839:5826":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:8433:4490":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"21:18568:2329":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"2:3495:3574":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:5902:5631":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:15511:2054":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"1:13323:10019":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:4078:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:10988:45806":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:1588:39235":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"21:14354:2146":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"2:9504:4315":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:9930:63451":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:13938:51664":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"21:11747:2061":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:47791:2184":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13573:51571":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:4775:44523":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:37894:4599":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:1190:9004":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13215:51076":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10364:5962":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:47926:2763":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:1256:60757":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:3489:3573":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:5516:5808":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"5:7943:60794":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:52461:4809":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:10039:45591":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:13247:51119":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"17:9948:45535":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:8200:5187":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"21:11114:2050":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"2:23396:4172":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:1041:4182":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:47026:4612":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"21:10782:2044":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"21:15579:2055":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"16:6717:5652":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:11524:4970":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"21:14313:2145":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"2:46656:5012":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6114:42423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"12:432:5477":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:0:1852":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:51632:59960":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:51825:4808":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:6646:4166":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:46946:4614":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:3461:5839":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"12:1256:4278":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:13410:4367":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"21:18789:63865":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"12:2040:2247":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:10733:3808":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:4038:41351":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:11991:2058":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"2:39086:5310":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:13016:50966":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:5697:4848":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4346:41382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"6:5478:42015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:17395:2184":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"21:687:1652":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"2:46957:2043":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13529:51566":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:10937:45832":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:4308:41377":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:16371:2169":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"2:49967:2320":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"21:12840:2090":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"17:10975:45807":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:10586:45750":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:47037:2153":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:4516:41402":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:4811:4558":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:1526:39227":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"14:11:43820":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:4495:58276":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"17:2484:45636":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"21:5885:1658":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"21:18580:2153":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"16:7792:5603":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:8346:2187":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"9:963:5407":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"5:1276:5301":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11689:46328":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"9:27:5391":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"21:17482:2249":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"21:15467:2049":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"16:2733:5803":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:2961:2300":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"16:4316:44400":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:6643:5864":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"30:137:52024":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:10493:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:5285:4469":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:14864:54580":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:11725:46439":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10899:45821":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:10962:45808":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"5:6851:2941":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:53005:4830":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:10771:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:6691:5651":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:3428:4238":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13763:51621":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"16:6656:5865":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"21:18624:2331":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"6:5240:41998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:50144:4714":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:5649:5623":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:13840:51630":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:13774:51622":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:6650:4169":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:11822:46467":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:49633:4987":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4425:41392":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:16083:2173":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"7:0:1484":{"crate_id":7,"path":["unwind"],"kind":"module"},"31:0:1711":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"1:14957:4299":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:13312:4702":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:10688:59913":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"2:52649:4786":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:49578:4609":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:9636:45529":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:8844:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:2441:10019":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"21:18369:2318":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:51577:4799":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"21:12573:2081":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"16:6433:5645":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:50030:5013":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:3818:3586":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"12:1162:5472":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:53599:19711":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:46217:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"21:18850:2401":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"1:10367:54276":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:49531:4980":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:7702:5576":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:46858:4611":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"12:353:62951":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"27:394:202":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"1:11985:4496":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"5:1751:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:14315:54574":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"5:4581:5275":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:1645:4277":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:13689:56271":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4315:41378":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"21:12447:2079":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"6:533:38342":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:3420:3563":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"29:49:1664":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"6:6250:42433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:6870:59347":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:6486:54565":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"30:887:4599":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:18631:2332":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"1:1510:4271":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:10074:3776":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:17627:211":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"21:16483:2172":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:48388:5077":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"9:603:43303":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"21:13791:2160":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"5:4281:2247":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:10435:8998":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:3966:41343":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:1621:39238":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:11742:46447":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"21:17355:2764":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"21:16920:2178":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"2:23145:4760":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:11202:4483":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"21:0:1651":{"crate_id":21,"path":["futures_util"],"kind":"module"},"21:15232:3096":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"5:7205:60776":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:13602:51579":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12130:50396":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"2:48783:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:47849:5073":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:4903:44555":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:7637:5666":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"16:3366:5843":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:3086:2912":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"17:13345:51190":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:12048:50329":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9517:2950":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"9:1056:5402":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"5:7918:60776":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:47016:2151":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:51324:4826":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:13043:5002":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"17:11494:46161":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11547:46229":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:11922:50219":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:15758:1885":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:8197:5293":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"12:2404:62957":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:8902:45517":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"1:2196:4239":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:48094:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:14798:4289":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"12:1666:5484":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"1:14552:10021":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:50452:5025":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6482:5860":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:3478:5838":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7309:5570":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:46634:4233":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"5:3441:5196":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:14699:55983":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:52044:59881":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:12557:50426":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:4203:63879":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"2:56588:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:11212:5949":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"16:5176:44756":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:5396:5613":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:48531:4638":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:56575:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6153:42427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:5239:4922":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:13711:4355":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:47235:2188":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"6:4402:41389":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7281:5571":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:4504:2328":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"21:13856:2160":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"1:5504:4184":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"21:17276:3439":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"21:12126:2065":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"16:7131:5662":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:3960:41342":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"21:15301:3094":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:4823:4559":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"21:16981:2185":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"1:10377:4389":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:46896:2137":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:12766:5134":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:14816:54284":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:6331:5490":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:5291:4651":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:13673:4353":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:12496:50422":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:49604:4984":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:12143:50397":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:51476:4819":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:7051:5655":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:1733:4475":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"21:14918:2158":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"2:2166:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7247:5600":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:4160:4448":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:52349:4821":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"17:12157:50398":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:5547:41252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:3164:228":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4689:44509":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:49817:4974":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:88:37965":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"18:896:6026":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:3501:3575":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"6:5439:42013":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11433:45944":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"16:4573:44489":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:14872:4365":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:4628:44496":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"13:233:62964":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"21:97:1679":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"1:3112:4436":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:23738:14205":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:3347:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:14835:4262":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"6:5390:42007":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:48262:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:1764:39251":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"20:194:3009":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"21:16552:2177":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"2:2905:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"1:9520:4457":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"1:15748:1877":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"12:2036:2764":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:6595:5580":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:52091:59945":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"20:27:1983":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"17:10082:5998":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:11107:2051":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"2:24139:5037":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11898:3710":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4088:41358":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"21:17005:2188":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"21:17041:187":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"21:16859:2181":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"6:5582:42045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:46710:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:1727:39248":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"17:10340:5964":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:49294:5175":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:50440:5022":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4270:4482":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"6:1634:39240":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:10503:5991":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:2883:5846":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:13539:2039":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:10533:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11256:45506":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:853:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:53619:19713":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:5855:5630":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:5412:5614":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:5432:4228":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"21:16010:2062":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"21:9751:1670":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"21:15458:2165":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"17:12646:50493":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:49094:59910":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:8372:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"20:39:4172":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:13953:51669":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:8455:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"14:56:45945":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:49521:4979":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:6574:4222":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12585:50441":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:11335:5922":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:12731:50504":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"21:14444:2144":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:53680:19718":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11797:46453":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:4157:5929":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"21:12222:2070":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"6:4256:41373":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"28:55:2247":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"17:11754:46448":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:4486:2332":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:6016:42421":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"21:13221:107":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:47968:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:24483:5112":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:6648:4168":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"16:6907:5653":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:4273:2962":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"16:6159:5569":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:47006:2150":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4208:41369":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:10895:2132":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:46271:3585":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:13181:2134":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"5:3110:60831":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:6937:41533":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:11066:54298":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"27:467:5293":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"2:50093:4704":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:7579:4359":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"18:704:2160":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:3838:2763":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:53756:19722":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:9381:56009":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:11364:4328":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"21:16807:2180":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:48813:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13785:51623":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"12:2253:4275":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:50341:5083":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"16:2937:5851":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:8695:2188":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:39126:4565":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6130:5637":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:10788:45720":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:2466:10026":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:5498:5618":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:10540:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:4467:44431":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"16:4716:44512":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:23944:60637":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:12431:50417":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"16:7826:4846":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:10622:45719":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:12921:50964":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:2754:5819":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"28:37:2764":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"1:15768:1895":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:6344:4179":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:11128:4464":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"18:169:52026":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:5861:60759":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:3322:2311":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:3450:3568":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:17778:2255":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"2:46278:4691":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5941:5633":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"1:11999:3777":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:7782:5574":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:12607:50490":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:9124:2765":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:6310:5642":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:2695:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:11282:45543":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"31:164:1716":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"1:11439:4332":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:8712:2270":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:11917:4257":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:53654:19716":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:4321:41379":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:49835:4975":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:24393:37368":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"21:14103:2043":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"1:1305:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:3443:2954":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:5419:42010":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"30:153:52025":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:10220:4955":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:49863:5003":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"16:3129:5841":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:3409:2313":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"21:10016:3779":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"2:49055:59889":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:13917:51663":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:24447:37371":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:14338:54417":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"11:0:1848":{"crate_id":11,"path":["adler"],"kind":"module"},"14:250:43828":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:8590:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:9716:63414":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:12262:50406":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"6:4116:41361":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:24042:4759":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"21:11808:2057":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:48871:4634":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"15:0:1851":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:1157:9003":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:6577:4163":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:56523:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13708:51582":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:10407:5957":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:6035:5605":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:2376:5321":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13522:51565":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:24824:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:6205:42429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:48346:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"24:203:2037":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"21:6924:3015":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"6:5455:62536":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:13495:51560":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:47273:32899":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:49102:59957":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:18574:2330":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"1:14790:54433":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4493:41400":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13481:51558":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"5:1729:4268":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:8291:2764":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6504:5648":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:10851:45724":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:10493:5310":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:13020:5001":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:9131:45523":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"20:169:1672":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"17:12209:50402":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:5378:42006":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:48835:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:11514:46221":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:7119:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:7692:2253":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"27:593:3721":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"2:3462:3567":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"21:16682:2176":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:46587:5158":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"0:116:1556":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:10242:56012":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:13595:51578":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"21:18385:4042":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"1:15750:1879":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"9:41:5392":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:10104:6000":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:15747:1876":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:24989:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:2861:5827":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"30:1012:4705":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"12:2419:4242":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:11175:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6908:41529":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"30:919:63844":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"21:15935:2058":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"2:50616:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"2:48774:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:15710:58407":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"6:6914:41530":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"27:397:2648":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"16:3177:5833":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:50021:4233":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"17:10814:5920":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:7090:5658":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:18275:2316":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"17:11653:46271":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:9033:45520":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:4511:2949":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:23407:4758":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:18159:106":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"21:18679:2098":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"17:13515:51564":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:4871:44547":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:2772:5852":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"27:474:3725":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"17:11769:46451":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:46836:4610":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"18:849:6022":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:10136:45533":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11579:46231":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4532:41404":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:7048:2503":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"21:11930:2059":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"16:6679:5867":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"21:18066:2314":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:12716:50503":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:2905:5828":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:2167:2764":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"24:237:2036":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"16:7323:5588":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:6954:41535":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:4743:44515":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:8929:45518":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"9:809:3716":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:3505:3576":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:51494:59911":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:3883:41337":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"5:1740:4269":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"16:3199:5834":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:8262:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:5326:5609":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:10925:2320":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:11381:4329":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:2958:2295":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"21:9999:3780":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"16:4381:44417":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"16:5721:5627":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:11379:2763":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:8426:4488":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:15199:63876":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"17:9873:45533":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:10511:2043":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"1:7714:2667":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"21:10732:2042":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"1:11224:12299":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:9206:45524":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:4157:4447":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"21:18441:2320":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"16:5668:5624":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"17:13565:51570":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:10554:4640":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:18498:2322":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"16:3265:5837":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6286:5491":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:11474:46160":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"9:686:5340":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:6949:5875":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:9326:5985":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:4942:44570":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"18:694:6033":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:49781:5000":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:5869:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:5460:5617":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"6:4142:41364":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:5570:4188":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"21:11869:2056":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"17:299:63589":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:1527:4273":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:13004:2095":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"2:4835:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:157:38031":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"6:4485:41399":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:47943:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:56601:237":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3462:4239":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"23:0:1994":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"21:18737:2099":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"16:6549:5583":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"19:117:63858":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"1:7582:4361":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:9503:2640":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:14569:4358":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"5:5910:2078":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11381:45935":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:13755:51620":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:4197:2965":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5959:5557":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:10489:10021":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:4402:2941":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:6896:41527":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"5:1684:2764":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:2376:2801":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:4866:4833":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:3355:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"21:17413:2764":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"6:4464:41397":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:3029:5831":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:23405:4782":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:15765:1892":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:14358:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"6:4392:41388":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"21:1567:2082":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"1:10728:3807":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"21:12402:2078":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:16075:2174":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"31:88:4116":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"17:10464:5988":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:10604:4197":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:10156:45516":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:11170:4200":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:11031:45537":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"5:3436:4236":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:2041:2941":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:10980:4204":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"6:4028:41350":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"30:826:6027":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"25:0:1659":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"2:52615:4804":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"26:55:52685":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"6:1626:39239":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"6:3993:41346":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:11826:54437":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:13530:109":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"15:230:5493":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:513:38339":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:2370:601":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:5184:4921":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:50321:5082":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:2843:5306":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:11784:46452":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"6:4012:41348":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"17:10068:5970":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:15238:5502":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"18:744:63844":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:49047:4283":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:10913:45830":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:4332:41380":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:49503:4978":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"21:18007:2312":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"17:11085:5952":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:12117:50395":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:9579:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"1:15757:1884":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"30:820:6030":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:4440:41394":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:1462:4266":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"8:0:1845":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"30:812:2160":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"21:17922:2310":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"21:988:1653":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"0:0:1747":{"crate_id":0,"path":["futures"],"kind":"module"},"2:10544:4636":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:12512:50423":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:13899:51661":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:1296:5302":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"18:790:6017":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:3659:3581":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"9:900:43227":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:6759:2679":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"17:11628:46269":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"5:3114:60830":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:4340:41381":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:15759:1886":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:46800:10539":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:10846:2187":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"4:0:1844":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:10394:5958":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:13241:4337":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:51346:4814":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:3085:4172":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5405:42009":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11937:45756":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"21:12783:2089":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"16:7369:5568":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"30:879:2160":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:46867:4613":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"16:7355:5567":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:3908:44064":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"26:0:1995":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"1:11182:4533":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:48220:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:2867:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:5715:4529":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:1663:2184":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6097:39172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12237:50404":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"16:3743:43947":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:11142:45540":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:2266:60761":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"12:928:4267":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:47057:2157":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"18:136:52024":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:6277:5641":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:49881:5004":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:10610:45752":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"21:4389:2164":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"2:10816:4243":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:49977:5008":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:49063:4557":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:11559:4971":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:5301:42002":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"}},"external_crates":{"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"futures_channel","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"futures_task","html_root_url":null},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_executor","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"futures_core","html_root_url":null},"28":{"name":"slab","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"futures_macro","html_root_url":null}},"format_version":18}