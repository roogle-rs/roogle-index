{"root":"0:0:1797","crate_version":"0.3.28","includes_private":false,"index":{"0:50-31:109:1765":{"id":"0:50-31:109:1765","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:109:1765","glob":false}},"0:74-21:3664:1708":{"id":"0:74-21:3664:1708","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3664:1708","glob":false}},"0:42-21:57:1730":{"id":"0:42-21:57:1730","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1730","glob":false}},"2:11943:25947":{"id":"2:11943:25947","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:34-21:6630:1727":{"id":"0:34-21:6630:1727","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6630:1727","glob":false}},"2:11975:25944":{"id":"2:11975:25944","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11874:417","str::splitn":"2:11972:25942","self::pattern":"2:11609:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:43336:8096","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12016:31661":{"id":"2:12016:31661","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12034:2400":{"id":"2:12034:2400","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4528:2400"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:43522:2401","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11998:31655":{"id":"2:11998:31655","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11910:31640":{"id":"2:11910:31640","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12031:25620":{"id":"2:12031:25620","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78-29:25:1716":{"id":"0:78-29:25:1716","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1716","glob":false}},"0:24-21:6044:1719":{"id":"0:24-21:6044:1719","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6044:1719","glob":false}},"0:4-2:12192:135":{"id":"0:4-2:12192:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:12192:135","glob":false}},"0:84-21:6061:1721":{"id":"0:84-21:6061:1721","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6061:1721","glob":false}},"0:11-20:97:1706":{"id":"0:11-20:97:1706","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1706","glob":false}},"2:11966:31647":{"id":"2:11966:31647","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11609:8109","str::split":"2:11957:2287","prim@char":"1:11874:417","`DoubleEndedIterator`":"2:7194:120","str::rsplit_terminator":"2:11969:31648"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:43264:8129","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18-29:27:1714":{"id":"0:18-29:27:1714","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1714","glob":false}},"2:11931:25930":{"id":"2:11931:25930","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11930:25929"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:25946":{"id":"2:11940:25946","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29-21:6631:1724":{"id":"0:29-21:6631:1724","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:6631:1724","glob":false}},"0:69-21:424:1702":{"id":"0:69-21:424:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1702","glob":false}},"0:54-31:120:1769":{"id":"0:54-31:120:1769","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1769","glob":false}},"2:11960:25938":{"id":"2:11960:25938","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11432:8100","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44-21:6102:1733":{"id":"0:44-21:6102:1733","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:6102:1733","glob":false}},"0:31-21:6628:1725":{"id":"0:31-21:6628:1725","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:6628:1725","glob":false}},"2:11920:25903":{"id":"2:11920:25903","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41253:178"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11917:31643":{"id":"2:11917:31643","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11928:31644":{"id":"2:11928:31644","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11880:1392","str::slice_mut_unchecked":"2:11929:31645","crate::ops::Index":"2:2970:2473"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:5-20:32:1700":{"id":"0:5-20:32:1700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1700","glob":false}},"0:15-25:9:1710":{"id":"0:15-25:9:1710","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1710","glob":false}},"0:46:1608":{"id":"0:46:1608","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1763","`LocalPool`":"31:120:1769"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:48-31:65:1763","0:49-31:68:1764","0:50-31:109:1765","0:51-31:136:1766","0:52-31:100:1767","0:53-31:102:1768","0:54-31:120:1769","0:55-31:125:1770"],"is_stripped":false}},"0:19-29:17:1715":{"id":"0:19-29:17:1715","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1715","glob":false}},"0:76-29:27:1714":{"id":"0:76-29:27:1714","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1714","glob":false}},"0:62-21:4576:1711":{"id":"0:62-21:4576:1711","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:4576:1711","glob":false}},"0:32-21:37:1726":{"id":"0:32-21:37:1726","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:37:1726","glob":false}},"2:11916:25893":{"id":"2:11916:25893","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11176:8113"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11924:25905":{"id":"2:11924:25905","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:13-21:2760:1707":{"id":"0:13-21:2760:1707","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1707","glob":false}},"2:11938:31646":{"id":"2:11938:31646","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:43478:8123","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58-21:104:704":{"id":"0:58-21:104:704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:104:704","glob":false}},"2:11981:31650":{"id":"2:11981:31650","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5401:25622":{"id":"5:5401:25622","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12031:25620"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:31651":{"id":"2:11987:31651","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11609:8109","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::matches":"2:11984:2015"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:43436:8127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:23-21:6079:1718":{"id":"0:23-21:6079:1718","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6079:1718","glob":false}},"0:8-21:589:1703":{"id":"0:8-21:589:1703","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1703","glob":false}},"5:5386:32318":{"id":"5:5386:32318","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:25904":{"id":"2:11922:25904","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41253:178"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:16-21:5040:1712":{"id":"0:16-21:5040:1712","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5040:1712","glob":false}},"0:41-21:5081:1729":{"id":"0:41-21:5081:1729","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:5081:1729","glob":false}},"0:70-21:589:1703":{"id":"0:70-21:589:1703","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1703","glob":false}},"2:12013:25949":{"id":"2:12013:25949","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52-31:100:1767":{"id":"0:52-31:100:1767","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1767","glob":false}},"2:11937:2278":{"id":"2:11937:2278","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:43468:2304","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33-21:20:1048":{"id":"0:33-21:20:1048","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:20:1048","glob":false}},"2:11907":{"id":"2:11907","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11908:809","2:11909:21007","2:11910:31640","2:11911:31641","2:11913:31642","2:11916:25893","2:11917:31643","2:11918:313","2:11919:25907","2:11920:25903","2:11922:25904","2:11924:25905","2:11926:25906","2:11928:31644","2:11929:31645","2:11930:25929","2:11931:25930","2:11932:28635","2:11933:28578","2:11934:20200","2:11935:28356","2:11936:28355","2:11937:2278","2:11938:31646","2:11939:28636","2:11940:25946","2:11943:25947","2:11946:25948","2:11949:19846","2:11953:19847","2:11957:2287","2:11960:25938","2:11963:25940","2:11966:31647","2:11969:31648","2:11972:25942","2:11975:25944","2:11978:31649","2:11981:31650","2:11984:2015","2:11987:31651","2:11990:31652","2:11993:31653","2:11996:31654","2:11998:31655","2:12000:31656","2:12002:31657","2:12003:31658","2:12004:31659","2:12007:31660","2:12010:21465","2:12013:25949","2:12016:31661","2:12019:31662","2:12022:31663","2:12025:31664","2:12027:25624","2:12028:27029","2:12029:25625","2:12030:25621","2:12031:25620","2:12032:31665","2:12034:2400","2:12035:31666"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:28-22:7:1723":{"id":"0:28-22:7:1723","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1723","glob":false}},"5:5400:25623":{"id":"5:5400:25623","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12030:25621"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11978:31649":{"id":"2:11978:31649","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11926:25906":{"id":"2:11926:25906","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9783:221","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11957:2287":{"id":"2:11957:2287","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11609:8109","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::split_whitespace":"2:11935:28356","str::rsplit":"2:11963:25940"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:43214:2577","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77-29:17:1715":{"id":"0:77-29:17:1715","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1715","glob":false}},"0:51-31:136:1766":{"id":"0:51-31:136:1766","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1766","glob":false}},"2:11918:313":{"id":"2:11918:313","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11919:25907","`u8`":"1:11891:1490"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1797":{"id":"0:0:1797","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5135:1734","crate::executor":"0:46:1608","crate::stream":"21:1293:1704","crate::channel":"27:0:1731","crate::future":"21:104:704","crate::sink":"21:4576:1711"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:46:1608","0:56:1065","0:4-2:12192:135","0:5-20:32:1700","0:7-21:424:1702","0:8-21:589:1703","0:10-20:68:1705","0:11-20:97:1706","0:13-21:2760:1707","0:14-21:3664:1708","0:15-25:9:1710","0:16-21:5040:1712","0:18-29:27:1714","0:19-29:17:1715","0:20-29:25:1716","0:21-29:20:1717","0:23-21:6079:1718","0:24-21:6044:1719","0:25-21:6074:1720","0:26-21:6061:1721","0:27-20:131:1722","0:28-22:7:1723","0:29-21:6631:1724","0:31-21:6628:1725","0:32-21:37:1726","0:33-21:20:1048","0:34-21:6630:1727","0:35-21:6629:1728","0:37-21:104:704","0:38-21:5133:934","0:39-21:4576:1711","0:40-21:1293:1704","0:41-21:5081:1729","0:42-21:57:1730","0:43-27:0:1731","0:44-21:6102:1733","0:45-21:5135:1734"],"is_stripped":false}},"5:5397:32320":{"id":"5:5397:32320","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59-2:12192:135":{"id":"0:59-2:12192:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:12192:135","glob":false}},"2:11919:25907":{"id":"2:11919:25907","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11891:1490"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11936:28355":{"id":"2:11936:28355","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11935:28356"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:43497:8111","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12007:31660":{"id":"2:12007:31660","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12030:25621":{"id":"2:12030:25621","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:40-21:1293:1704":{"id":"0:40-21:1293:1704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:1293:1704","glob":false}},"2:11913:31642":{"id":"2:11913:31642","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11911:31641"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11963:25940":{"id":"2:11963:25940","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11609:8109","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::split":"2:11957:2287"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:43232:8094","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12032:31665":{"id":"2:12032:31665","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4527:31665"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:43513:8120","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48-31:65:1763":{"id":"0:48-31:65:1763","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1763","glob":false}},"0:21-29:20:1717":{"id":"0:21-29:20:1717","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1717","glob":false}},"5:5389:32319":{"id":"5:5389:32319","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1065":{"id":"0:56:1065","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:58-21:104:704","0:59-2:12192:135","0:60-20:32:1700","0:62-21:4576:1711","0:63-25:9:1710","0:65-21:1293:1704","0:66-20:68:1705","0:67-20:97:1706","0:69-21:424:1702","0:70-21:589:1703","0:71-21:5040:1712","0:73-21:2760:1707","0:74-21:3664:1708","0:76-29:27:1714","0:77-29:17:1715","0:78-29:25:1716","0:79-29:20:1717","0:81-21:6079:1718","0:82-21:6044:1719","0:83-21:6074:1720","0:84-21:6061:1721"],"is_stripped":false}},"0:14-21:3664:1708":{"id":"0:14-21:3664:1708","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3664:1708","glob":false}},"0:79-29:20:1717":{"id":"0:79-29:20:1717","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1717","glob":false}},"2:11949:19846":{"id":"2:11949:19846","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41253:178","prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:39-21:4576:1711":{"id":"0:39-21:4576:1711","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:4576:1711","glob":false}},"2:12000:31656":{"id":"2:12000:31656","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:37-21:104:704":{"id":"0:37-21:104:704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:104:704","glob":false}},"0:73-21:2760:1707":{"id":"0:73-21:2760:1707","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1707","glob":false}},"2:11930:25929":{"id":"2:11930:25929","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11931:25930"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11933:28578":{"id":"2:11933:28578","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11874:417"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:43190:8115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43-27:0:1731":{"id":"0:43-27:0:1731","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1731","glob":false}},"2:12004:31659":{"id":"2:12004:31659","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11634:8104","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49-31:68:1764":{"id":"0:49-31:68:1764","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1764","glob":false}},"2:11908:809":{"id":"2:11908:809","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11874:417"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11972:25942":{"id":"2:11972:25942","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109","str::rsplitn":"2:11975:25944"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:43318:8098","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12035:31666":{"id":"2:12035:31666","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4525:31666"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:43531:8121","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25-21:6074:1720":{"id":"0:25-21:6074:1720","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6074:1720","glob":false}},"2:12003:31658":{"id":"2:12003:31658","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5399:2147":{"id":"5:5399:2147","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55-31:125:1770":{"id":"0:55-31:125:1770","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1770","glob":false}},"5:5383:8435":{"id":"5:5383:8435","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7250:223"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83-21:6074:1720":{"id":"0:83-21:6074:1720","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6074:1720","glob":false}},"0:63-25:9:1710":{"id":"0:63-25:9:1710","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1710","glob":false}},"0:81-21:6079:1718":{"id":"0:81-21:6079:1718","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6079:1718","glob":false}},"5:5382:32317":{"id":"5:5382:32317","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2258","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2465","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2258","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2465","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11939:28636":{"id":"2:11939:28636","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:43506:8110","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:2015":{"id":"2:11984:2015","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11609:8109","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::matches":"2:11984:2015"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:43418:8126","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12010:21465":{"id":"2:12010:21465","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:20-29:25:1716":{"id":"0:20-29:25:1716","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1716","glob":false}},"2:11969:31648":{"id":"2:11969:31648","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11609:8109","str::split":"2:11957:2287","prim@char":"1:11874:417","str::split_terminator":"2:11966:31647"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:43282:8128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12028:27029":{"id":"2:12028:27029","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39409:25892","Self::is_ascii":"2:12027:25624"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"AsciiChar","id":"2:39409:25892","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10-20:68:1705":{"id":"0:10-20:68:1705","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1705","glob":false}},"2:11909:21007":{"id":"2:11909:21007","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11932:28635":{"id":"2:11932:28635","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11874:417"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:43184:8116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53-31:102:1768":{"id":"0:53-31:102:1768","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1768","glob":false}},"5:5381":{"id":"5:5381","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5382:32317","5:5383:8435","5:5386:32318","5:5389:32319","5:5397:32320","5:5398:32321","5:5399:2147","5:5400:25623","5:5401:25622"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:60-20:32:1700":{"id":"0:60-20:32:1700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1700","glob":false}},"2:11946:25948":{"id":"2:11946:25948","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:27-20:131:1722":{"id":"0:27-20:131:1722","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:131:1722","glob":false}},"0:66-20:68:1705":{"id":"0:66-20:68:1705","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1705","glob":false}},"0:35-21:6629:1728":{"id":"0:35-21:6629:1728","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:6629:1728","glob":false}},"0:65-21:1293:1704":{"id":"0:65-21:1293:1704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:1293:1704","glob":false}},"2:12025:31664":{"id":"2:12025:31664","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11570:126","`FromStr`":"2:11569:2735"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:41395:209","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11569:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11569:2735","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12027:25624":{"id":"2:12027:25624","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_is_ascii\", issue = \"111090\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11934:20200":{"id":"2:11934:20200","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:43200:2576","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11935:28356":{"id":"2:11935:28356","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11936:28355"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:43488:8112","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82-21:6044:1719":{"id":"0:82-21:6044:1719","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6044:1719","glob":false}},"0:45-21:5135:1734":{"id":"0:45-21:5135:1734","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:5135:1734","glob":false}},"2:11993:31653":{"id":"2:11993:31653","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11609:8109","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::match_indices":"2:11990:31652"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:43382:8125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11929:31645":{"id":"2:11929:31645","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11880:1392","crate::ops::IndexMut":"2:2974:2474","str::slice_unchecked":"2:11928:31644"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:12002:31657":{"id":"2:12002:31657","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5398:32321":{"id":"5:5398:32321","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:279:2258","`String`":"5:7250:223"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:279:2258","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6999:2465","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7250:223","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11911:31641":{"id":"2:11911:31641","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67-20:97:1706":{"id":"0:67-20:97:1706","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1706","glob":false}},"0:71-21:5040:1712":{"id":"0:71-21:5040:1712","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:5040:1712","glob":false}},"0:7-21:424:1702":{"id":"0:7-21:424:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1702","glob":false}},"0:26-21:6061:1721":{"id":"0:26-21:6061:1721","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6061:1721","glob":false}},"2:11990:31652":{"id":"2:11990:31652","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11609:8109","`DoubleEndedIterator`":"2:7194:120","prim@char":"1:11874:417","str::rmatch_indices":"2:11993:31653"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:43364:8124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12029:25625":{"id":"2:12029:25625","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11996:31654":{"id":"2:11996:31654","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12022:31663":{"id":"2:12022:31663","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38-21:5133:934":{"id":"0:38-21:5133:934","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:5133:934","glob":false}},"2:11953:19847":{"id":"2:11953:19847","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41253:178","prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:41251:180","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11629:8106","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12019:31662":{"id":"2:12019:31662","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11874:417","self::pattern":"2:11609:8109"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11614:8105","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"17:8443:15705":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"21:6906:34948":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:4325:8212":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:4:1011":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"16:2931:14637":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:2341:2538":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4836:12715":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:7544:12894":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"21:1293:1704":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"21:14889:2312":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"6:6821:13803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:9148:34613":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"30:769:2185":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:57:1730":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"14:165:14541":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"21:7234:2090":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:8399:191":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"21:15098:34787":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"21:5918:2191":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"2:40195:2083":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:9207:2137":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"17:12126:19013":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:13689:19808":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:41608:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"7:32:14380":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:39940:8237":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"6:4827:12714":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"1:8040:2556":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"5:2911:31303":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:4244:206":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:10369:2164":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"2:47282:8005":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:554:9221":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:9469:15751":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:5559:2783":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:4732:2650":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"27:497:19947":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"17:12770:19746":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:9113:8050":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"21:14722:2303":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"21:4353:19880":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"21:13761:2236":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"27:369:2783":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"2:2801:8452":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:8153:2612":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10465:15899":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"21:12353:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"6:4813:12712":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:8127:2178":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:42315:68":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:43122:8092":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"16:8090:15627":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:5032:12736":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4609:12691":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"17:9596:15762":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:4486:12679":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"24:169:2079":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"1:11188:21415":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"16:4510:15175":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:2503:148":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"21:14878:2311":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"17:10681:15934":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"16:8170:15632":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:39907:8120":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:6151:13413":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5017:23076":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42755:8586":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:39914:8234":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"21:13368:2216":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"21:13734:2423":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"17:3142:15848":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:6365:2216":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:12563:19041":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4681:2627":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12006:19004":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"6:4707:12699":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:3672:2301":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"21:14910:2178":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"21:5081:1729":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"30:546:19859":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10885:15730":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"21:11005:2089":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"17:11434:18494":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"11:1050:14529":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:5708:2236":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:43030:8085":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:21682:28738":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"17:562:15699":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"2:12467:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:7791:2555":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:40295:2176":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:47051:2906":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"5:7190:2517":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"16:7635:15613":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:4757:15254":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:42552:2729":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:2720:14628":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"21:12044:2085":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"6:4719:12700":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:30145:8438":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"21:11349:2187":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"1:4069:25319":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"30:655:19863":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:2822:8457":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:11410:18492":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:21714:28626":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"21:8496:34948":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"17:8909:2576":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:41648:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:20895:2836":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"21:14373:34948":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:12915:19751":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"17:11993:19003":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"17:9380:15746":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"17:11220:15946":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"2:2460:2645":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:46989:2872":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"20:68:1705":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:44978:2891":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:9107:8052":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:44204:160":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"11:0:1904":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"2:11609:8109":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:20505:28198":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:4120:2663":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:2830:14633":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"27:451:2790":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"1:7779:2554":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"25:0:1709":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"21:5135:1734":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"21:9213:2138":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"21:5743:2566":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"11:991:2436":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:8900:20864":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:43041:8076":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:3988:28745":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:1576:10134":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:6129:20869":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:4553:12687":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:20653:2845":{"crate_id":2,"path":["core","core_simd","cast","SimdCastPtr"],"kind":"trait"},"2:4753:388":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"20:131:1722":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"17:10377:15847":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:12902:19750":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:46269:2877":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"11:60:33473":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"30:81:19833":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:11193:15945":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"17:9340:15723":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:953:2434":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:12826:2211":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"17:11800:18994":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"5:1041:31636":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"20:97:1706":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"6:6016:13382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:8147:2304":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"21:2760:1707":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"2:44021:8614":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:6289:31088":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:9443:15749":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:0:814":{"crate_id":6,"path":["libc"],"kind":"module"},"24:12:19873":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"17:10516:15893":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"17:8283:15700":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"21:6238:19894":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"21:13323:34827":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"1:11896:787":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:10131:2755":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"2:43382:8125":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"5:1715:2427":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:47410:8013":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"21:14284:2295":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:39973:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"11:399:33474":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10478:15898":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:3533:2212":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"27:439:2788":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"27:124:19929":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"21:14005:34948":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"17:12293:19022":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:14347:2297":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"6:579:9225":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"5:5484:8175":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:6628:8414":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43102:8093":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"31:100:1767":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"2:3186:8036":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:45776:28693":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:8489:2734":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6935:15590":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:488:9213":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"20:92:2645":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"5:3149:2444":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11234:18483":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"18:80:19833":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:13725:2212":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"17:11600:18506":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"21:12685:2195":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"2:45623:2931":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10923:15732":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:6369:2773":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:22303:2388":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:46303:2926":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:40083:8074":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"17:11861:18996":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:5594:15534":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:13659:19805":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:43846:8131":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:13453:19792":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6535:33567":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:39030:199":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:47357:8010":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:11680:8133":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:47235:2933":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:10092:15884":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"21:7981:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:3899:14708":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:1594:2445":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:11205:34948":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"2:2686:224":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:10828:2745":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"6:4803:12711":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:39818:8204":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:41728:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:3287:2582":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:652:2185":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:13812:19816":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"17:8573:15709":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:22138:177":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"6:653:9274":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:6361:15566":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:3266:15866":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"16:8025:15624":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"21:10823:2178":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"2:43969:8613":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"16:7543:15608":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:10589:15931":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:10670:15924":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:43468:2304":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:6574:8175":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:2742:2825":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"21:11268:34948":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"17:242:34612":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"30:753:34655":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:46659:2894":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:2904:8028":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:8312:2708":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:13777:19813":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:43949:8601":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:2738:8424":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"6:1519:10127":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:5811:15545":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"14:31:14540":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10026:15881":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"21:10634:34948":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:3203:2593":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:41083:2604":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"11:828:2432":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:4320:244":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:6868:33558":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:7837:15622":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:1525:10128":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:46003:2905":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"21:1089:2135":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"21:10474:2172":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:44233:8024":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:547:9220":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:5689:2770":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:10705:2247":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:9973:15805":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:1785:2481":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:13506:19798":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:2862:209":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:4134:8218":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:8330:2728":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:10650:2551":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"21:11692:2192":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"21:14715:33427":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"5:3974:2236":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"5:7275:8152":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:4872:15273":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:11832:15887":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:9594:29046":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"21:14867:2310":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"2:5941:8417":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"21:11398:34878":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"1:4637:2669":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"16:5886:15547":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:5305:15514":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:10741:8088":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:13821:19817":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:3924:2566":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"21:10206:34948":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"1:7564:2645":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:7217:2256":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:782:2171":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"21:11300:2186":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"16:4728:15249":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11011:15684":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:6008:13381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:20475:28036":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"17:8718:15686":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"5:2188:31014":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:8201:2607":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13240:19772":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"21:7280:2092":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"1:8818:2786":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:3131:8464":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:10569:15896":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:45209:2863":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"17:9566:15721":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12522:19038":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:40153:2161":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"5:7173:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13803:19815":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"17:9748:15720":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"21:6961:34948":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:2864:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:4327:15088":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:2905:14636":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"16:7859:15623":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"21:8262:2103":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"2:41768:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"24:0:1798":{"crate_id":24,"path":["futures_task"],"kind":"module"},"2:41319:2423":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:40172:2163":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:13316:19778":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:1589:2444":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"5:688:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"17:10615:15922":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:1980:2301":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:44140:210":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"14:187:14548":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:119:33455":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:40575:2214":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:7638:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:7061:197":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:10815:2501":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:12622:15737":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4288:12659":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:9931:2212":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"21:6720:2086":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"21:6102:1733":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"18:531:19862":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:11404:34807":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"20:27:2645":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:10270:15844":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5677:15539":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"21:12374:2197":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"17:9275:34638":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10068:15882":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"2:21698:29566":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:2974:2474":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6671:14556":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"17:13082:19761":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:12399:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:10065:2185":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"2:20833:2645":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:40550:8401":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"11:1843:2424":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:638:2406":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:4000:28710":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:20640:2844":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"16:3749:14654":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:3127:23253":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:43264:8129":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:12496:19036":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"16:6520:15576":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:11020:21459":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12307:19023":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"18:507:2185":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2319:14611":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:2087:2438":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"1:11891:1490":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:8785:2791":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:8918:21446":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"18:755:19857":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:10996:2750":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4952:12728":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:11146:8554":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:9380:21009":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:3453:2312":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"9:388:14410":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:1847:2236":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:5847:15546":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:9955:2423":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"21:6199:165":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"17:1787:15783":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"21:6881:2086":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"17:9772:15784":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:2308:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:5418:33892":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:1634:33456":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:3928:2632":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:21472:2837":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:309:19886":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:46911:2900":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"18:699:19855":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:585:2399":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"21:9660:34948":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"2:7542:2450":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:7578:14364":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:867:2424":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:22369:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:4377:12666":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"31:120:1769":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"21:13767:2237":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"5:7264:8151":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:9980:2577":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:39899:2401":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"21:10653:2169":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"21:6823:2091":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"16:5386:14579":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:1227:2437":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:4800:793":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:20715:2847":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"21:6795:34948":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:39869:8240":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:4365:2566":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"21:7016:34948":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:8205:2714":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:8017:2100":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"1:8863:2790":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7042:33646":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:39879:8241":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"21:9748:2082":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:45601:2925":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"5:4136:2566":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"17:9876:15830":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:7652:197":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:5900:13372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"21:7186:2088":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"21:7676:2109":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"17:1919:15817":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2298:14583":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:844:2212":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"5:6735:31113":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:41146:29583":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:9653:15795":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"1:7502:21030":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"21:13199:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"21:10588:34948":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"6:4439:12673":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"21:402:20914":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"5:35:2476":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"21:8871:2127":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"1:11894:1489":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11161:2756":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"27:11:36372":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:40556:2213":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"21:4408:21039":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"2:39046:197":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:10747:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"21:9555:2162":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"16:6990:15593":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:635:2405":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:9178:15719":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:39229:8212":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:11454:22999":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"21:37:1726":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"2:39978:2518":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:9641:15769":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"13:226:33479":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"21:9917:34948":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"2:2303:187":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4307:12661":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13356:19782":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13842:19818":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11486:14567":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13309:19777":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:11946:19001":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:11041:34948":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"9:421:14411":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:13411:19787":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"1:4634:2696":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:9523:15760":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:13667:19806":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:42031:8053":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7233:2516":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"21:13436:34948":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"1:731:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"21:8713:2123":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:9101:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:2970:2473":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:2789:8451":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"17:13145:19764":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"21:13795:34948":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"21:14074:34948":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"2:40265:2173":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:12550:19040":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:8420:15704":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:9328:2181":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"21:14230:34948":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"1:3350:2566":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:5967:13376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:30339:29215":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:8257:2699":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:1572:2427":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"16:6146:193":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:6236:15558":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:44221:8026":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:7545:2453":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:1588:10135":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:14396:2298":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"2:43020:8084":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:3631:2424":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:3146:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:42010:8043":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"21:15165:34789":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"21:12578:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"21:14605:2300":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"11:1126:14531":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:39215:15634":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"2:39134:202":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"11:1561:14534":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:10100:8101":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"21:12915:2204":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"2:22435:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:41311:2212":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"14:221:14550":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11520:18500":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:20901:2838":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:5630:15536":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"2:2345:188":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:643:2407":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:3306:69":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"1:3990:2638":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:1812:2461":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:42306:71":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"5:1350:2212":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:9109:8053":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:11258:18484":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"21:11916:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:5682:2769":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:3047:14640":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:10598:15734":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"5:0:285":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:40224:2086":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"30:97:19834":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:39156:2415":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:9409:15747":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:5755:13361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:40527:8399":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:44148:194":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4678:2649":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:4840:2694":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"24:135:2080":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"17:13419:19788":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"21:589:1703":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"21:7254:34948":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:487:15698":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:8953:20879":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:7119:8406":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:11629:8106":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:6321:15562":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:10635:15923":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:20507:28200":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:45555:2870":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"2:41336:2712":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:40006:8531":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:2887:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:11532:18501":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:6696:15581":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2506:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:5058:12738":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"16:8109:15628":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"6:4472:12677":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11888:741":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:5367:14581":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"1:9975:2491":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"30:807:19854":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:6061:14582":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"21:7822:2105":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"1:4755:2643":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:3497:2236":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"18:707:8107":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"9:234:2729":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:10416:15925":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:11028:8613":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"21:9878:69":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"17:11459:18496":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"2:30105:2455":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:45148:2909":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"6:482:9212":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:21248:2850":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:922:2429":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:30233:29218":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:43478:8123":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:6587:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"21:11326:34948":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"16:3063:14641":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:8823:15713":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"1:9871:20191":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"16:8269:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:4784:12708":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:43965:8595":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:9577:15764":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:47449:8014":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:42531:8261":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:2509:237":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:4091:2660":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:41488:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:40125:8409":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10555:15894":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:11878:311":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"21:9939:2156":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"2:43953:8599":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:15009:2141":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"1:8948:20892":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"21:6684:2083":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"1:8096:2249":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"5:7023:2236":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:12433:19032":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:20671:2841":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"21:14828:2306":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"17:12634:19045":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:8979:34637":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:4851:12717":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:7521:21039":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"21:7387:34948":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"6:562:9222":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:30737:8253":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:31933:8511":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"1:901:2236":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:879:2212":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"16:4904:15281":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"21:9118:2134":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"6:4478:12678":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"16:2572:14622":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:2806:8453":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:10257:15846":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:4248:8205":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"21:13679:19876":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"6:4767:12706":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"21:14489:108":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"1:11895:1486":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:2862:14634":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:480:21034":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"2:44246:28579":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"2:43232:8094":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"4:0:1900":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"21:14857:2309":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"17:13612:19801":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"11:783:14527":{"crate_id":11,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"2:42540:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:10840:21488":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"21:13494:2217":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"17:12098:19011":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"21:14160:34948":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"2:39926:8235":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:46239:2871":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"11:1071:33478":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:8204:2715":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:1241:2439":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12576:19042":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:7204:28696":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6861:21835":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"21:5860:1710":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"5:5903:2566":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:7230:9172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:10527:15929":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"21:14988:19890":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"17:12224:19018":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:7538:12893":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:8203:2716":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:43945:8597":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"28:37:2212":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"21:327:2095":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"1:4251:2665":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:279:2258":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2206:2534":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"21:12734:2196":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"21:2709:2191":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"21:6074:1720":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"11:757:2236":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"21:11813:2098":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"17:9917:15828":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"21:15135:34797":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"11:1009:2437":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:12372:19028":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"21:13449:2126":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:12192:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:10685:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:11008:2751":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"18:491:34665":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:45879:2893":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:2154:8478":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:9096:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4619:12692":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"21:6629:1728":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"21:10466:2174":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"17:13721:19810":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:6184:2783":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"17:13625:19802":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:6637:2082":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"6:494:9214":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"21:10563:2171":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"2:21773:28535":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:45525:2864":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:9113:22935":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"2:20999:2835":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"21:4476:2127":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"21:12479:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"21:13045:2203":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"17:11069:15738":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"11:1873:2444":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:20893:2645":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:5870:13370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"27:146:205":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"16:2668:14626":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:5857:13368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"21:6775:2082":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:8389:15703":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"21:10547:34948":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"30:624:2185":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:9071:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"28:207:2438":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"17:10691:15935":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"29:20:1717":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:40103:2471":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"5:1431:2429":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6793:15584":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:5350:2742":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"27:127:19930":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"1:3934:2633":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:1839:2212":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"21:927:2125":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:4969:15298":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"21:13934:34948":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"1:5715:2771":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13488:19796":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:10044:20206":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10967:15734":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"24:15:19875":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"30:777:19851":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12138:19014":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:13211:19769":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"28:216:2436":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"24:296:36298":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"2:4593:8227":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:9178:2497":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:9105:8043":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"21:9093:34948":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"18:582:8253":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:10978:34948":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"1:8905:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"6:4980:12731":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:5935:13373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"9:445:14409":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:6569:9097":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:4103:8217":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:2152:8477":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"21:14108:2244":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"1:3876:2628":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:8227:2612":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:13410:2115":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"30:707:28624":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:8651:14579":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:4425:8215":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:9108:34629":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:9617:15757":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:8629:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:11623:8107":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:13469:19794":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"16:6179:15555":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:7669:15614":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:14754:34948":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"2:9061:2316":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"1:4409:2669":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"21:424:1702":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"1:7935:2246":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"21:12244:2105":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"21:7778:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:41446:2423":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"2:2811:8454":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:7165:2257":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"28:0:2047":{"crate_id":28,"path":["slab"],"kind":"module"},"17:13367:19783":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:12205:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:7925:23101":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"20:17:2037":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"1:8996:20896":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:5402:14577":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"6:6651:10067":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:41117:2606":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:12085:19010":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"6:1514:10126":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:2580:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:4817:203":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:8886:2772":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:8753:15711":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"30:883:19850":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:45046:2862":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:11479:14567":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"1:4559:2633":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"20:0:1699":{"crate_id":20,"path":["futures_core"],"kind":"module"},"6:5773:13362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"21:6145:2191":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"1:2609:2298":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:7555:12895":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"21:14837:2307":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"16:6854:15586":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"11:840:2433":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"2:42770:28327":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"13:0:1899":{"crate_id":13,"path":["std_detect"],"kind":"module"},"6:7258:14175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:2769:8447":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:3444:27803":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:2357:2543":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:9038:34622":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"6:62:8842":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"21:7618:2107":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"11:359:33463":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:43792:8147":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"21:9809:2165":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"1:911:2427":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:8256:15635":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:11047:2560":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"18:636:34655":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:1433:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:4865:12719":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"10:0:1903":{"crate_id":10,"path":["adler"],"kind":"module"},"2:9111:193":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:43001:2183":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"21:12803:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"6:1752:10150":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:13461:19793":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:1736:10149":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"1:3244:2590":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:11301:20910":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"2:1747:8488":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6728:15582":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:40316:2178":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:30139:8171":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"29:25:1716":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"1:5435:2745":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"17:9488:15766":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:5063:190":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"1:9031:218":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:9028:34948":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:11372:18490":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"21:8431:2113":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"5:3183:2445":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:12358:19027":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:21:679":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"6:6110:13411":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2500:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:4845:12716":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"5:3162:31280":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:43200:2576":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:40233:8411":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"31:0:1762":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"2:21856:29562":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:40143:2160":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:39195:8188":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:4445:15158":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:4318:12662":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"6:5809:13366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"5:1611:31088":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:46801:2866":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:4379:8214":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:10621:2698":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:9986:15833":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:7626:15612":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10354:15849":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:5366:2743":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"26:0:2046":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"21:12534:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"30:716:34658":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:11969:2099":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"2:45745:28692":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:8420:2731":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:9228:34627":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:11162:8556":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"21:8692:34948":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:2213:2284":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"21:13639:34805":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"6:4499:12681":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"5:1462:2457":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"21:13118:2206":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"16:7437:15599":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"5:962:31088":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"21:15067:2142":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"1:3906:2630":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:6097:21006":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"6:119:8896":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:2773:2826":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:39222:28724":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:10402:15913":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:926:2430":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:39839:28568":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"21:10090:34948":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"26:37:36371":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"6:6598:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"21:13391:34948":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"1:7814:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:41808:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:22237:176":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:10858:2752":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"1:8941:23092":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:4726:12701":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:8971:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"18:719:19848":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:47387:8012":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:9512:15761":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:39409:25892":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"5:3546:2423":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:6005:21020":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:5747:13360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"16:2524:14620":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:3157:2442":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13639:19803":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:10989:15735":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:1657:10141":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:6903:21028":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:8140:2577":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:6603:8177":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"11:859:2434":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:8117:2157":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:7031:2449":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:9683:15780":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"17:10735:15938":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:1924:2513":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:47334:8009":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"21:9689:2082":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:42290:29582":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"2:40063:2532":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:43010:8086":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:7803:15621":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"5:2905:31300":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"21:12717:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"6:6628:10093":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"5:679:230":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"5:7039:31264":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"31:125:1770":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:10750:2176":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"21:7206:34948":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:10935:21010":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:7464:21836":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"16:4818:15267":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:2836:8460":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"21:10792:34948":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"6:5022:12735":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:9103:8044":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:41387:192":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:7526:12891":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10936:15733":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:3116:2212":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"25:9:1710":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"1:4569:20173":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"1:8847:2787":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"27:468:19944":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"17:13249:19773":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"29:17:1715":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:25752:2618":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"21:7151:34948":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:15150:34788":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"1:3124:21252":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:8961:15595":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"16:2764:14630":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"26:43:36369":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"1:3320:2213":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"1:8164:2603":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7529:15607":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"21:12067:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"24:190:2081":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"21:12846:2199":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"30:114:19835":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:7103:15595":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:9557:15720":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:41848:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:11890:738":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6890:15588":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"5:1196:2436":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:45409:2904":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:10412:2593":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"21:4220:34970":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"1:1071:2438":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"1:7784:2551":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:2845:8462":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10721:15901":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"21:10871:2180":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"6:4920:12724":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"1:8729:185":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:41060:154":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:13219:19770":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2737:8423":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"6:5071:12740":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"21:13834:2240":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"2:45479:2858":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"11:703:2430":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:862:2447":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:5779:15544":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"17:9721:15779":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"14:215:14549":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:12113:19012":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:11886:743":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"21:10500:34948":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:44009:2829":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:22402:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:6539:8408":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"11:2204:33460":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:12236:19019":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:11109:15740":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"21:8457:34948":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"17:13041:19758":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"9:325:14464":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:47273:8004":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:7252:20895":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:3158:8201":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:6548:2782":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"17:12194:19017":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"16:7509:15605":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:8195:15682":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:8931:15683":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:9369:34948":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"17:12019:19005":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:11840:20875":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"1:9074:2824":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8068:2215":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:4568:15185":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"5:5830:8816":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:2569:2578":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:2763:8448":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:11386:2615":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:42333:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"31:109:1765":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"17:8360:15702":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7520:12890":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"6:568:9223":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"21:23:2055":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:40344:2182":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:2594:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:11037:15736":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:1212:2438":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"21:0:1701":{"crate_id":21,"path":["futures_util"],"kind":"module"},"6:4911:12723":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:2777:2828":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:4253:8206":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:0:495":{"crate_id":2,"path":["core"],"kind":"module"},"21:12619:34858":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"21:8992:2132":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"6:7443:14335":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:43937:8596":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"5:6175:31113":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"11:279:33469":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:4404:12669":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:481:19859":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:247:34630":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:1715:10147":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"21:9533:34948":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"31:38:36410":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"5:1403:2425":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"21:7558:34786":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"1:7847:2585":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"16:6442:15571":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:11230:22989":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:8256:15680":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"14:0:1906":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"16:2448:14617":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:1048:2436":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:6668:10070":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:2675:219":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:45333:2833":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"21:13335:2212":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"1:8403:2730":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"9:0:1902":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"21:14961:2316":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"21:9230:2157":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"5:4206:2212":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:9839:15775":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:41100:2605":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"16:7557:15609":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:7509:12889":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:7366:15597":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:3130:23252":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:14:2018":{"crate_id":2,"path":["core","write"],"kind":"macro"},"21:13170:2207":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"18:681:19853":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:2461:8257":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"6:4898:12722":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"28:67:36399":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"16:7488:15603":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:10455:2382":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"11:2198:28043":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:43598:8139":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:5963:15550":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:22468:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"2:21576:28544":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"6:5988:13378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:1821:2491":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"21:9311:34948":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:20820:2849":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:43488:8112":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:3870:2629":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"21:7126:2084":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"17:10303:15841":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:1721:2655":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:44954:2855":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:38929:8200":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:11884:640":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"31:68:1764":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"21:11781:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"21:12774:2210":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"5:6691:243":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4571:12689":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:11432:8100":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:8213:2667":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"21:9768:34948":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"1:11155:20887":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7757:15619":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"5:3128:31276":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:46193:2865":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:5794:70":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:10228:8096":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:10452:15900":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"21:13309:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"2:2840:8461":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:10897:15731":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:41528:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:9907:15831":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:10000:15879":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:4176:8065":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:1982:184":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:12072:19009":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"21:14954:2315":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:15204:34783":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"16:5693:15540":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:9375:2554":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"21:11565:34948":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:21790:28723":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:7497:2106":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"1:8084:2247":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4392:12668":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"1:6617:23069":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"11:665:2424":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:13709:2212":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"5:1412:2426":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4932:12725":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:6999:2465":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:45000:2896":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:6545:9262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"17:13564:19800":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:2406:31227":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:1907:2462":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"21:8042:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:4743:12703":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"21:13750:2235":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"21:9978:34948":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"20:32:1700":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"3:229:209":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:8156:15631":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:4099:2661":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"21:10913:34948":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"18:564:19864":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:5077:12741":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:42523:28744":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"16:5655:15538":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:3171:29687":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:5571:15533":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:45249:2875":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"2:40583:8404":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"21:39:2057":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"21:5133:934":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"2:21629:28690":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"5:210:8042":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:9262:34948":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"2:2918:2254":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:587:9226":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:7156:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:40181:28338":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"11:393:33472":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:43080:8075":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:6047:13383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"17:10505:15928":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"21:10159:34948":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"17:9895:15802":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11355:18489":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:9359:8259":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:13678:19807":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"11:452:141":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:3978:2635":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:2339:2537":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"21:10604:2168":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"6:5798:13365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:1555:10132":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:6675:28783":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:4941:12726":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"6:6116:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"6:506:9216":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:11442:8020":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"5:1381:2424":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:12169:2101":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"16:7317:33905":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"21:7956:2104":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"1:7774:2553":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:6044:1719":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"11:821:2431":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:8953:15715":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"28:199:19950":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"17:11770:18992":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"21:15056:2139":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"11:1879:2445":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"21:3912:2114":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"17:9886:15803":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9853:15829":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12592:19043":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:4596:15189":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:9734:15778":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:41568:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:47293:8006":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:2545:21036":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10545:15735":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:9115:8051":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:3968:2634":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:45431:2910":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:20780:2842":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"21:9390:2159":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"5:7157:2422":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:10840:15728":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:8180:15633":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"11:305:33467":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"21:8611:2121":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"18:736:19849":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"11:2219:2421":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4571:20175":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:4509:12682":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:2828:8458":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:20994:2645":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:12059:19008":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:975:15763":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:13194:19768":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"27:0:1731":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"2:2900:2043":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:14649:34948":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"5:1365:2423":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:11321:8605":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"30:681:19864":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:6558:15578":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"16:6460:15572":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:2785:8449":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:2616:14624":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11484:18498":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:1768:608":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:1728:10148":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:43522:2401":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:44191:2972":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:11889:742":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:11899:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:1622:10139":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:40565:8402":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:1658:1084":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:12890:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"2:43826:8130":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:10458:2167":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"7:79:14387":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:14524:34948":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"1:11218:20199":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:13744:19811":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:43714:8144":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4431:12672":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:20915:2839":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"21:10000:2185":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"6:5779:13363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:7090:2424":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13879:19821":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"21:4371:2221":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"21:4306:19878":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"21:9199:2136":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"2:12226:2111":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"2:42562:28546":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:9098:15717":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"16:6307:15561":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:6232:205":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"21:14771:2304":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"21:11994:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:12959:19753":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:7014:2448":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"21:12669:34811":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"6:1532:10129":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:21027:2839":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:10080:15883":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"11:1866:2443":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:49255:2853":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:43172:8119":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:3275:2427":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:43957:8600":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:7586:30756":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:13499:19797":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"18:113:19835":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:11877:1046":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:1594:10136":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:8208:2666":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"2:40112:2157":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"11:1688:143":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"27:140:19931":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"18:0:1910":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:41438:2212":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:14543:2299":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"1:3055:2595":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:41251:180":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:5238:2121":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:8292:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:22942:2617":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"30:648:19862":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:9279:2158":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"26:53:36370":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"2:22171:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:47113:2927":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:11881:1472":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"21:11535:2188":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"17:10015:15880":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:5944:15549":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:10941:21014":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"30:761:2185":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"17:13791:19814":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"17:9933:15806":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"2:40256:8415":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"6:573:9224":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:39812:2401":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:3369:8184":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"17:10660:15737":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:13101:19745":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:1724:8489":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:13053:19759":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:41395:209":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"21:8782:2124":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"21:7748:2097":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"16:6431:15570":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"27:483:2729":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"2:1537:2566":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:5051:12737":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:9773:2645":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:9822:15789":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:30161:68":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"2:42570:28652":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:7194:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:1565:2424":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"16:7478:15602":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"2:21863:2622":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:1947:15777":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"6:5947:13374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:44183:2971":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:11891:18998":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"5:7347:8172":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:2635:31268":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:532:9218":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:2808:14632":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"21:14195:2245":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"21:14337:2296":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"5:3520:162":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:5120:19888":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"17:13066:19760":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"21:8393:2110":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"2:21877:2621":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"16:2426:14616":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"15:180:14558":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:660:19851":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7293:15596":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:2735:8034":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:7453:15699":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"21:104:704":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"17:12388:19029":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:11615:18507":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"5:2915:31302":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:11163:15944":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:6328:23069":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"11:1035:2438":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:41202:2607":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"21:8947:2131":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:13376:19784":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:20679:28753":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"21:11108:34948":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"2:2339:181":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:8792:30755":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"11:2212:33461":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"2:2952:8038":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:40213:8416":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:3242:2589":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"0:46:1608":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"9:174:14512":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:1692:10144":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"21:12116:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"5:7145:2421":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:7449:15600":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"6:6578:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"18:574:2185":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:671:19852":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:9959:15832":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:40305:8412":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:1985:183":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:6785:13800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"16:2742:14629":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:4960:12729":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:3141:233":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"21:781:2114":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"17:13426:19789":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:45231:2869":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"21:7323:2093":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"2:9316:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:45179:2857":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:474:9211":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:4398:31106":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"10:36:33452":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"1:0:1384":{"crate_id":1,"path":["std"],"kind":"module"},"1:7801:2552":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:13024:19756":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"5:6760:31116":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"21:13283:2205":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"6:4344:12664":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:11634:8104":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:12951:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"1:1895:2512":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"21:13957:219":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"21:9453:34948":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"6:4821:12713":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"30:853:19849":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7411:15598":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:11879:18997":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:4335:31106":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:43436:8127":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:6819:15585":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:21750:28747":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:0:1908":{"crate_id":16,"path":["gimli"],"kind":"module"},"16:8047:15625":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:10924:20914":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:13261:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"16:2694:14627":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"21:12309:2201":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"16:8129:15629":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:2933:15843":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"31:102:1768":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"2:41688:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6981:15592":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"6:5717:13300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:8723:2749":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:9091:23113":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"5:3087:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:11893:1488":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"5:2115:31052":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:40541:2216":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:7011:25314":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:13763:19812":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:41302:8468":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:6871:2215":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:11065:21497":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:355:2396":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:2967:14638":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"21:12760:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"2:40134:8410":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:11136:15943":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:4012:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:4315:8211":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"18:644:2185":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6943:15591":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:535:33561":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:39090:201":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:7690:21618":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:9453:15750":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13159:19765":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"21:13698:19877":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:11282:18485":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"27:432:19948":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"21:14432:2157":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"1:10202:2744":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"21:13967:2219":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"21:10340:34948":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"11:97:33477":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:10774:8089":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"6:1564:10133":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"28:46:2423":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:2683:8035":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:11446:18495":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"22:7:1723":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"16:154:14588":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"1:1783:2480":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:8472:2212":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:3435:2316":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"2:41166:28614":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:2781:8450":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10316:15842":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:4932:15285":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:2879:14635":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"21:15001:34735":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"17:12461:19034":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:8462:2732":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:2747:2827":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13181:19767":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"16:4480:15169":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:44934:2890":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"17:8598:15710":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"21:13718:2424":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"14:202:8150":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:8858:15714":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:1421:2428":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"6:4423:12671":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:4107:2662":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:47197:2912":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"21:6313:19891":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"1:1561:2212":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"11:1540:14533":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:1978:15801":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"16:7467:15601":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"19:0:1028":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:6582:216":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:4674:2644":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:6685:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:6336:15564":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:4035:8033":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:11924:19000":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9826:15776":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"17:9545:15758":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11324:2614":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:43741:8145":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"21:11891:2100":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"21:13014:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"1:8793:2424":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:11176:8113":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"18:609:34676":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:7272:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:4702:15247":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12403:19030":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:21765:28592":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"21:13478:34948":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"17:11844:18995":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:9480:8567":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:22501:2623":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:11902:18999":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:45379:2898":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9478:15768":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"21:6427:34947":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"1:6478:2776":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:2827:21026":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:7686:2501":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:3675:2613":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:2692:227":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"16:2337:14612":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:8159:2611":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"21:15180:34806":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"6:541:9219":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:4431:2670":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"15:219:14563":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:8632:15681":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:10675:2555":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"6:7491:12886":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5974:13377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13516:19799":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"21:14463:34948":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"2:43093:8090":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:12522:2464":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:5495:2746":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:12253:191":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:8975:21418":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"1:11885:641":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6755:13798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:45799:28573":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:8072:15626":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"5:7053:2424":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:9265:15721":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:2568:34888":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"1:10409:2591":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"14:7:14540":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:8548:15708":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"1:9055:2560":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:22270:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:10663:20158":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9796:15782":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:11897:1543":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"1:8279:2647":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:930:2431":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:11203:21413":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:9312:15722":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:43497:8111":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:10023:8100":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:12536:19039":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:7855:2301":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"6:7532:12892":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:4624:15193":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"23:0:2045":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"1:5381:2744":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"27:489:19946":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"17:12033:19006":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4331:12663":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:9138:15718":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:6544:15577":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:500:9215":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"6:6706:13796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:2794:8455":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:43282:8128":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"21:10522:2170":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"2:40246:2172":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:595:9227":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:4400:15137":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:2752:8446":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:38968:8039":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:8142:15630":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"21:9049:2133":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"16:5557:15532":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:11879:1362":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6293:15560":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"21:11838:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:9994:22927":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:9424:15748":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:335:34891":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:12194:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"16:6132:15554":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:3920:2631":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:41888:2768":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"30:731:34662":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:5175:189":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:46033:2911":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:43067:8074":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"30:726:34676":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:12259:19020":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"21:8863:2126":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"16:5920:15548":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:42260:68":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4890:12721":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"17:10743:15724":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"8:0:1901":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:13477:19795":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:47308:8007":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:12441:204":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"21:14584:34948":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"2:43214:2577":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:1621:586":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"30:0:1910":{"crate_id":30,"path":["memchr"],"kind":"module"},"16:6662:15580":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:7400:2106":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:43649:8142":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11502:18499":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:5065:12739":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4294:12660":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:4459:12675":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:4370:8213":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"21:9467:2160":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"2:21889:2624":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"21:14936:34948":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"1:7930:20894":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:13698:19809":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:8911:2376":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"18:624:34653":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:43364:8124":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:39891:8121":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:10440:15927":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"21:6079:1718":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"21:10312:2086":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:9579:21036":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:2357:14613":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"30:632:19861":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:6201:15556":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"21:10399:34948":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:9322:34606":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:4540:15181":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"21:5818:2213":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"5:3752:2427":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:11236:20435":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:2594:14623":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"21:8360:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:10214:8098":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:5566:2784":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"21:15237:34834":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"16:5616:15535":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:5040:1712":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"2:47372:8011":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:8490:15706":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:6830:13804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:10256:8097":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"21:11375:34948":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"14:40:18485":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:40281:2175":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:4991:12732":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"18:515:19861":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:9696:15765":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"11:1091:14530":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"21:13362:2215":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:42278:109":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"16:7697:15616":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"21:6290:166":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"21:11685:2193":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"2:2757:8445":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:11569:2735":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:917:2428":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:6724:13797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:45078:2892":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:6092:2974":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"18:590:28624":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"3:0:441":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:4751:12704":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:2204:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:7565:2398":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:6700:13795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"21:20:1048":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"21:21:1048":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"16:3300:14643":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"21:9170:34948":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"6:4371:12665":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:40204:2084":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5862:13369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:10039:15839":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"6:4688:12697":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:45577:2876":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:4698:12698":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"21:10728:34948":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:43190:8115":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"14:160:14540":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"16:6474:15573":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:11674:21008":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:7016:33945":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:46115:2859":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:7895:2098":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"11:2192:33458":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"11:816:2428":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:11573:18504":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"30:798:19853":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"5:1994:2458":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:3777:2615":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:1546:10131":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:11875:1506":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:7711:15617":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"11:638:2212":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:14707:2239":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"21:14252:2294":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"30:741:34653":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:6481:2777":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:9368:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:727:19856":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6024:33382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:5552:205":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:43666:8143":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:4521:12683":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:11898:1121":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"6:5959:13375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:45286:2930":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:9783:221":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"16:6218:15557":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:6002:13380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:4449:12674":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:9324:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:45130:2903":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:40053:2533":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"21:4142:2220":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"20:143:19872":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"6:6814:13802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:39933:8236":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:11856:21452":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:5243:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10307:2749":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:11358:8607":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:6534:2781":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"17:13121:19762":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:6405:2780":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"21:14803:34948":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"2:41225:2608":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"30:824:8107":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"21:13087:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"21:13222:2209":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"16:3872:14705":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:1568:2236":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:2921:2255":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"21:7083:34948":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:9498:15765":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:959:2435":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:9670:15781":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:9628:15756":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:13513:2218":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"30:665:140":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:10695:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"17:9534:15759":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:14970:2317":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"2:43803:8148":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:12345:19026":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:6254:15559":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"21:8225:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:47159:2878":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11299:18486":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:676:2408":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"1:9021:166":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:888:2426":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"21:13869:34948":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"17:10712:15937":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:11887:740":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:6243:33927":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:3357:8180":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"16:7065:33895":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"21:6444:34781":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"11:2060:2436":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"2:31893:2753":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"21:6608:34769":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"6:4641:12694":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:1034:15767":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:47262:8003":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:30709:182":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:43506:8110":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:5482:2164":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5741:15543":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:5316:2740":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:10580:15930":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"13:110:33526":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"30:816:19855":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:14979:2318":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"1:7658:2440":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"2:42017:8044":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"21:13743:2424":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"1:3982:2636":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:7522:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:6376:15567":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"30:872:19857":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:10702:2175":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"1:10640:20160":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:6717:14555":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"6:6553:10066":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:4797:12710":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"21:6941:2085":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:2142:587":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:12972:2202":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"17:13257:19774":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"1:1846:2498":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"21:11127:2183":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"16:7498:15604":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:11823:21473":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"5:5814:2767":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:40330:2180":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:10283:15845":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"21:14313:34948":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"1:361:2397":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:20790:8477":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"21:8335:2108":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"16:2470:14618":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:21827:28570":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:11785:18993":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"21:14419:34948":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"17:11471:18497":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"16:6390:15568":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"11:1524:14532":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:7485:12885":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4757:12705":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"30:638:19858":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"1:2535:2297":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"21:2555:34969":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"30:699:8253":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:5797:33555":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"21:6061:1721":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"6:7497:12887":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:2382:1734":{"crate_id":1,"path":["std","io"],"kind":"module"},"11:675:2429":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:6243:2236":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:13560:34948":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"16:6919:33835":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:11556:18503":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"17:10334:15720":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:12980:19754":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"2:43933:8593":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:9036:2792":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:7652:2410":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"21:10228:2177":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"16:3815:14672":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2786:14631":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"21:13147:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"17:13857:19819":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:10761:15725":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:3205:2594":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"21:8975:34948":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:10649:15933":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"16:7244:33907":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"16:6351:15565":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"5:3687:2458":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"30:556:34665":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"2:7549:8405":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:6327:15563":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"16:3030:14639":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:386:15697":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"5:5234:2159":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"6:4790:12709":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:2209:2279":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:21243:2840":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:2378:14614":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"21:8405:2111":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"21:6630:1727":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"17:13169:19766":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:6362:2424":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10104:15840":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:43961:8594":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:3672:2614":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:4383:12667":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:45957:2899":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:11969:19002":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"21:7701:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:11156:34948":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"11:744:2426":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:11365:2613":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:6848:13805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:55:14578":{"crate_id":16,"path":["gimli","endianity","Endianity"],"kind":"trait"},"2:47319:8008":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:20752:2848":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"0:0:1797":{"crate_id":0,"path":["futures"],"kind":"module"},"6:4857:12718":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"16:6022:15553":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:43513:8120":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"16:5643:15537":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:5976:15551":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:20490:28203":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"16:3640:14646":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"21:9430:109":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"17:11721:18991":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:22336:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"27:187:19935":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"5:1442:2430":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"1:4898:2704":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:8639:34948":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:4773:12707":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:10428:15926":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:13385:19785":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:12923:19752":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:7831:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"6:5829:13328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:632:31156":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:0:1909":{"crate_id":17,"path":["object"],"kind":"module"},"21:7920:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:8075:1710":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:4538:12685":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:1650:10140":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"21:5544:2215":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"6:4653:12695":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"6:5816:13367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"21:11701:2092":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"1:11892:1487":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:5906:2783":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:43635:8141":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:554:2379":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10857:15729":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"5:2907:31238":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:13324:19779":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"21:7852:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:2086:31257":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:20849:2834":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4416:12670":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"21:13619:34948":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"2:11835:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"5:4046:2423":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"21:11437:34851":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"2:8310:8105":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:11874:417":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"11:1852:2427":{"crate_id":11,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"21:8078:2099":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"16:3446:14644":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:41454:2424":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:31998:8426":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:46453:2860":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:11872:370":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:11845:2411":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:13135:19763":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1453:197":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:47253:8002":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"2:43941:8598":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:7609:2382":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:12178:19016":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:41189:2616":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"21:10683:34948":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:13689:2423":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:43318:8098":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:8235:2668":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"21:6843:34948":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:2233:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:1628:8388":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:5104:15337":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11821:15886":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"1:936:2432":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:43158:8122":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"21:4823:2242":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"21:12443:2198":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:42250:29565":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"1:10819:20192":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"21:9624:2163":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"27:149:19933":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"17:8521:15707":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"21:15119:34790":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"1:2355:2542":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4999:12733":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:9866:15796":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12331:19025":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:6575:15579":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:5708:15541":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7259:2712":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:123:8897":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"21:11510:34861":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"1:8741:2750":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7029:33901":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:10142:15885":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:12318:19024":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6164:33899":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:13233:19771":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:1709:10146":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"21:4576:1711":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"5:5190:31088":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:2367:2548":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:3165:2592":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:947:2433":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:2502:14619":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:5071:15328":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"21:13344:2213":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"21:7364:150":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"17:12419:19031":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8769:2752":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:11391:18491":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:6722:8397":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"16:7683:15615":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:6441:31088":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:8164:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:7053:2089":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"6:4492:12680":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:13033:19757":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"5:4913:2566":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:10823:15727":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:7503:12888":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"21:14671:2301":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"6:7275:14176":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:12280:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"2:29916:2619":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:5760:2779":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"21:13898:2241":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"21:13812:2238":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"18:521:19858":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:42515:8262":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:4875:12720":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"11:867:2435":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"21:9493:34948":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"2:43988:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:8310:15701":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"21:8103:34948":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:20460:28036":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:857:2423":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:2682:2250":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:8799:2788":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:39990:28696":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:3774:31088":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:9946:15804":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:11628:18508":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:7839:23089":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:413:164":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"16:3585:14645":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:1844:2497":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:1668:10142":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:43418:8126":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:7572:33612":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:9350:34642":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"6:1700:10145":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"21:12659:33925":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"1:10715:21462":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"1:11880:1392":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"21:14994:2376":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"0:56:1065":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"9:502:14412":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:420:14585":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:7670:2500":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"9:352:14425":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:12158:19015":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:10180:2083":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"21:13823:2239":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"21:9594:34948":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"9:52:14428":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:21025:2843":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:1738:29573":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:3610:2610":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11641:18509":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"1:501:2372":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:13265:19775":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:530:2377":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"21:7303:34948":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"21:6271:19892":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"17:9218:15720":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:10415:2589":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:45647:2932":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:21738:2620":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4559:12688":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:45024:2856":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:9562:29045":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:5330:2741":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"21:7447:34786":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"21:331:2376":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"1:7583:2383":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:5724:15542":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:526:9217":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"1:1583:2443":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6691:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"30:691:2185":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"18:766:19850":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:14025:2243":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"5:2076:2372":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:41378:8541":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:7663:2441":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"1:3460:2574":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:4676:2648":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"27:136:2783":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:39855:8238":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:9068:34611":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"5:264:31088":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:7588:2385":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"5:1057:31235":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:11381:8604":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:10237:2084":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"2:2236:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"21:11624:2190":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"2:41369:2713":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:731:2425":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:7152:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"21:6631:1724":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:12410:2973":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"21:12091:2102":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"1:6081:2973":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:43336:8096":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:12282:19021":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"6:4546:12686":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:2732:2251":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:10062:8087":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:43813:8149":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"21:5125:19887":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"2:43531:8121":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"16:3225:14642":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"6:6605:2699":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:12646:19046":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"9:481:14408":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"31:136:1766":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:31929:21618":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"21:11179:2184":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"21:14699:2302":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"11:2076:2437":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12510:19037":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"20:82:2038":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:40020:2519":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"16:2404:14615":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:1080:2439":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:6707:34948":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"1:10350:21015":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:6136:13412":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"27:72:19945":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:39112:200":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:7250:223":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:3782:14663":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:2546:14621":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:5785:13364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"5:7069:30967":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:6991:2087":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"17:13344:19781":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:1062:2437":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:5922:205":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"2:43184:8116":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:4789:15262":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12894:19749":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:42992:8083":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:39959:8233":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:12607:19044":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:11084:2792":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"5:4166:2566":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"21:6628:1725":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"11:652:2423":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:8253:2697":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:41463:182":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:8797:30081":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:8667:14577":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:8624:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"18:599:34658":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:9364:8260":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:4573:20177":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"21:13404:191":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"21:8757:34948":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:4629:12693":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"17:13015:19755":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:21342:2831":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:40163:2162":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:11422:18493":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:7637:2409":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:7588:15610":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5843:13329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:8418:2112":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"2:11397:8606":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"17:9028:15716":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:12046:19007":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"24:9:19874":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"6:6057:13384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:42024:8052":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:12449:19033":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"17:13443:19791":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5995:13379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"11:768:2427":{"crate_id":11,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:11614:8105":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:8380:2729":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:6593:8176":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"21:12508:2106":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"27:154:2789":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"6:6776:13799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2685:225":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:10219:22928":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:2642:14625":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:6931:2150":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:39236:8197":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"21:7316:2094":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"17:13332:19780":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:43620:8140":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:21018:2645":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:39188:8465":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"22:0:2044":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"5:3123:2443":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"18:96:19834":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"30:844:19856":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:2832:8459":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"11:1859:2442":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"21:11070:2182":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"2:4399:2386":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"28:51:2236":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"2:30175:29217":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4970:12730":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:3068:2475":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:6488:15574":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:4774:29230":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4667:12696":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:9188:34636":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:13399:19786":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"21:10849:34948":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"5:814:2446":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"21:9416:34948":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"16:7596:15611":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:8788:15712":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:42355:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7335:33959":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:10052:15861":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"21:10123:2166":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"21:14846:2308":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"1:11873:934":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11585:18505":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:22204:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:45698:28634":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:8219:2658":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:4037:14822":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"21:14898:2313":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"27:181:19934":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"1:8134:2576":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:14904:2314":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"21:3664:1708":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"17:11339:18488":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:12483:19035":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"21:14481:2235":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"2:9249:28685":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:6753:2830":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:10705:15936":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:10125:15860":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:45108:2897":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:11090:15739":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:5498:2748":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:39015:8463":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"21:12413:34948":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"6:7568:14363":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:4171:2664":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:11138:21011":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"16:6876:15587":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:43112:8091":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:1577:2442":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4503:2687":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13433:19790":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4947:12727":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"21:8470:2115":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"21:13586:2219":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"16:5000:15305":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9026:217":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:4849:2695":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"6:4882:999":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"16:6904:15589":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:13353:2214":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"21:15192:34803":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:20488:28201":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:12317:2200":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"15:198:14559":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:20447:8253":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:21470:2645":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"21:11227:2173":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"28:33:2424":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"1:3163:2591":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"21:11727:34948":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"10:44:14517":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:12799:19747":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"6:7252:14174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"21:15062:34880":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"17:10798:15726":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"1:618:2403":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"21:15052:2140":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:2687:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12835:19748":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:10242:8099":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"16:7519:15606":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8777:2212":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:4004:31088":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"18:690:19854":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:8139:2102":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"30:788:19852":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:5998:15552":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:8683:15685":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10491:15897":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"6:1682:10143":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:5015:12734":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13865:19820":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:2915:2253":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:5880:13371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"29:0:1713":{"crate_id":29,"path":["futures_io"],"kind":"module"},"27:366:205":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"6:1609:10137":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"21:6417:34794":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"2:10173:8095":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:10645:22986":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7767:15620":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"16:6400:15569":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:2697:2387":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:2497:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:7743:15618":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:21811:28689":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:7098:2424":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"21:8509:204":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"2:39070:198":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:6292:165":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"2:3223:8037":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:42941:28708":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2472:2295":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:7220:2515":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:11544:18502":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"21:14819:2305":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"2:12278:2114":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"21:9853:34948":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"1:8831:2789":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13292:19776":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:11319:18487":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"16:6767:15583":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:3396:2248":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:5540:2082":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:8478:2733":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"21:338:2096":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:10262:34948":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:4398:12510":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"21:9507:2161":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"5:7008:2424":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"21:8200:2101":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"6:4732:12702":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:5032:15313":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:20681:8477":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"6:1908:10293":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"21:11663:34948":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:7115:8407":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:3378:2305":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"6:4590:12690":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:42774:8077":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"11:326:33465":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"15:0:1907":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4527:12684":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:39827:8239":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"29:27:1714":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"7:0:1533":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:2911:2252":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:4323:2659":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:44130:204":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:13651:19804":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:12558:2208":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"2:41237:2609":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"5:5640:231":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:6800:13801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"5:5034:2767":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:21354:28033":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"11:1144:2439":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:875:2425":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"21:10944:2179":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"2:41327:2424":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:8755:2751":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"1:4986:23076":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10626:15932":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"18:614:34662":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:1539:10130":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:15038:34948":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"21:8834:34948":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"5:2168:31239":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"21:11745:2097":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"5:7330:2427":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:45268:2924":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:40534:28648":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"6:4466:12676":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:7349:34948":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"2:10135:8094":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:2816:8456":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:8214:15634":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"16:6506:15575":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"5:1077:31634":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:7077:15594":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"21:6255:19893":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"2:2513:236":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:4845:15270":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:11813:15888":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:1614:10138":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:11653:18510":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:43778:8146":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:11060:15737":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"30:836:19848":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"12:0:1905":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:3152:8202":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"18:538:19863":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:3621:31088":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"31:65:1763":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"16:5346:15531":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"21:8656:2122":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"5:1313:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":25}