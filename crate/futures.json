{"root":"0:0:1757","crate_version":"0.3.24","includes_private":false,"index":{"2:13707:55283":{"id":"2:13707:55283","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12771:5189":{"id":"2:12771:5189","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12772:2773","2:12773:59641"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13755:2314":{"id":"2:13755:2314","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"1:15910:1890","prim@char":"1:15904:1885","self::pattern":"2:13331:4579","str::split_whitespace":"1:15910:1890","`DoubleEndedIterator`":"2:8716:121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49742:2963","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:988:1663":{"id":"21:988:1663","crate_id":21,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:989:2703","21:991:2704","21:994:2705","21:998:2250","21:1001:2249","21:1003:2706","21:1005:297","21:1008:2707","21:1011:2708","21:1013:2709","21:1015:2400","21:1016:2710","21:1017:2711","21:1019:774","21:1020:2712"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryFuture","id":"20:44:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13711:60957":{"id":"2:13711:60957","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15910:1890"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13718:56726":{"id":"2:13718:56726","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47779:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3521:3589":{"id":"2:3521:3589","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9160:4779":{"id":"2:9160:4779","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8196:4780","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:44:1660":{"id":"20:44:1660","crate_id":20,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:45:177","20:46:128","20:47:52879"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14056:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:39:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1409"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:10420:1688","glob":false}},"2:13823:4896":{"id":"2:13823:4896","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13270:4337","`FromStr`":"2:13270:4337"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47904:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13270:4337","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13270:4337","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:258:2049":{"id":"24:258:2049","crate_id":24,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["24:261:58510","24:262:583"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:9795:1692","glob":false}},"2:13800:60971":{"id":"2:13800:60971","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13724:56729":{"id":"2:13724:56729","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:4468:1667","glob":false}},"1:6224:4180":{"id":"1:6224:4180","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6225:4494","1:6226:4495","1:6227:54371","1:6228:54408","1:6230:54412","1:6232:54409","1:6233:54410","1:6235:54411"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13716:309":{"id":"2:13716:309","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:15921:1899","str::as_mut_ptr":"1:15910:1890"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10800:143":{"id":"2:10800:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10801:720","2:10803:54917"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3500:3584":{"id":"2:3500:3584","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3502:183","2:3503:361"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6846:4246":{"id":"1:6846:4246","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6847:54579","1:6848:54580"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13732:2352":{"id":"2:13732:2352","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49728:2961","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:8152:924","glob":false}},"2:8873:158":{"id":"2:8873:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8874:2773","2:8875:929","2:8876:3057","2:8879:3058","2:8880:500","2:8882:3059","2:8885:3060","2:8886:3061","2:8887:3062","2:8888:2299","2:8890:2547","2:8892:3063","2:8893:3064","2:8895:848","2:8898:2540","2:8905:2526","2:8907:2527","2:8910:2525","2:8911:2548","2:8912:2537","2:8914:2538","2:8916:3065","2:8919:1320","2:8920:2315","2:8921:2536","2:8925:2534","2:8928:2532","2:8929:2542","2:8930:2552","2:8932:2543","2:8933:2287","2:8935:3066","2:8938:3067","2:8940:3068","2:8950:3069","2:8965:3070","2:8967:3071","2:8971:3072","2:8980:2531","2:8983:3073","2:8985:3074","2:8988:281","2:8995:299","2:9002:3075","2:9009:3076","2:9018:3077","2:9028:1021","2:9035:3078","2:9042:2231","2:9043:3079","2:9044:3080","2:9056:3081","2:9063:3082","2:9075:3083","2:9082:3084","2:9083:2529","2:9088:3085","2:9091:3086","2:9094:2530","2:9095:3087","2:9097:3088","2:9099:3089","2:9101:420","2:9104:3090","2:9107:1004","2:9110:3091","2:9113:609","2:9116:3092","2:9119:914","2:9121:833","2:9123:799","2:9125:718","2:9127:701","2:9129:3093","2:9130:3094","2:9138:3095"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:47:1676","glob":false}},"2:13720:56727":{"id":"2:13720:56727","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47779:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1757":{"id":"0:0:1757","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::sink":"21:7282:1671","crate::io":"21:8154:1693","crate::future":"21:168:698","crate::channel":"27:0:1690","crate::stream":"21:2156:1664","crate::executor":"0:116:1566"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:116:1566","0:142:1037","0:4","0:7","0:11","0:14","0:18","0:21","0:25","0:28","0:31","0:34","0:38","0:41","0:44","0:47","0:51","0:54","0:57","0:60","0:63","0:66","0:69","0:73","0:76","0:79","0:80","0:82","0:85","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113"],"is_stripped":false}},"1:5430:4242":{"id":"1:5430:4242","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5431:58698","1:5432:5303"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:168:698","glob":false}},"1:6581:4180":{"id":"1:6581:4180","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6582:54372"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:24071:4721":{"id":"2:24071:4721","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24072:4724"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24067:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1690","glob":false}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:168:698","glob":false}},"2:13730:5045":{"id":"2:13730:5045","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49712:5009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13729:56749":{"id":"2:13729:56749","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15910:1890"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3368:2278":{"id":"2:3368:2278","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13770:56760":{"id":"2:13770:56760","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13331:4579","prim@char":"1:15904:1885","str::rsplitn":"1:15910:1890"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49846:4989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:116:1566":{"id":"0:116:1566","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`LocalPool`":"31:190:1728","`block_on`":"31:115:1722"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:118","0:121","0:124","0:127","0:130","0:133","0:136","0:139"],"is_stripped":false}},"2:13733:30219":{"id":"2:13733:30219","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15910:1890"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50016:5024","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1674","glob":false}},"5:6165:2964":{"id":"5:6165:2964","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6654:4172":{"id":"1:6654:4172","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6655:58330"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3586:117":{"id":"2:3586:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3587:226","2:3588:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10845:4257":{"id":"2:10845:4257","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10846:147","2:10847:31525","2:10848:55350"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13801:60972":{"id":"2:13801:60972","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:8042:1390","glob":false}},"2:3495:3583":{"id":"2:3495:3583","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3497:183","2:3498:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3436:3576":{"id":"2:3436:3576","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3438:183","2:3439:1367"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:173:1724","glob":false}},"2:13726:4273":{"id":"2:13726:4273","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15910:1890","str::slice_mut_unchecked":"1:15910:1890","crate::ops::Index":"2:3671:3593"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:9155:4236":{"id":"1:9155:4236","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9156:59127","1:9157:59128","1:9158:59129","1:9159:59130","1:9160:59131","1:9161:37694","1:9162:59126"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4094:68":{"id":"2:4094:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4095:1441"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:206:1725","glob":false}},"1:4757:4210":{"id":"1:4757:4210","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4758:2195","1:4759:55237"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:5885:1668","glob":false}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:39:1675","glob":false}},"2:13820:60977":{"id":"2:13820:60977","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13331:4579","prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:687:1662":{"id":"21:687:1662","crate_id":21,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:688:848","21:691:2613","21:693:2528","21:696:2614","21:698:2615","21:700:2616","21:701:2532","21:702:2617","21:703:2542","21:704:2552","21:706:2544","21:707:2618","21:708:2619","21:709:1956","21:711:2545","21:713:2620","21:714:2621","21:715:2622","21:716:2623"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14056:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3458:3574":{"id":"2:3458:3574","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3459:183","2:3460:920"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3441:3573":{"id":"2:3441:3573","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3443:183","2:3444:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3619:133":{"id":"2:3619:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3621:183","2:3622:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13825:5182":{"id":"2:13825:5182","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13779:60964":{"id":"2:13779:60964","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1352","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:61614","5:6165:2964","5:6168:61615","5:6171:61616","5:6183:61617","5:6184:61618","5:6185:2134","5:6186:54537","5:6187:54538"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13735:2305":{"id":"2:13735:2305","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49996:2331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13737:30204":{"id":"2:13737:30204","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50034:5026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5502:4196":{"id":"1:5502:4196","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5503:58341","1:5504:58343","1:5505:58342","1:5506:58344"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:67:1686","glob":false}},"2:9153:2776":{"id":"2:9153:2776","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3742:3596":{"id":"2:3742:3596","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3744:60713","2:3745:60714","2:3746:56764"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13734:30209":{"id":"2:13734:30209","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15910:1890"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50025:5025","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:4468:1667","glob":false}},"1:4497:2960":{"id":"1:4497:2960","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4498:2303","1:4499:53973","1:4500:58530","1:4502:2312","1:4503:2309","1:4505:2314","1:4506:2305"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4415:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1674","glob":false}},"2:13708:60955":{"id":"2:13708:60955","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3466:3581":{"id":"2:3466:3581","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3468:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2858:97":{"id":"2:2858:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2860:1955"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13764:60961":{"id":"2:13764:60961","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15910:1890","`DoubleEndedIterator`":"2:8716:121","str::rsplit_terminator":"1:15910:1890","prim@char":"1:15904:1885","self::pattern":"2:13331:4579"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49792:5014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"29:49:1674":{"id":"29:49:1674","crate_id":29,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:50:53972","29:51:53973"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:142:1037":{"id":"0:142:1037","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144","0:147","0:150","0:154","0:157","0:161","0:164","0:167","0:171","0:174","0:177","0:181","0:184","0:188","0:191","0:194","0:197","0:201","0:204","0:207","0:210"],"is_stripped":false}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:10422:1684","glob":false}},"20:27:1994":{"id":"20:27:1994","crate_id":20,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:28:2243"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14056:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:96:1665":{"id":"20:96:1665","crate_id":20,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:97:2773","20:98:3100","20:99:3058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:9738:1681","glob":false}},"2:13794:60968":{"id":"2:13794:60968","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3452:3575":{"id":"2:3452:3575","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3454:183","2:3455:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9156:2777":{"id":"2:9156:2777","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:97:1689","glob":false}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:17:1670","glob":false}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:164:1726","glob":false}},"2:3671:3593":{"id":"2:3671:3593","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3673:183","2:3674:759"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:6164:61614":{"id":"5:6164:61614","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8204:5197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8204:5197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5510:4197":{"id":"1:5510:4197","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5511:54225","1:5512:59108","1:5513:59109"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:9738:1681":{"id":"21:9738:1681","crate_id":21,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9739:2248","21:9740:2244","21:9741:1973","21:9743:2317","21:9745:2318","21:9747:2304"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncWrite","id":"29:42:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:127:1666","glob":false}},"2:10562:110":{"id":"2:10562:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10563:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9532:2651":{"id":"2:9532:2651","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3610:2280":{"id":"2:3610:2280","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3611:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:47:1676":{"id":"29:47:1676","crate_id":29,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:48:54015"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13705":{"id":"2:13705","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12784:1352","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13706:800","2:13707:55283","2:13708:60955","2:13709:60956","2:13711:60957","2:13714:58702","2:13715:60958","2:13716:309","2:13717:56730","2:13718:56726","2:13720:56727","2:13722:56728","2:13724:56729","2:13726:4273","2:13727:60959","2:13728:56748","2:13729:56749","2:13730:5045","2:13731:4608","2:13732:2352","2:13733:30219","2:13734:30209","2:13735:2305","2:13736:60960","2:13737:30204","2:13738:56764","2:13741:56765","2:13744:56766","2:13747:3075","2:13751:6030","2:13755:2314","2:13758:30086","2:13761:56758","2:13764:60961","2:13767:60962","2:13770:56760","2:13773:56762","2:13776:60963","2:13779:60964","2:13782:1970","2:13785:60965","2:13788:60966","2:13791:60967","2:13794:60968","2:13796:60969","2:13798:60970","2:13800:60971","2:13801:60972","2:13802:60973","2:13805:60974","2:13808:12736","2:13811:56767","2:13814:60975","2:13817:60976","2:13820:60977","2:13823:4896","2:13825:5182","2:13826:54539","2:13827:54540","2:13828:54541","2:13829:60978","2:13831:4230","2:13832:60979"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13817:60976":{"id":"2:13817:60976","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15904:1885","self::pattern":"2:13331:4579"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:10421:1687","glob":false}},"2:3511:3587":{"id":"2:3511:3587","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3513:183","2:3514:1246"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:5209","5:846:54652","5:847:54653"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23101:4818":{"id":"2:23101:4818","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23102:4724","2:23103:59907","2:23104:1237","2:23105:1238","2:23106:41142","2:23107:59950","2:23108:59951","2:23109:59952","2:23110:59953","2:23111:59954","2:23112:59908","2:23113:59909","2:23114:59910","2:23115:59911","2:23116:59912","2:23117:59913","2:23118:59914"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23150:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5580:4203":{"id":"1:5580:4203","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5581:54225"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10575:4690":{"id":"2:10575:4690","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10576:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13714:58702":{"id":"2:13714:58702","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12795:5149"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13776:60963":{"id":"2:13776:60963","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23434:4725":{"id":"2:23434:4725","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24071:4721","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23425:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5518:4198":{"id":"1:5518:4198","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5519:54225","1:5520:54363"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3478:3580":{"id":"2:3478:3580","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3480:1112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13744:56766":{"id":"2:13744:56766","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13331:4579","prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13727:60959":{"id":"2:13727:60959","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:15910:1890","`str`":"1:15910:1890","crate::ops::IndexMut":"2:3675:3594"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"21:9751:1680":{"id":"21:9751:1680","crate_id":21,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9752:2313","21:9753:4086"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncSeek","id":"29:47:1676","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:42:1677","glob":false}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:9756:1678","glob":false}},"20:110:1995":{"id":"20:110:1995","crate_id":20,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:111:2243"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:169:1682","glob":false}},"2:3675:3594":{"id":"2:3675:3594","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3677:760"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3671:3593","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13715:60958":{"id":"2:13715:60958","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3446:3572":{"id":"2:3446:3572","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3448:183","2:3449:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8196:4780":{"id":"2:8196:4780","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8197:59783","2:8198:59784","2:8199:2551","2:8200:59778","2:8201:59785","2:8202:59782","2:8203:59781"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2883:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2962:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6472:4191":{"id":"1:6472:4191","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6473:58624","1:6474:54693","1:6475:54694","1:6476:54696","1:6477:54695","1:6478:54697","1:6479:54698","1:6480:54700","1:6481:54701","1:6482:54704","1:6483:54705","1:6484:54706","1:6485:54707","1:6486:54708","1:6487:54709","1:6488:54702","1:6489:54703"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10581:4692":{"id":"2:10581:4692","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10582:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13356:4582":{"id":"2:13356:4582","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13358:54713","2:13359:60109","2:13360:60110"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13350:4581","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:7997:1672":{"id":"21:7997:1672","crate_id":21,"name":"SinkExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:7999:2253","21:8004:2254","21:8008:2931","21:8011:2932","21:8013:2255","21:8014:2244","21:8015:2246","21:8017:2248","21:8018:2251","21:8019:2247","21:8020:2252","21:8023:2933","21:8025:2934","21:8027:2935","21:8028:2936","21:8029:2937","21:8030:2938"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sink","id":"25:17:1670","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6652:4176":{"id":"1:6652:4176","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6653:55186"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:9721:1679","glob":false}},"2:23174:4859":{"id":"2:23174:4859","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23175:4724","2:23176:1259","2:23177:1284"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8635:4786":{"id":"2:8635:4786","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8637:3089"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23048:4858":{"id":"2:23048:4858","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23049:4724","2:23050:59907","2:23051:60137","2:23052:60138","2:23053:60139","2:23054:41142","2:23055:60141","2:23056:60142","2:23057:60143","2:23058:60144","2:23059:60145","2:23060:60146","2:23061:60147","2:23062:60148","2:23063:60149","2:23064:60150","2:23065:59954","2:23066:60151","2:23067:59649","2:23068:59648","2:23069:59650","2:23070:59908","2:23071:59909","2:23072:59910","2:23073:59911"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23150:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:9756:1678":{"id":"21:9756:1678","crate_id":21,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9757:2303","21:9758:4048","21:9759:2312","21:9761:2309","21:9763:2305"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"29:49:1674","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:127:1666":{"id":"20:127:1666","crate_id":20,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:128:177","20:129:128","20:130:52966"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:122:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6183:61617":{"id":"5:6183:61617","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2952:179":{"id":"2:2952:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2953:420","2:2954:2231","2:2955:3079","2:2956:58128"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2921:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2962:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13717:56730":{"id":"2:13717:56730","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15921:1899"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3164:75":{"id":"2:3164:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3166:310"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:2156:1664","glob":false}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:43:1020","glob":false}},"2:13731:4608":{"id":"2:13731:4608","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49718:5010","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13827:54540":{"id":"2:13827:54540","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3490:3582":{"id":"2:3490:3582","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:183","2:3493:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:39:1675":{"id":"29:39:1675","crate_id":29,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:40:54004","29:41:54005"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:47:1676","glob":false}},"5:6187:54538":{"id":"5:6187:54538","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15910:1890"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13796:60969":{"id":"2:13796:60969","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2962:186":{"id":"2:2962:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2964:1004","2:2965:833","2:2966:799","2:2967:718","2:2968:701"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13785:60965":{"id":"2:13785:60965","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8716:121","str::matches":"1:15910:1890","self::pattern":"2:13331:4579","prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49964:5022","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13751:6030":{"id":"2:13751:6030","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:47779:178","self::pattern":"2:13331:4579","prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3823:229":{"id":"2:3823:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3824:183","2:3825:3599","2:3826:691","2:3827:374"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3828:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3823:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4145:4799":{"id":"2:4145:4799","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4146:58707"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:8154:1693","glob":false}},"2:3372:221":{"id":"2:3372:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6185:2134":{"id":"5:6185:2134","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13270:4337":{"id":"2:13270:4337","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13271:127","2:13272:55214"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6184:61618":{"id":"5:6184:61618","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:2283","`String`":"5:8459:220"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2283","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8204:5197","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13826:54539":{"id":"2:13826:54539","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23237:4239":{"id":"2:23237:4239","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23227:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3176:233":{"id":"2:3176:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3178:128","2:3179:1429"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:190:1728","glob":false}},"2:3247:116":{"id":"2:3247:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3248:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13814:60975":{"id":"2:13814:60975","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15904:1885","self::pattern":"2:13331:4579"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3599:2000":{"id":"2:3599:2000","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3600:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3586:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13350:4581":{"id":"2:13350:4581","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13352:4601","2:13353:929","2:13354:59612","2:13355:59613"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3363:215":{"id":"2:3363:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10573:4689":{"id":"2:10573:4689","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10574:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5910:2089":{"id":"5:5910:2089","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:1685"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:118:1723","glob":false}},"2:23767:14239":{"id":"2:23767:14239","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23768:59648","2:23769:59649","2:23770:59650"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23762:4726","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5568:4200":{"id":"1:5568:4200","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5569:54943"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3869:3602":{"id":"2:3869:3602","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3462:3577":{"id":"2:3462:3577","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3464:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"25:17:1670":{"id":"25:17:1670","crate_id":25,"name":"Sink","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:19:128","25:20:14464","25:21:52886","25:22:52887","25:23:52888"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2921:125":{"id":"2:2921:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2916:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3616:132":{"id":"2:3616:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3618:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3619:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23137:4574":{"id":"2:23137:4574","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23138:59907","2:23139:1237","2:23140:1238","2:23141:59908","2:23142:59909","2:23143:59910","2:23144:59911","2:23145:59912","2:23146:59913","2:23147:59914"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3373:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23150:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:44:1660","glob":false}},"2:3474:3578":{"id":"2:3474:3578","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3476:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4490:2339":{"id":"1:4490:2339","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4491:2313","1:4492:38106","1:4493:58254","1:4494:4086"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:14056:139","glob":false}},"2:3431:3571":{"id":"2:3431:3571","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3433:183","2:3434:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:9751:1680","glob":false}},"2:3170:150":{"id":"2:3170:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3172:58753"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14539:4322":{"id":"2:14539:4322","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14540:58828","2:14541:58829","2:14542:58830","2:14543:58831","2:14544:58832","2:14545:58833","2:14546:2543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:9751:1680","glob":false}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:2156:1664","glob":false}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:7282:1671","glob":false}},"2:8681:2282":{"id":"2:8681:2282","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8683:37692","2:8685:6264","2:8686:54320"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:9756:1678","glob":false}},"2:23762:4726":{"id":"2:23762:4726","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23763:1282","2:23764:1281","2:23765:1279","2:23766:1278"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23174:4859","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10810:147":{"id":"2:10810:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10811:657","2:10812:1973","2:10813:58148","2:10814:58149","2:10815:58150","2:10816:58151","2:10817:58152","2:10818:58153","2:10819:58154","2:10820:58155","2:10821:58156","2:10822:58157","2:10823:58158","2:10824:58159","2:10825:58160","2:10826:1546"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3529:3591":{"id":"2:3529:3591","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3531:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13767:60962":{"id":"2:13767:60962","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13331:4579","prim@char":"1:15904:1885","str::split_terminator":"1:15910:1890","str::split":"1:15910:1890"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49810:5015","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:96:1665","glob":false}},"21:9721:1679":{"id":"21:9721:1679","crate_id":21,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9722:2299","21:9724:2306","21:9726:2307","21:9728:2308","21:9730:2310","21:9732:2311","21:9734:2314","21:9735:2315"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1675","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13741:56765":{"id":"2:13741:56765","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15904:1885","self::pattern":"2:13331:4579"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1683","glob":false}},"2:14071:151":{"id":"2:14071:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14072:183","2:14073:151","2:14074:774"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8668:137":{"id":"2:8668:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8670:689"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14455:142":{"id":"2:14455:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14456:282","2:14457:523","2:14458:285","2:14459:1088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5558:4199":{"id":"1:5558:4199","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5559:58680","1:5560:58681","1:5561:58682","1:5562:58683"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13802:60973":{"id":"2:13802:60973","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13331:4579","prim@char":"1:15904:1885"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13361:4583","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3180:232":{"id":"2:3180:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3182:128","2:3183:1428"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3470:3579":{"id":"2:3470:3579","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3472:900"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13761:56758":{"id":"2:13761:56758","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13331:4579","`DoubleEndedIterator`":"2:8716:121","prim@char":"1:15904:1885","str::split":"1:15910:1890"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49760:4986","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3811:3597":{"id":"2:3811:3597","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3742:3596","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:7997:1672","glob":false}},"2:3375:224":{"id":"2:3375:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3167:74":{"id":"2:3167:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3169:59770"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13832:60979":{"id":"2:13832:60979","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15904:1885"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50059:5028","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:10419:1685","glob":false}},"2:3517:3588":{"id":"2:3517:3588","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3519:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1031:4228":{"id":"1:1031:4228","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:5209","1:1033:5182","1:1034:54537","1:1035:54538","1:1036:54539","1:1037:54540","1:1038:54541"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5524:4191":{"id":"1:5524:4191","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5525:54942","1:5526:54943","1:5527:54225","1:5528:54944","1:5529:4494","1:5530:4495","1:5531:54945","1:5532:1316","1:5533:54946","1:5534:54947","1:5535:54948","1:5536:54949","1:5537:54950","1:5538:54951","1:5539:54952","1:5540:54953"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3525:3590":{"id":"2:3525:3590","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3527:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4415:2332":{"id":"1:4415:2332","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4416:2306","1:4417:2307","1:4419:55027","1:4420:2310","1:4421:2311","1:4422:2308","1:4423:54382","1:4425:55028","1:4426:2543","1:4427:2352","1:4428:2299","1:4430:2315"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3613:131":{"id":"2:3613:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3615:381"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3616:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:11204:218":{"id":"2:11204:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11206:183","2:11207:56726","2:11208:56727","2:11209:56728","2:11210:56729","2:11211:759","2:11212:760"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11195:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13747:3075":{"id":"2:13747:3075","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47779:178","prim@char":"1:15904:1885","self::pattern":"2:13331:4579"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13361:4583":{"id":"2:13361:4583","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3102:2923":{"id":"2:3102:2923","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3101:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5436:4244":{"id":"1:5436:4244","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5437:5976","1:5438:58702"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:39:1675","glob":false}},"2:3653:2810":{"id":"2:3653:2810","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3655:242","2:3656:208","2:3657:59693"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13798:60970":{"id":"2:13798:60970","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13736:60960":{"id":"2:13736:60960","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50006:5023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2861:98":{"id":"2:2861:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:59740"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2858:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6168:61615":{"id":"5:6168:61615","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:14056:139","glob":false}},"2:23386:14220":{"id":"2:23386:14220","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23387:59886","2:23388:59887","2:23389:59888"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23379:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6750:4185":{"id":"1:6750:4185","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6751:55227"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13722:56728":{"id":"2:13722:56728","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11204:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:17:1670","glob":false}},"2:10569:120":{"id":"2:10569:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10570:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:687:1662","glob":false}},"1:6650:4175":{"id":"1:6650:4175","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6651:54272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:7997:1672","glob":false}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:5885:1668","glob":false}},"2:13811:56767":{"id":"2:13811:56767","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15904:1885","self::pattern":"2:13331:4579"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:9533:4333":{"id":"2:9533:4333","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13829:60978":{"id":"2:13829:60978","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15904:1885"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50041:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2883:105":{"id":"2:2883:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2884:413","2:2885:415"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:166:1727","glob":false}},"1:5572:4201":{"id":"1:5572:4201","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5573:54571"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6578:4194":{"id":"1:6578:4194","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6579:54644","1:6580:54645"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:988:1663","glob":false}},"2:13791:60967":{"id":"2:13791:60967","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15910:1890","self::pattern":"2:13331:4579","`DoubleEndedIterator`":"2:8716:121","prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49910:5019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3271:128":{"id":"2:3271:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3272:5102","2:3274:58705","2:3275:58706","2:3276:58707"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10562:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10569:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13758:30086":{"id":"2:13758:30086","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:13331:4579","prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13123:4983","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13782:1970":{"id":"2:13782:1970","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:13331:4579","str::matches":"1:15910:1890","prim@char":"1:15904:1885","`DoubleEndedIterator`":"2:8716:121"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49946:5021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4895:4856":{"id":"2:4895:4856","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4896:2773","2:4897:3100","2:4898:3058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:5885:1668":{"id":"21:5885:1668","crate_id":21,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:5886:2249","21:5888:2704","21:5891:2250","21:5894:297","21:5897:2707","21:5900:2708","21:5902:2709","21:5904:2616","21:5905:3236","21:5906:3072","21:5909:3241","21:5912:3242","21:5915:3245","21:5919:3066","21:5921:3240","21:5922:3237","21:5925:3238","21:5929:2400","21:5930:3071","21:5934:3239","21:5935:3243","21:5936:3244","21:5937:3247","21:5938:3246"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryStream","id":"20:127:1666","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13728:56748":{"id":"2:13728:56748","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15910:1890"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13773:56762":{"id":"2:13773:56762","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13331:4579","prim@char":"1:15904:1885","str::splitn":"1:15910:1890"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49864:4990","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13356:4582","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"29:42:1677":{"id":"29:42:1677","crate_id":29,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:43:54023","29:44:54024","29:45:52887","29:46:52888"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10583:4693":{"id":"2:10583:4693","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10584:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:42:1020","glob":false}},"5:6186:54537":{"id":"5:6186:54537","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15910:1890"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8672:152":{"id":"2:8672:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8673:2773","2:8674:2775","2:8675:775"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3173:136":{"id":"2:3173:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3175:686"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:195:1729","glob":false}},"2:13709:60956":{"id":"2:13709:60956","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6171:61616":{"id":"5:6171:61616","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8459:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8459:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3371:222":{"id":"2:3371:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3373:107":{"id":"2:3373:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2883:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13828:54541":{"id":"2:13828:54541","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13738:56764":{"id":"2:13738:56764","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13331:4579","prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10579:191":{"id":"2:10579:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10580:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3505:3586":{"id":"2:3505:3586","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3507:183","2:3508:1243"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13788:60966":{"id":"2:13788:60966","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"`DoubleEndedIterator`":"2:8716:121","str::rmatch_indices":"1:15910:1890","prim@char":"1:15904:1885","self::pattern":"2:13331:4579"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49892:5018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5906:2145":{"id":"5:5906:2145","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:437"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:115:1722","glob":false}},"2:13831:4230":{"id":"2:13831:4230","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15904:1885"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50050:4231","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10577:4691":{"id":"2:10577:4691","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10578:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:988:1663","glob":false}},"24:18:3022":{"id":"24:18:3022","crate_id":24,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:19:4167","24:20:4168"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8741:2281":{"id":"2:8741:2281","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8742:800","2:8743:55283"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13706:800":{"id":"2:13706:800","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15904:1885"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3534:3592":{"id":"2:3534:3592","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3536:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6344:4232":{"id":"1:6344:4232","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6345:58668","1:6346:58669"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:15:3023":{"id":"24:15:3023","crate_id":24,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:16:63977","24:17:4387"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:7282:1671","glob":false}},"2:8631:4785":{"id":"2:8631:4785","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8633:3088"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3404:2279":{"id":"2:3404:2279","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6246:4183":{"id":"1:6246:4183","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6247:58506","1:6248:38254","1:6249:58507","1:6250:58508","1:6251:58509","1:6252:58510"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10436:4187","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3834:3599":{"id":"2:3834:3599","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3836:56004"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3828:138":{"id":"2:3828:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3830:692"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3823:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3483:3585":{"id":"2:3483:3585","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:183","2:3485:959"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14056:139":{"id":"2:14056:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14057:183","2:14058:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13808:12736":{"id":"2:13808:12736","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13331:4579","prim@char":"1:15904:1885"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47779:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10512:2343":{"id":"2:10512:2343","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10513:1546","2:10514:55319","2:10516:3899"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:127:1666","glob":false}},"1:4472:2343":{"id":"1:4472:2343","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4473:1973","1:4474:2317","1:4476:3897","1:4477:2248","1:4478:2318","1:4479:3898","1:4480:3899","1:4489:2543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:9738:1681","glob":false}},"2:10571:4688":{"id":"2:10571:4688","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10572:665"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:687:1662","glob":false}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:96:1665","glob":false}},"2:13805:60974":{"id":"2:13805:60974","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15904:1885","self::pattern":"2:13331:4579"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13341:4578","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:9721:1679","glob":false}},"2:8716:121":{"id":"2:8716:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8717:54713","2:8718:54714","2:8719:54715","2:8720:54716","2:8724:54717","2:8727:6030"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8873:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13341:4578":{"id":"2:13341:4578","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13343:4581","2:13344:60664","2:13345:60665","2:13346:60666","2:13347:60668","2:13348:60667","2:13349:60669"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7607:4382":{"id":"1:7607:4382","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7608:54304"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2916:185":{"id":"2:2916:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2918:609","2:2919:914"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3368:2278","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:42:1677","glob":false}},"2:3906:3603":{"id":"2:3906:3603","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:4468:1667":{"id":"21:4468:1667","crate_id":21,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:4469:929","21:4470:774","21:4471:848","21:4474:2525","21:4475:2526","21:4478:2527","21:4482:2528","21:4485:2287","21:4487:2529","21:4492:437","21:4493:500","21:4494:2530","21:4495:2531","21:4499:299","21:4502:281","21:4505:2532","21:4506:2533","21:4508:2534","21:4511:2535","21:4515:2536","21:4520:2537","21:4523:2538","21:4526:2539","21:4528:2540","21:4531:2541","21:4535:2315","21:4536:1320","21:4537:2542","21:4538:2543","21:4539:2544","21:4540:1956","21:4542:2545","21:4544:2270","21:4545:2546","21:4546:2547","21:4548:2299","21:4550:2548","21:4551:2549","21:4552:2550","21:4553:2551","21:4555:2314","21:4557:2552","21:4559:2553","21:4561:2554","21:4563:2555","21:4564:2556"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1665","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:44:1660","glob":false}}},"paths":{"2:49076:4299":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"13:121:43810":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"16:6482:5874":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:10845:4257":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:2390:2812":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"2:53683:19750":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"12:2032:2195":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:5982:39203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3369:4632":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12209:50437":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:14989:4386":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:13785:51658":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:4230:41406":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"27:481:3718":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"16:6130:5652":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"14:216:43864":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:5436:4244":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:11925:54383":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"17:10545:45783":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:15870:58777":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"21:9874:2175":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"27:474:3738":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:5268:4937":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:6650:4175":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:6654:4172":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"21:18850:2412":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"1:10237:45551":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"1:10554:10030":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:32607:4332":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"6:1634:39275":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"21:16920:2189":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"2:47273:32933":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:5726:4860":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:47997:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"21:16859:2192":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"12:1162:5486":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:5274:42012":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"30:986:6033":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12248:6631":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"1:10516:9014":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"9:603:43338":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:6931:41567":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"1:10436:4187":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"21:13971:2051":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"17:2314:6001":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"16:5498:5633":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"20:39:4187":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"1:15398:5517":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:12250:50440":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:3173:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:17778:2266":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"6:533:38377":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:11314:5919":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"27:394:204":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"21:16755:2190":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"30:957:2171":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:6557:5664":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"18:766:63913":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"9:996:5423":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"21:12654:2094":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"17:10975:45842":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:5751:4549":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:7282:1671":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"16:7323:5603":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"6:1721:39282":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"18:729:63920":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:50059:5028":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:1526:39262":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"1:15086:4275":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:50688:2394":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:11312:12333":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"16:4903:44590":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:47828:2774":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:47302:32935":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"15:0:1861":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:5743:4547":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"1:14480:2275":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"1:11972:4309":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"6:4116:41396":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"21:1845:2103":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"16:4351:44446":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"15:230:5508":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:7158:4830":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:4036:61895":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"6:601:38384":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"21:12190:189":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"6:4434:41428":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:6954:41570":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"21:16083:2184":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"2:10573:4689":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:47023:2159":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:46865:4824":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:11784:46487":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:3366:5857":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:17413:2775":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"6:4287:41410":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"2:50481:5040":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"10:0:1857":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11216:4474":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:5277:4703":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:9746:45566":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13840:51665":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"30:698:6042":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"21:18722:2108":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"16:5668:5639":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:3987:41227":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:8902:45552":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:49712:5009":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:51399:4750":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:2212:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:67:1686":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"17:12557:50461":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"20:27:1994":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"2:5213:4936":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:10489:45684":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4356:41418":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:50514:4326":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"12:0:1859":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:7379:5604":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"21:18640:2344":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"16:6099:5651":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:15919:1897":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:23290:4724":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:9930:63658":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:12543:50460":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:8785:4331":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"21:18275:2327":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"21:13004:2106":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"21:168:698":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"9:963:5422":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:50637:2809":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:8453:60813":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:50718:4812":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:6728:4177":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"6:4179:41402":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:2764:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:4220:2977":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"21:17041:189":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"21:17954:2322":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"1:973:4416":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:3908:44099":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:9826:5935":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6342:5658":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:46905:2146":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"24:0:1756":{"crate_id":24,"path":["futures_task"],"kind":"module"},"5:3825:2195":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:1576:39269":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:14490:54599":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"21:4218:63932":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"1:12126:4323":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"8:0:1855":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"21:8154:1693":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"17:10445:45683":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:6135:42461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:11195:4187":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"21:8861:2198":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"2:50469:5037":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:23379:4187":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"2:3164:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:53176:4742":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"6:3972:41379":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:14539:4322":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"12:1238:5489":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:5149:41983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"5:1909:61895":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:10809:3819":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"21:18377:2261":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"2:52828:4754":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:3743:5966":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:46975:4829":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:11856:4375":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:299:63515":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:14655:4245":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"1:4490:2339":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:2543:5929":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:11154:54642":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:10530:45782":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:13350:4581":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:15909:1889":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"9:469:43234":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"12:940:4287":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:13306:51222":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:5362:5626":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"21:6654:2203":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"17:11335:5918":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:15451:2177":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"5:6562:2258":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12620:50526":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:23227:4187":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"21:12909:2102":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"1:15345:54643":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"21:18580:2164":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"21:14019:2163":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"5:2619:5320":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:10298:58807":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4296:41411":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"21:15390:2174":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"5:8536:4249":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"17:9004:45554":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:11221:4475":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"9:686:5355":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"30:904:63920":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"12:971:4289":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:18789:63926":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:9738:1681":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"14:0:1860":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:12070:50370":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:10899:45856":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"9:1056:5417":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"21:18385:4054":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:47820:2195":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:11108:4218":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:49964:5022":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"16:5685:5640":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:12771:5189":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6075:5581":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"30:995:6034":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11956:45790":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"16:3521:43939":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:9561:5926":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"6:5455:62964":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:50316:4595":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:52568:4741":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:2921:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:6665:42829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"21:10566:2050":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:12360:50448":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:7253:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:8550:4510":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:14358:2001":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"16:7449:5590":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:25084:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"16:4381:44452":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"6:4440:41429":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11671:46307":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:47836:2775":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:14252:59399":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:3042:4436":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"17:13472:51592":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:15902:1883":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13352:51237":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"17:13961:51706":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"6:4454:41431":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:4415:2332":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:51453:4771":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"21:11349:2403":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"25:17:1670":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"2:48812:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:50473:5041":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:47896:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:10082:6012":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"16:5721:5642":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:51900:4740":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"21:12504:2091":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:46692:5170":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:12143:50432":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:8873:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:47055:4833":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:47955:2774":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:10922:2980":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"16:5605:5636":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"30:153:52060":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:9786:45567":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:9646:63890":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12093:50371":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:10136:45568":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:9131:45558":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"9:1075:5425":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"1:9439:58677":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:11234:5989":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:53747:19754":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:12770:50605":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"21:17335:3026":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"1:7544:4376":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:6652:4176":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"30:843:6046":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"21:10475:2051":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:47076:2166":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:2147:4252":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:15926:1904":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:618:38387":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:4036:2979":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:5649:5638":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:4075:41391":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"17:13138:51062":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:50493:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:11797:46488":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:2861:5841":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"18:704:2171":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:51329:59333":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:3340:5828":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"17:13539:51602":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"5:4509:2195":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"17:10937:45867":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"16:5902:5646":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"16:3686:43949":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:12585:4431":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:2284:5251":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:3373:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:11305:45579":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:3167:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:24414:37386":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9636:45564":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"18:782:2171":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:8274:5207":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"5:2843:5319":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:12048:50364":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:539:38378":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:3459:2325":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:571:38381":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"6:4485:41434":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"2:52614:4745":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:53628:19745":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2126:2258":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:51375:4758":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"21:18568:2340":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"2:50645:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"18:739:63923":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:14182:2082":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:52332:4761":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10340:6002":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:47257:32931":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"6:5311:42038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:2952:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:11695:4991":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"26:55:52720":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"29:39:1675":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:3478:3580":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"18:621:63909":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"1:14668:54244":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:11902:4379":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:4005:41382":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:48081:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:720:59352":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:18679:2109":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"17:1311:6019":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"17:12406:50450":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:18548:2338":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"6:4509:41436":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"30:820:6044":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:12222:50438":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:1397:2775":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:2754:5829":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"21:11539:2065":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:53668:19749":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:11527:4353":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"20:44:1660":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"16:3007:5844":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:8196:4780":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:51998:4732":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:53534:4749":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:11102:45573":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:15921:1899":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"9:0:1856":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:13361:4583":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"21:16981:2196":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"17:294:63669":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:3428:4252":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:10723:4454":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:9275:43934":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:3070:4447":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:12573:50462":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46663:4231":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"12:1666:5499":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:4416:41426":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:7067:54387":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"31:206:1725":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:48333:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8872:4507":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"12:764:2774":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:1405:4281":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:5524:4191":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:15074:4269":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:1466:4287":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"17:12716:50538":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:3466:3581":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"30:919:63908":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7721:5593":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"12:2253:4291":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:6141:5653":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:859:4396":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6153:42462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"30:137:52059":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:2055:2952":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"2:32613:5112":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"6:6205:42464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:18726:2107":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:1441:4249":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:5146:4930":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:6688:42831":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12383:50449":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"18:790:6031":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:12117:50430":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:2858:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"21:9999:3792":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"2:48375:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:6105:4491":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"21:16972:2195":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"1:7098:54387":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:12892:50998":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"18:661:6045":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:16999:2198":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"16:6643:5878":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"16:7782:5589":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:24439:37405":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:13147:51063":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:49996:2331":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:10934:2198":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:3981:41380":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"16:4198:44365":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:16140:2181":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"1:14424:4208":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"16:6949:5889":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:1558:39267":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12237:50439":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:15928:1906":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:12634:50527":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:10048:45642":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:3470:3579":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:10390:5934":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"17:10422:45682":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"30:941:63913":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:37923:4781":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"6:1588:39270":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:10739:2328":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:4356:2196":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2883:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"21:18527:2336":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"1:10458:4401":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"6:607:38385":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"15:269:5513":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:12097:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"16:3576:43940":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:49742:2963":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:17326:2774":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"21:10420:1688":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"6:6979:43017":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:32673:59378":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"29:49:1674":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"17:11142:45575":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"16:2772:5866":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:48779:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"21:11747:2072":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"1:11210:4127":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:46626:5174":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"27:521:3723":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"2:51421:4738":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"2:23237:4239":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7826:4854":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:4277:41409":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4516:41437":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"6:3933:41376":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:13123:4983":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:2397:10035":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:15911:1891":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:4757:4210":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"21:12990:2104":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"21:18441:2331":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"5:2266:61910":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:11890:50252":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:39119:4819":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"14:194:43856":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:23137:4574":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"16:7051:5670":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"6:6856:42990":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12282:50442":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:13070:2144":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:3675:3594":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13917:51698":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:48830:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:5178:42027":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10571:5972":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:11282:45578":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:7754:5684":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"17:11256:45541":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:3517:3588":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"30:170:52061":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"18:857:6037":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"20:0:1659":{"crate_id":20,"path":["futures_core"],"kind":"module"},"1:10570:10037":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"21:16274:2074":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"16:3221:5849":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:10941:1670":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6679:5881":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:13345:51225":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"6:626:38388":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:7427:4370":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"17:12527:50459":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:15199:63942":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:11054:4214":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"21:14970:2170":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:47904:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:11258:4212":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:13873:51689":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:50627:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:46246:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:46772:5083":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:11515:4984":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:47264:2199":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:52151:59269":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:1312:2082":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:49892:5018":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"21:45:2023":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"5:3838:2774":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:23386:14220":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"21:18574:2341":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"17:13180:51108":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:7355:5582":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:9533:4333":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"21:10511:2054":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"24:15:3023":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"17:9240:5914":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"27:487:3719":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"16:3297:5904":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10253:5961":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:24526:5071":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"6:5366:42040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12585:50476":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:15924:1902":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:8432:59858":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"9:809:3729":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:3381:58825":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:12261:2083":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"21:11155:151":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"21:10032:3790":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"6:4346:41417":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:50465:5038":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:3155:5846":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"5:8376:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"30:1071:6040":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11474:46195":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"16:3494:43938":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"6:3907:41374":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:10950:2275":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"18:885:6039":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:5303:5623":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"21:16075:2185":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"2:13088:5020":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:6902:41563":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"0:116:1566":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:10574:5323":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"1:1113:9019":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:10731:2969":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:24168:5052":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"12:843:4281":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"17:13369:51555":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:52378:4765":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:2152:4253":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:39079:2921":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:8954:5925":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:46756:5082":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"24:203:2048":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"16:5374:5627":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:3525:3590":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"21:11613:2073":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"1:997:4235":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:10782:2055":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"27:509:204":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:52073:59369":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"21:13480:2050":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:2285:4656":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:7740:5235":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:3176:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:50302:4594":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:46995:4831":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:5941:5648":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"27:515:3722":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"1:15409:5517":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:2123:2775":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"17:13529:51601":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:4321:41414":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:53762:19755":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"5:3905:61895":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"16:7247:5615":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"21:10051:164":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"6:6129:42460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"21:16371:2180":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"2:5528:5165":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:12050:3724":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:11709:4992":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"20:169:1682":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"21:17865:2267":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"1:8192:4416":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"16:2905:5842":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:52644:4748":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:50477:5039":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:2326:605":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:6340:5234":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"21:17482:2260":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"16:6504:5663":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:5855:5645":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:14883:4377":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"21:6995:3029":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"2:3840:3601":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"16:5443:5631":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"17:9539:5988":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:10187:45638":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:12731:50539":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10476:5936":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"21:15657:2068":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"17:10147:45641":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:56578:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4373:41420":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"21:9756:1678":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"16:0:1862":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:1684:2775":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:11822:46502":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:51643:4728":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:4997:4928":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"21:16682:2187":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:3483:3585":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:46142:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:24919:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:12196:50436":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:9156:2777":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"21:12738:2099":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:13708:51617":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4526:41438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"30:1004:6035":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:5273:43934":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13196:51109":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:5566:5635":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:48803:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:13735:51619":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"12:777:2775":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:5518:4198":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"12:2059:4251":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"6:1694:39279":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:50457:5033":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:11091:4217":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:6490:5662":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:2130:4249":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"17:13155:51105":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:3742:3596":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"21:4468:1667":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"2:3102:2923":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"21:18649:2345":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"2:13270:4337":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"27:397:2659":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"1:4481:55318":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:11429:3729":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"5:8470:5199":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"19:0:1001":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:53637:19746":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:46646:5168":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"12:2036:2775":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5247:42034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5998:38256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:2135:4250":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:1733:4485":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:8266:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"12:379:5493":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:50730:4810":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:49910:5019":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:7792:5618":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:3823:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9431:45562":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"5:1710:4282":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:1431:2258":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:3381:2940":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4038:41386":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:49101:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:1551:39266":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"5:8423:5301":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:46586:4922":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"2:47282:2196":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:46744:5081":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:5419:42045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:7878:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"6:4493:41435":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"27:593:3734":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"16:3199:5848":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"5:1518:4293":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"21:18007:2323":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"12:979:4290":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"12:1703:5501":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:13331:4579":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:13764:4374":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"18:820:6034":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:12092:4512":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"28:211:4293":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"2:3511:3587":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:6907:5668":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:12227:5004":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:2916:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:5151:4931":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:6639:2150":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13747:51654":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13584:51607":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:49792:5014":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:5745:5643":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"6:4474:41433":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:13794:51661":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"21:12126:2076":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"21:11107:2062":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"21:13415:2149":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"21:11025:2058":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"17:9873:45568":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"2:10571:4688":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:15918:1896":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:13887:51695":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:6943:41569":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:3828:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:8635:4786":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:13073:51056":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"30:976:6032":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13037:51055":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"12:2045:4249":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"1:5641:4541":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:10775:45756":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:46669:5169":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:4256:41408":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11907:50253":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:50034:5026":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:16411:2193":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"16:3129:5855":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:7947:61928":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7415:5602":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"21:602:2064":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"16:4660:44539":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11603:46302":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:50159:4587":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:9466:45563":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3495:3583":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:15905:1886":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:48291:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:10428:2050":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"2:24310:37380":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:53286:4762":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:10318:5935":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"21:13856:2171":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"2:13049:5016":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:6759:2690":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:1621:39273":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"5:1673:2774":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:4012:41383":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:50006:5023":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"17:13549:51603":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:8716:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:17922:2321":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"2:13072:5017":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:49123:59368":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"22:7:1683":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"21:7997:1672":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"31:0:1721":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"6:4055:41388":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12417:50451":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"12:1147:4293":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:3452:3575":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:14473:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"21:12783:2100":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"2:2187:33509":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:2510:4427":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:10503:5937":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:11563:46265":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:50190:4591":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"2:22901:60509":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"6:4425:41427":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"1:8222:5306":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:10788:45755":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:11019:4212":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:11197:4538":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:5705:9022":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:8348:4256":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:4259:2973":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:49481:4988":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:14084:2977":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"17:11514:46256":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:1456:4285":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:2422:10042":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:10814:3820":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:8737:4518":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"12:815:4285":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"18:637:2171":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"5:1276:5314":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"9:234:5382":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"16:4975:44614":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:3247:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"31:115:1722":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"20:96:1665":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"17:8849:5987":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"12:1256:4294":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:15336:28332":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:17355:2775":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"6:5288:42035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:15916:1894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:9087:45557":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:5320:4704":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:2883:5860":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:17086:2094":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"16:4942:44605":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11689:46363":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"21:12184:2078":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"5:8393:5300":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:8502:4501":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:7744:58116":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"5:4017:4249":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:46699:5171":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6433:5660":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:11361:12337":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"21:18159:107":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"1:15925:1903":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"16:6656:5879":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"31:195:1729":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"6:6908:41564":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:9279:54847":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"26:49:52719":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:53488:4731":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:4008:45758":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:51754:4760":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:9716:63712":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:4315:41413":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:4316:44435":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:52408:4768":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:14419:54681":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:15059:4268":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:3058:4441":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:9673:8907":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:47963:2775":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"16:6035:5620":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:3436:4250":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:46334:4855":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"21:11808:2068":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:46706:5172":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13377:51582":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"21:9218:2952":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"6:1748:39285":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11068:5924":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:13331:51224":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"6:1669:39277":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:11204:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"21:17047:2083":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"27:585:3729":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"21:17437:2259":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"6:6184:42463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"18:611:6042":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"21:10074:3789":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"6:5567:42079":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"2:46565:30778":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:5962:61894":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"21:18017:2324":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"21:14257:2160":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"21:18489:2332":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"2:46327:4854":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"21:10917:2052":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"1:5159:4473":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"5:7358:61895":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:39155:4634":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:1567:39268":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:4061:41389":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"1:11964:2195":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:4203:63939":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"30:887:4781":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:57905:59376":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:24512:5127":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:10851:45759":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:2911:4432":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46158:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:10663:4431":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:6344:4232":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:14395:2154":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"6:6097:39207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:46616:5173":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11130:45574":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"6:161:38067":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"6:4332:41415":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:672:38418":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"21:11114:2061":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"1:5764:4550":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:46943:59239":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:2792:5567":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6604:5665":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"24:21:3024":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"12:2269:4292":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:50050:4231":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:1704:39280":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:12482:50456":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"21:1567:2093":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"16:3314:5827":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"21:2156:1664":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"2:56552:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:6016:42456":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:46386:4880":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:6484:54706":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"30:826:6041":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6286:5506":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:37899:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:11270:4548":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:10455:5932":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"14:231:5202":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12607:50525":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:3920:41375":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:9326:5915":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"12:2419:4256":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"6:586:38382":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:3103:5856":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:15193:63937":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"2:46300:3598":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"6:513:38374":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"12:2072:4253":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13859:51671":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:3534:3592":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"4:0:1854":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13094:51057":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"16:7741:5683":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"21:4389:2175":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"16:5948:5839":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:7141:5678":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"16:7110:5675":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:53657:19748":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:13271:51157":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"17:9206:45559":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:10448:54636":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:3431:3571":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:49760:4986":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"14:244:43857":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"1:2481:4426":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:23231:4237":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:8301:2775":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"28:220:4291":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"21:14265:2158":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"17:10925:45866":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"18:801:6032":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:46559:4231":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:46849:4826":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"21:9721:1679":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"17:542:5555":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:24460:37396":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"5:3110:60951":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:5142:4133":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:7184:5890":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"21:13258:2146":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"1:10962:2277":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:13012:5013":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:52120:59370":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:11276:4484":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"21:17493:2261":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"1:11174:4537":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"25:0:1669":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"2:11681:4990":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"5:1296:5315":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"30:708:63909":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"16:7238:5601":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:46925:2148":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:7063:5671":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:11381:45970":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"1:11469:4350":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"5:5910:2089":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11181:45577":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"16:6630:5877":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:3478:5852":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:10810:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:13953:51704":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:9836:63436":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:10323:58818":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"12:2052:4250":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"12:933:4286":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"30:1024:6036":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12026:50363":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12003:50306":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:47947:2195":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:11754:46483":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:11701:46364":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:3405:2965":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:25117:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"12:472:63019":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"21:9429:1670":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:681:45551":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"9:157:5374":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:10598:45786":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:11265:4545":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:18820:2415":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"2:49846:4989":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46068:2779":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:12616:54390":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"5:3104:5209":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:2359:10023":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"17:10622:45754":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"28:203:2688":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"2:21:677":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:10610:45787":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:10581:4692":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"21:17362:2095":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"17:13129:51061":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:3051:5902":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:9033:45555":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"12:1784:63032":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:51624:59347":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:10715:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"9:900:43262":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:8219:5256":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:8407:5082":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:634:38389":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"21:10421:1687":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"21:17005:2199":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"2:4782:2952":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"2:48539:4689":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"5:6775:5275":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:10522:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:4146:4459":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:11667:4989":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:10437:4392":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"6:3993:41381":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"16:3402:5568":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"21:12402:2089":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"2:22878:60508":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:5885:1668":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"2:49570:4996":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:4388:2952":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:444:2283":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:593:38383":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"24:258:2049":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"2:3101:4187":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:5983:4490":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:11968:50259":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"6:612:38386":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:6851:2952":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"17:13452:51590":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:12170:50434":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"21:18805:2627":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"2:48560:4691":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"21:97:1689":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"5:777:60761":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"1:14162:4134":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:3852:4666":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:12578:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:8258:2775":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"20:127:1666":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"17:10028:45625":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"2:5223:4702":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:4895:4856":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:8553:5230":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:1477:4288":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11742:46482":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:6578:4194":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:3404:2279":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:2180:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"1:11068:4216":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"21:16960:3287":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"31:166:1727":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"1:14651:10037":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:2861:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:10463:4415":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:1626:39274":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:53034:4774":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:4:986":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:16463:2194":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"24:407:3463":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"1:8005:3738":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"16:7169:5597":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:12998:2105":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"31:190:1728":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"21:11991:2069":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"2:51930:4744":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:1578:4291":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"21:14861:2168":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"16:7208:5680":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"17:10814:5970":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:8228:2258":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:9796:63670":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:4852:4571":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:15917:1895":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:13755:51655":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11980:2775":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"30:836:6045":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:849:6036":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:7441:4371":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:49718:5010":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:15904:1885":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:10685:4209":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:11212:5991":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"12:928:4283":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"1:1031:4228":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:12145:4324":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:46268:3595":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:10422:1684":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"6:6114:42458":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"2:14419:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:3869:3602":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"6:4142:41399":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"21:17395:2195":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:53709:19752":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:3077:5903":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"18:651:6041":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:49327:5180":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:7461:4372":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"6:6914:41565":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:14457:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"21:15022:2159":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:10512:2343":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:10015:45624":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:46874:2143":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:9545:4468":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:51952:4747":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"28:41:2195":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"1:5283:4479":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:6643:38333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:24985:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:3060:4442":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:6229:42466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"21:14918:2169":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"17:13428:51588":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:13948:58804":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:9534:2650":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:1592:4292":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:12327:59647":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"17:13323:51223":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:15458:2176":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"2:24067:4187":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:25051:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"29:47:1676":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"17:13595:51613":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:48039:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:50526:5109":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"12:2066:4252":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:11869:2067":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"2:14455:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:4402:41424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"5:5861:61895":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"21:13346:2148":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"27:574:3728":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"2:24422:37404":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"12:466:63026":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:4840:4570":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"14:189:43855":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:14895:4378":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:49581:4997":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:50489:5035":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:14915:4323":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"6:88:38000":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"26:0:2006":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"2:7935:2547":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:9883:63454":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:10127:5935":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:14081:2975":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"12:399:5492":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:5948:61907":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:14056:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:52254:4773":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:10800:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:11002:45868":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"12:952:4288":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:5530:5634":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:4281:2258":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:10850:4664":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:8929:45553":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:14147:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:8672:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:10643:45769":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:6716:2050":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:5998:5600":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:10531:9017":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"30:0:1864":{"crate_id":30,"path":["memchr"],"kind":"module"},"6:4081:41392":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:32573:3563":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"14:250:43863":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"16:4840:44575":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7155:5679":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"21:16209:2182":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"7:0:1494":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:7604:4380":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:7637:5681":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"12:1183:5487":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"21:17276:3451":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"2:4488:2775":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:4472:2343":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:13803:4376":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:2262:4652":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"18:866:6038":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"30:879:2171":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:50327:4596":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:1606:39272":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"5:0:282":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:6929:12336":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:6595:5595":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:4864:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:14907:54596":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"21:9795:1692":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"17:11547:46264":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:13612:51615":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:13167:51107":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:12087:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:5427:5630":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"16:7684:5592":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:52022:4733":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:15908:1888":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:50122:4580":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:9517:2961":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6214:42465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:1600:39271":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:46986:2054":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"21:15301:3106":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"18:136:52059":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:11290:4493":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"17:12130:50431":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:9406:54406":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"16:6873:5086":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:8448:2137":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:13407:4586":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"16:6717:5667":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:51708:4772":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:46224:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:2276:4655":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"21:42:1020":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"17:11530:46257":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:10801:5969":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4198:41403":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:46966:2052":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:12073:4506":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"12:2280:4293":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:9259:43935":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"9:749:5359":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"17:9988:45623":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:11452:4349":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:5568:4200":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:10579:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:15914:1892":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"21:599:2679":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"17:11937:45791":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:5257:43935":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:50025:5025":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:48123:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:10058:6018":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:3586:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:13559:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:5502:4196":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:1547:4294":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13660:51616":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:4665:61893":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:10244:4969":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"16:6549:5598":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"12:162:5490":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13463:51591":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"6:4067:41390":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"21:7017:2204":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"16:5176:44791":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:46957:2051":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:12447:2090":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"2:49532:4993":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:4467:44466":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:17627:215":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"16:6012:5579":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:1662:39276":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"6:4464:41432":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"21:14313:2156":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"9:927:43228":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"21:15095:2172":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"1:15920:1898":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:13522:51600":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:1387:2774":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:11457:45980":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"30:869:6047":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"16:5396:5628":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"16:3770:43985":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:18066:2325":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"2:51523:59371":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"27:550:3725":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"16:6980:5669":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:50144:4584":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:3613:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:4145:4799":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"7:85:43116":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"30:929:63912":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"5:8459:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"28:37:2775":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"2:10033:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:12840:2101":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"1:15910:1890":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:1055:5255":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:10732:2053":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"5:984:2157":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"16:4495:44470":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:18737:2110":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"30:949:2171":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"16:2959:5843":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:13899:51696":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:4028:41385":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:14933:54233":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:47066:2164":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"6:3896:41373":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:51854:4752":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"21:10231:2628":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"6:4098:41394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"6:5478:42050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:4160:4803":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"21:18732:4029":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"5:2396:5316":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:15654:56548":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:12034:4312":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:1712:39281":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:11334:4186":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11615:46303":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:12455:50454":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:8951:4389":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:11653:46306":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"27:460:3773":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"21:18516:2335":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"1:7319:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"6:5240:42033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:11588:4986":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:6089:5650":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:10240:5958":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:13763:51656":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"18:837:4581":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"21:8042:1390":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:23048:4858":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"21:15144:2173":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:13774:51657":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:3368:2278":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:10913:45865":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"9:776:5404":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"1:10819:2274":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:10304:5913":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"5:4372:2774":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"21:11288:2074":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"21:16552:2188":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"2:23762:4726":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:46819:10556":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:46739:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:48900:4687":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:4765:61912":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"5:7922:61914":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"17:11354:5917":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:11379:4339":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"1:4261:2974":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:18498:2333":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:50350:5097":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:1236:45640":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:51554:4751":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:17504:2262":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"1:3371:2324":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:5204:42029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:50238:4592":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:8213:2775":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"14:56:45980":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:5439:42048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"12:2392:63029":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10394:5998":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"21:687:1662":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"5:5906:2145":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:3395:2195":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5405:42044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"21:14444:2155":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"5:7312:2258":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:23767:14239":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:1912:39421":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:24538:5070":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"12:114:63022":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"27:21:64009":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"18:811:6033":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:50016:5024":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:3375:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"1:7944:4416":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"21:8152:924":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"2:11433:2963":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"21:11071:2060":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"2:10575:4690":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"9:27:5406":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:51661:59342":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:11553:4985":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"5:4581:5290":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:8101:4416":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:23973:60265":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"12:183:5494":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"17:0:1863":{"crate_id":17,"path":["object"],"kind":"module"},"1:11932:54226":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"18:645:6044":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"16:4439:44462":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:53648:19747":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"21:14028:2052":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"1:14399:4195":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:607:45550":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:48797:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"2:24787:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:25150:5057":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:50337:4597":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:2501:4857":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"21:18102:2143":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"12:1203:5488":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:52490:4753":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6671:42830":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:10435:5933":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"6:4242:41407":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:4775:44558":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"2:49607:4826":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:10988:45841":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"12:880:4249":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"21:14614:2164":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"2:10577:4691":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:5639:5637":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:545:38379":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"5:3407:5248":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:9654:4578":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"5:1701:4281":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:8300:4310":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:14822:58803":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:2962:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:5541:42078":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"21:16322:2179":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"16:6026:5577":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"21:11930:2070":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"2:47014:4832":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:11888:4378":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:48553:4690":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"28:0:2007":{"crate_id":28,"path":["slab"],"kind":"module"},"30:1060:6039":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:22846:60262":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"16:7369:5583":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"16:6173:5654":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"21:18624:2342":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"2:48864:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"16:7090:5673":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:9960:163":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"1:10698:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:6250:42468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:47811:2773":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"24:18:3022":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"21:17316:3025":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:46095:2811":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"6:6034:12333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"1:11308:4193":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:2484:45671":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"6:4020:41384":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:25519:4911":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:6050:5649":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"30:1032:6037":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:3599:2000":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:3402:4251":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:3671:3593":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:39115:5323":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"21:17223:2202":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"1:4222:2978":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"6:1537:39264":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5216:42031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"1:8875:4368":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:7025:5573":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"6:565:38380":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:2328:5317":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7144:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:50370:5098":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:4094:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:2937:5865":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:6967:43016":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9948:45570":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:6080:39204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10586:45785":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:14800:58820":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:10717:59896":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:11591:46267":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"1:1108:9018":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:24476:37407":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"16:3029:5845":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:4181:2975":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:13557:51604":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"5:3948:2328":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:46685:5027":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:32773:59232":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"16:2981:5854":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:15922:1900":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:53426:4766":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:7607:4382":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:5488:2952":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"21:18537:2337":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"17:9587:63884":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"21:13600:2151":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"2:51806:4767":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:49092:4665":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10464:5931":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:7295:5587":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:12700:50537":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:13781:58125":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:6331:5505":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10266:5907":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"28:50:2774":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"17:11640:46305":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"21:14662:2166":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"5:7477:2775":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:10104:6014":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"1:12018:3726":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:47045:2162":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:10668:4208":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:8021:4825":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:49131:59361":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"16:6858:5885":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:5488:42051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:10115:6015":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"6:6027:42457":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"21:13119:2167":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"1:13265:4486":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:2141:4251":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:8360:4298":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:12222:2081":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"21:7054:58818":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"17:12957:51000":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:547:5820":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:783:8907":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"2:47779:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:3458:3574":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:49633:4999":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:9153:2776":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:17131:2200":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"2:49323:5179":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:6533:5872":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:1760:5312":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:50265:4593":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:5572:4201":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"6:527:38376":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:6691:5666":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:3906:3603":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"18:896:6040":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:14249:2153":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"2:49810:5015":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:5426:42046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:7839:4416":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"18:754:63912":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"27:0:1690":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"6:0:805":{"crate_id":6,"path":["libc"],"kind":"module"},"2:46341:4702":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4392:41423":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:56604:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:4834:4321":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"21:15735:2067":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"6:5582:42080":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:1489:4290":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:3170:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:11922:50254":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:24239:5054":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:9706:45565":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:50173:4590":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:5923:5647":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:9451:58678":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"2:53610:4734":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"17:13975:51740":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:14686:4379":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"12:2398:59886":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:13938:51699":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:9756:63600":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:12674:50530":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:5698:5641":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:53824:19757":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:15903:1884":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:5398:42043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"9:1020:5424":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:11408:2774":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"21:15857:2070":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"16:4743:44550":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:10198:45637":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:5887:5825":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:4148:41400":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:13414:10035":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"24:380:63950":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"16:7768:5588":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"14:47:43855":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"21:15935:2069":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"2:24820:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:3371:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3610:2280":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:11013:45571":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"16:4411:44458":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:1601:4293":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:13507:51598":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10874:45757":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:9160:5990":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:4532:41439":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"21:13181:2145":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:48249:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:49560:4995":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:15274:4479":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"16:5516:5818":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"16:5289:5580":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:49662:5002":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"12:787:4284":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:10558:45784":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:1452:4284":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11433:45979":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"11:0:1858":{"crate_id":11,"path":["adler"],"kind":"module"},"5:1502:4291":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:8451:4498":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:2361:10024":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:3474:3578":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:6486:54708":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:4088:41393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:12660:50529":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"21:9353:2196":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"2:49864:4990":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:18658:3788":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"2:56591:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:4573:44524":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:51309:59379":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"5:8236:5257":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"9:41:5407":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"1:10537:4259":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"21:16990:2197":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"17:12442:50453":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"21:12053:2071":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"1:1610:4294":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:14414:54711":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:5460:5632":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:7489:4374":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:49084:59334":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"30:853:143":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:12157:50433":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"15:248:5509":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:22880:60504":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:1740:39284":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"21:16483:2183":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"21:11238:2403":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"1:1374:2195":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:4628:44531":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"5:1152:61895":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11168:45576":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"17:510:45549":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"16:7309:5585":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:11945:45789":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"30:914:63923":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:14103:2054":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"1:5156:4472":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"6:6243:42467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:8720:2199":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:10547:4295":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:8204:5197":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:2839:5840":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10516:45685":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"21:14796:2057":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"17:12512:50458":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:11467:2077":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"6:4446:41430":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"21:16010:2073":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"16:7471:5578":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"12:2040:2258":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:49686:5093":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"30:1012:4581":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:3743:43982":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:50485:5034":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:49652:5001":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"26:65:52721":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"18:744:63908":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"27:495:2659":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"31:88:4128":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"16:5217:5831":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"1:13501:4338":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"14:11:43855":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:12194:5003":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"1:10675:4433":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:5229:42032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"21:13669:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"21:11191:2074":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:3521:3589":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"21:13021:2143":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:47035:2161":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:14816:58806":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"6:6057:39230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:15092:4276":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"21:17568:2263":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"2:14368:2386":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:48207:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:5580:4203":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12469:50455":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"17:13908:51697":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:3436:3576":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:3960:41377":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:6750:4185":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:10488:4134":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11409:45978":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"24:237:2047":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"17:13721:51618":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:12209:2080":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"1:7787:3738":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"12:1682:5500":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:11494:46196":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11862:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:9583:58809":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"17:9958:63424":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:9160:4779":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:13879:4375":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:51606:4743":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:12431:50452":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:23961:4238":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:10993:2164":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"5:1256:60947":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:5390:42042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5331:42039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:10093:6013":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"1:15929:1907":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"12:2412:63030":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:2119:2195":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:3554:4249":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:3177:5847":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:8741:2281":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"18:169:52061":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6277:5656":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:49113:3729":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:7207:61914":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"1:11874:4377":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:12746:45579":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:54:5477":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"1:11986:3723":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:3372:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13495:51595":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:12102:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:8668:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13440:51589":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:9530:4467":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:3441:3573":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4048:41387":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"22:0:2004":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"21:18835:2414":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"5:7048:2514":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:23434:4725":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:14735:2165":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"7:38:43109":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:1727:39283":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:5447:42049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"21:17431:2258":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"5:3114:60952":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:47845:5086":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:11914:54232":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"20:194:3021":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"9:692:5357":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:11384:2195":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:11000:2961":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11769:46486":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"21:6790:63940":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"21:16807:2191":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"12:750:2195":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:1740:4285":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"18:668:6046":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"17:13293:51221":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:1533:4292":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:24399:4899":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"28:71:64011":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:11810:46501":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:46934:2149":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"12:1103:4291":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"21:13730:3107":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"17:10223:5928":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:23150:4187":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"5:383:5281":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:9751:1680":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"2:3811:3597":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6268:42469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"21:9513:2175":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"2:6899:59565":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"12:895:5485":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:6468:5661":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12262:50441":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:8651:54359":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"5:8481:5200":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:13627:4384":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"17:9676:63609":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:46202:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:49728:2961":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:5974:38297":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:49541:2169":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:5260:42011":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:13341:4578":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:6120:42459":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:6407:5659":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:15923:1901":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:56617:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:46182:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:53732:19753":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:4340:41416":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:47086:2168":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"27:565:3727":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"16:6518:5596":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"12:856:4282":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:53572:4769":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4410:41425":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:8986:54359":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"21:15467:2060":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"17:11579:46266":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"2:47972:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:13356:4582":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:8286:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"28:55:2258":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"17:9064:45556":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"5:7551:61895":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"6:3883:41372":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"17:10211:45643":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"0:0:1757":{"crate_id":0,"path":["futures"],"kind":"module"},"17:13247:51154":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:6581:4180":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:4218:41405":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:8681:2282":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:5558:4199":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"21:595:2678":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"1:6224:4180":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:12795:5149":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:10038:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"5:4308:61895":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:2005:4249":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:51353:4770":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"5:2376:5336":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:13565:51605":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:1105:9016":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13515:51599":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11521:2195":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"17:13404:51584":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"21:18874:2417":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"21:18213:2326":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"21:15579:2066":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"16:7100:5674":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:10395:2413":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"1:10658:4192":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"20:122:4187":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"1:10248:54379":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"21:17637:2202":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"1:3284:2322":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:988:1663":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"6:4270:4492":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:7692:2264":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"17:10660:45788":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:1483:4289":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:13361:51554":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:18907:3005":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:15232:3108":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"2:56565:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:10039:45626":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"21:13221:108":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:3462:3577":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:14071:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:6846:4246":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"2:51784:4764":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:3500:3584":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"6:1544:39265":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:13421:51585":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:591:2063":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"21:14493:2161":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"21:17695:2265":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"21:11686:2066":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"1:1447:4283":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:23436:4724":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:11538:4354":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"6:4379:41421":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:7659:5682":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:6190:5655":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:18671:63928":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"1:14981:54400":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"11:46:63018":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"30:965:6031":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:5297:2689":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11628:46304":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"21:6302:2082":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"1:6482:54704":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"21:10844:2057":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"1:4149:4460":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:2917:2311":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:3271:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:48165:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"18:152:52060":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:4157:5973":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:15907:1887":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:14:1973":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:9361:45560":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:50041:5027":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"21:10016:3791":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"17:13481:51593":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:11085:5993":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"1:13433:56543":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:13029:51053":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"6:157:38066":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:8244:60760":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:8436:5302":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11713:46473":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:24071:4721":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:4689:44544":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:47004:2158":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:3619:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:1764:39286":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:4538:41440":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:3616:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:12921:50999":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:13215:51111":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"21:18768:63927":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:46602:4924":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12646:50528":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"29:0:1673":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:22899:60506":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:48417:5092":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"16:4803:44562":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"16:5412:5629":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:6924:3027":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"5:3105:60953":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"5:3960:5307":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"21:17150:2201":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:46638:5028":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"21:16609:2186":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"2:23174:4859":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"6:4362:41419":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:3446:3572":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:10583:4693":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"30:895:59352":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:9578:58822":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"27:188:3726":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:56630:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"0:142:1037":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"9:722:5358":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:8126:4863":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"6:6896:41562":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"1:15253:4473":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:24347:59323":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:11626:4987":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"13:233:63034":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"6:521:38375":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:18507:2334":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"21:10419:1685":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"12:869:2258":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"12:353:63023":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:24853:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:14087:2973":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:28329:4789":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:12107:4316":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:9183:5923":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:14106:2079":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:11006:2963":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"21:661:58820":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:10249:4970":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:22833:4781":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:8631:4785":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:32433:5122":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"21:17404:2774":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"5:69:5229":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:11511:4351":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"1:9155:4236":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:11042:4213":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"17:11725:46474":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:2420:6631":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:1146:9020":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:13233:51152":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:7121:5676":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"16:6381:5594":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"1:8200:3729":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:5510:4197":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:15875:9021":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:10962:45843":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:10291:5910":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:14437:54224":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:50461:5036":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:3243:5850":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"21:13791:2171":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:3363:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:0:1343":{"crate_id":1,"path":["std"],"kind":"module"},"21:10672:2054":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"16:7281:5586":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"1:15044:4267":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:3180:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"21:18559:2339":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"2:10569:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:4433:2276":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:46887:4827":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"27:598:3771":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"1:12005:4311":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"21:18151:2257":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"17:13817:51662":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:11284:4127":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:15360:54637":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:3505:3586":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"27:502:3720":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"16:2733:5830":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:1088:4428":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:6925:41566":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:10565:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:5735:4546":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:3529:3591":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:3966:41378":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"21:15810:2053":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"30:812:2171":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:48842:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:11910:54692":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"6:1680:39278":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"17:12348:50447":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:5293:42036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12318:50444":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"18:712:4781":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:4110:41395":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:12496:50457":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:48546:4688":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:49700:4821":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:853:4395":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:51976:4729":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:12183:50435":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:4716:44547":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:47878:5088":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:47291:2197":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"16:4271:44414":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"30:1041:6038":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"21:14354:2157":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"16:6060:5621":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"21:12662:2095":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"21:18392:2330":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"18:829:6035":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:10949:45844":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:48916:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11031:45572":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"6:4127:41397":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"27:606:3772":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"16:7200:5599":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:13298:2147":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"6:1531:39263":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:8375:2198":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:3877:41371":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:1460:4286":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:5238:43937":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:13602:51614":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"18:694:6047":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:4135:41398":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"2:51505:4763":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:47887:37620":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:11985:50262":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:3441:5249":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:11125:4320":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"2:50680:2393":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"31:164:1726":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"6:5186:42028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"21:18341:2328":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"18:774:2171":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:10364:6000":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:3653:2810":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:4183:2976":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:14952:4316":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:32969:4792":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:3490:3582":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10407:5997":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:5326:5624":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"21:14160:2150":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:10831:5935":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:52174:59360":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10983:2143":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:53364:4746":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"21:12573:2092":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"2:49946:5021":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:24387:4898":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:9446:58817":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"1:1418:4282":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:15886:54265":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:23425:4187":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:7739:2678":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"18:0:1864":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:3461:5853":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:49642:5000":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:9920:45569":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:2813:5859":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:53694:19751":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"16:6931:5888":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5430:4242":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"23:0:2005":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"5:8295:2775":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:12587:58120":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4308:41412":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"16:6159:5584":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"5:3462:4253":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13016:51001":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:10166:45639":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:7079:5672":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:12687:50531":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:7131:5677":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"29:42:1677":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"17:13281:51219":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:15213:4472":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"21:12196:2079":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"21:18664:2678":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"1:2914:2306":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:24505:37406":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"13:0:1853":{"crate_id":13,"path":["std_detect"],"kind":"module"},"21:14541:2162":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"17:13257:51155":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:1072:2195":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:9396:45561":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:46829:10555":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:4599:44526":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:51584:4739":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:3265:5851":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:3755:3822":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:4143:4458":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:5077:4151":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:52678:4730":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:24331:4903":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:9532:2651":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:18631:2343":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"1:696:4391":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:4160:41401":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:10562:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"6:4386:41422":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:46725:4926":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:11476:4983":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"2:24363:37368":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:5378:42041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"5:5609:2690":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:15191:4220":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"6:6007:42455":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"31:173:1724":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"2:25018:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"6:580:3916":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:3106:60814":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:8458:4500":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:3044:4437":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"21:12300:203":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"17:2512:5999":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:49620:4998":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:15915:1893":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:46896:4828":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"12:432:5491":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"1:4497:2960":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:7718:5234":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:43:1020":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"2:24886:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"2:24952:3198":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:5713:4544":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5433:42047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:8293:2659":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"21:18369:2329":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"21:11409:2075":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"17:12758:50602":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12015:50362":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13573:51606":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:6472:4191":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"16:5959:5572":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"21:0:1661":{"crate_id":21,"path":["futures_util"],"kind":"module"},"2:46307:4797":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"17:9291:45542":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"21:10614:2059":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:46915:2147":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"6:4208:41404":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"27:533:3724":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"2:32621:59372":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"21:17346:2195":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:49550:4994":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"27:467:5306":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"2:5033:4929":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"12:1121:4292":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:50701:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"6:5547:41287":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:10068:5907":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:5301:42037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5784:5644":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"21:17420:2257":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"21:13914:2152":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"21:69:2025":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:7475:4373":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:5348:5625":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:4871:44582":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12302:50443":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:1663:2195":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"16:7702:5591":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"21:15511:2065":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"20:110:1995":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"1:14449:4433":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:6310:5657":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:6937:41568":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"21:13539:2050":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"21:18862:2411":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:3834:3599":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:5865:4481":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:23101:4818":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:11013:2331":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"5:1719:4283":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:6246:4183":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:53785:19756":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:22861:60262":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"6:5210:42030":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"5:4709:61912":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:10977:2056":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"2:46574:4921":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:1729:4284":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:5752:786":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:8615:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"31:118:1723":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"2:57926:59327":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"12:2404:63028":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:51483:4759":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:15927:1905":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:56195:4814":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"}},"external_crates":{"24":{"name":"futures_task","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"futures_util","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"futures_core","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_executor","html_root_url":null},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"28":{"name":"slab","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"futures_channel","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"futures_macro","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":18}