{"root":"0:0:1718","crate_version":"0.3.21","includes_private":false,"index":{"2:3075:2878":{"id":"2:3075:2878","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3074:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3318:3501":{"id":"2:3318:3501","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3320:171","2:3321:879"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[196,8],"end":[196,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:197:1690","glob":false}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[139,0],"end":[139,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:97:1650","glob":false}},"21:7964:1633":{"id":"21:7964:1633","crate_id":21,"name":"SinkExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:7966:2211","21:7971:2212","21:7975:2886","21:7978:2887","21:7980:2213","21:7981:2202","21:7982:2204","21:7984:2206","21:7985:2209","21:7986:2205","21:7987:2210","21:7990:2888","21:7992:2889","21:7994:2890","21:7995:2891","21:7996:2892","21:7997:2893"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sink","id":"25:17:1631","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,38],"end":[135,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:7249:1632","glob":false}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,77],"end":[195,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:192:1689","glob":false}},"2:12444:5080":{"id":"2:12444:5080","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12445:2729","2:12446:60003"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13484:60564":{"id":"2:13484:60564","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15856:1843"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49619:4913","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5800:4130":{"id":"1:5800:4130","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5801:54053"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3367:3510":{"id":"2:3367:3510","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:171","2:3370:340"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6560:4144":{"id":"1:6560:4144","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6561:54420","1:6562:54421"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2892:173":{"id":"2:2892:173","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2894:593","2:2895:894"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13446:60553":{"id":"2:13446:60553","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"str::match_indices":"1:15862:1848","prim@char":"1:15856:1843","`DoubleEndedIterator`":"2:8411:120","self::pattern":"2:12997:4517"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49488:4905","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13425:56473":{"id":"2:13425:56473","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:15862:1848","prim@char":"1:15856:1843","self::pattern":"2:12997:4517"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49424:4874","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,35],"end":[195,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:175:1685","glob":false}},"5:6099:61204":{"id":"5:6099:61204","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8354:205","`Box<str>`":"5:432:2241"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:5103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,24],"end":[250,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1635","glob":false}},"2:10274:4585":{"id":"2:10274:4585","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10275:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3382:3514":{"id":"2:3382:3514","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3384:171","2:3385:1212"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13366:60543":{"id":"2:13366:60543","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15862:1848"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:18:2977":{"id":"24:18:2977","crate_id":24,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:19:4074","24:20:4075"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10268:4583":{"id":"2:10268:4583","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10269:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13440:60551":{"id":"2:13440:60551","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"1:15862:1848","self::pattern":"2:12997:4517","prim@char":"1:15856:1843","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49542:4908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13443:60552":{"id":"2:13443:60552","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"str::rmatch_indices":"1:15862:1848","self::pattern":"2:12997:4517","prim@char":"1:15856:1843","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49470:4904","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8846:2733":{"id":"2:8846:2733","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:56278","1:2579:1826","1:2580:56279","1:2581:56280","1:2582:56281"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10255:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10262:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13413:30075":{"id":"2:13413:30075","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:12997:4517","prim@char":"1:15856:1843"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12789:4868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13456:60558":{"id":"2:13456:60558","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13362:54658":{"id":"2:13362:54658","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13399:56479":{"id":"2:13399:56479","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:15856:1843","self::pattern":"2:12997:4517"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,68],"end":[122,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:9646:1642","glob":false}},"2:3313:3504":{"id":"2:3313:3504","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3315:171","2:3316:1334"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,42],"end":[236,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:44:1621","glob":false}},"2:23655:4651":{"id":"2:23655:4651","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23656:4655"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23651:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3250:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12936:4268":{"id":"2:12936:4268","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12937:126","2:12938:55114"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13475:60563":{"id":"2:13475:60563","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15856:1843","self::pattern":"2:12997:4517"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,65],"end":[195,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:168:1688","glob":false}},"1:5738:4124":{"id":"1:5738:4124","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5739:54053","1:5740:54058"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,4],"end":[244,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:7964:1633","glob":false}},"1:6793:4081":{"id":"1:6793:4081","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6794:54097"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13007:4516":{"id":"2:13007:4516","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13009:4519","2:13010:59685","2:13011:59686","2:13012:59687","2:13013:59689","2:13014:59688","2:13015:59690"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22961:14185":{"id":"2:22961:14185","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:22962:58795","2:22963:58796","2:22964:58797"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22954:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3347:3507":{"id":"2:3347:3507","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3349:880"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13393:56477":{"id":"2:13393:56477","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15856:1843","self::pattern":"2:12997:4517"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6086:61202":{"id":"5:6086:61202","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,60],"end":[250,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:42:1638","glob":false}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,23],"end":[135,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:168:681","glob":false}},"1:6440:4081":{"id":"1:6440:4081","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6441:4407","1:6442:4408","1:6443:54096","1:6444:55024","1:6446:55028","1:6448:55025","1:6449:55026","1:6451:55027"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3281:2237":{"id":"2:3281:2237","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4989:4097":{"id":"1:4989:4097","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4990:2154","1:4991:54879"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13437:1928":{"id":"2:13437:1928","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:15856:1843","str::matches":"1:15862:1848","self::pattern":"2:12997:4517","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49524:4907","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10270:4584":{"id":"2:10270:4584","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10271:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13386:4546":{"id":"2:13386:4546","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15856:1843"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49296:4896","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10205:2299":{"id":"2:10205:2299","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10206:1509","2:10207:59881","2:10209:3826"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3343:3509":{"id":"2:3343:3509","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3345:1335"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,18],"end":[195,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:120:1684","glob":false}},"2:13027:4521":{"id":"2:13027:4521","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13360":{"id":"2:13360","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12457:1319","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13361:780","2:13362:54658","2:13363:60541","2:13364:60542","2:13366:60543","2:13369:58685","2:13370:60544","2:13371:293","2:13372:56443","2:13373:56439","2:13375:56440","2:13377:56441","2:13379:56442","2:13381:4173","2:13382:60545","2:13383:56461","2:13384:56462","2:13385:4931","2:13386:4546","2:13387:2308","2:13388:30218","2:13389:30208","2:13390:2262","2:13391:60546","2:13392:30203","2:13393:56477","2:13396:56478","2:13399:56479","2:13402:3030","2:13406:5926","2:13410:2271","2:13413:30075","2:13416:56471","2:13419:60547","2:13422:60548","2:13425:56473","2:13428:56475","2:13431:60549","2:13434:60550","2:13437:1928","2:13440:60551","2:13443:60552","2:13446:60553","2:13449:60554","2:13451:60555","2:13453:60556","2:13455:60557","2:13456:60558","2:13457:60559","2:13460:60560","2:13463:12703","2:13466:56480","2:13469:60561","2:13472:60562","2:13475:60563","2:13478:4785","2:13480:5087","2:13481:53938","2:13482:53939","2:13483:53940","2:13484:60564","2:13486:4150","2:13487:60565"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13361:780":{"id":"2:13361:780","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15856:1843"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13382:60545":{"id":"2:13382:60545","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3548:3522","str::slice_unchecked":"1:15862:1848","`str`":"1:15862:1848"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13390:2262":{"id":"2:13390:2262","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49574:2287","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3967:68":{"id":"2:3967:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3968:1408"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:5730:4122":{"id":"1:5730:4122","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5731:54053","1:5732:54126","1:5733:54127"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3483:2238":{"id":"2:3483:2238","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3484:567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3339:3505":{"id":"2:3339:3505","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3341:255"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6790:4079":{"id":"1:6790:4079","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6791:54431","1:6792:58719"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,42],"end":[110,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:5869:1629","glob":false}},"2:3377:3512":{"id":"2:3377:3512","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3379:171","2:3380:345"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6101:53936":{"id":"5:6101:53936","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15862:1848"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"25:17:1631":{"id":"25:17:1631","crate_id":25,"name":"Sink","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:19:127","25:20:14424","25:21:52517","25:22:52518","25:23:52519"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13402:3030":{"id":"2:13402:3030","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"self::pattern":"2:12997:4517","prim@char":"1:15856:1843","`None`":"2:47356:166"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3742:3530":{"id":"2:3742:3530","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13453:60556":{"id":"2:13453:60556","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[242,44],"end":[242,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:991:1624","glob":false}},"1:6462:4118":{"id":"1:6462:4118","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6463:54238","1:6464:38210","1:6465:54239","1:6466:54240","1:6467:54241","1:6468:54242"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5792:4128":{"id":"1:5792:4128","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5793:54317"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5832:2047":{"id":"5:5832:2047","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5834:171","5:5835:1646"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8330:4719":{"id":"2:8330:4719","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8332:3043"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10264:4581":{"id":"2:10264:4581","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10265:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[129,0],"end":[129,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:10275:1645","glob":false}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,0],"end":[126,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1644","glob":false}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,31],"end":[108,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:96:1626","glob":false}},"24:15:2978":{"id":"24:15:2978","crate_id":24,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:16:63374","24:17:4266"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8843:2732":{"id":"2:8843:2732","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2928:167":{"id":"2:2928:167","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2929:404","2:2930:2190","2:2931:3034","2:2932:58311"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2897:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:5869:1629":{"id":"21:5869:1629","crate_id":21,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:5870:2207","21:5872:2660","21:5875:2208","21:5878:281","21:5881:2663","21:5884:2664","21:5886:2665","21:5888:2572","21:5889:3190","21:5890:3027","21:5893:3195","21:5896:3196","21:5899:3199","21:5903:3021","21:5905:3194","21:5906:3191","21:5909:3192","21:5913:2356","21:5914:3026","21:5918:3193","21:5919:3197","21:5920:3198","21:5921:3201","21:5922:3200"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryStream","id":"20:127:1627","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6862:4083":{"id":"1:6862:4083","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6863:58375"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2862:104":{"id":"2:2862:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:397","2:2864:399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13372:56443":{"id":"2:13372:56443","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15873:1857"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4704:2295":{"id":"1:4704:2295","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4705:2270","1:4706:38064","1:4707:58235","1:4708:3992"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:47:1637":{"id":"29:47:1637","crate_id":29,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:48:53648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5656:4114":{"id":"1:5656:4114","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5657:5898","1:5658:58685"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3388:3515":{"id":"2:3388:3515","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3390:171","2:3391:1215"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9222:2607":{"id":"2:9222:2607","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2897:124":{"id":"2:2897:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,28],"end":[236,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:168:681","glob":false}},"1:6688:4125":{"id":"1:6688:4125","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6689:54353","1:6690:54354","1:6691:54355","1:6692:54356","1:6693:54357","1:6694:54358","1:6695:54359","1:6696:54360","1:6697:54361","1:6698:54362","1:6699:54363","1:6700:54364","1:6701:54365","1:6702:54366","1:6703:54367","1:6704:54368","1:6705:54369"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,59],"end":[131,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:10273:1649","glob":false}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1651","glob":false}},"2:3153:216":{"id":"2:3153:216","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3155:127","2:3156:1394"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[150,0],"end":[150,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:8121:1654","glob":false}},"2:4750:4480":{"id":"2:4750:4480","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4751:2729","2:4752:3054","2:4753:3013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13375:56440":{"id":"2:13375:56440","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13392:30203":{"id":"2:13392:30203","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49612:4912","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,23],"end":[131,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:10272:1646","glob":false}},"2:3355:3508":{"id":"2:3355:3508","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3357:1090"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,42],"end":[105,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:991:1624","glob":false}},"2:13384:56462":{"id":"2:13384:56462","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15862:1848"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3707:3527":{"id":"2:3707:3527","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3709:55744"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8376:2240":{"id":"2:8376:2240","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8378:37650","2:8380:6131","2:8381:58669"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13022:4520":{"id":"2:13022:4520","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13024:54891","2:13025:59431","2:13026:59432"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13016:4519","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,44],"end":[131,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:10274:1648","glob":false}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,21],"end":[119,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1635","glob":false}},"2:3489:131":{"id":"2:3489:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3491:366"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3492:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13416:56471":{"id":"2:13416:56471","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"prim@char":"1:15856:1843","`DoubleEndedIterator`":"2:8411:120","self::pattern":"2:12997:4517","str::split":"1:15862:1848"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49338:4871","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:991:1624":{"id":"21:991:1624","crate_id":21,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:992:2659","21:994:2660","21:997:2661","21:1001:2208","21:1004:2207","21:1006:2662","21:1008:281","21:1011:2663","21:1014:2664","21:1016:2665","21:1018:2356","21:1019:2666","21:1020:2667","21:1022:754","21:1023:2668"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"20:44:1621","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13370:60544":{"id":"2:13370:60544","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"21:9629:1640":{"id":"21:9629:1640","crate_id":21,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9630:2257","21:9632:2263","21:9634:2264","21:9636:2265","21:9638:2267","21:9640:2268","21:9642:2271","21:9643:2272"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"29:39:1636","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13469:60561":{"id":"2:13469:60561","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:12997:4517","prim@char":"1:15856:1843"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8565:157":{"id":"2:8565:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8566:2729","2:8567:909","2:8568:3012","2:8571:3013","2:8572:484","2:8574:3014","2:8577:3015","2:8578:3016","2:8579:3017","2:8580:2257","2:8582:2503","2:8584:3018","2:8585:3019","2:8587:828","2:8590:2496","2:8597:2482","2:8599:2483","2:8602:2481","2:8603:2504","2:8604:2493","2:8606:2494","2:8608:3020","2:8611:1287","2:8612:2272","2:8613:2492","2:8617:2490","2:8620:2488","2:8621:2498","2:8622:2508","2:8624:2499","2:8625:2245","2:8627:3021","2:8630:3022","2:8632:3023","2:8642:3024","2:8657:3025","2:8659:3026","2:8663:3027","2:8672:2487","2:8675:3028","2:8677:3029","2:8680:265","2:8687:283","2:8694:3030","2:8701:3031","2:8710:3032","2:8720:1001","2:8727:3033","2:8734:2190","2:8735:3034","2:8736:3035","2:8748:3036","2:8755:3037","2:8767:3038","2:8774:3039","2:8775:2485","2:8780:3040","2:8783:3041","2:8786:2486","2:8787:3042","2:8789:3043","2:8791:404","2:8794:3044","2:8797:984","2:8800:3045","2:8803:593","2:8806:3046","2:8809:894","2:8811:813","2:8813:779","2:8815:701","2:8817:684","2:8819:3047","2:8820:3048","2:8828:3049"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3149:217":{"id":"2:3149:217","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3151:127","2:3152:1395"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3526:2766":{"id":"2:3526:2766","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:226","2:3529:196","2:3530:59513"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,31],"end":[103,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:13710:138","glob":false}},"1:4711:2915":{"id":"1:4711:2915","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4712:2260","1:4713:53606","1:4714:58552","1:4716:2269","1:4717:2266","1:4719:2271","1:4720:2262"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4629:2288","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10255:109":{"id":"2:10255:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10256:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3323:3500":{"id":"2:3323:3500","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3325:171","2:3326:547"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13363:60541":{"id":"2:13363:60541","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,8],"end":[256,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:9664:1639","glob":false}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,40],"end":[122,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:9629:1640","glob":false}},"21:9664:1639":{"id":"21:9664:1639","crate_id":21,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9665:2260","21:9666:3954","21:9667:2269","21:9669:2266","21:9671:2262"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"29:49:1635","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3140:74":{"id":"2:3140:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3142:59777"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"5:5828:2104":{"id":"5:5828:2104","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5830:171","5:5831:421"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13422:60548":{"id":"2:13422:60548","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12997:4517","prim@char":"1:15856:1843","str::split":"1:15862:1848","str::split_terminator":"1:15862:1848"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49388:4901","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3492:132":{"id":"2:3492:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3494:171","2:3495:367"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,34],"end":[236,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:13710:138","glob":false}},"21:4450:1628":{"id":"21:4450:1628","crate_id":21,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:4451:909","21:4452:754","21:4453:828","21:4456:2481","21:4457:2482","21:4460:2483","21:4464:2484","21:4467:2245","21:4469:2485","21:4474:421","21:4475:484","21:4476:2486","21:4477:2487","21:4481:283","21:4484:265","21:4487:2488","21:4488:2489","21:4490:2490","21:4493:2491","21:4497:2492","21:4502:2493","21:4505:2494","21:4508:2495","21:4510:2496","21:4513:2497","21:4517:2272","21:4518:1287","21:4519:2498","21:4520:2499","21:4521:2500","21:4522:1914","21:4524:2501","21:4526:2228","21:4527:2502","21:4528:2503","21:4530:2257","21:4532:2504","21:4533:2505","21:4534:2506","21:4535:2507","21:4537:2271","21:4539:2508","21:4541:2509","21:4543:2510","21:4545:2511","21:4546:2512"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13463:12703":{"id":"2:13463:12703","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:12997:4517","prim@char":"1:15856:1843"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3329:3503":{"id":"2:3329:3503","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3331:171","2:3332:1089"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13385:4931":{"id":"2:13385:4931","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15856:1843"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49290:4895","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,57],"end":[119,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:42:1638","glob":false}},"1:1079:4148":{"id":"1:1079:4148","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:5098","1:1081:5087","1:1082:53936","1:1083:53937","1:1084:53938","1:1085:53939","1:1086:53940"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[125,0],"end":[125,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:169:1643","glob":false}},"2:14183:4227":{"id":"2:14183:4227","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14184:56347","2:14185:56348","2:14186:56349","2:14187:56350","2:14188:56351","2:14189:56352","2:14190:2499"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:27:1952":{"id":"20:27:1952","crate_id":20,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:28:2201"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13710:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10897:203":{"id":"2:10897:203","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10899:171","2:10900:56439","2:10901:56440","2:10902:56441","2:10903:56442","2:10904:740","2:10905:741"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10888:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10538:4189":{"id":"2:10538:4189","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10539:146","2:10540:31490","2:10541:53849"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3394:3516":{"id":"2:3394:3516","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3396:341"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13460:60560":{"id":"2:13460:60560","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15856:1843","self::pattern":"2:12997:4517"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3335:3502":{"id":"2:3335:3502","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3336:171","2:3337:900"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3459:116":{"id":"2:3459:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:210","2:3461:532"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3684:3525":{"id":"2:3684:3525","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3615:3524","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:4018:4158":{"id":"2:4018:4158","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4019:56281"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6102:53937":{"id":"5:6102:53937","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15862:1848"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3696:213":{"id":"2:3696:213","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3697:171","2:3698:3527","2:3699:674","2:3700:358"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3701:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13710:138":{"id":"2:13710:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13711:171","2:13712:1000"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5650:4116":{"id":"1:5650:4116","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5651:58707","1:5652:5175"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13466:56480":{"id":"2:13466:56480","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15856:1843","self::pattern":"2:12997:4517"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:96:1626":{"id":"20:96:1626","crate_id":20,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:97:2729","20:98:3054","20:99:3013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13487:60565":{"id":"2:13487:60565","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15856:1843"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49637:4914","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13451:60555":{"id":"2:13451:60555","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8850:4622":{"id":"2:8850:4622","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7891:4623","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13483:53940":{"id":"2:13483:53940","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13431:60549":{"id":"2:13431:60549","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,32],"end":[237,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:17:1631","glob":false}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,28],"end":[247,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:4450:1628","glob":false}},"2:22812:4140":{"id":"2:22812:4140","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22802:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:7798:4260":{"id":"1:7798:4260","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7799:54481"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6080:2919":{"id":"5:6080:2919","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14109:141":{"id":"2:14109:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14110:266","2:14111:507","2:14112:269","2:14113:1066"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9340:4137":{"id":"1:9340:4137","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9341:54457","1:9342:54458","1:9343:54459","1:9344:54460","1:9345:4935","1:9346:37652","1:9347:54456"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10562:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3245:2236":{"id":"2:3245:2236","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13449:60554":{"id":"2:13449:60554","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13725:150":{"id":"2:13725:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13726:171","2:13727:150","2:13728:754"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3351:3506":{"id":"2:3351:3506","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:548"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10276:4586":{"id":"2:10276:4586","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10277:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,29],"end":[131,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:67:1647","glob":false}},"20:127:1627":{"id":"20:127:1627","crate_id":20,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:128:165","20:129:127","20:130:52597"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:122:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5778:4126":{"id":"1:5778:4126","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5779:58689","1:5780:58690","1:5781:58691","1:5782:58692"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13388:30218":{"id":"2:13388:30218","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15862:1848"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49594:4910","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6079:61200":{"id":"5:6079:61200","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2241","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:5103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2241","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8092:5103","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,46],"end":[119,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:47:1637","glob":false}},"2:3137:75":{"id":"2:3137:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3139:294"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13406:5926":{"id":"2:13406:5926","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:12997:4517","prim@char":"1:15856:1843","`None`":"2:47356:166"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13379:56442":{"id":"2:13379:56442","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,58],"end":[195,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:166:1687","glob":false}},"2:13389:30208":{"id":"2:13389:30208","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15862:1848"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49603:4911","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,54],"end":[122,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:9659:1641","glob":false}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:9703:1653","glob":false}},"1:5788:4127":{"id":"1:5788:4127","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5789:54607"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13396:56478":{"id":"2:13396:56478","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:12997:4517","prim@char":"1:15856:1843"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2840:4705":{"id":"2:2840:4705","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2842:60112"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2837:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13478:4785":{"id":"2:13478:4785","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12936:4268","`FromStr`":"2:12936:4268"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47483:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:4268","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12936:4268","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13410:2271":{"id":"2:13410:2271","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15862:1848","str::rsplit":"1:15862:1848","prim@char":"1:15856:1843","self::pattern":"2:12997:4517","`DoubleEndedIterator`":"2:8411:120"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49320:2918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8367:151":{"id":"2:8367:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:2729","2:8369:2731","2:8370:755"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13391:60546":{"id":"2:13391:60546","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49584:4909","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:783:211":{"id":"5:783:211","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:5098","5:785:54217","5:786:54218"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,8],"end":[195,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:117:1683","glob":false}},"0:142:1017":{"id":"0:142:1017","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[222,0],"end":[222,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144","0:147","0:150","0:154","0:157","0:161","0:164","0:167","0:171","0:174","0:177","0:181","0:184","0:188","0:191","0:194","0:197","0:201","0:204","0:207","0:210"],"is_stripped":false}},"1:6962:4082":{"id":"1:6962:4082","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6963:54303"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8363:136":{"id":"2:8363:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8365:672"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13455:60557":{"id":"2:13455:60557","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13016:4519":{"id":"2:13016:4519","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13018:4539","2:13019:909","2:13020:59940","2:13021:59941"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13364:60542":{"id":"2:13364:60542","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3544:3521":{"id":"2:3544:3521","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3546:171","2:3547:740"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"24:258:2007":{"id":"24:258:2007","crate_id":24,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["24:261:54242","24:262:567"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"29:49:1635":{"id":"29:49:1635","crate_id":29,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:50:53605","29:51:53606"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"29:39:1636","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10503:146":{"id":"2:10503:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10504:640","2:10505:1931","2:10506:54485","2:10507:54486","2:10508:54487","2:10509:54488","2:10510:54489","2:10511:54490","2:10512:54491","2:10513:54492","2:10514:54493","2:10515:54494","2:10516:54495","2:10517:54496","2:10518:54497","2:10519:1509"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,38],"end":[250,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:39:1636","glob":false}},"2:9223:4224":{"id":"2:9223:4224","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6098:61203":{"id":"5:6098:61203","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:2138:1625","glob":false}},"2:13383:56461":{"id":"2:13383:56461","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15862:1848"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3372:3511":{"id":"2:3372:3511","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3374:171","2:3375:342"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13419:60547":{"id":"2:13419:60547","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"prim@char":"1:15856:1843","str::split":"1:15862:1848","`DoubleEndedIterator`":"2:8411:120","str::rsplit_terminator":"1:15862:1848","self::pattern":"2:12997:4517"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49370:4900","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3308:3499":{"id":"2:3308:3499","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3310:171","2:3311:254"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13381:4173":{"id":"2:13381:4173","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:15862:1848","crate::ops::Index":"2:3544:3521","str::slice_mut_unchecked":"1:15862:1848"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:5722:4123":{"id":"1:5722:4123","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5723:58330","1:5724:58332","1:5725:58331","1:5726:58333"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:116:1529":{"id":"0:116:1529","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[154,0],"end":[154,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`LocalPool`":"31:192:1689","`block_on`":"31:117:1683"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:118","0:121","0:124","0:127","0:130","0:133","0:136","0:139"],"is_stripped":false}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,35],"end":[119,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:39:1636","glob":false}},"2:13377:56441":{"id":"2:13377:56441","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3406:3519":{"id":"2:3406:3519","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3408:1213"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13480:5087":{"id":"2:13480:5087","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5744:4125":{"id":"1:5744:4125","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5745:54606","1:5746:54607","1:5747:54053","1:5748:54608","1:5749:4407","1:5750:4408","1:5751:54609","1:5752:1283","1:5753:54610","1:5754:54611","1:5755:54612","1:5756:54613","1:5757:54614","1:5758:54615","1:5759:54616","1:5760:54617"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8436:2239":{"id":"2:8436:2239","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8437:780","2:8438:54658"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3250:106":{"id":"2:3250:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:9646:1642":{"id":"21:9646:1642","crate_id":21,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9647:2206","21:9648:2202","21:9649:1931","21:9651:2274","21:9653:2275","21:9655:2261"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"29:42:1638","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:96:1626","glob":false}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,49],"end":[256,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:9659:1641","glob":false}},"5:6100:2093":{"id":"5:6100:2093","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"29:39:1636":{"id":"29:39:1636","crate_id":29,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:40:53637","29:41:53638"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,39],"end":[108,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:127:1627","glob":false}},"2:3248:207":{"id":"2:3248:207","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:17:1631","glob":false}},"29:42:1638":{"id":"29:42:1638","crate_id":29,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:43:53656","29:44:53657","29:45:52518","29:46:52519"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3411:3520":{"id":"2:3411:3520","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3413:1216"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8326:4720":{"id":"2:8326:4720","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8328:3042"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13486:4150":{"id":"2:13486:4150","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15856:1843"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49628:4151","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:127:1627","glob":false}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[242,28],"end":[242,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:690:1623","glob":false}},"2:10262:119":{"id":"2:10262:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10263:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3218:115":{"id":"2:3218:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3219:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3360:3513":{"id":"2:3360:3513","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3361:171","2:3362:939"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083:61201":{"id":"5:6083:61201","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8354:205"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8354:205","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13428:56475":{"id":"2:13428:56475","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:15856:1843","str::splitn":"1:15862:1848","self::pattern":"2:12997:4517"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49442:4875","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4686:2299":{"id":"1:4686:2299","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4687:1931","1:4688:2274","1:4690:3824","1:4691:2206","1:4692:2275","1:4693:3825","1:4694:3826","1:4703:2499"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:7964:1633","glob":false}},"2:2837:97":{"id":"2:2837:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2839:1913"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10272:179":{"id":"2:10272:179","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10273:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,30],"end":[256,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:9629:1640","glob":false}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,38],"end":[131,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:43:1000","glob":false}},"2:10266:4582":{"id":"2:10266:4582","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10267:648"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3701:137":{"id":"2:3701:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3703:675"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3696:213","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13472:60562":{"id":"2:13472:60562","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:12997:4517","prim@char":"1:15856:1843"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,52],"end":[135,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:8009:1357","glob":false}},"2:23006:4656":{"id":"2:23006:4656","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23655:4651","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22997:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,31],"end":[135,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:8119:904","glob":false}},"2:3402:3518":{"id":"2:3402:3518","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3404:346"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,23],"end":[122,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:9664:1639","glob":false}},"2:3249:206":{"id":"2:3249:206","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3252:209":{"id":"2:3252:209","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8411:120":{"id":"2:8411:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8412:54891","2:8413:54892","2:8414:54893","2:8415:54894","2:8419:54895","2:8422:5926"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8565:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3486:130":{"id":"2:3486:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3488:365"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3489:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,26],"end":[237,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:7249:1632","glob":false}},"1:6866:4086":{"id":"1:6866:4086","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6867:54848"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6406:212":{"id":"5:6406:212","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6407:1376"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13482:53939":{"id":"2:13482:53939","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:44:1621":{"id":"20:44:1621","crate_id":20,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:45:165","20:46:127","20:47:52510"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13710:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:39:4089","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:9659:1641":{"id":"21:9659:1641","crate_id":21,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9660:2270","21:9661:3992"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"29:47:1637","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3398:3517":{"id":"2:3398:3517","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3400:343"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:690:1623","glob":false}},"2:13434:60550":{"id":"2:13434:60550","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13022:4520","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:7891:4623":{"id":"2:7891:4623","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7892:60009","2:7893:60010","2:7894:2507","2:7895:60006","2:7896:60011","2:7897:60008","2:7898:60007"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2862:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2938:174","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4629:2288":{"id":"1:4629:2288","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4630:2263","1:4631:2264","1:4633:54695","1:4634:2267","1:4635:2268","1:4636:2265","1:4637:54088","1:4639:54696","1:4640:2499","1:4641:2308","1:4642:2257","1:4644:2272"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6864:4085":{"id":"1:6864:4085","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6865:54191"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:4450:1628","glob":false}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,44],"end":[135,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:2138:1625","glob":false}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,42],"end":[195,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:208:1686","glob":false}},"2:2938:174":{"id":"2:2938:174","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2940:984","2:2941:813","2:2942:779","2:2943:701","2:2944:684"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2892:173","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,39],"end":[103,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:44:1621","glob":false}},"2:3548:3522":{"id":"2:3548:3522","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3550:741"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3544:3521","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3143:149":{"id":"2:3143:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3145:58550"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13369:58685":{"id":"2:13369:58685","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12468:5043"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10493:142":{"id":"2:10493:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10494:703","2:10496:54328"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,68],"end":[256,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:9646:1642","glob":false}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,38],"end":[131,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:42:1000","glob":false}},"2:3615:3524":{"id":"2:3615:3524","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3617:58808","2:3618:58809","2:3619:56477"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3245:2236","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13371:293":{"id":"2:13371:293","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15862:1848","`u8`":"1:15873:1857"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3779:3531":{"id":"2:3779:3531","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13373:56439":{"id":"2:13373:56439","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47356:166"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47356:166","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10897:203","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13457:60559":{"id":"2:13457:60559","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15856:1843","self::pattern":"2:12997:4517"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13007:4516","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13027:4521","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3146:135":{"id":"2:3146:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3148:669"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13481:53938":{"id":"2:13481:53938","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6078":{"id":"5:6078","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5898:1319","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6079:61200","5:6080:2919","5:6083:61201","5:6086:61202","5:6098:61203","5:6099:61204","5:6100:2093","5:6101:53936","5:6102:53937"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,44],"end":[247,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:5869:1629","glob":false}},"2:13387:2308":{"id":"2:13387:2308","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49306:2916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,49],"end":[250,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:47:1637","glob":false}},"0:0:1718":{"id":"0:0:1718","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[258,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# if cfg!(miri) { return; } // https://github.com/rust-lang/miri/issues/1038\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::future":"21:168:681","crate::stream":"21:2138:1625","crate::sink":"21:7249:1632","crate::io":"21:8121:1654","crate::executor":"0:116:1529","crate::channel":"27:0:1651"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:116:1529","0:142:1017","0:4","0:7","0:11","0:14","0:18","0:21","0:25","0:28","0:31","0:34","0:38","0:41","0:44","0:47","0:51","0:54","0:57","0:60","0:63","0:66","0:69","0:73","0:76","0:79","0:80","0:82","0:85","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113"],"is_stripped":false}},"21:690:1623":{"id":"21:690:1623","crate_id":21,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:691:828","21:694:2569","21:696:2484","21:699:2570","21:701:2571","21:703:2572","21:704:2488","21:705:2573","21:706:2498","21:707:2508","21:709:2500","21:710:2574","21:711:2575","21:712:1914","21:714:2501","21:716:2576","21:717:2577","21:718:2578","21:719:2579"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13710:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:110:1953":{"id":"20:110:1953","crate_id":20,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:111:2201"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1626","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3472:1958":{"id":"2:3472:1958","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:534"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3459:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3240:200":{"id":"2:3240:200","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"2:49769:4529":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:1522:4204":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"9:776:5299":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:5068:4821":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"6:1690:39233":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:15871:1855":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"5:2195:60206":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"10:0:1816":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:52654:4703":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:12184:4301":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:5231:44420":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"6:1533:39218":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"21:15154:3060":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"21:12843:2062":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"17:8902:45182":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:51038:4700":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"30:1042:5934":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:7158:5632":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"21:11466:2031":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"9:603:43267":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:9631:53970":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"2:53257:19705":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"24:203:2006":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"18:849:5932":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:7289:54090":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10584:5894":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"16:4734:44173":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:49338:4871":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:2170:4182":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"5:3365:4183":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:8642:4411":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"6:3892:41317":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:2175:4183":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11341:4455":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:2251:4630":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:9600:63261":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"1:14897:4256":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:11049:2157":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:14022:2342":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:3372:3511":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"30:996:5930":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:4510:5191":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"2:49061:4873":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:4704:44168":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"9:234:5277":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"30:853:142":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:5975:5607":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"1:12059:2731":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"21:11044:2032":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:48377:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"4:0:1813":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:49149:4881":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:9886:45198":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"12:1688:5396":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"2:23820:4945":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10962:45474":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:4506:44095":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:9715:4379":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"6:519:38331":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"9:749:5254":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"27:502:3648":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"2:50297:4156":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:7798:4260":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:9814:3717":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"1:1511:4203":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:24717:4955":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"21:6891:2982":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"1:12130:3652":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"17:10950:45497":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:7680:4252":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"31:0:1682":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"2:56042:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:55977:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"31:117:1683":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"6:5386:41984":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:10458:45313":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:0:1821":{"crate_id":16,"path":["gimli"],"kind":"module"},"17:10656:45399":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4377:41366":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:15874:1858":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:10819:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:24513:4951":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:3699:2282":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:1045:4147":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"12:181:5390":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:2366:589":{"crate_id":1,"path":["std","env"],"kind":"module"},"6:3972:41170":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"21:16802:2155":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"2:3335:3502":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:22961:14185":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:11287:4387":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"12:2323:62390":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:17179:2053":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"2:49752:4528":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"6:5978:42385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:3743:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:67:1647":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"2:47913:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:10543:4478":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"30:137:51689":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:50044:4927":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:4425:41372":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:13733:51247":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"2:14012:1959":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:51453:4681":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:3323:3500":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:8030:4333":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"2:10274:4585":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:50032:4922":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:4417:44081":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:14929:54174":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"21:0:1622":{"crate_id":21,"path":["futures_util"],"kind":"module"},"17:10353:5876":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:3483:2238":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:10611:45416":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8477:192":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"2:11169:4868":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6269:5616":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7571:5562":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:6051:39156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"17:10558:45413":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:8146:2731":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"6:5400:41985":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"16:7236:5639":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"30:958:2130":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:12507:2052":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"6:4431:41373":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"0:0:1718":{"crate_id":0,"path":["futures"],"kind":"module"},"21:15320:2018":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"31:208:1686":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:47787:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"14:194:43485":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:8693:4414":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"6:6923:42945":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:9264:43564":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:50060:4921":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:11337:5834":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"2:46850:32906":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"0:142:1017":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"6:5159:41967":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:13221:50739":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"16:6591:5624":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:11056:1631":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:22537:4556":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:38732:4485":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:11244:54052":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:6864:4085":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"21:13644:2130":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"17:12521:50087":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"17:9210:45189":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:11434:45608":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:13906:59917":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"20:194:2976":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"6:6155:42393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"17:13306:50849":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:10936:3747":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12262:50069":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:14441:4090":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:15881:1865":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:11195:4296":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"17:9943:63260":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:53391:19715":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"21:13767:2111":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"17:13547:51230":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:37488:168":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:1311:5915":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:14884:4255":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13465:51219":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"24:258:2007":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"2:3367:3510":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"2:47398:2154":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"16:7195:5635":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:48907:5084":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:1540:39219":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:4623:224":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:3406:3519":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:18626:2373":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"1:13480:9921":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"21:18474:2066":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"6:4511:41381":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:51864:4702":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"21:8119:904":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"6:4255:4405":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:11915:49882":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:3140:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:2892:173":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:4203:41348":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:24683:4954":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"18:694:5943":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:1744:39239":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:6152:5565":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:7226:5638":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"21:9629:1640":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"21:16793:2154":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"6:4023:41329":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:10041:45255":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5282:41977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:542:5499":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:47535:2730":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:14492:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"21:16127:2032":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"1:2460:6518":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4501:41380":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:50028:4919":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"17:10211:45267":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5130:41925":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:12189:4228":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:1463:4198":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"5:7628:5156":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:46412:10542":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:510:45179":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:8391:3657":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"1:14019:54003":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"1:10805:4136":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:6518:5621":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"7:38:43038":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:3522:43567":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:10448:5816":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:2945:5761":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"24:407:3412":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:50957:4687":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:10071:5914":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:7335:176":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:16868:2041":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"21:15085:3062":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"1:2181:4184":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:3313:3504":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:3331:4184":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"21:6984:2163":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"21:18279:2292":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"2:47955:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:13881:2010":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"1:10656:4191":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"21:12255:2047":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"6:1584:39224":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:24479:4336":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:11962:45421":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"21:17133:2980":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:3355:3508":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"12:2039:4185":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:49723:4522":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:2889:5756":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:17444:200":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"2:3339:3505":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:11147:45204":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:10264:4581":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"18:811:5929":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:5469:41991":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:537:38334":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:14771:2128":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"16:3195:5743":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"12:1100:4207":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"6:1658:39230":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:4304:44043":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:1570:2051":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"1:13334:4399":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"17:9528:2916":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:7250:5640":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:2166:2216":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"24:18:2977":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"17:14000:51370":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:3696:213":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:11993:49889":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13554:51231":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"21:1833:2061":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:46451:2102":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1617:39227":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:4494:41379":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"30:905:63281":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:49296:4896":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6682:5579":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:48711:58760":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:1623:4207":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:10529:45315":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"12:968:4205":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"31:192:1689":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"1:699:4309":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46281:5065":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"21:13872:2122":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"2:2176:33474":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:24751:4956":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:12795:50235":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:10149:45198":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"16:6691:5626":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:3402:3518":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"21:7021:54014":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"17:13780:51285":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:46632:4723":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:9066:4303":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"17:11159:45205":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:4397:2931":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:15272:4392":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"21:18268:2291":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"27:21:63384":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:46227:4914":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"21:9955:2134":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"2:3492:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:1194:8906":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:4637:2907":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"29:49:1635":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"2:7891:4623":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:15878:1862":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"16:5996:5608":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:3192:4345":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"6:4120:41341":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:3918:41319":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"22:0:1962":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:22605:59771":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"14:250:43492":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"21:602:2022":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"1:12065:3651":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:3248:207":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"12:2005:2154":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:8116:2216":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:6870:41508":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"21:14394:2121":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"15:248:5404":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:5580:5465":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:5792:4128":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"16:7884:5573":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"30:1033:5933":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46442:4713":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:10623:45417":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6768:5777":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"5:6252:5155":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:5269:41975":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:1236:45270":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:14109:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"5:4638:60193":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:17152:2981":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"1:1153:8902":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:8565:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"21:9758:162":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"16:7928:4626":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"30:836:5941":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"18:704:2130":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"5:0:266":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:3143:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:7510:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:49388:4901":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"21:10525:2012":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"1:15827:8907":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:52797:4671":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"5:1658:4200":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"21:14588:2124":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"2:3472:1958":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:3195:2263":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"6:5210:41972":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:46214:5069":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:9177:54065":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"21:18326:2297":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"21:13268:2108":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"2:47829:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:11380:4080":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:17920:2102":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"2:23749:4943":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11358:5833":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"13:232:62402":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"12:463:62397":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:13598:51236":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:51404:4696":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:1441:4207":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13772:51284":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:8249:4214":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"16:6731:5774":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"30:1013:4519":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:10215:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"21:15364:2023":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"17:12182:50063":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:6424:5619":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:15873:1857":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"30:812:2130":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"30:170:51691":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"16:6554:5622":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:13698:4263":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:9768:54011":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"5:5783:60171":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"12:1118:4208":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:17385:2221":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"17:12073:49994":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:9849:63270":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:12771:45209":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4517:41382":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:5971:4456":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"6:4478:41378":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:11122:2918":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:22997:4089":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:4145:41344":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"21:13709:2130":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"2:53453:19717":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:4395:2930":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:10543:45412":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:6626:2162":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"16:6219:5614":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:49442:4875":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"12:160:5386":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13296:50787":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"30:0:1823":{"crate_id":30,"path":["memchr"],"kind":"module"},"2:49881:4532":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"18:739:63296":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"17:13163:50692":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10571:45414":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"31:88:4034":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"16:6999:5629":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"5:8299:4981":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:525:38332":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:4695:54890":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:4686:2299":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"1:4629:2288":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"12:2018:4182":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"21:12037:2036":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"28:55:2216":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"17:13810:51288":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:48703:58761":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"18:857:5933":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"17:13240:50741":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:51197:4672":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:3388:3515":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"6:6910:41513":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:12671:53995":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"1:5730:4122":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:53323:19711":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:161:38025":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:9162:5864":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:6949:2470":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:13386:51184":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:4647:2234":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:9126:2907":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"18:820:5930":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5359:41981":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"2:47527:2154":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:13574:51233":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:32177:3491":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:2169:567":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"5:8101:2731":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"21:991:1624":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:2598:54066":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"2:49895:4533":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"5:69:5150":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:12494:50085":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:2843:5736":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:15822:54289":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:12738:4903":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:3320:5800":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9034:45185":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:4046:41332":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:56003:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:1547:39220":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:5927:5482":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"6:3997:41326":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:1708:39235":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"6:4331:41360":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:7935:54443":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"16:3714:43578":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:10435:45312":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:9659:63273":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"16:7119:5496":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:3258:2895":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"21:17040:2161":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"1:11502:3657":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"3:0:419":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"12:2303:62394":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"1:6862:4083":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:15866:1850":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"12:747:2154":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:1505:4202":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"21:18659:2960":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"2:24649:4261":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:10793:4344":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:299:63269":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:49637:4914":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:45913:4626":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:8132:60224":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:5832:2047":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11572:45894":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"21:18614:2367":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"6:3990:41325":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"15:269:5408":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:12010:54177":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"16:2912:5738":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"20:127:1627":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:3459:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7360:184":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"5:1592:2154":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:4570:2155":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12373:50077":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"30:870:5943":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"6:5945:38253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3411:3520":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:1689:5209":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:49139:4880":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:13348:50853":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:11451:4270":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"2:7633:2503":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:15350:5412":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:13222:37612":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"2:10276:4586":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:47997:4991":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"21:12851:2063":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"30:843:5942":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"21:10467:2017":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"21:12972:2126":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"18:636:2130":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:4:966":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:52230:4674":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"5:8432:4182":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:7856:5645":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"30:820:5940":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:1156:8904":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:16536:2146":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"17:10468:5843":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"21:14714:2127":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"2:4707:4707":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:15859:1845":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:1639:4198":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:51216:59478":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"6:4459:41376":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:49906:4534":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:13627:51244":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:4262:41352":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:3522:2279":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13884:51301":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"6:616:38343":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"16:5753:5475":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"21:10924:2018":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"1:1136:4160":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"16:3365:5487":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"15:230:5403":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:5420:41988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"29:39:1636":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:11281:4871":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"12:2315:62393":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"21:9659:1641":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"2:3382:3514":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"16:3392:5753":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12287:50071":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:10061:45272":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:23913:4792":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:9726:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:5255:41954":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:13956:2012":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"5:6406:212":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"31:166:1687":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"18:660:5941":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"20:44:1621":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:45673:2767":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"16:4535:44099":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:11458:45609":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"21:18376:2298":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:17977:106":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"21:11979:2034":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"17:9719:45195":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"21:17237:2215":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"6:5185:41969":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:12467:50083":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"1:3995:3749":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:7978:3666":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"21:17835:2281":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:8367:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"27:595:3662":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"6:4005:41327":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"16:3939:43728":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"21:9421:2134":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"16:3172:5742":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:11101:2730":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:6322:4404":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:3800:43614":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:10562:4089":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"14:11:43484":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:50888:59459":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:5001:4815":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:49542:4908":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:11722:2025":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"13:120:43439":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:12591:2057":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"1:10798:4135":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"21:18416:2634":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"17:13540:51229":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:11192:4107":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:10258:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"2:32378:59875":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"12:784:4200":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"12:1253:4210":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"9:469:43163":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:46834:32904":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:49263:4992":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:14461:56411":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"30:1072:5936":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"25:17:1631":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"2:53414:19716":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:15876:1860":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"21:12762:2060":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"16:4823:44187":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:15058:4168":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:1195:60395":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:3877:2284":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:15869:1853":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"1:3315:4348":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:10650:8903":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:12507:50086":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:1676:39232":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"12:2025:4183":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:12179:4300":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:46329:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:50052:4926":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"6:4306:41357":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:8491:4242":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:15854:1841":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"5:3043:60358":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"21:17884:2282":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"16:3549:43568":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:18410:3719":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"1:9730:4380":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4101:41339":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:7870:5572":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"21:15663:2011":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"25:0:1630":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"16:6391:5618":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"21:45:1981":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"17:2543:5841":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:24615:4953":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"5:5870:60207":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"18:677:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"12:949:4204":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:11100:5867":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"21:17299:2218":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"1:9142:4299":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:56016:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:14152:2930":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:15862:1848":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:2381:2768":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"5:7252:60171":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:10374:54102":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:48664:59974":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:51783:59475":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5274:41976":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"5:1486:4210":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12671:50158":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:10317:5830":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"12:1144:4209":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13098:50686":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:13532:51228":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"5:7766:223":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"20:96:1626":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"16:7333:5585":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:8850:4622":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"16:5522:5462":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:25121:4761":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:11950:4255":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:46653:2125":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"21:16661:2150":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"1:14466:4135":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"17:12756:50169":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:5191:41970":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:599:38340":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:32278:59876":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"21:10770:2010":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"1:7666:4251":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:10248:2369":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"1:11992:54266":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:2462:9928":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"16:6032:5495":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"21:8769:2157":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"22:7:1644":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"21:10364:2012":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"2:49700:4518":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6176:42394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"1:14158:2928":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:12678:4899":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"5:7106:60196":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"21:18031:2283":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"17:11653:45934":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:11077:2235":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:51602:4661":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:15073:4169":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:0:1310":{"crate_id":1,"path":["std"],"kind":"module"},"17:12442:50081":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:1534:4206":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"6:6893:41511":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"21:11906:2029":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"5:8348:60398":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:11980:4257":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:23651:4089":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"9:722:5253":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"18:866:5934":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:5672:5468":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"12:2032:4184":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"21:7964:1633":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"6:1602:39226":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:48359:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"5:6683:5127":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11378:5832":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"9:1020:5319":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:2437:9921":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:23891:37338":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"5:3391:4186":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"9:0:1815":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:49290:4895":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12040:49992":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:8070:2157":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:45783:188":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46422:10541":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:2773:5762":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"30:987:5929":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:7303:5641":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:8846:2733":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"24:15:2978":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"31:197:1690":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:12049:2037":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"21:16774:2148":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"2:48126:4581":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"20:169:1643":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"12:1180:5383":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:12685:50159":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"30:896:59975":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:14183:4227":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:5955:4453":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:5175:4597":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:51579:4658":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"18:754:63290":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:10224:45273":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:10788:4142":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:46663:2127":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"12:377:5389":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:3064:5798":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:49584:4909":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:10635:2013":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"16:5456:5456":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:10788:45386":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"1:10635:8900":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:13933:51327":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:13022:4520":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:14248:2113":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"27:481:3646":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:53238:4663":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:52183:4670":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:12332:6518":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"12:112:62401":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:7258:54090":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9551:5862":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"6:1665:39231":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:47745:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:6068:39159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:11871:4889":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:2274:4634":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"16:6176:5612":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:49916:4535":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:7467:5567":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:49738:4525":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:14817:54017":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13685:51246":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:8236:4178":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"18:744:63287":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:8928:4431":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"1:14673:4117":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"6:6100:42390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"17:11199:45207":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:9763:54013":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:4790:44179":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"6:4013:41328":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:11360:4874":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:15606:54022":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"21:14823:2129":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"19:0:981":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:1934:4182":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"9:1056:5312":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:49278:4742":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"17:11714:45993":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:10861:2284":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:15092:4176":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"12:429:5387":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:12946:50629":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"21:17230:2731":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"2:5547:8908":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:5528:41230":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:10205:2299":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:6887:41510":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"5:8365:5092":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"16:7146:5631":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:16609:2149":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"2:46622:2121":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:13609:51237":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"18:782:2130":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:3336:5105":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"5:1215:5211":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5414:41987":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:15928:2144":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"5:5310:190":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:1492:4199":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"6:88:37958":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"21:18137:3960":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"17:11696:45937":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:6702:54366":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"16:7185:5634":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"17:12028:49936":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:46581:2117":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:11189:4106":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"5:3295:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:3075:2878":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"21:17772:2279":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:2265:4633":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"6:5221:41973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:11277:45171":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"6:4127:41342":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"17:9332:5831":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:15588:2025":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"5:8162:5091":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:10275:1645":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"21:10419:2008":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"2:57291:59799":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:15335:56424":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:5459:41990":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:51303:4701":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"21:6760:63319":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"16:5790:5477":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:51759:59458":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:15877:1861":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:11678:45936":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"17:12327:50073":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:48656:4215":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"17:12610:50106":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:17512:2223":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"6:1630:39229":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:9063:4420":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:47356:166":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:994:5204":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"5:4594:60191":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:3743:5888":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:45972:4804":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:22812:4140":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7618:4248":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5522:42018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:3615:3524":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:12715:4902":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:12142:50060":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6166:5611":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:49628:4151":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:10673:9916":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:12043:177":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"6:6864:41507":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"16:7453:5566":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:23999:37344":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:53312:19710":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"12:469:62398":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:10926:45495":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"21:16463:2145":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"2:3779:3531":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:1630:4197":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:8741:4423":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:2753:568":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"18:650:5937":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:7719:4714":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:9858:8789":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"5:4694:60193":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:4719:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:1723:39237":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:837:4519":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:1648:4199":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"17:11328:45209":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:584:38338":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"6:3881:41316":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:11847:46132":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:46859:2155":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2840:4705":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:53338:19712":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"6:4227:41350":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"1:1637:4208":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:8413:5178":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"2:3343:3509":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"16:4230:43994":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:49121:2128":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:12247:50068":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:12229:4230":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:48444:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"9:27:5301":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:11988:56425":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"9:996:5318":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"30:920:63287":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:50256:2349":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:5969:38212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:7205:5636":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:12154:4419":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:4133:41343":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:4395:41368":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"1:5984:4457":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"1:6560:4144":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:9280:43563":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11555:45887":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:8849:5861":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:1457:4209":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"21:13034:2104":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:13760:2037":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:13942:51328":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:51005:4667":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"12:892:5374":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"16:7420:5587":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"31:175:1685":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"21:591:2021":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"1:1432:2730":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"21:18587:2370":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"17:9799:45197":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2163:2731":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:9245:5809":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8484:2615":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"1:14456:54432":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"6:6106:42391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"30:1005:5931":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:11336:4452":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:9703:1653":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:24377:4948":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:13041:50631":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:605:38341":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"5:3035:60354":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:11224:54288":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"21:5869:1629":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"1:11525:4280":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:2325:5213":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:45852:3523":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:51143:4680":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:16337:2142":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"21:14515:2125":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"17:12725:50167":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:32218:5004":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:49159:4882":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:15361:5412":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:49306:2916":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:11165:4105":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:3967:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:9933:45199":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"12:937:4203":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"17:8954:5838":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:10052:45256":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"12:2009:2731":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46258:5064":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:11281:4033":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"12:853:4198":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:14526:54326":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:13377:50867":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7073:5630":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:48410:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"21:18541:63306":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:18332:2123":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:4263:2934":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"16:7823:5577":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:10584:4318":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"21:16820:2157":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:11374:4875":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:11937:171":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:12444:5080":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:12515:2053":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"5:3483:4182":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:4018:4158":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"6:4164:41345":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"6:4293:41355":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:10888:4089":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:49594:4910":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:13172:50693":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:24025:37363":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:12051:4241":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:45920:4627":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"2:24445:4950":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"21:15052:63307":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"12:877:4182":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"2:10270:4584":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:22584:59776":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"5:7606:5155":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"6:5987:42386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"21:15046:63305":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"17:10001:45253":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"12:2045:4186":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13119:50687":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"21:661:53993":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:13725:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:3250:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"16:6620:5768":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:11208:4869":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:1161:8905":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4523:41383":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"21:11202:2359":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"21:13583:3061":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"2:52908:4691":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"12:1159:5382":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4215:41349":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"24:21:2979":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"1:14233:4041":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:48903:5085":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4066:41335":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:9464:58430":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"30:1061:5935":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:13429:51214":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:56055:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4419:41371":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:13946:4253":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:7264:5581":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:6238:5568":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"18:620:63282":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4364:41364":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"24:0:1717":{"crate_id":24,"path":["futures_task"],"kind":"module"},"27:552:3653":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"21:18129:2219":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"31:168:1688":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"1:10690:9923":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:2399:9909":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:14979:54099":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:46868:2156":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:17143:2730":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"14:56:45610":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:6028:39182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:10266:5808":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"21:12857:2064":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"26:49:52346":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"1:6962:4082":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:10493:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:6413:5400":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"21:14346:2120":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"21:18259:2290":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"16:4386:44075":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"27:608:3700":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"18:667:5942":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:51679:59477":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:48672:4479":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"17:10331:5845":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"21:17212:2154":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"16:5314:43564":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:49603:4911":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"21:18520:63304":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"2:51381:4693":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:11433:12304":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:897:4313":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"21:12636:2058":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"1:1021:4333":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:22802:4089":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:11329:4099":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:4436:2933":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:12003:54068":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"21:18557:2583":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"17:9971:63254":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11585:4282":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:11767:46112":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11118:45203":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:12174:4425":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"21:10585:2011":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"17:10179:45269":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"16:2794:5490":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"5:8266:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:3725:4487":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"27:0:1651":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"1:2793:4154":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"21:14297:2114":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:51531:4673":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:9404:45191":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"17:2484:45301":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:49229:4887":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:3347:3507":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"5:2257:5214":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:3957:41322":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:10599:45415":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12051:49993":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"16:4448:44087":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:6667:2646":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"12:556:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"30:977:5928":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:15867:1851":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"21:16713:2151":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"5:6759:2907":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"1:5722:4123":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:6185:42395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:5884:60208":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:3198:2268":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"21:11008:150":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"17:11406:45600":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:12645:50156":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:2159:2154":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13446:51215":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"18:610:5938":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11932:49883":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:5029:44243":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:11082:5837":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:9340:4137":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:12209:4229":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"16:5421:5454":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"14:0:1819":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"6:4470:41377":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"5:8354:205":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:13282:50785":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:11126:2918":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:47661:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"18:766:63275":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:511:38330":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:15086:4175":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"28:203:2644":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"21:16826:2158":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"6:6085:42388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"12:1667:5395":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"21:13151:2106":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"1:5788:4127":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:24047:37354":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:4200:63314":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"12:812:4201":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:6221:42398":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:48480:4580":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"21:17454:2161":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"17:12456:50082":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"9:809:3657":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:53297:19709":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"21:12114:2041":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"17:13637:51245":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"2:51350:4689":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:670:38374":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:11109:2123":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"17:10200:45268":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:10328:2009":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:46552:4717":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"3:300:195":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:13258:50782":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"6:591:38339":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:11355:4033":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:22954:4089":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:4272:41353":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"12:1651:5394":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:11588:45895":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"1:12114:4244":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"6:6899:41512":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"18:790:5927":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"27:509:192":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:3149:217":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:3754:2154":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"6:1908:39375":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"6:6239:42399":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11965:4256":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:22865:4655":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"5:1669:4201":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:2928:167":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"27:534:3652":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"1:2192:4186":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:14479:54054":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"1:9591:53991":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"1:15880:1864":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:11129:2287":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"20:122:4089":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"1:5800:4130":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11159:4100":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"1:11601:4284":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:7930:2634":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"21:16264:2152":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"9:692:5252":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:10268:4583":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"12:0:1818":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"21:4450:1628":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"27:460:3701":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"1:14910:4229":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"17:10420:5871":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"5:783:211":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"15:0:1820":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:11065:2233":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10160:45271":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:10538:4189":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"1:786:8789":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:3331:4353":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"23:0:1963":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"21:16224:2139":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"5:6470:2216":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"16:6780:5627":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:7632:4249":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:12783:50232":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:47543:2731":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"17:11519:45826":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"5:3034:60355":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"0:116:1529":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"17:4008:45388":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:11402:4877":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:1717:39236":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"14:231:5095":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:46173:4772":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"5:7810:60196":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:5374:4385":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:12408:50079":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"5:1011:2154":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:4357:4370":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"5:8154:184":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:5960:5484":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:12568:50090":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"2:23655:4651":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"16:4762:44176":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:10563:4310":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"18:712:4556":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"5:2772:5216":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:53376:19714":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"21:17825:2280":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"1:15868:1852":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:4210:2216":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"6:4325:41359":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:51236:4657":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:47466:37573":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:53361:19713":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"17:12343:50074":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:15510:2026":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"2:2897:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:46314:4776":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:607:45180":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:3951:41321":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"28:37:2731":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"16:2733:5489":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:46473:4716":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12741:50168":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5241:41953":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"16:7295:5583":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:169:51691":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:7795:4258":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"8:0:1814":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"6:5428:41989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:5330:43563":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:13746:51248":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:46643:2123":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:7378:5570":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"6:543:38335":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"26:0:1964":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"16:3604:43569":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:5594:766":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:11904:4890":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"30:966:5927":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:13227:37613":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"16:4922:44211":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"6:4183:41346":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"6:4341:41361":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:46160:4771":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:9664:1639":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"2:49470:4904":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"17:10117:5910":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:27932:4736":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"6:5228:41974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:4112:41340":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:49817:4530":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:7392:5571":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"5:923:2116":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:49370:4900":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"18:801:5928":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:3033:5098":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:46492:2106":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:13851:54438":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:5963:4454":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"16:7549:5574":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5407:5453":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:18121:2285":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"18:136:51689":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:12118:50001":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"17:9296:45172":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"21:595:2634":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"2:2837:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:823:8789":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"21:18320:2296":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"1:3317:4349":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:50064:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:5778:4126":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:10236:5814":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5273:5493":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"5:3039:60356":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"21:2138:1625":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"2:45927:4595":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"6:4401:41369":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:7477:5588":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:46482:2105":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:12004:59428":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"5:4438:2154":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"16:6718:5773":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:5941:179":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:1838:60171":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:22806:4138":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"5:8449:5151":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"21:9337:1631":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:13978:51334":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"1:15838:54263":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:46572:4721":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"12:1762:62395":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"21:16316:2153":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"6:4073:41336":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11947:49884":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:23006:4656":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"9:686:5250":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"6:6858:41506":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"21:9837:3716":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"6:6124:42392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:51990:4694":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"24:237:2005":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"16:5472:5459":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:12098:3654":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:10272:1646":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:12598:50092":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:15860:1846":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"16:6110:5604":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"21:14118:2117":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"1:7652:4250":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:13205:50738":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:3506:5748":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:49424:4874":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:46274:4913":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"21:11539:2024":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"1:8292:4333":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"16:5736:5472":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:50086:4232":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"17:11015:45498":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"1:10666:4211":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"21:10281:2008":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"27:397:2615":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"16:6807:5628":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"6:1572:39223":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"6:5407:41986":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"6:6636:42759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"16:6464:5578":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:24063:37365":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:51069:4688":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:10403:5844":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:2201:1037":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:5744:4125":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:53113:4660":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:0:477":{"crate_id":2,"path":["core"],"kind":"module"},"16:2968:5739":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10912:45486":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"27:600:3699":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"30:888:4556":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:49612:4912":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:12357:2049":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"1:903:4314":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"21:11600:2030":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"17:12632:50155":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"6:1729:4398":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"21:9261:2155":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"2:48133:4583":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"16:6644:5625":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"27:467:5178":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"1:12662:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"18:896:5936":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"5:4301:2730":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"1:1497:4200":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"21:16862:177":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:3684:3525":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:0:785":{"crate_id":6,"path":["libc"],"kind":"module"},"17:9809:63262":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:24115:4970":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:11231:5865":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"1:8383:4333":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:53050:4695":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9476:45193":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:3153:216":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:11135:4099":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"21:14649:2015":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:15191:4109":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9839:5845":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"2:56029:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2937:169":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"16:3145:5751":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:8649:4413":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:11361:4406":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:6856:4718":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:51943:4690":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:4932:4058":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"16:5632:5467":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4040:41331":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:9646:1642":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"2:14:1931":{"crate_id":2,"path":["core","write"],"kind":"macro"},"2:9223:4224":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:13497:51222":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:47577:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:46189:4774":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:3489:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"16:6569:5770":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:49524:4907":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"5:7368:2731":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"12:866:2216":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:24547:3152":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:3966:41323":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:53277:19707":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"6:563:38336":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:5568:4642":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:5650:4116":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5433:5455":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"1:4989:4097":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"6:1622:39228":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"16:2816:5755":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:8843:2732":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"16:5707:5469":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:49574:2287":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"1:6440:4081":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:15861:1847":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6357:5617":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"27:495:2615":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:3146:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:10266:4582":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:624:38344":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:13898:51319":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:23971:4787":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:23008:4655":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:11783:2028":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"2:9937:4854":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"21:11141:2032":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"17:12010:49892":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11931:4253":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"30:1025:5932":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5548:42019":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:5531:2646":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:9440:45192":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:4641:44155":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:2314:5875":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:5292:41978":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:6462:4118":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"5:3767:2730":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:11779:46113":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:15856:1843":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:7444:175":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:12195:50064":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"17:13799:51287":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"20:0:1620":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:47457:4987":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:4041:195":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"21:12923:2103":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"21:18241:2288":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"2:50212:2765":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:4043:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"16:4995:44234":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:1760:39240":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10814:5891":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:46334:4980":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"18:774:2130":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:10931:3746":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"30:153:51690":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:49198:4884":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"21:15710:2028":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"6:578:3843":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"21:15243:2133":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:4711:2915":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"2:32037:5014":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"21:13392:2008":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:5123:4822":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"21:11844:2027":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"1:8842:54065":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"17:13590:51235":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"1:11099:2102":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:3701:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:15855:1842":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"2:46563:2012":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"9:157:5269":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:50279:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:13520:51225":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"21:17969:2215":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:10273:1649":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"1:15857:1844":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"1:11406:4084":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"21:12153:191":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"17:13582:51234":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"21:1315:2040":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:12997:4517":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"17:13963:51329":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"21:14110:2119":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"6:5312:41979":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:9133:45188":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:48119:4582":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:4475:2929":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:23930:59991":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"21:12693:2059":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"5:5410:2907":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:6852:41505":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"27:576:3656":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"17:9769:63267":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"30:880:2130":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:16175:2138":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"1:4704:2295":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:47619:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:13760:51249":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"9:900:43191":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"5:3946:4182":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"2:48496:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:10844:5845":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:47871:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:2213:5108":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"21:17595:2224":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"5:1613:2731":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:13836:2040":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:8124:5206":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:46204:5068":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"5:3370:5106":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:24411:4949":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:13488:51221":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:13499:54439":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"27:515:3650":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"2:51174:4668":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:50099:5001":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"21:18401:2301":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"2:13007:4516":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:3486:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:1450:4197":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"2:48422:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:12169:3717":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:3351:3506":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7786:5576":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:3218:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:1527:39217":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:13801:177":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10887:45387":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:5295:43566":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:6491:5620":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:3357:4185":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:11304:45208":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:4449:41375":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"21:13453:2110":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"29:47:1637":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:53286:19708":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:8127:58955":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"21:15432:2024":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"2:48693:3657":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:7216:5637":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"21:8121:1654":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:8326:4720":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:47414:2731":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"28:41:2154":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"9:963:5317":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:48681:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"14:47:43484":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"21:12075:2039":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"17:11539:45886":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"16:5717:5471":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:6605:5580":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:18484:5955":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"6:6614:38289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:16971:2160":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"17:9689:63258":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:5501:4392":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:2934:170":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"11:54:5372":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:8363:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:10503:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:50220:180":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:6126:5610":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:4347:41362":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:3190:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"1:5377:4386":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6949:5781":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"18:720:59975":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:46502:2107":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:1528:4205":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"2:32226:59824":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:13710:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"12:761:2730":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:13620:51243":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:3333:4354":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:4997:4040":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:12699:50160":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:46591:4722":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:13865:51295":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"21:12874:2102":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:32212:4223":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:3018:5740":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:46347:4981":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"27:521:3651":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"16:4477:44091":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"21:18602:2368":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"1:11384:12300":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:24581:4952":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"16:6744:5775":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:4360:4371":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:50036:4924":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:14669:9923":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"20:27:1952":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"28:71:63386":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"12:354:62387":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:51554:4676":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:1442:2731":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:157:38024":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:6474:2008":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:3526:2766":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"2:49185:4883":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:10279:5824":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:8436:2239":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"21:13074:107":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"6:632:38345":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"20:39:4089":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"21:17739:2278":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"2:49239:4888":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:14013:2109":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"6:610:38342":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9731:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"17:11499:45825":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:4695:4706":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"24:380:63327":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"21:14467:2123":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"16:6014:5609":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:10407:5872":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:3772:43611":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:4614:44153":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:5006:4816":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10864:45389":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"21:16952:2159":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"2:12936:4268":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"16:6136:5605":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"30:698:5938":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:3074:4089":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:6964:4985":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:45892:4159":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:49320:2918":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:8330:5174":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"2:3394:3516":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:10941:2232":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:5855:5479":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:531:38333":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"6:1563:39222":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:9896:63266":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:4602:2907":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:2492:4481":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"17:13318:50851":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"21:18300:2294":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"5:8284:5172":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:1235:5212":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"6:4095:41338":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:45806:187":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:13924:51326":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:46543:2010":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:13272:50784":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:8135:4333":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:15042:4167":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:46145:4151":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:5436:62210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:1419:2154":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"30:950:2130":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"1:15213:4385":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11738:46103":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:46235:5063":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"2:4033:4157":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:1079:4148":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"6:1554:39221":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"12:774:2731":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:9942:4855":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"26:65:52348":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"19:117:63297":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"21:18489:2068":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"2:46879:32908":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:2991:5750":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:3318:3501":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"17:11186:45206":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"16:5815:5478":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:6790:4079":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:5375:5060":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:1680:184":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:11822:46118":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:53160:4678":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:15326:28293":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:15936:2143":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"17:0:1822":{"crate_id":17,"path":["object"],"kind":"module"},"5:8189:2731":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"6:5197:41971":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"28:211:4209":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"16:5561:5464":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"5:8316:5173":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:48140:4584":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6214:42397":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:13873:4254":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:24007:37362":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"21:18144:2286":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"1:11116:2916":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:15993:2140":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"1:11347:4397":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:1486:4182":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"6:6812:42919":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:50056:4920":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"20:110:1953":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:3137:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"1:15875:1859":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13819:51291":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:9368:45190":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:13062:50685":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:7761:5643":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:5738:4124":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:55897:4647":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:45885:3526":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:10477:5842":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:13912:51325":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:50048:4925":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"27:394:192":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"16:6577:5623":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:45645:2735":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:47475:178":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:3324:2154":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:5167:41968":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:6597:59921":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:12155:50061":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:10424:53998":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:2187:4185":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:52987:4675":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:10699:2102":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"5:1602:2730":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"28:220:4207":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:11319:4872":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:13027:4521":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:12468:5043":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:8911:2158":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"16:3241:5745":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:8107:5205":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"17:13402:51212":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:48383:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"17:9088:45187":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7843:5644":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:4888:4814":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:4193:41347":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:13054:50683":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"21:4371:2134":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"5:1472:4208":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"6:4410:41370":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"6:3905:41318":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:9636:58640":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"21:9795:3718":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"5:5828:2104":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:11026:45201":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:7120:12303":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:22582:59773":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:5595:5466":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"5:8377:5093":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"6:5347:41980":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"16:7738:5642":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"7:85:43045":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:15863:2031":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"1:7735:4254":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"21:17310:2219":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"17:13506:51223":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"17:9574:5839":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"21:690:1623":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"21:18193:2287":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"14:244:43486":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:3868:41315":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"21:10878:2016":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"18:829:5931":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:43:1000":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"1:1655:4210":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10095:5908":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:49619:4913":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:3707:3527":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:51092:4692":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:9065:45186":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:6962:2984":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"2:3252:209":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"30:826:5937":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:2866:5737":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"16:6208:5613":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"6:3978:41324":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:12043:2154":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:46252:4151":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:8196:3666":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:46841:2158":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:6940:4087":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:17682:2225":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"1:6202:4403":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"6:4300:41356":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"17:13477:51220":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:11835:46131":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"5:3834:60171":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:294:63255":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:2305:5231":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"2:51727:59479":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"21:7249:1632":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"18:729:63281":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:10830:2014":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"17:10502:45314":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:46612:2120":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"12:930:4202":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"17:13370:50855":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"21:16811:2156":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"2:4345:2731":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"27:587:3657":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"16:4350:44064":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"6:4033:41330":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:55990:225":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:5379:41983":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"11:46:62386":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"5:432:2241":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:10967:2019":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"2:47406:2730":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"21:17248:2216":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"2:8411:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:50265:2350":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"21:17254:2217":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"17:12168:50062":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:8976:4222":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"2:51255:59512":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10106:5909":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:18392:2300":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"17:11794:46116":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"13:0:1812":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:53199:4698":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2060:2907":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:12275:50070":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:12221:50066":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"16:6252:5615":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"17:10635:45384":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"21:10697:2015":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"2:7821:4739":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:5152:2645":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:49211:4885":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:10489:5846":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:3091:5799":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:11392:2023":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"6:6935:42946":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:49844:4531":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:46288:5066":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:10960:2020":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"2:52021:4697":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:10255:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"28:50:2730":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"18:644:5940":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:8806:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:8929:45183":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4083:41337":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:10897:203":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"21:13333:2008":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"17:13986:51336":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:10410:59971":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"26:55:52347":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"16:7406:5569":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:9624:58644":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"17:13356:50854":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:2862:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:12234:50067":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"16:7024:5784":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11267:11602":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"21:17172:2731":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"1:11162:4101":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"9:1075:5320":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:11616:45897":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:49130:4879":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:2401:9910":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:11246:4870":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"21:599:2635":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"2:8330:4719":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:38669:2876":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:5933:4451":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"21:18423:63308":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"21:16406:2147":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"18:885:5935":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:14949:4228":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"17:11001:45471":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:10363:45181":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:46464:4715":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"14:189:43484":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:3544:3521":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:49220:4886":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:50309:4155":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"16:7342:5599":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:3889:5179":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:23984:4788":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:24093:37364":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:6401:2109":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:45721:186":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"16:7042:5785":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:3281:2237":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:46364:4982":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:4434:2932":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:3249:206":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"16:2754:5488":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:49112:4878":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:53266:19706":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:15788:2027":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"1:12085:4243":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"16:4890:44204":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11665:45935":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"17:11726:45994":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:12307:50072":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"1:14987:4265":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:5360:5451":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:3246:4482":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"17:12095:50000":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"1:13835:4252":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4358:41363":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:46151:30751":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"12:1200:5384":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10827:5892":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"1:11595:2154":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:6101:5561":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:6085:4394":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10938:45496":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:11628:45932":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:3548:3522":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13394:51185":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:51111:59457":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:5346:5564":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"2:47703:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:12208:50065":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:1522:39216":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"21:42:1000":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"17:12537:50088":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:3240:200":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:22550:59681":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4371:41365":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"21:8009:1357":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:22565:59681":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"16:4955:44219":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:51627:4662":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:23556:4139":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"9:41:5302":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"2:49929:37614":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"17:10516:5847":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:3862:41314":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:13788:51286":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"21:97:1650":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"1:15872:1856":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"17:2512:5873":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:11640:45933":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"21:11320:2035":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"1:3611:2281":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:10845:4366":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"2:3329:3503":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13842:51292":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:37512:4556":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"21:12300:2048":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"1:1501:4201":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"17:9005:45184":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:11482:45610":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:10262:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10253:5805":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:14801:53993":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"7:0:1459":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:6700:54364":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:50040:4923":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"21:15311:2135":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"1:4473:2928":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"12:1235:5385":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"21:17093:3400":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"16:4671:44160":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:18383:2299":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"17:4157:5895":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"12:2331:4178":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11970:45419":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:5953:39155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:10837:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:14155:2932":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"21:12426:2050":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"16:7174:5633":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:6072:5584":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:11750:46104":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"21:69:1983":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"18:0:1823":{"crate_id":18,"path":["memchr"],"kind":"module"},"16:5766:5476":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:10589:4332":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"27:474:3666":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"29:0:1634":{"crate_id":29,"path":["futures_io"],"kind":"module"},"1:3343:4359":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10304:5827":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"16:547:5473":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:9222:2607":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:11388:4876":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"30:708:63282":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"21:18289:2293":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"2:50982:4679":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"21:18250:2289":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"6:5371:41982":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"14:216:43493":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"31:120:1684":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"2:47552:168":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:3488:5749":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:10377:5874":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:13331:50852":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"16:3118:5752":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"6:4052:41333":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:15870:1854":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:9224:2606":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"12:925:4199":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:5384:5452":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:3377:3512":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:8143:2096":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:50202:191":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"5:374:5171":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6881:41509":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:14509:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:46520:58948":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:3429:5491":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5563:42020":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12431:50080":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"2:8376:2240":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"5:1091:60171":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11981:45420":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:9344:4516":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"27:487:3647":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"21:6286:2040":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"2:12789:4868":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"27:567:3655":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"21:17163:2154":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:49488:4905":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"21:16907:2052":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"12:840:4197":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"30:930:63290":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:1596:39225":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7894:5602":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:50934:4699":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:5861:4448":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"17:13453:51218":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:15863:1849":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"21:14997:2132":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:12480:50084":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:24128:4969":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:5078:4595":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:3713:3529":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"21:18431:2067":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"16:5488:5460":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"21:18311:2295":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"17:9729:63259":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"12:2013:2216":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"1:10694:5220":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13154:50691":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"5:4237:60171":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"21:11262:2033":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"1:1476:2216":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"5:7835:60167":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:52104:4682":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"17:11045:45202":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"1:10853:2924":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"2:47483:195":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:13571:4269":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:5132:4596":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"21:17321:2220":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"6:4387:41367":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:21:660":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:6698:54362":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"12:2309:58795":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:12552:50089":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:11542:4281":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"12:396:5388":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:51500:4669":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"12:976:4206":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:10140:5845":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:46511:2108":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"6:5998:42387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"1:3621:53996":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:12982:50630":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"5:8092:5103":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"21:17221:2730":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"17:9186:5836":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"6:4060:41334":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"21:11091:2359":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"1:15251:4386":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"5:6647:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:6200:42396":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:13073:4524":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:10673:45418":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:14686:4257":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"6:6644:42760":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"21:13199:2107":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"18:152:51690":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:47389:2729":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:57312:59801":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:3218:5744":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:1700:39234":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:10975:45473":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:9759:45196":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:48392:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:45737:184":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:16781:3241":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"16:7279:5786":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:6866:4086":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:22603:59775":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"17:11809:46117":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:3245:2236":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:46600:2118":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:12669:4344":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"21:13824:2009":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"1:6793:4081":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:11604:45896":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:11254:5863":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:3742:3530":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"21:10084:2584":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"17:12712:50161":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:569:38337":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"16:7804:5575":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"1:14823:53988":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:12754:4906":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"6:4241:41351":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"21:13111:2105":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"16:7514:5586":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"21:14166:2115":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"6:4317:41358":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"12:1855:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13192:50737":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:3287:5747":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:3945:41320":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12385:50078":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:4852:4813":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:3264:5746":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"1:5656:4114":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:5505:5461":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:8183:2731":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"5:3965:60171":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:10607:4041":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"21:13522:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"21:14102:2112":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"1:4363:4372":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:4185:63318":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"2:2938:174":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11612:4285":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"21:18572:2371":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"16:6636:5582":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6091:42389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"21:7659:2222":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"21:12062:2038":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"2:14073:191":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"21:15304:2136":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"16:6087:5563":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:52447:4683":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:1646:4209":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:6005:12300":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"17:9649:45194":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"16:6366:5401":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"21:18093:2284":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"5:2548:5217":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:681:45181":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"28:0:1965":{"crate_id":28,"path":["slab"],"kind":"module"},"1:3645:2920":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:11292:4388":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:23946:37326":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:4281:41354":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"17:13180:50735":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:47423:4985":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:14516:2233":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"16:6021:5735":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:10988:45472":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"9:927:43157":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"30:915:63296":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:52261:4677":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12917:50628":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:10081:5824":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:3338:5486":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:12582:50091":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"27:188:3654":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"1:10449:54014":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"6:4439:41374":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:1736:39238":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:52296:4659":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"21:16062:2141":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:45829:189":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:46295:5067":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"30:942:63275":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:46534:2009":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"16:3041:5741":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:2751:4153":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"21:14207:2116":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"2:45762:185":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:3398:3517":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"21:10274:1648":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"17:12659:50157":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:10574:56418":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"11:0:1817":{"crate_id":11,"path":["adler"],"kind":"module"},"17:13564:51232":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"2:3360:3513":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:6688:4125":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:24100:5019":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:3308:3499":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9961:45200":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:4852:44191":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"21:14875:2118":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"5:7439:60171":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:168:681":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:4750:4480":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:7207:2216":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"29:42:1638":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:50909:59476":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"2:13016:4519":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:10028:45254":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:18478:2065":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"21:11661:2026":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"1:15879:1863":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:11077:2154":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"21:14948:2131":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"17:10128:5911":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10801:45385":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:10272:179":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"}},"external_crates":{"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_executor","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"29":{"name":"futures_io","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"28":{"name":"slab","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"20":{"name":"futures_core","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"futures_sink","html_root_url":null}},"format_version":16}