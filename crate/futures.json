{"root":"0:0:1781","crate_version":"0.3.28","includes_private":false,"index":{"2:11985:22251":{"id":"2:11985:22251","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11952:31094":{"id":"2:11952:31094","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13-21:2760:1691":{"id":"0:13-21:2760:1691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2760:1691","glob":false}},"0:16-21:5040:1696":{"id":"0:16-21:5040:1696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5040:1696","glob":false}},"2:11896:22362":{"id":"2:11896:22362","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11966:20980":{"id":"2:11966:20980","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11960:31099":{"id":"2:11960:31099","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11590:8029","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7-21:424:1686":{"id":"0:7-21:424:1686","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:424:1686","glob":false}},"2:11876:22317":{"id":"2:11876:22317","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33-21:20:1037":{"id":"0:33-21:20:1037","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:20:1037","glob":false}},"2:11972:31101":{"id":"2:11972:31101","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:43-27:0:1715":{"id":"0:43-27:0:1715","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1715","glob":false}},"0:78-29:25:1700":{"id":"0:78-29:25:1700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1700","glob":false}},"0:21-29:20:1701":{"id":"0:21-29:20:1701","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1701","glob":false}},"0:58-21:104:696":{"id":"0:58-21:104:696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:104:696","glob":false}},"0:4-2:12147:135":{"id":"0:4-2:12147:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:12147:135","glob":false}},"0:70-21:589:1687":{"id":"0:70-21:589:1687","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:589:1687","glob":false}},"2:11916:22354":{"id":"2:11916:22354","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:11389:8025","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11983:22249":{"id":"2:11983:22249","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5320:31757":{"id":"5:5320:31757","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5331:31759":{"id":"5:5331:31759","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:53-31:102:1752":{"id":"0:53-31:102:1752","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1752","glob":false}},"2:11909:19692":{"id":"2:11909:19692","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11884:31084":{"id":"2:11884:31084","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11863:1378","str::slice_mut_unchecked":"2:11885:31085","crate::ops::Index":"2:2989:2452"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11922:31087":{"id":"2:11922:31087","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:11565:8034","str::split":"2:11913:2269","prim@char":"1:11857:411","`DoubleEndedIterator`":"2:7174:120","str::rsplit_terminator":"2:11925:31088"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:42636:8054","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11940:1996":{"id":"2:11940:1996","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:11565:8034","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:1996"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:42790:8051","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5315":{"id":"5:5315","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5316:31756","5:5317:2559","5:5320:31757","5:5323:31758","5:5331:31759","5:5332:31760","5:5333:2129","5:5334:23550","5:5335:23551"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:23-21:6079:1702":{"id":"0:23-21:6079:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6079:1702","glob":false}},"0:63-25:9:1694":{"id":"0:63-25:9:1694","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1694","glob":false}},"2:11934:31089":{"id":"2:11934:31089","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11958:31097":{"id":"2:11958:31097","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5333:2129":{"id":"5:5333:2129","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5335:23551":{"id":"5:5335:23551","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11986:22252"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:51-31:136:1750":{"id":"0:51-31:136:1750","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1750","glob":false}},"0:74-21:3664:1692":{"id":"0:74-21:3664:1692","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3664:1692","glob":false}},"0:41-21:5081:1713":{"id":"0:41-21:5081:1713","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:5081:1713","glob":false}},"2:11864:801":{"id":"2:11864:801","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11857:411"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11890:20229":{"id":"2:11890:20229","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:42572:2557","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55-31:125:1754":{"id":"0:55-31:125:1754","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1754","glob":false}},"0:54-31:120:1753":{"id":"0:54-31:120:1753","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1753","glob":false}},"0:50-31:109:1749":{"id":"0:50-31:109:1749","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:109:1749","glob":false}},"2:11990:31106":{"id":"2:11990:31106","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4512:31106"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:42903:8046","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48-31:65:1747":{"id":"0:48-31:65:1747","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1747","glob":false}},"0:65-21:1293:1688":{"id":"0:65-21:1293:1688","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:1293:1688","glob":false}},"5:5317:2559":{"id":"5:5317:2559","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:81-21:6079:1702":{"id":"0:81-21:6079:1702","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6079:1702","glob":false}},"2:11978:31103":{"id":"2:11978:31103","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11987:31105":{"id":"2:11987:31105","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4514:31105"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:42885:8045","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82-21:6044:1703":{"id":"0:82-21:6044:1703","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6044:1703","glob":false}},"0:42-21:57:1714":{"id":"0:42-21:57:1714","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1714","glob":false}},"2:11889:29242":{"id":"2:11889:29242","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:42562:8040","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11913:2269":{"id":"2:11913:2269","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11565:8034","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split_whitespace":"2:11891:27812","str::rsplit":"2:11919:22356"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:42586:2558","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11984:22250":{"id":"2:11984:22250","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:18-29:27:1698":{"id":"0:18-29:27:1698","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1698","glob":false}},"2:11888:27801":{"id":"2:11888:27801","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11857:411"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:42556:8041","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11893:2260":{"id":"2:11893:2260","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:42840:2286","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1592":{"id":"0:46:1592","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1747","`LocalPool`":"31:120:1753"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:48-31:65:1747","0:49-31:68:1748","0:50-31:109:1749","0:51-31:136:1750","0:52-31:100:1751","0:53-31:102:1752","0:54-31:120:1753","0:55-31:125:1754"],"is_stripped":false}},"2:11891:27812":{"id":"2:11891:27812","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11892:27816"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:42860:8037","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1781":{"id":"0:0:1781","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5135:1718","crate::executor":"0:46:1592","crate::stream":"21:1293:1688","crate::channel":"27:0:1715","crate::future":"21:104:696","crate::sink":"21:4576:1695"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:46:1592","0:56:1054","0:4-2:12147:135","0:5-20:32:1684","0:7-21:424:1686","0:8-21:589:1687","0:10-20:68:1689","0:11-20:97:1690","0:13-21:2760:1691","0:14-21:3664:1692","0:15-25:9:1694","0:16-21:5040:1696","0:18-29:27:1698","0:19-29:17:1699","0:20-29:25:1700","0:21-29:20:1701","0:23-21:6079:1702","0:24-21:6044:1703","0:25-21:6074:1704","0:26-21:6061:1705","0:27-20:131:1706","0:28-22:7:1707","0:29-21:6631:1708","0:31-21:6628:1709","0:32-21:37:1710","0:33-21:20:1037","0:34-21:6630:1711","0:35-21:6629:1712","0:37-21:104:696","0:38-21:5133:925","0:39-21:4576:1695","0:40-21:1293:1688","0:41-21:5081:1713","0:42-21:57:1714","0:43-27:0:1715","0:44-21:6102:1717","0:45-21:5135:1718"],"is_stripped":false}},"0:24-21:6044:1703":{"id":"0:24-21:6044:1703","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6044:1703","glob":false}},"2:11956:31096":{"id":"2:11956:31096","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11882:22320":{"id":"2:11882:22320","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11905:19691":{"id":"2:11905:19691","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:40591:176","prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76-29:27:1698":{"id":"0:76-29:27:1698","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1698","glob":false}},"2:11919:22356":{"id":"2:11919:22356","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:11565:8034","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::split":"2:11913:2269"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:42604:8019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:29-21:6631:1708":{"id":"0:29-21:6631:1708","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:6631:1708","glob":false}},"2:11899:22363":{"id":"2:11899:22363","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69-21:424:1686":{"id":"0:69-21:424:1686","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:424:1686","glob":false}},"2:11928:22358":{"id":"2:11928:22358","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034","str::rsplitn":"2:11931:22360"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:42690:8023","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66-20:68:1689":{"id":"0:66-20:68:1689","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1689","glob":false}},"2:11865:20045":{"id":"2:11865:20045","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15-25:9:1694":{"id":"0:15-25:9:1694","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1694","glob":false}},"2:11873:31083":{"id":"2:11873:31083","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:11869:31082":{"id":"2:11869:31082","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:11867:31081"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:27-20:131:1706":{"id":"0:27-20:131:1706","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:131:1706","glob":false}},"0:14-21:3664:1692":{"id":"0:14-21:3664:1692","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3664:1692","glob":false}},"0:45-21:5135:1718":{"id":"0:45-21:5135:1718","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:5135:1718","glob":false}},"2:11894:31086":{"id":"2:11894:31086","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:42850:8048","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:11-20:97:1690":{"id":"0:11-20:97:1690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1690","glob":false}},"0:52-31:100:1751":{"id":"0:52-31:100:1751","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1751","glob":false}},"0:34-21:6630:1711":{"id":"0:34-21:6630:1711","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6630:1711","glob":false}},"2:11875:22321":{"id":"2:11875:22321","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11863":{"id":"2:11863","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11864:801","2:11865:20045","2:11866:31080","2:11867:31081","2:11869:31082","2:11872:27062","2:11873:31083","2:11874:311","2:11875:22321","2:11876:22317","2:11878:22318","2:11880:22319","2:11882:22320","2:11884:31084","2:11885:31085","2:11886:22345","2:11887:22346","2:11888:27801","2:11889:29242","2:11890:20229","2:11891:27812","2:11892:27816","2:11893:2260","2:11894:31086","2:11895:27802","2:11896:22362","2:11899:22363","2:11902:22364","2:11905:19691","2:11909:19692","2:11913:2269","2:11916:22354","2:11919:22356","2:11922:31087","2:11925:31088","2:11928:22358","2:11931:22360","2:11934:31089","2:11937:31090","2:11940:1996","2:11943:31091","2:11946:31092","2:11949:31093","2:11952:31094","2:11954:31095","2:11956:31096","2:11958:31097","2:11959:31098","2:11960:31099","2:11963:31100","2:11966:20980","2:11969:22365","2:11972:31101","2:11975:31102","2:11978:31103","2:11981:31104","2:11983:22249","2:11984:22250","2:11985:22251","2:11986:22252","2:11987:31105","2:11989:2382","2:11990:31106"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:73-21:2760:1691":{"id":"0:73-21:2760:1691","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:2760:1691","glob":false}},"2:11880:22319":{"id":"2:11880:22319","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5323:31758":{"id":"5:5323:31758","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7180:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11886:22345":{"id":"2:11886:22345","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:11887:22346"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:31-21:6628:1709":{"id":"0:31-21:6628:1709","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:6628:1709","glob":false}},"0:84-21:6061:1705":{"id":"0:84-21:6061:1705","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6061:1705","glob":false}},"0:8-21:589:1687":{"id":"0:8-21:589:1687","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:589:1687","glob":false}},"2:11925:31088":{"id":"2:11925:31088","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:11565:8034","str::split":"2:11913:2269","prim@char":"1:11857:411","str::split_terminator":"2:11922:31087"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:42654:8053","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67-20:97:1690":{"id":"0:67-20:97:1690","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1690","glob":false}},"0:20-29:25:1700":{"id":"0:20-29:25:1700","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1700","glob":false}},"2:11885:31085":{"id":"2:11885:31085","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11863:1378","crate::ops::IndexMut":"2:2993:2453","str::slice_unchecked":"2:11884:31084"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:59-2:12147:135":{"id":"0:59-2:12147:135","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:12147:135","glob":false}},"0:19-29:17:1699":{"id":"0:19-29:17:1699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1699","glob":false}},"2:11969:22365":{"id":"2:11969:22365","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11981:31104":{"id":"2:11981:31104","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:11527:126","`FromStr`":"2:11526:2718"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:40733:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:11526:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:11526:2718","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11986:22252":{"id":"2:11986:22252","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11946:31092":{"id":"2:11946:31092","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11565:8034","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::rmatch_indices":"2:11949:31093"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:42736:8049","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:10-20:68:1689":{"id":"0:10-20:68:1689","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1689","glob":false}},"0:37-21:104:696":{"id":"0:37-21:104:696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:104:696","glob":false}},"2:11937:31090":{"id":"2:11937:31090","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11892:27816":{"id":"2:11892:27816","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11891:27812"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:42869:8036","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:71-21:5040:1696":{"id":"0:71-21:5040:1696","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:5040:1696","glob":false}},"0:38-21:5133:925":{"id":"0:38-21:5133:925","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:5133:925","glob":false}},"2:11895:27802":{"id":"2:11895:27802","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:42878:8035","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11931:22360":{"id":"2:11931:22360","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11857:411","str::splitn":"2:11928:22358","self::pattern":"2:11565:8034"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:42708:8021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11943:31091":{"id":"2:11943:31091","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:11565:8034","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::matches":"2:11940:1996"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:42808:8052","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11975:31102":{"id":"2:11975:31102","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62-21:4576:1695":{"id":"0:62-21:4576:1695","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:4576:1695","glob":false}},"0:25-21:6074:1704":{"id":"0:25-21:6074:1704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6074:1704","glob":false}},"0:35-21:6629:1712":{"id":"0:35-21:6629:1712","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:6629:1712","glob":false}},"2:11949:31093":{"id":"2:11949:31093","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:11565:8034","`DoubleEndedIterator`":"2:7174:120","prim@char":"1:11857:411","str::match_indices":"2:11946:31092"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:42754:8050","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11887:22346":{"id":"2:11887:22346","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:11886:22345"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5316:31756":{"id":"5:5316:31756","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2240","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26-21:6061:1705":{"id":"0:26-21:6061:1705","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6061:1705","glob":false}},"0:40-21:1293:1688":{"id":"0:40-21:1293:1688","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:1293:1688","glob":false}},"0:56:1054":{"id":"0:56:1054","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:58-21:104:696","0:59-2:12147:135","0:60-20:32:1684","0:62-21:4576:1695","0:63-25:9:1694","0:65-21:1293:1688","0:66-20:68:1689","0:67-20:97:1690","0:69-21:424:1686","0:70-21:589:1687","0:71-21:5040:1696","0:73-21:2760:1691","0:74-21:3664:1692","0:76-29:27:1698","0:77-29:17:1699","0:78-29:25:1700","0:79-29:20:1701","0:81-21:6079:1702","0:82-21:6044:1703","0:83-21:6074:1704","0:84-21:6061:1705"],"is_stripped":false}},"0:5-20:32:1684":{"id":"0:5-20:32:1684","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1684","glob":false}},"2:11866:31080":{"id":"2:11866:31080","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11867:31081":{"id":"2:11867:31081","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11954:31095":{"id":"2:11954:31095","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11902:22364":{"id":"2:11902:22364","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11585:8031","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11989:2382":{"id":"2:11989:2382","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4515:2382"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:42894:2383","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:77-29:17:1699":{"id":"0:77-29:17:1699","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1699","glob":false}},"5:5334:23550":{"id":"5:5334:23550","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11985:22251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28-22:7:1707":{"id":"0:28-22:7:1707","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1707","glob":false}},"0:44-21:6102:1717":{"id":"0:44-21:6102:1717","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:6102:1717","glob":false}},"0:39-21:4576:1695":{"id":"0:39-21:4576:1695","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:4576:1695","glob":false}},"0:83-21:6074:1704":{"id":"0:83-21:6074:1704","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6074:1704","glob":false}},"2:11878:22318":{"id":"2:11878:22318","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:40591:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:40589:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9746:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:32-21:37:1710":{"id":"0:32-21:37:1710","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:37:1710","glob":false}},"0:60-20:32:1684":{"id":"0:60-20:32:1684","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1684","glob":false}},"2:11963:31100":{"id":"2:11963:31100","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11857:411","self::pattern":"2:11565:8034"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11570:8030","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11872:27062":{"id":"2:11872:27062","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11133:8038"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11874:311":{"id":"2:11874:311","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11875:22321","`u8`":"1:11874:1475"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:49-31:68:1748":{"id":"0:49-31:68:1748","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1748","glob":false}},"0:79-29:20:1701":{"id":"0:79-29:20:1701","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1701","glob":false}},"2:11959:31098":{"id":"2:11959:31098","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5332:31760":{"id":"5:5332:31760","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:277:2240","`String`":"5:7180:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:277:2240","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6931:2456","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:7180:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"21:12194:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:40649:2194":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:653:9207":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5664:15500":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:8802:2774":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"21:15038:34588":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"21:4306:19723":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"27:11:36052":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"16:4606:15216":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:10720:21075":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12134:18876":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"1:10412:2573":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"17:11288:18349":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:10062:15798":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"17:10221:15876":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:12160:2082":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:9778:15757":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"6:1710:10075":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:3921:2615":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"21:3664:1692":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"6:6634:13672":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:5931:13256":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:39441:2450":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:7618:2364":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"21:2760:1691":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"1:10946:24622":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"1:11241:21002":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:3190:29990":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:7483:15568":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:38834:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:44805:2866":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:6070:15513":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:10820:2482":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"21:13709:2194":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"21:5133:925":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"21:13199:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"2:12480:2455":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"5:7120:2498":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:31729:8436":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"21:15237:34603":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"6:4261:12526":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6676:15540":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"30:731:34334":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"12:1628:33170":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:7847:15578":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"17:10420:15874":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"2:40792:2406":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:39643:8340":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"21:5743:2547":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"2:43198:8055":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:4891:2687":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:9263:15702":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:10929:24614":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:9328:2163":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"6:5959:13260":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"17:8991:34304":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:9909:15792":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"16:7659:15576":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:10682:15685":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"12:1518:14488":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:2813:8379":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:6087:24602":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"17:9071:34314":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:20615:2828":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:4413:8140":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:8526:15639":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:12884:19611":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4703:12570":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"21:13170:2189":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:42586:2558":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:12768:19604":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"5:1410:2410":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:2216:2266":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:12860:19609":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:12638:19597":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"5:1230:2421":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:13134:19633":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:43185:8074":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:42736:8049":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"27:187:19780":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"6:4274:12527":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:9049:2115":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"1:11001:2733":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:13221:19643":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:44250:2880":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:4232:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:11721:18849":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"12:1852:2424":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3899:2613":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:3927:2616":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"17:9820:15832":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:4062:26802":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8420:2713":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46660:7938":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:6519:8336":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"21:11663:34588":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"16:2727:14585":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:45365:2875":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:8863:2108":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"17:3249:15818":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:1988:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"21:6061:1705":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"1:6395:2763":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"30:716:34345":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:7748:2078":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"5:5726:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:39872:29467":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:3076:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:2574:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"16:7044:33662":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"20:97:1690":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:1647:1073":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13158:19636":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:10642:15683":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"21:15150:34567":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"1:8236:2641":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:12118:18875":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11161:18340":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:681:19698":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:11997:18866":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:12578:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"2:10200:8024":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:41066:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:7529:8333":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:13047:19625":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:2771:14587":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:13114:19631":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:6359:15531":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:44873:2854":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:9088:2541":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"21:13967:2201":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"6:4910:12594":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:8561:15640":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:9433:15708":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:7618:2089":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"6:7440:12749":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:9093:34588":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"6:572:9156":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"17:11547:15839":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:6922:24009":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"21:13761:2218":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"30:81:19678":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:38951:8137":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:10940:24601":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"27:468:19789":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"22:7:1707":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"27:127:19775":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"16:5235:33558":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7970:15585":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:1436:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"27:439:2771":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"30:707:29474":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:6174:2766":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:4387:2367":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:3453:2555":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:2065:2354":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"6:4489:12551":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"21:15062:35463":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"21:8431:2095":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"17:10625:15682":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"6:6059:12438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:42970:8064":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"16:6463:15533":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:5323:2724":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:8170:2594":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"2:4:1000":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:10159:15801":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"6:1695:10073":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"27:124:19774":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:43164:8072":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:5995:24608":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:4164:2647":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"5:208:7967":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"17:11034:18332":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:8397:2712":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"21:9311:34588":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:9736:2628":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:9378:2535":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"16:3188:14597":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"12:0:1885":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"21:9917:34588":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"11:44:14474":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:21775:2606":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:3869:2611":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"12:2053:2418":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:8822:34305":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"17:11137:18338":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:1723:10076":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:3238:2572":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:5708:2754":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:5359:2726":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:335:34471":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"17:10139:15674":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:6034:15511":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:21:671":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:20666:2818":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"21:8078:2080":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"6:4501:12552":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:39519:29486":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:9181:2478":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"16:2825:14589":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:4775:12579":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"21:11041:34588":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"27:489:19791":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"21:12972:2184":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"17:12103:18874":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"21:14898:2295":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"17:9644:15727":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"17:10822:15690":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"21:11891:2081":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"17:1903:15769":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:9764:15784":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:39903:8330":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:9031:34299":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"21:7638:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9857:15813":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"12:762:2409":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"28:67:36074":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"1:5428:2728":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:4981:12600":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"5:3172:2427":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"21:8335:2090":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"17:12361:18891":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:9844:15791":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:10721:15687":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:42144:8002":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:561:9154":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:4024:7957":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"5:1401:2408":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:46363:2853":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"28:199:19795":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"1:8329:2691":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"21:12067:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"5:6506:8100":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:7150:2496":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4890:12592":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:7135:33658":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:3863:2612":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:4952:12598":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:40575:2591":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:44328:2893":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:870:2406":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43555:2897":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6137:15516":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"1:1592:2426":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"31:125:1754":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:6271:19737":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"16:6842:33533":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:2385:1718":{"crate_id":1,"path":["std","io"],"kind":"module"},"21:10369:2146":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"2:20854:2825":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:11268:34588":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"24:15:19720":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:41709:8476":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:8252:2651":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:21371:2821":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"30:753:34338":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"12:1859:2425":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:42373:2165":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:4850:12587":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:12147:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:5878:14537":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"14:31:14496":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:9010:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"21:20:1037":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"1:4496:2670":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:2538:2279":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:10257:15852":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"16:5996:15509":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:7447:34604":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:2491:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"21:11404:34584":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"6:4841:12586":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:8176:2593":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:8816:2771":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"1:484:24511":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"21:10458:2149":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"6:473:9143":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:40986:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"21:14837:2289":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"6:4795:12582":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"2:42654:8053":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:41885:8189":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"21:6795:34588":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:7288:15556":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:9712:15783":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"20:92:2628":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"30:741:34342":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:2808:8375":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:42850:8048":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:4367:8139":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"21:13725:2194":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"1:11229:20280":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"1:1847:2478":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"16:7298:15557":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:7267:15554":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:2612:2280":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:8758:2733":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:10546:15679":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:42413:8001":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:12022:18868":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:42808:8052":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:3504:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:21624:2602":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:8162:15655":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:6079:13290":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:4571:12557":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:9897:15836":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"16:6743:15544":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"6:4988:12601":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"6:4720:12572":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:8230:2650":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:45703:2876":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:11013:2734":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"2:38937:15587":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"6:7446:12750":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:7475:12754":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"1:641:2387":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"1:3428:2298":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"30:836:19693":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:9107:2808":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:4635:15221":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:9064:7978":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:12198:18880":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"17:9108:15675":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"1:8092:1694":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:21369:2628":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:8911:34306":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:11876:1473":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"21:14961:2298":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"5:7163:2497":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:6643:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"5:1185:2418":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:2282:14566":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"27:451:2773":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"6:5772:13207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"15:0:1887":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:4757:12577":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"21:11535:2170":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"6:4727:12573":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8225:2649":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:6707:34588":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"2:44729:2874":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:6318:25125":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:39137:8129":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"21:14754:34588":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"2:21584:28494":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:40504:29139":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:43309:8525":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:46051:2864":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:7949:2228":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11774:18853":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:10997:18330":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"12:274:33159":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"1:4100:2645":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"5:6963:2431":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"21:57:1714":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"17:11639:18845":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"12:751:2218":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:13393:19652":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:39463:8337":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"24:190:2062":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"1:1568:2406":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:355:2377":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:44296:2860":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:2370:2529":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"1:10700:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"21:15135:34574":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"5:7194:8076":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"21:14543:2281":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"17:420:14540":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"21:9416:34588":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"5:6931:2456":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:2297:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"21:7364:2082":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"17:9155:15676":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"1:11823:27428":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"21:13934:34588":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"21:5135:1718":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"21:7956:2086":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"21:12774:2192":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"6:1534:10058":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:9874:20036":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"1:1985:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:8014:15587":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:29712:2601":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"21:3912:2096":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"16:4786:15252":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:4577:8152":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"5:2104:30981":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:7805:2536":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:9303:15717":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"16:2631:14581":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"24:135:2061":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"17:11684:18847":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"9:676:14298":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"21:13222:2191":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"16:0:1888":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:2867:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:11461:7945":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:9453:34588":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:1571:2218":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:20654:2628":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:5460:15491":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"21:9390:2141":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"17:13168:19637":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"1:3124:24402":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:11070:2164":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"17:11761:18852":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46558:7932":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:5843:13250":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:39235:2383":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:11590:8029":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:42494:8017":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:42452:8000":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:12265:18885":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:9889:2194":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:12176:18879":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"5:7028:2406":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"16:6186:15520":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"30:691:2167":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:2937:2236":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:4697:12569":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"21:7981:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:12508:2088":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"17:12322:18889":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:8157:2558":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:11576:18841":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:891:2408":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"12:815:2413":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:44948:29462":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:546:9152":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:40527:2598":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"7:79:14265":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:10121:15794":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"5:2904:31032":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"17:8418:15663":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:50235:29489":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:2757:8350":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:20847:2628":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"30:807:19699":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:41226:2751":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"17:8137:15654":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11214:20228":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:878:2407":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:12695:19599":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:5343:2725":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"21:7497:2088":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"20:27:2628":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"21:6629:1712":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:9000:2298":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"6:4439:12545":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"2:41621:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:29941:8362":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:4962:12599":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"6:4539:12554":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:8085:2197":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"17:12739:19601":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"21:9768:34588":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:21600:28517":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"6:540:9151":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"5:4099:2547":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:6109:15514":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"21:15119:34631":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:11179:2166":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"17:13340:19647":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:7316:2075":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"17:13366:19649":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:11389:8025":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:14988:19735":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"1:11143:24623":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:44398:29473":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"11:36:33147":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"20:68:1689":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:39682:2164":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"16:6210:15522":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:9658:15781":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:361:2378":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:2676:7959":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"12:1065:33173":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:8794:2194":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"21:14936:34588":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"6:5786:13208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:14722:2285":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"2:39218:8159":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"5:1983:2440":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"5:7075:2403":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6284:15526":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"17:9738:15758":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"0:46:1592":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"2:21651:29454":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:5552:2766":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:29901:2437":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:13436:34588":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"21:9279:2140":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:43329:8529":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:6517:14510":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"21:13795:34588":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"1:11879:779":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:9544:24603":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"21:13362:2197":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"21:13869:34588":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"6:6628:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"21:14524:34588":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"1:1898:2493":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:39188:8166":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:13354:19648":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"12:738:2408":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"12:2080:2420":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:3325:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:2680:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:42878:8035":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:7095:8335":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:2894:14592":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:37:1710":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"2:44481:2865":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:10434:15883":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"27:483:2712":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:12909:19613":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:9274:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:6571:10021":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"1:3668:2595":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:4721:2393":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:4921:12595":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"28:207:2420":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"2:7132:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"6:7521:14242":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:38856:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"17:10245:15878":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:8776:29197":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"21:7323:2074":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"2:39913:2196":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:9746:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:10270:15851":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"21:8393:2092":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"9:977:14291":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:21568:28516":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:3160:231":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"21:11916:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"9:592:14307":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:505:9148":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:22090:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"6:5722:13241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:7511:15570":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:12357:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:14230:34588":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"1:8983:15548":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"21:8947:2113":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"5:621:31028":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"21:6255:19738":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"6:4334:12532":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"2:2782:8372":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"21:6637:2063":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"5:2896:30982":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:5172:2103":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:2487:14575":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:4751:12576":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"5:1431:2412":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"21:11813:2079":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"21:7303:34588":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"1:9059:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"6:7463:12752":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:7537:24620":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"16:5815:15506":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:4303:8136":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:39421:7999":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:2668:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11841:18858":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"30:788:19697":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:11699:24008":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:7522:2432":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:4733:12574":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:10626:2681":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"2:48874:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8810:2406":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:3236:2571":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"5:668:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"27:432:19793":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"2:38928:8113":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:46637:7937":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"16:7117:33649":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:11384:2595":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:13147:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"2:22321:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:11872:734":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:8056:15588":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:9118:34302":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:8151:2557":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:6222:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"5:4331:32066":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"21:13639:34537":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"6:487:9145":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:11855:368":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"21:12669:34569":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"2:4001:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"1:7667:2422":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:1771:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:8437:2714":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"30:777:19696":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"30:824:8032":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"14:221:14506":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:41651:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:10849:34588":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"1:10418:2571":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"5:3146:2424":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:9873:15834":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:10310:15879":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:22024:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"21:7778:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:1089:2117":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"17:9293:15718":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:6161:15518":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:9066:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:13560:34588":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"21:2709:2173":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"21:14489:108":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"2:38737:8387":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"6:6530:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:39316:2499":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:3026:14596":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"21:15056:2121":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:3314:2195":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:13527:19661":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4353:12534":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:699:19700":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:8975:25150":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"18:491:34346":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:4618:12560":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"21:8418:2094":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"1:7581:2379":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"5:6985:2406":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"2:9058:7969":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"29:27:1698":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"21:14857:2291":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"18:644:2167":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:2572:2560":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"6:4224:12523":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:45909:2895":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"18:707:8032":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"21:8509:202":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"16:2320:14568":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"14:187:14504":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:4833:2677":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:44659:2886":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"2:4313:8137":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"2:2940:2237":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"6:1652:10069":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:3961:2617":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:5184:14536":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"21:12915:2186":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"17:0:1889":{"crate_id":17,"path":["object"],"kind":"module"},"2:40866:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11869:735":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:8963:25129":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:43360:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:7329:15560":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2906:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"1:4113:2646":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:3177:8126":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:3975:2619":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:10205:2727":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"21:14025:2225":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"6:1609:10066":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:9939:2138":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"1:621:2384":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"5:7103:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:5527:2063":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:29935:8096":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"29:0:1697":{"crate_id":29,"path":["futures_io"],"kind":"module"},"21:7016:34588":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:40640:8392":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:12948:19616":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:42544:8044":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:46409:2871":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:7557:15572":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:39894:2195":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"2:2841:8381":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"31:68:1748":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"30:883:19695":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:7388:15563":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"16:6052:15512":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:10944:2161":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"6:6594:9995":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"2:11526:2718":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"5:6623:241":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:1611:579":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"21:10340:34588":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:29963:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"5:3105:2194":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"21:10702:2157":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"21:13261:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"1:11052:2541":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:41901:8188":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:4564:21021":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"6:493:9146":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"21:7083:34588":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:39210:8046":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"17:8701:15668":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:13141:19634":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:41910:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"16:6719:33415":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:4122:8143":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"21:7234:2071":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"1:7798:2532":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"21:6608:34550":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:1735:8413":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"13:226:33174":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"17:11247:18346":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:44827:2869":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:22255:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"21:11005:2070":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:4669:2631":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:12368:2899":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"4:0:1880":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:38651:8125":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:1370:2406":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:2855:8384":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"21:13309:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"2:2302:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:4468:12548":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:2500:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:3595:32044":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:8774:15637":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"18:736:19694":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:42392:8009":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:11320:21344":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"17:9601:15734":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:12073:18872":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:2455:8183":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:10134:2738":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"12:822:2414":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"5:2894:32108":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5890:13252":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:6238:19739":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"17:8494:14534":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"31:38:36085":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"1:9018:20982":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:12609:19594":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:45026:29466":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"30:655:19708":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:4611:2610":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:14846:2290":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"6:7498:12757":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"1:4842:2678":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"12:1138:2421":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"27:136:2766":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:42903:8046":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:13494:2199":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"1:8940:20401":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"16:4921:15291":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:12291:18887":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:42860:8037":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:14867:2292":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"21:14195:2227":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"1:10650:20984":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7249:15553":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"5:1339:2194":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:43341:8542":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:9913:2405":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:7646:2390":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"17:9328:15712":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"17:12934:19615":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"2:42382:8011":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"21:6145:2173":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"21:13619:34588":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"17:9526:15731":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"26:37:36046":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"21:7254:34588":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:3505:2218":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"16:7237:15552":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:13031:19623":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"2:12181:2093":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:4812:988":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"21:12091:2084":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"17:8510:14532":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"1:8270:2680":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:15192:34539":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"1:8922:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"17:10332:15880":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"21:10978:34588":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"2:41348:7968":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"31:0:1746":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"16:4519:15201":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:8881:34296":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:7174:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:4628:12561":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:1704:10074":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"17:10949:18328":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:44536:29460":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:4084:2643":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:847:2194":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"21:9467:2142":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"18:507:2167":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:10093:8019":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:1962:15753":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:7815:2533":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"30:769:2167":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:3689:14659":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"21:10466:2156":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"12:2184:29779":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:39241:8160":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:43563:2898":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2261:14538":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"21:14910:2160":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:6607:25125":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:21676:29045":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:39562:2067":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"1:10310:2732":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"27:149:19778":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"17:12087:18873":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"5:5746:2750":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:2225:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"17:10973:18329":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:41922:2712":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"5:951:32044":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:11368:18355":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:6572:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:10321:15845":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:2825:8377":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:39198:8167":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"5:2157:30991":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:553:9153":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:4637:12562":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11878:1471":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:1527:2547":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"3:0:435":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"30:761:2167":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"29:17:1699":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:43021:8067":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:43218:8056":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:7197:2238":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:9288:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:9371:15675":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:40707:2696":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"3:229:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"16:5494:15493":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"21:14284:2277":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"16:2433:14573":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:9553:15674":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:43576:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"18:671:19697":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4369:12536":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:3281:2564":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"18:582:8179":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"13:110:33221":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:9624:2145":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"2:9559:27659":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:5472:15492":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:11354:8535":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:8113:2231":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:11133:8038":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:2804:8373":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"21:7387:34588":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"2:8293:8030":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:39344:8457":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:4945:12597":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"21:15204:34628":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"6:4361:12535":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"6:4476:12549":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"21:14337:2278":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"21:14649:34588":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"1:10047:21095":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:12617:19595":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:2507:234":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:4929:12596":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"12:2178:33165":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:12485:19591":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:5491:2731":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:12803:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"2:4092:8142":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:1618:8316":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:20381:8179":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"16:6200:15521":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:40455:2588":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"16:5411:15488":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"1:6823:24616":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","Key"],"kind":"struct"},"2:39551:8344":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"16:6496:15534":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:7939:25173":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:42439:7999":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:4301:12528":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:42140:28780":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:2535:14577":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:950:2415":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:40421:2586":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:1663:10070":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"21:8656:2104":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"21:8975:34588":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:9183:15677":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:1550:10060":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"17:10796:15638":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9751:15756":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"12:300:33157":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:44897:2855":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"16:5163:15485":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"21:9207:2119":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:13513:2200":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:42840:2286":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:41369:7978":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:3437:22121":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"5:6667:32061":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:4241:8131":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"9:382:14393":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"21:7400:2088":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:43150:8071":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"9:111:14302":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"2:44851:2851":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"21:4142:2202":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:22222:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"17:13024:19622":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:578:9157":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:10186:8021":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"12:98:33172":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:21275:29960":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"15:175:14513":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:11186:18342":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:9051:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:11570:8030":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:4424:2653":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:9021:15673":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"16:7093:15549":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"1:914:2409":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"30:556:34346":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"6:6698:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"16:2509:14576":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:3157:2573":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"12:1845:2409":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:386:15651":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:13436:19655":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"22:0:2025":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:20695:2628":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:13082:19628":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:771:2153":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"21:14889:2294":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"20:17:2018":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"6:6773:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:14481:2217":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:12734:2178":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"1:956:2416":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:4389:12538":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"1:7861:2567":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:11149:18339":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:13536:19662":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:8042:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11343:2596":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"5:3528:2405":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:2820:8376":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"21:14979:2300":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"1:8134:2139":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"6:1747:10078":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"21:10399:34588":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:5124:32044":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11875:1472":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"12:1003:2419":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:8164:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"12:119:33164":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"2:42125:8514":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"2:3989:30498":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:505:2354":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"16:4662:15224":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"2:45519:2870":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"16:6298:15527":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"2:43175:8073":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:8495:2716":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:41612:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"21:14803:34588":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"6:4820:12584":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:42708:8021":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:9204:30632":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"21:11398:35461":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"2:50214:29465":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"5:2624:30992":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"5:1969:2283":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"17:13126:19632":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:4248:12525":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"17:9627:15741":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"6:531:9150":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:41606:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"21:15052:2122":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"17:13459:19656":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"21:14605:2282":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"5:6024:2900":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"21:10792:34588":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"21:6102:1717":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"6:4379:12537":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12237:18883":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:42465:8015":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:9193:34311":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:8506:2717":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:10668:20962":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:10583:15680":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11708:18848":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:8781:28463":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11330:18352":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:6829:33580":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:3150:8388":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:6000:13262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:9070:7976":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"16:7166:15550":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:9062:7977":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"6:0:806":{"crate_id":6,"path":["libc"],"kind":"module"},"6:6521:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:11606:18843":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:11939:18863":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"17:11787:18854":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:1354:2405":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"21:14005:34588":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"21:10871:2162":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"16:7980:15586":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"1:4627:2679":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:11692:2174":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"6:4766:12578":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:45207:2883":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"5:5168:2141":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:11119:8485":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"1:5309:2723":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"21:6720:2067":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"2:2497:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"16:4144:15042":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"17:13192:19640":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:11856:925":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:4408:24620":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"2:12399:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:22288:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:3344:2547":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:8052:2537":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:8928:2358":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"1:1065:2419":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"21:14419:34588":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"2:41106:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:10500:34588":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"17:11054:18333":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:9446:15721":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"21:9262:34588":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"5:6294:2406":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"17:13071:19627":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:4552:2616":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4322:12531":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:5450:2146":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13007:19621":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:2771:8370":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"21:8405:2093":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"16:4574:15208":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:1712:8414":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:8347:2711":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"9:863:14289":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:7218:14054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:12307:18888":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:5759:13245":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"16:4262:15112":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:6881:2067":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"5:3907:2218":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"16:5447:15490":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"21:4353:19725":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"6:4656:12564":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:8244:2594":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:4576:1695":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"6:5990:13261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:4164:7990":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:44681:2889":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:44459:2861":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:41639:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:39311:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"13:0:1879":{"crate_id":13,"path":["std_detect"],"kind":"module"},"12:1836:2406":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:42474:8018":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12964:19618":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:8360:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:21515:29359":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:22156:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"2:43007:8066":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"21:21:1037":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"2:2847:8382":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:9339:15711":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:12717:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"17:13148:19635":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"21:15098:34627":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"1:1586:2425":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:1216:2419":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"12:632:2194":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"21:1293:1688":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"21:13679:19721":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"14:40:18330":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"6:7386:14213":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"21:11727:34588":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"17:13231:19644":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:80:19678":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:10710:2229":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"5:4253:242":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:2503:235":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"21:5544:2197":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"2:39879:2198":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"21:13812:2220":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"5:6535:8102":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:44228:2892":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:7592:2365":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"23:0:2026":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"1:2548:24603":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:8292:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:46301:2888":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:7343:15561":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"21:781:2096":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"17:2916:15795":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"5:3937:32044":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"5:1704:2409":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"6:499:9147":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:39501:2144":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"21:9748:2063":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"17:12896:19612":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:7704:25136":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:20394:29956":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"21:13335:2194":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"21:15067:2124":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:7186:2069":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"30:624:2167":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"18:727:19701":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:10824:21006":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:6525:8101":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"16:7278:15555":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"16:2411:14572":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"1:4748:2626":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:7396:15564":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:2930:14593":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"21:7522:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:10528:15678":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:1931:15729":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:12685:2177":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"31:109:1749":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"2:31725:25136":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:3199:2576":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"16:5839:15507":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:5168:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13184:19639":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"12:1872:2427":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"16:153:14543":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:8608:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"21:12169:2083":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"18:521:19703":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:8187:2698":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:4244:2648":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"12:669:2411":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:10415:2575":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"21:8017:2081":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"17:11174:18341":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:6528:15535":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:13506:19659":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:7260:2409":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:12233:2096":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:35:2457":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"6:1583:10063":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:6119:25172":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"6:7511:14241":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12046:18870":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"1:413:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:562:15653":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"16:5219:14532":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"9:709:2712":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:7099:8334":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:1617:10067":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:9997:21343":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"16:5981:33594":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:1604:10065":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"21:9878:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"6:5800:13246":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:10207:15865":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12148:18877":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:7853:24403":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"29:20:1701":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"21:5918:2173":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"21:11781:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"1:8296:2630":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"9:0:1882":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:20449:29993":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:22123:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"6:6512:9029":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"21:9230:2139":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"16:2842:14590":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"16:5558:15497":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"31:136:1750":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"6:4307:12529":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"6:5813:13248":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"16:5122:15468":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"16:2389:14571":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:1597:2427":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"9:33:14359":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"5:3264:2409":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"1:7661:2391":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:6816:33610":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"12:1866:2426":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"31:100:1751":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"21:12760:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"17:12630:19596":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:7134:29093":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:21636:29157":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"21:13718:2406":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"21:9533:34588":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"17:12972:19619":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"21:14252:2276":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"17:12514:19592":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:11874:1475":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"9:920:14288":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:2934:2235":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:2993:14594":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:11356:18354":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:2868:14591":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:646:2388":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"9:896:14290":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:1849:2479":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"17:12278:18886":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:11515:18839":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"16:4817:15259":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"17:12251:18884":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:48926:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:22786:2599":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:4457:12547":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"5:5640:2218":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:2129:580":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:10228:2159":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"6:594:9159":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:3983:2621":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:10845:15691":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:44204:29463":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:7676:2091":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"21:4823:2224":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"21:13323:35458":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"1:3770:2597":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:20426:29998":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:5921:8345":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:20641:2829":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"18:609:34351":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:10690:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"2:2989:2452":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:41362:7977":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:11791:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:2776:8369":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"16:4849:15267":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"17:13176:19638":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"17:12836:19607":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"12:1832:2194":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:13478:19657":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:6241:15523":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:11025:21072":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"5:677:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:8489:2194":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:30533:8179":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:4402:2652":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:9791:15785":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:5000:12603":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"16:6654:15539":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:9401:15714":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"17:10752:15688":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:4298:2547":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"21:15165:34570":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"6:6728:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"6:4559:12556":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"21:7701:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:9981:8025":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"0:0:1781":{"crate_id":0,"path":["futures"],"kind":"module"},"17:9317:15713":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"1:0:1370":{"crate_id":1,"path":["std"],"kind":"module"},"1:2209:2515":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:6472:14511":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"5:1420:2411":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"21:13586:2201":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"20:131:1706":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"1:939:2414":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:12317:2182":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"16:6790:15546":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:8835:2769":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:62:8775":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"16:5780:15504":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:10350:15689":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"16:5793:15505":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:3159:2574":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"12:2198:33166":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:10458:2364":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"6:586:9158":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"21:15180:34578":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"21:13750:2217":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"2:3376:8105":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"5:6955:2218":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:2678:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:3165:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40563:2590":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:12164:18878":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:41146:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:7845:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"21:6444:34630":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"1:2212:2261":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:42562:8040":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:6376:15532":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"1:1074:2420":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"5:803:2428":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:40540:2589":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13557:19663":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"2:44358:2881":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:40784:2405":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:3665:2596":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:14074:34588":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"12:861:2417":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:4217:15091":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:13743:2406":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"30:844:19701":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:5525:15495":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12033:18869":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:40776:2194":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:12846:2181":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"17:12781:19605":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:4689:15227":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:39:2038":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:588:2381":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:39450:2139":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:4328:12373":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"21:12353:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"30:114:19680":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:11873:730":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:5912:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"1:11864:1457":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:21462:29361":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:5236:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:42604:8019":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:14:1999":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:6094:13291":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"21:9555:2144":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"6:4673:12566":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:4630:2652":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:48887:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:5818:2195":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"1:8880:2773":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:8864:2770":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:3171:8127":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:13100:19630":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"21:10522:2152":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:6074:1704":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"1:6359:2756":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:3388:8109":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:11033:8542":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"2:21111:2847":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"17:12550:19593":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:6345:15530":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:39491:2143":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:11701:2073":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"28:37:2194":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"17:9539:15730":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"21:7349:34588":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"2:2851:8383":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"21:14373:34588":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"16:7426:15565":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6649:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:40716:8467":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:38752:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"6:4681:12567":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11235:18345":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"12:1085:14486":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:5488:2729":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:2865:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8181:2585":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"21:6044:1703":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"16:4441:15147":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:45253:2887":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"16:3457:14600":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:11636:8058":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"21:6630:1711":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"1:1083:2421":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:10708:15686":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:2830:21341":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"21:8713:2105":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"1:8772:2734":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:39654:2160":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:2687:2368":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"21:13767:2219":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"6:6791:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"5:3656:2440":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"18:531:19707":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:39146:8165":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:1575:2409":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:10058:8026":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"17:9691:15755":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:9475:15733":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"2:43512:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:11166:2739":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"12:2069:2419":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"14:160:14496":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"9:586:14356":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:6704:15542":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"2:43337:8524":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"2:10131:8020":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:11436:18836":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:11199:20235":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"21:402:24614":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"17:10466:15884":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:2454:2628":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"24:169:2060":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"2:22354:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"21:13689:2405":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"17:1021:15719":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:7597:2366":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"21:15009:2123":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"1:7271:27445":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:11863:1378":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:20703:2822":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:39584:2154":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:43381:2813":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"9:800:14422":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4520:12553":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"2:39401:2513":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:10296:15849":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"18:564:19709":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"12:2205:2403":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:43325:8528":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:9978:34588":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"21:9118:2116":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:2745:7958":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:481:9144":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:11315:8536":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"2:42556:8041":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:10360:15846":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"2:42790:8051":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:9422:15709":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6781:15545":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:48504:2896":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"21:6775:2063":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"2:38958:8122":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:11951:18864":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"5:7180:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:5938:13257":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11828:2392":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:43305:8521":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"5:5835:2547":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"18:599:34345":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:6880:21473":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:7452:12751":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:12208:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"5:2075:30998":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"17:10403:15688":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"27:181:19779":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"1:3446:2294":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"2:39865:8327":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:6330:15529":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"1:11877:1474":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"27:369:2766":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"1:10863:2735":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:39391:2514":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"12:1044:14485":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"14:202:8075":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:8981:15672":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"21:6823:2072":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"17:10374:15848":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"21:10823:2160":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"2:4768:785":{"crate_id":2,"path":["core","iter"],"kind":"module"},"18:755:19702":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"5:262:32044":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:929:2412":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:7136:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"17:12008:18867":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:10634:34588":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"6:1541:10059":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:2761:2809":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"16:5761:15503":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:39278:8163":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:2557:14578":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:40906:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:8339:15660":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:10520:15888":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"6:1571:10062":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"6:6743:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:9250:15701":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:2971:7962":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"5:3117:32130":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:42313:30486":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:11734:18850":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:40733:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"21:15001:34465":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"6:6488:9195":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"21:12659:33631":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"1:2358:2523":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"21:12413:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"1:7518:24606":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:48939:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:4408:12541":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:44775:2862":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"21:10750:2158":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"1:3121:24261":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:1731:10077":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:40484:28482":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:7890:15580":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:4749:15239":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:6608:8342":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"16:2465:14574":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:6468:2759":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:6175:2218":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:4429:12544":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"1:5056:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"16:6270:15525":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:10214:8022":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"6:5967:32949":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"30:699:8179":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:7195:14052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:2344:2519":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"17:10854:15692":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"27:154:2772":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:8188:2697":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:41588:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:39257:8045":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"12:60:33148":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:4236:8130":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:3125:15800":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:7435:15566":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"12:320:33153":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"21:14347:2279":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:43086:8069":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:4069:2547":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"31:120:1753":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"12:393:33149":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:8186:2699":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"2:46584:7934":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"12:1534:14489":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:10921:15892":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"16:5949:15508":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:2248:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:9362:15674":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"6:7201:14053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:11617:18844":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:4862:12588":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:9056:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"1:11839:20944":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:10476:15885":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"21:927:2107":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"21:14584:34588":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"2:6702:8325":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:11103:8483":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"16:6593:15537":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"21:9507:2143":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"17:13203:19641":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:82:2019":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"21:8200:2083":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"17:9061:15674":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"21:11227:2155":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"24:12:19718":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"21:13957:217":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"17:8951:34315":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"18:766:19695":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:11315:18351":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"18:515:19706":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:5752:13244":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"2:39328:29093":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"12:697:2412":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13404:19653":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"21:13014:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"21:12826:2193":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"1:11870:732":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"21:11349:2169":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"16:7872:15579":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"17:10774:15689":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"12:834:2415":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:8796:15669":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"16:6668:33603":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"17:10894:15694":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:5682:2753":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"21:331:2358":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"1:11881:1110":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:11160:21035":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:3389:2230":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:3599:14617":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:42894:2383":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:2682:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:3205:7960":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:7684:2481":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:21763:2603":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:11405:2597":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"6:1520:10056":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:39594:8343":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:8740:2732":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"5:6107:32061":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"2:44518:2850":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:5878:13251":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"6:4218:12522":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:9938:2558":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:2339:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"30:546:19704":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1514:10055":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:9631:15728":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"12:777:14483":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"6:7173:9104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"20:0:1683":{"crate_id":20,"path":["futures_core"],"kind":"module"},"17:11014:18331":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13059:19626":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:7580:2628":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:3263:14598":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"16:6567:15536":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"6:4597:12559":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:11070:18334":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:6655:29777":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:40826:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:7481:12755":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"16:2341:14569":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:11873:18860":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:4476:2109":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"18:614:34334":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:10645:20973":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:7469:15567":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:8139:2084":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"16:2705:14584":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"5:768:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"21:9369:34588":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"1:11070:20287":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"18:96:19679":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:9809:2147":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"6:4877:12590":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"17:9681:15782":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:12955:19617":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:2494:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"9:19:14358":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:12425:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:21742:29480":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"27:72:19790":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"21:10588:34588":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"12:2190:33169":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:40801:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"24:9:19719":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"16:4297:15123":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:45443:2863":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"21:10563:2153":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"0:56:1054":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"21:12309:2183":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"21:13823:2221":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"1:9064:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:6719:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:424:1686":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"21:9689:2063":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"21:9853:34588":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"1:5751:2762":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:13518:19660":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"27:0:1715":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"1:6071:2899":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"25:0:1693":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"17:12797:19606":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"31:65:1747":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"2:22057:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:43520:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:12349:18890":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"18:719:19693":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"16:4413:15143":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:5675:2752":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:5125:19732":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"21:6941:2066":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"16:4545:15203":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"1:558:2361":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"16:5596:15498":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"21:14715:33099":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"1:3971:2618":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:39131:2383":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:3640:2406":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:11300:18350":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:2333:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"5:4751:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:43113:8070":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"21:12619:34554":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"21:6417:34579":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"1:10680:2536":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"16:7059:2695":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"14:0:1886":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:860:2405":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:8393:15662":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"21:10159:34588":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"1:7944:25171":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1030:32169":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"21:4371:2203":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"6:6053:13289":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"21:14432:2139":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"17:9700:15754":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11748:18851":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:4847:2547":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"8:0:1881":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"18:636:34338":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12211:18881":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"1:6471:2760":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"1:8848:2772":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:39264:8161":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"2:43593:7951":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"20:143:19717":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"2:2788:8371":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:39619:2157":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"6:525:9149":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"6:5902:13253":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"21:10474:2154":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:22189:2369":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:13492:19658":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:46699:7939":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:10845:21042":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:5559:2767":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"21:14828:2288":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:11278:8534":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:13834:2222":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"21:7852:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11880:1528":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"17:9458:15747":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"30:816:19700":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:11909:18862":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:9371:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"29:25:1700":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:2679:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:11857:411":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:46622:7936":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"5:7087:2404":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:9213:2120":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"21:11745:2078":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"14:165:14497":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"30:872:19702":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"6:1687:10072":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"1:4562:21019":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"9:505:14468":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"21:12280:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"1:11247:20957":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:2683:14583":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:44429:2873":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:45553:2852":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"9:956:14287":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:11559:18840":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:44629:2882":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"11:0:1884":{"crate_id":11,"path":["adler"],"kind":"module"},"21:8782:2106":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"21:10653:2151":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"5:6221:32044":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"12:1029:2420":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"21:11300:2168":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"16:5374:15486":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:7793:2535":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"21:11127:2165":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"2:39158:29160":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"12:810:2410":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:5951:13259":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:9382:15716":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"14:215:14505":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"16:6903:15548":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:41673:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"17:12874:19610":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5910:13254":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:3010:14595":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:6843:34588":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:39603:2155":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"21:5860:1694":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"21:14970:2299":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"18:481:19704":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:40725:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:7469:15653":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:46447:2891":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"30:638:19703":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"18:690:19699":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"16:4721:15235":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"16:5541:15496":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:42402:8010":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"5:1046:31003":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:6764:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"28:51:2218":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"30:665:140":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"6:4994:12602":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"16:7372:33361":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"21:2568:34473":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"2:11585:8031":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:12890:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"17:12850:19608":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"1:9383:21253":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"6:4396:12539":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:41725:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:7277:8097":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:2342:2518":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"1:10833:2728":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:38768:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:534:2359":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"21:13087:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"1:10655:2532":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"21:11326:34588":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"2:2800:8374":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:2657:14582":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"2:39571:8339":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:11500:18838":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"5:7205:8077":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"21:9660:34588":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"17:9577:15736":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:247:34313":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:4483:12550":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:3716:14662":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:8441:15664":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"12:1120:14487":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"21:12374:2179":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"2:42484:8016":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"21:6906:34588":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:6619:15538":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2859:8385":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:3566:14608":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"16:2749:14586":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:5010:25153":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:7497:15569":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"21:10065:2167":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"2:39481:2142":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:11882:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:40398:152":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"21:9493:34588":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"16:7543:15571":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:1716:2638":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:11504:14522":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:30141:29133":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:3049:2577":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"16:7637:15575":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"21:8834:34588":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:11862:1348":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:7480:21474":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:12730:19600":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:1564:2194":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:920:2410":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:8903:2755":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:7788:2534":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:5737:15502":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"16:2367:14570":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"21:7126:2065":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"5:7022:2406":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"19:0:1017":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:1800:2443":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"16:7909:15581":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10075:15796":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:7309:15558":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:2792:2810":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:8871:15670":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:9885:15835":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"2:42364:8008":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"21:8496:34588":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"16:7211:15551":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:10732:8014":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:10020:8012":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6171:15519":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"1:8746:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:4968:2750":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11199:18343":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:39921:8332":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"21:9594:34588":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:44499:29443":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:4888:15282":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:13214:19642":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"16:4327:15129":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:10394:15882":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"18:574:2167":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"21:5081:1713":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"6:4422:12543":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:10000:2167":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"16:5510:15494":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:2919:2024":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:5614:33531":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"18:624:34342":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:4549:12555":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:4805:12583":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:3197:2575":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:46532:7930":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"21:14313:34588":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"21:10604:2150":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"2:20744:2823":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:9527:29279":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:10445:15691":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:38690:7963":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:40665:2406":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"6:1527:10057":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:9060:7968":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:6059:33633":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:119:8829":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"21:13898:2223":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"2:38878:2397":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"6:4313:12530":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"28:33:2406":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"21:13410:2097":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"1:734:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:10875:15693":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:104:696":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"21:10683:34588":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:12116:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:962:2417":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:2766:2811":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"30:0:1890":{"crate_id":30,"path":["memchr"],"kind":"module"},"6:6496:9994":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"21:4220:34467":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"6:4346:12533":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:5896:2766":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"21:14878:2293":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"2:2864:8386":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:13374:19650":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3713:2409":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"21:9430:109":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"1:6743:2814":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"20:32:1684":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:20428:29995":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:40946:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:9805:15831":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:7525:2435":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:39472:8338":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:6541:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:6851:2197":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"6:1589:10064":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:8752:2557":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"5:6373:32044":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:31738:8351":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:41932:28545":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:21106:2824":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:2475:2277":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:39358:2500":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"typedef"},"5:1066:32167":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"5:7001:30656":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:10547:34588":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:8692:34588":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:9170:34588":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"6:5805:13247":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:5728:13242":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:46485:2856":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"5:3732:32044":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"21:5040:1696":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"6:4649:12563":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:10262:34588":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:40589:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"6:4451:12546":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"16:3854:14776":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"21:11156:34588":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"17:12748:19602":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"24:0:1782":{"crate_id":24,"path":["futures_task"],"kind":"module"},"2:42530:8047":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:2732:2233":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"5:3515:2194":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:40657:2405":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"16:2579:14579":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:41186:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"16:5628:15499":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:8274:2682":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:8103:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"30:681:19709":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:11205:34588":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"24:309:19731":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:4358:8138":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"5:2177:30997":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:39888:8329":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:48861:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:10237:2065":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"6:4662:12565":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"14:7:14496":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:41355:7969":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:6316:15528":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4402:12540":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:5698:13239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"21:11624:2172":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"16:7319:15559":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"6:5741:13243":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"21:11437:34542":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"17:9350:15710":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10506:15853":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"25:9:1694":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"17:12926:19614":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"2:21659:29149":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:7434:12748":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:679:2389":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:21713:29037":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:42572:2557":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"21:6631:1708":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"6:4900:12593":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:1559:10061":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"5:1442:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:5418:8100":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:9115:21030":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","fast","DtorState"],"kind":"enum"},"16:2605:14580":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"16:7929:15582":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"21:8992:2114":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"5:1451:2439":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"24:296:35973":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"16:534:33606":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"12:1840:2218":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:13404:189":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"1:4671:2632":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:7567:15573":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:9671:15748":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:1600:32044":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"21:2555:34457":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"5:868:2194":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:39533:2064":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:3977:30497":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11813:18856":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:10108:15793":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:4743:12575":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:5545:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:14396:2280":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:11853:18859":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:11528:15840":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"16:6146:15517":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:8164:2286":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"1:925:2411":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"21:10180:2064":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"5:6993:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:9068:7975":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"21:14707:2221":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"21:8457:34588":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"30:648:19707":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:9722:15780":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:9274:15703":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10283:15850":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"21:7895:2079":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"26:43:36044":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"17:11893:18861":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"21:12244:2087":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"2:31689:2736":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"1:11867:632":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:12060:18871":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:6628:1709":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"1:8101:2229":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:8479:2715":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"21:8225:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11860:1035":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:39271:8162":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"1:3913:2614":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"21:14954:2297":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:14771:2286":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"16:6865:33341":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:10497:15887":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"10:0:1883":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:242:34307":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:1927:2494":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"16:6690:15541":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6611:9998":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"16:4385:15139":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"21:6199:163":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"15:214:14518":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"21:8611:2103":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"18:113:19680":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:20409:29956":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"21:14671:2283":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"5:6971:30979":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"9:827:14390":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:3644:2283":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:487:15652":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:45283:2890":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"21:8262:2085":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"21:14463:34588":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"1:7700:2482":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:1645:10068":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"5:6946:2430":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"5:851:2429":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7825:15577":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"21:8757:34588":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:10913:34588":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"21:11375:34588":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"2:20697:2820":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:41893:28537":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"9:188:14330":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:2930:2234":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"18:0:1890":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:3371:2287":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:13091:19629":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"17:8212:15656":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"21:12534:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"17:8475:15635":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:9501:15717":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"9:622:14308":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:4828:12585":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"21:13283:2187":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"17:12756:19603":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:7828:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:45489:2867":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:4092:2644":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:2835:8380":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"21:6961:34588":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:3932:2547":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"5:2893:7953":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"21:0:1685":{"crate_id":21,"path":["futures_util"],"kind":"module"},"21:10728:34588":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:7252:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5917:13255":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:13382:19651":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:8368:15661":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:3112:2425":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"16:5703:15501":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:933:2413":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"21:6290:164":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"16:2300:14567":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"2:8613:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:48913:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:13413:19654":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:7566:29195":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"5:277:2240":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"17:12816:19590":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"18:660:19696":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:2588:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:1894:7964":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:20578:2827":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"12:985:2418":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"17:9488:15732":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:4139:2194":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:1580:2424":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:4787:12581":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"17:13327:19646":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:11106:18336":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:48900:243":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7869:2283":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:9323:8186":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"21:13698:19722":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"2:43502:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:4416:12542":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:39510:2145":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:46523:7929":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:42690:8023":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:1771:15735":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:5660:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:7558:34604":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"5:5762:8749":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:20447:29997":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"21:6313:19736":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:6991:2068":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"6:6548:2682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:7469:12753":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"2:46512:7928":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:9978:2472":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"2:11579:8032":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"21:14108:2226":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"1:3603:2592":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"12:853:2416":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:4742:29349":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:5433:15489":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"1:6538:2765":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"2:3242:7961":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"5:1392:2407":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:4566:21023":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"6:1677:10071":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:1899:10217":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:43393:8543":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11828:18857":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:1824:2472":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:6757:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:5374:2727":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"21:13449:2108":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"1:4667:2627":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11087:18335":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"12:1555:14490":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:5945:13258":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"1:1051:2418":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:21697:29090":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:10385:15881":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"21:8639:34588":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:1788:2462":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"21:8871:2109":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"2:39542:2065":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"18:590:29474":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:13368:2198":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"16:6735:15543":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13580:19665":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:46503:7927":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"21:13391:34588":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"21:327:2076":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"21:8399:189":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"5:6692:32051":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"17:10088:15797":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"2:42992:8065":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:9328:8187":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"31:102:1752":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"21:7920:34588":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:41940:28507":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"30:726:34351":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"1:8218:2589":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"1:1786:2461":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:10353:24612":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:46569:7933":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:11868:633":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:1509:10054":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"16:7942:15583":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:4583:12558":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"21:11994:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:9947:15837":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"5:4268:32066":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"6:5716:13240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:42869:8036":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"21:7822:2087":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"21:14994:2358":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"30:853:19694":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:30035:29079":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"16:3632:14626":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:5388:15487":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:5574:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:6684:2064":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"15:193:14514":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:7428:12747":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"21:13344:2195":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"26:53:36045":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"2:45129:2894":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:123:8830":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"18:538:19708":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"5:2395:30995":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:43038:8068":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:13734:2405":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"21:10090:34588":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:11271:18348":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"21:6079:1702":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"21:14699:2284":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:45049:29464":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10670:15684":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:8917:25177":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"6:5690:13238":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4781:12580":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:44583:2817":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:8786:2735":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:21263:2815":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"21:9199:2118":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"2:20828:2819":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"2:40674:2695":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:41026:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:7280:2073":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"17:9165:34303":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"17:10490:15886":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:30516:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"21:338:2077":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"17:10233:15877":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:9069:2775":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:11536:15838":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:3151:32134":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:20823:2628":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"27:497:19792":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:6911:2132":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:7030:26803":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"1:9048:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:1726:29478":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:8970:25170":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"5:1201:2420":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:42636:8054":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:22387:2605":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"12:659:2406":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:589:1687":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:638:2386":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:8941:15671":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:4687:12568":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:2228:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"17:11974:18865":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"21:12558:2190":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"21:5120:19733":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:11338:8533":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2207:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:38792:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:10699:8013":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:3138:2426":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:8295:15659":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:2993:2453":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:4316:2642":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:11565:8034":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"21:11510:35462":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"1:7677:2423":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"2:20856:2823":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:11594:18842":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:39297:8158":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:4237:12524":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:43321:8530":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:44274:2872":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:11089:2775":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:6524:2764":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"16:7956:15584":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"18:652:2167":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"5:1302:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"21:12443:2180":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"9:649:14309":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:6355:2198":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:40438:2587":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"21:13118:2188":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:8997:20403":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"28:46:2405":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"17:8055:15636":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:7603:15574":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"21:6427:34553":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"21:8470:2097":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"17:12980:19620":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:2830:8378":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:967:15715":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:11858:1491":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:11800:18855":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:8272:15658":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"28:0:2028":{"crate_id":28,"path":["slab"],"kind":"module"},"16:5203:14534":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"21:14904:2296":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:3087:2454":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"30:97:19679":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:11259:18347":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:46607:7935":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:4979:25153":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:10455:15875":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"21:12951:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"2:42885:8045":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"5:3979:2405":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:39174:8164":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:5697:30383":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"17:10608:15681":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"21:14160:34588":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"7:0:1518":{"crate_id":7,"path":["unwind"],"kind":"module"},"21:7053:2070":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"1:3118:20734":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"27:140:19776":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"1:11263:24616":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"17:13594:19666":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:43313:8527":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"7:32:14258":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:6667:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:9831:15833":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"28:216:2418":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"30:632:19706":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:10182:15799":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:904:2218":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:46543:7931":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"21:9028:34588":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:13572:19664":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:7145:2239":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:11479:21043":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:42754:8050":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"16:6252:15524":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:2360:2524":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:9445:8495":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"16:6877:15547":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:44995:29470":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"17:8110:15634":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13039:19624":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"21:11969:2080":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"16:7357:15562":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"16:2793:14588":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"17:8666:15667":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:43605:7949":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"6:4871:12589":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"21:12044:2066":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"2:44380:2885":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:2675:2232":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"21:10123:2148":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"2:38944:30111":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"21:13478:34588":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"1:11871:733":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:6123:15515":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:9930:15812":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"27:146:203":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"17:9223:15700":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"6:5823:13249":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"6:4882:12591":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"21:7206:34588":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:11108:34588":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"12:725:2407":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"12:353:33155":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"12:387:33162":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"27:366:203":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"6:7487:12756":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"16:3402:14599":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:11685:2175":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"21:10312:2067":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"1:11511:14522":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:8631:15666":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:10172:8023":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:14819:2287":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"16:6017:15510":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:2796:2812":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:11661:18846":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:6940:2406":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"16:4357:15135":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"21:7151:34588":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:46239:2868":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11217:18344":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11861:309":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:29977:29143":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:567:9155":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13279:19645":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:12337:15691":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:39668:2162":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:8144:2160":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:44184:29437":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:10222:21347":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:12674:19598":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"21:13045:2185":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"17:11125:18337":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:9283:15720":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"26:0:2027":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"2:43333:8523":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:43317:8526":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4714:12571":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:11343:18353":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"21:23:2036":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:38812:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"21:12479:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"2:21749:2604":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:2900:31031":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:39633:2158":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"17:8241:15657":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"21:10206:34588":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"30:798:19698":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:8596:15665":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:38910:8389":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:25596:2600":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:46161:2884":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"21:13353:2196":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"17:11485:18837":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"12:646:2405":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12225:18882":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"21:11838:34588":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:4725:2633":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:6282:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"21:11565:34588":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}