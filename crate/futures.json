{"root":"0:0:1761","crate_version":"0.3.24","includes_private":false,"index":{"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:127:1670","glob":false}},"1:6649:4206":{"id":"1:6649:4206","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6650:57688"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8634:4844":{"id":"2:8634:4844","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8636:3092"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9143:4217":{"id":"1:9143:4217","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9144:54387","1:9145:54388","1:9146:54389","1:9147:54390","1:9148:54391","1:9149:37699","1:9150:54386"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"29:47:1680":{"id":"29:47:1680","crate_id":29,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:48:54020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:49:1678":{"id":"29:49:1678","crate_id":29,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:50:53977","29:51:53978"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13740:30208":{"id":"2:13740:30208","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50083:5025","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13723:55579":{"id":"2:13723:55579","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47810:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3656:2814":{"id":"2:3656:2814","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3658:242","2:3659:208","2:3660:60673"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:9751:1684","glob":false}},"2:3589:117":{"id":"2:3589:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3590:226","2:3591:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13731:55601":{"id":"2:13731:55601","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:15889:1894"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5575:4184":{"id":"1:5575:4184","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:54576"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23240:4220":{"id":"2:23240:4220","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23230:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:115:1726","glob":false}},"2:13714:61122":{"id":"2:13714:61122","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:15889:1894"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3374:222":{"id":"2:3374:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13364:4631":{"id":"2:13364:4631","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23177:4697":{"id":"2:23177:4697","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23178:4695","2:23179:1261","2:23180:1286"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13737:30213":{"id":"2:13737:30213","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:15889:1894"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50074:5024","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:8042:1392","glob":false}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:44:1664","glob":false}},"2:8876:158":{"id":"2:8876:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8877:2777","2:8878:928","2:8879:3061","2:8882:3062","2:8883:500","2:8885:3063","2:8888:3064","2:8889:3065","2:8890:3066","2:8891:2303","2:8893:2551","2:8895:3067","2:8896:3068","2:8898:847","2:8901:2544","2:8908:2530","2:8910:2531","2:8913:2529","2:8914:2552","2:8915:2541","2:8917:2542","2:8919:3069","2:8922:1322","2:8923:2319","2:8924:2540","2:8928:2538","2:8931:2536","2:8932:2546","2:8933:2556","2:8935:2547","2:8936:2291","2:8938:3070","2:8941:3071","2:8943:3072","2:8953:3073","2:8968:3074","2:8970:3075","2:8974:3076","2:8983:2535","2:8986:3077","2:8988:3078","2:8991:282","2:8998:300","2:9005:3079","2:9012:3080","2:9021:3081","2:9031:1021","2:9038:3082","2:9045:2235","2:9046:3083","2:9047:3084","2:9059:3085","2:9066:3086","2:9078:3087","2:9085:3088","2:9086:2533","2:9091:3089","2:9094:3090","2:9097:2534","2:9098:3091","2:9100:3092","2:9102:3093","2:9104:421","2:9107:3094","2:9110:1004","2:9113:3095","2:9116:608","2:9119:3096","2:9122:913","2:9124:832","2:9126:797","2:9128:716","2:9130:700","2:9132:3097","2:9133:3098","2:9141:3099"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:96:1669":{"id":"20:96:1669","crate_id":20,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:97:2777","20:98:3104","20:99:3062"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:7282:1675","glob":false}},"2:14059:139":{"id":"2:14059:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14060:183","2:14061:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2919:185":{"id":"2:2919:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2921:608","2:2922:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10515:2347":{"id":"2:10515:2347","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10516:1550","2:10517:55084","2:10519:3903"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10565:110":{"id":"2:10565:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10566:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6745:4191":{"id":"1:6745:4191","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6746:55518"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13273:4310":{"id":"2:13273:4310","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13274:127","2:13275:57699"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13794:61132":{"id":"2:13794:61132","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13334:4627","prim@char":"1:15883:1889","`DoubleEndedIterator`":"2:8719:121","str::match_indices":"1:15889:1894"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49959:5018","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8684:2286":{"id":"2:8684:2286","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8686:37697","2:8688:6263","2:8689:55292"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:42:1020","glob":false}},"2:3465:3581":{"id":"2:3465:3581","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3467:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:42:1681","glob":false}},"2:3376:107":{"id":"2:3376:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13738:2309":{"id":"2:13738:2309","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50045:2335","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23437:4735":{"id":"2:23437:4735","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24074:4696","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23428:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3434:3575":{"id":"2:3434:3575","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:183","2:3437:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13735:2356":{"id":"2:13735:2356","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49777:2965","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:18:3026":{"id":"24:18:3026","crate_id":24,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:19:4171","24:20:4172"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7602:4350":{"id":"1:7602:4350","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7603:54828"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6186:54831":{"id":"5:6186:54831","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:15889:1894"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3378:224":{"id":"2:3378:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6168:61780":{"id":"5:6168:61780","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13712:61121":{"id":"2:13712:61121","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1354","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:61779","5:6165:2968","5:6168:61780","5:6171:61781","5:6183:61782","5:6184:61783","5:6185:2138","5:6186:54831","5:6187:54832"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:14074:151":{"id":"2:14074:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14075:183","2:14076:151","2:14077:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3602:2004":{"id":"2:3602:2004","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3603:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3589:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13814:55620":{"id":"2:13814:55620","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:15883:1889","self::pattern":"2:13334:4627"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13754:6029":{"id":"2:13754:6029","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13334:4627","prim@char":"1:15883:1889","`None`":"2:47810:178"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13767:61126":{"id":"2:13767:61126","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"1:15889:1894","`DoubleEndedIterator`":"2:8719:121","self::pattern":"2:13334:4627","prim@char":"1:15883:1889","str::rsplit_terminator":"1:15889:1894"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49841:5013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13744:55618":{"id":"2:13744:55618","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:15883:1889","self::pattern":"2:13334:4627"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3520:3592":{"id":"2:3520:3592","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3522:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:47:1680","glob":false}},"1:6841:4241":{"id":"1:6841:4241","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6842:55117","1:6843:55118"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13829:54833":{"id":"2:13829:54833","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13750:3079":{"id":"2:13750:3079","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47810:178","self::pattern":"2:13334:4627","prim@char":"1:15883:1889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13835:61144":{"id":"2:13835:61144","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:15883:1889"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50108:5027","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13782:61129":{"id":"2:13782:61129","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13828:5191":{"id":"2:13828:5191","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6165:2968":{"id":"5:6165:2968","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10576:4594":{"id":"2:10576:4594","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10584:4597":{"id":"2:10584:4597","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4467:2347":{"id":"1:4467:2347","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:1977","1:4469:2321","1:4471:3901","1:4472:2252","1:4473:2322","1:4474:3902","1:4475:3903","1:4484:2547"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13719:310":{"id":"2:13719:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:15889:1894","`u8`":"1:15900:1903"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:687:1666","glob":false}},"2:8719:121":{"id":"2:8719:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8720:54406","2:8721:54407","2:8722:54408","2:8723:54409","2:8727:54410","2:8730:6029"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:10422:1688","glob":false}},"1:5563:4176":{"id":"1:5563:4176","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564:55244"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2886:105":{"id":"2:2886:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2887:414","2:2888:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3477:3582":{"id":"2:3477:3582","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3479:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3366:215":{"id":"2:3366:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4898:4784":{"id":"2:4898:4784","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4899:2777","2:4900:3104","2:4901:3062"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13803:61136":{"id":"2:13803:61136","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5906:2149":{"id":"5:5906:2149","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"21:9756:1682":{"id":"21:9756:1682","crate_id":21,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9757:2307","21:9758:4052","21:9759:2316","21:9761:2313","21:9763:2309"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"29:49:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:5910:2093":{"id":"5:5910:2093","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:1689"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:9795:1696","glob":false}},"24:258:2053":{"id":"24:258:2053","crate_id":24,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["24:261:57835","24:262:583"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:7997:1676","glob":false}},"2:13773:55613":{"id":"2:13773:55613","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:13334:4627","str::rsplitn":"1:15889:1894","prim@char":"1:15883:1889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49895:4988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:9721:1683","glob":false}},"1:5567:4182":{"id":"1:5567:4182","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5568:55132"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13820:61141":{"id":"2:13820:61141","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:15883:1889","self::pattern":"2:13334:4627"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23104:4815":{"id":"2:23104:4815","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23105:4695","2:23106:59459","2:23107:1239","2:23108:1240","2:23109:41147","2:23110:59503","2:23111:59504","2:23112:59505","2:23113:59506","2:23114:59507","2:23115:59460","2:23116:59461","2:23117:59462","2:23118:59463","2:23119:59464","2:23120:59465","2:23121:59466"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:687:1666","glob":false}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:2156:1668","glob":false}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1694","glob":false}},"2:3508:3590":{"id":"2:3508:3590","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3510:183","2:3511:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5497:4177":{"id":"1:5497:4177","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5498:57643","1:5499:57645","1:5500:57644","1:5501:57646"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:9738:1685","glob":false}},"2:8671:137":{"id":"2:8671:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8673:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3173:150":{"id":"2:3173:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3175:57899"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6219:4202":{"id":"1:6219:4202","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6220:4497","1:6221:4498","1:6222:54804","1:6223:54916","1:6225:54920","1:6227:54917","1:6228:54918","1:6230:54919"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3179:233":{"id":"2:3179:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3181:128","2:3182:1432"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13811:12735":{"id":"2:13811:12735","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13334:4627","prim@char":"1:15883:1889"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:7997:1676":{"id":"21:7997:1676","crate_id":21,"name":"SinkExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:7999:2257","21:8004:2258","21:8008:2935","21:8011:2936","21:8013:2259","21:8014:2248","21:8015:2250","21:8017:2252","21:8018:2255","21:8019:2251","21:8020:2256","21:8023:2937","21:8025:2938","21:8027:2939","21:8028:2940","21:8029:2941","21:8030:2942"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sink","id":"25:17:1674","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3170:74":{"id":"2:3170:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3172:59164"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"21:988:1667":{"id":"21:988:1667","crate_id":21,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:989:2707","21:991:2708","21:994:2709","21:998:2254","21:1001:2253","21:1003:2710","21:1005:298","21:1008:2711","21:1011:2712","21:1013:2713","21:1015:2404","21:1016:2714","21:1017:2715","21:1019:772","21:1020:2716"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryFuture","id":"20:44:1664","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:10420:1692","glob":false}},"2:3469:3585":{"id":"2:3469:3585","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3471:1370"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6241:4199":{"id":"1:6241:4199","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6242:57831","1:6243:38259","1:6244:57832","1:6245:57833","1:6246:57834","1:6247:57835"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3837:3603":{"id":"2:3837:3603","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3839:58538"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14542:4294":{"id":"2:14542:4294","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14543:55159","2:14544:55160","2:14545:55161","2:14546:55162","2:14547:55163","2:14548:55164","2:14549:2547"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:44:1664","glob":false}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:4468:1671","glob":false}},"2:3528:3594":{"id":"2:3528:3594","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3530:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4097:68":{"id":"2:4097:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4098:1444"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"1:5431:4210":{"id":"1:5431:4210","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5432:6001","1:5433:54361"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8199:4786":{"id":"2:8199:4786","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8200:59192","2:8201:59193","2:8202:2555","2:8203:59187","2:8204:59194","2:8205:59191","2:8206:59190"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2886:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10582:191":{"id":"2:10582:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:116:1570":{"id":"0:116:1570","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`LocalPool`":"31:190:1732","`block_on`":"31:115:1726"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:118","0:121","0:124","0:127","0:130","0:133","0:136","0:139"],"is_stripped":false}},"2:3473:3583":{"id":"2:3473:3583","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3475:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:7997:1676","glob":false}},"2:13797:61133":{"id":"2:13797:61133","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13776:55615":{"id":"2:13776:55615","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13334:4627","prim@char":"1:15883:1889","str::splitn":"1:15889:1894"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49913:4989","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13733:5044":{"id":"2:13733:5044","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15883:1889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49761:5008","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:195:1733","glob":false}},"2:3486:3589":{"id":"2:3486:3589","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3487:183","2:3488:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1678","glob":false}},"2:3503:3588":{"id":"2:3503:3588","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:183","2:3506:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:4468:1671","glob":false}},"2:3831:138":{"id":"2:3831:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3833:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3826:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2924:125":{"id":"2:2924:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:9721:1683","glob":false}},"20:110:1999":{"id":"20:110:1999","crate_id":20,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:111:2247"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"29:42:1681":{"id":"29:42:1681","crate_id":29,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:43:54028","29:44:54029","29:45:52892","29:46:52893"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3167:75":{"id":"2:3167:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3169:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:164:1730","glob":false}},"2:3481:3584":{"id":"2:3481:3584","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3483:1112"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2955:179":{"id":"2:2955:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2956:421","2:2957:2235","2:2958:3083","2:2959:55214"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2924:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2965:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:5885:1672","glob":false}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:8154:1697","glob":false}},"2:13805:61138":{"id":"2:13805:61138","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15883:1889","self::pattern":"2:13334:4627"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13364:4631","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23051:4692":{"id":"2:23051:4692","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23052:4695","2:23053:59459","2:23054:59690","2:23055:59691","2:23056:59692","2:23057:41147","2:23058:59694","2:23059:59695","2:23060:59696","2:23061:59697","2:23062:59698","2:23063:59699","2:23064:59700","2:23065:59701","2:23066:59702","2:23067:59703","2:23068:59507","2:23069:59704","2:23070:59705","2:23071:59706","2:23072:59707","2:23073:59460","2:23074:59461","2:23075:59462","2:23076:59463"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13721:55578":{"id":"2:13721:55578","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47810:178"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6184:61783":{"id":"5:6184:61783","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8472:220","`Box<str>`":"5:444:2287"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2287","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:5202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3439:3580":{"id":"2:3439:3580","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:183","2:3442:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9159:2781":{"id":"2:9159:2781","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3274:128":{"id":"2:3274:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3275:5101","2:3277:57191","2:3278:57192","2:3279:57193"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10565:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10572:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13832:61143":{"id":"2:13832:61143","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:15883:1889"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50090:5026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13711:61120":{"id":"2:13711:61120","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:24074:4696":{"id":"2:24074:4696","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24075:4695"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24070:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3449:3576":{"id":"2:3449:3576","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3451:183","2:3452:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13739:61125":{"id":"2:13739:61125","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50055:5022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13708":{"id":"2:13708","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12787:1354","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13709:798","2:13710:55028","2:13711:61120","2:13712:61121","2:13714:61122","2:13717:54361","2:13718:61123","2:13719:310","2:13720:55582","2:13721:55578","2:13723:55579","2:13725:55580","2:13727:55581","2:13729:4277","2:13730:61124","2:13731:55601","2:13732:55602","2:13733:5044","2:13734:4656","2:13735:2356","2:13736:30223","2:13737:30213","2:13738:2309","2:13739:61125","2:13740:30208","2:13741:55617","2:13744:55618","2:13747:55619","2:13750:3079","2:13754:6029","2:13758:2318","2:13761:30090","2:13764:55611","2:13767:61126","2:13770:61127","2:13773:55613","2:13776:55615","2:13779:61128","2:13782:61129","2:13785:1974","2:13788:61130","2:13791:61131","2:13794:61132","2:13797:61133","2:13799:61134","2:13801:61135","2:13803:61136","2:13804:61137","2:13805:61138","2:13808:61139","2:13811:12735","2:13814:55620","2:13817:61140","2:13820:61141","2:13823:61142","2:13826:4873","2:13828:5191","2:13829:54833","2:13830:54834","2:13831:54835","2:13832:61143","2:13834:4246","2:13835:61144"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13741:55617":{"id":"2:13741:55617","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:15883:1889","self::pattern":"2:13334:4627"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13729:4277":{"id":"2:13729:4277","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"str::slice_mut_unchecked":"1:15889:1894","crate::ops::Index":"2:3674:3597","`str`":"1:15889:1894"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:4485:2343":{"id":"1:4485:2343","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:2317","1:4487:38111","1:4488:57567","1:4489:4090"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13761:30090":{"id":"2:13761:30090","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15883:1889","self::pattern":"2:13334:4627"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13126:4982","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8744:2285":{"id":"2:8744:2285","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8745:798","2:8746:55028"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:169:1686","glob":false}},"2:13823:61142":{"id":"2:13823:61142","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13334:4627","prim@char":"1:15883:1889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:5885:1672":{"id":"21:5885:1672","crate_id":21,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:5886:2253","21:5888:2708","21:5891:2254","21:5894:298","21:5897:2711","21:5900:2712","21:5902:2713","21:5904:2620","21:5905:3240","21:5906:3076","21:5909:3245","21:5912:3246","21:5915:3249","21:5919:3070","21:5921:3244","21:5922:3241","21:5925:3242","21:5929:2404","21:5930:3075","21:5934:3243","21:5935:3247","21:5936:3248","21:5937:3251","21:5938:3250"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryStream","id":"20:127:1670","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:11207:218":{"id":"2:11207:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11209:183","2:11210:55578","2:11211:55579","2:11212:55580","2:11213:55581","2:11214:757","2:11215:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11198:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:127:1670":{"id":"20:127:1670","crate_id":20,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:128:177","20:129:128","20:130:52971"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:122:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:14059:139","glob":false}},"2:3375:221":{"id":"2:3375:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3105:2927":{"id":"2:3105:2927","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3104:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2965:186":{"id":"2:2965:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2967:1004","2:2968:832","2:2969:797","2:2970:716","2:2971:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2919:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8675:152":{"id":"2:8675:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8676:2777","2:8677:2779","2:8678:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:17:1674","glob":false}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1678","glob":false}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:5885:1672","glob":false}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:42:1681","glob":false}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:39:1679","glob":false}},"2:3514:3591":{"id":"2:3514:3591","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:183","2:3517:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3814:3601":{"id":"2:3814:3601","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3745:3600","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6339:4248":{"id":"1:6339:4248","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6340:54541","1:6341:54542"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8638:4843":{"id":"2:8638:4843","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8640:3093"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13817:61140":{"id":"2:13817:61140","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:1889","self::pattern":"2:13334:4627"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13359:4630":{"id":"2:13359:4630","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13361:54406","2:13362:59645","2:13363:59646"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13353:4626","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:206:1729","glob":false}},"2:13710:55028":{"id":"2:13710:55028","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6183:61782":{"id":"5:6183:61782","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1411"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1031:4244":{"id":"1:1031:4244","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:5197","1:1033:5191","1:1034:54831","1:1035:54832","1:1036:54833","1:1037:54834","1:1038:54835"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:4148:4705":{"id":"2:4148:4705","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4149:57193"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23765:4698":{"id":"2:23765:4698","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23766:1284","2:23767:1283","2:23768:1281","2:23769:1280"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23177:4697","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3622:133":{"id":"2:3622:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3624:183","2:3625:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10578:4595":{"id":"2:10578:4595","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13736:30223":{"id":"2:13736:30223","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:15889:1894"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50065:5023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:118:1727","glob":false}},"2:13758:2318":{"id":"2:13758:2318","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:15889:1894","self::pattern":"2:13334:4627","prim@char":"1:15883:1889","str::rsplit":"1:15889:1894","`DoubleEndedIterator`":"2:8719:121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49791:2967","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13344:4628":{"id":"2:13344:4628","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13346:4626","2:13347:60244","2:13348:60245","2:13349:60246","2:13350:60248","2:13351:60247","2:13352:60249"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:8152:923","glob":false}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:39:1679","glob":false}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:190:1732","glob":false}},"2:13831:54835":{"id":"2:13831:54835","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:2156:1668","glob":false}},"2:13747:55619":{"id":"2:13747:55619","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13334:4627","prim@char":"1:15883:1889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13804:61137":{"id":"2:13804:61137","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:127:1670","glob":false}},"2:3619:132":{"id":"2:3619:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3621:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3622:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23770:14238":{"id":"2:23770:14238","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23771:59706","2:23772:59705","2:23773:59707"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23765:4698","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3674:3597":{"id":"2:3674:3597","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3676:183","2:3677:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3183:232":{"id":"2:3183:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3185:128","2:3186:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:97:1693","glob":false}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:14059:139","glob":false}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:988:1667","glob":false}},"2:13799:61134":{"id":"2:13799:61134","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:687:1666":{"id":"21:687:1666","crate_id":21,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:688:847","21:691:2617","21:693:2532","21:696:2618","21:698:2619","21:700:2620","21:701:2536","21:702:2621","21:703:2546","21:704:2556","21:706:2548","21:707:2622","21:708:2623","21:709:1960","21:711:2549","21:713:2624","21:714:2625","21:715:2626","21:716:2627"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14059:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5505:4178":{"id":"1:5505:4178","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5506:54576","1:5507:54703","1:5508:54704"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10586:4598":{"id":"2:10586:4598","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10587:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13785:1974":{"id":"2:13785:1974","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8719:121","self::pattern":"2:13334:4627","str::matches":"1:15889:1894","prim@char":"1:15883:1889"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49995:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13779:61128":{"id":"2:13779:61128","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47810:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6467:4180":{"id":"1:6467:4180","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6468:54234","1:6469:54235","1:6470:54236","1:6471:54237","1:6472:54238","1:6473:54239","1:6474:54240","1:6475:54241","1:6476:54242","1:6477:54243","1:6478:54244","1:6479:54245","1:6480:54246","1:6481:54247","1:6482:54248","1:6483:54249","1:6484:54250"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23389:14219":{"id":"2:23389:14219","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23390:59310","2:23391:59311","2:23392:59312"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23382:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10803:143":{"id":"2:10803:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10804:718","2:10806:54551"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10813:147":{"id":"2:10813:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10814:656","2:10815:1977","2:10816:57241","2:10817:57242","2:10818:57243","2:10819:57244","2:10820:57245","2:10821:57246","2:10822:57247","2:10823:57248","2:10824:57249","2:10825:57250","2:10826:57251","2:10827:57252","2:10828:57253","2:10829:1550"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:9738:1685","glob":false}},"24:15:3027":{"id":"24:15:3027","crate_id":24,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:16:63956","24:17:4355"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:39:1679":{"id":"29:39:1679","crate_id":29,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:40:54009","29:41:54010"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:173:1728","glob":false}},"2:13727:55581":{"id":"2:13727:55581","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3826:229":{"id":"2:3826:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3827:183","2:3828:3603","2:3829:690","2:3830:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3831:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3826:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:10421:1691","glob":false}},"21:9751:1684":{"id":"21:9751:1684","crate_id":21,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9752:2317","21:9753:4090"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncSeek","id":"29:47:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13734:4656":{"id":"2:13734:4656","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15883:1889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49767:5009","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13770:61127":{"id":"2:13770:61127","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13334:4627","str::split_terminator":"1:15889:1894","prim@char":"1:15883:1889","str::split":"1:15889:1894"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49859:5014","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1761":{"id":"0:0:1761","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::sink":"21:7282:1675","crate::stream":"21:2156:1668","crate::executor":"0:116:1570","crate::io":"21:8154:1697","crate::channel":"27:0:1694","crate::future":"21:168:697"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:116:1570","0:142:1037","0:4","0:7","0:11","0:14","0:18","0:21","0:25","0:28","0:31","0:34","0:38","0:41","0:44","0:47","0:51","0:54","0:57","0:60","0:63","0:66","0:69","0:73","0:76","0:79","0:80","0:82","0:85","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113"],"is_stripped":false}},"21:4468:1671":{"id":"21:4468:1671","crate_id":21,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:4469:928","21:4470:772","21:4471:847","21:4474:2529","21:4475:2530","21:4478:2531","21:4482:2532","21:4485:2291","21:4487:2533","21:4492:438","21:4493:500","21:4494:2534","21:4495:2535","21:4499:300","21:4502:282","21:4505:2536","21:4506:2537","21:4508:2538","21:4511:2539","21:4515:2540","21:4520:2541","21:4523:2542","21:4526:2543","21:4528:2544","21:4531:2545","21:4535:2319","21:4536:1322","21:4537:2546","21:4538:2547","21:4539:2548","21:4540:1960","21:4542:2549","21:4544:2274","21:4545:2550","21:4546:2551","21:4548:2303","21:4550:2552","21:4551:2553","21:4552:2554","21:4553:2555","21:4555:2318","21:4557:2556","21:4559:2557","21:4561:2558","21:4563:2559","21:4564:2560"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3537:3596":{"id":"2:3537:3596","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3539:1249"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3176:136":{"id":"2:3176:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3178:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3678:3598":{"id":"2:3678:3598","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3680:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3674:3597","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:9756:1682","glob":false}},"2:13801:61135":{"id":"2:13801:61135","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142:1037":{"id":"0:142:1037","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144","0:147","0:150","0:154","0:157","0:161","0:164","0:167","0:171","0:174","0:177","0:181","0:184","0:188","0:191","0:194","0:197","0:201","0:204","0:207","0:210"],"is_stripped":false}},"2:3493:3586":{"id":"2:3493:3586","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3495:183","2:3496:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2864:98":{"id":"2:2864:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2866:60738"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2861:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5425:4212":{"id":"1:5425:4212","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5426:54548","1:5427:5279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3524:3593":{"id":"2:3524:3593","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13826:4873":{"id":"2:13826:4873","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:13273:4310","`FromStr`":"2:13273:4310"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47935:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13273:4310","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13273:4310","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4752:4223":{"id":"1:4752:4223","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:2199","1:4754:55528"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:9738:1685":{"id":"21:9738:1685","crate_id":21,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9739:2252","21:9740:2248","21:9741:1977","21:9743:2321","21:9745:2322","21:9747:2308"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncWrite","id":"29:42:1681","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:12774:5184":{"id":"2:12774:5184","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12775:2777","2:12776:60666"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13764:55611":{"id":"2:13764:55611","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:13334:4627","`DoubleEndedIterator`":"2:8719:121","str::split":"1:15889:1894","prim@char":"1:15883:1889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49809:4985","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4492:2964":{"id":"1:4492:2964","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:2307","1:4494:53978","1:4495:59063","1:4497:2316","1:4498:2313","1:4500:2318","1:4501:2309"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:2336","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9535:2655":{"id":"2:9535:2655","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:14458:142":{"id":"2:14458:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14459:283","2:14460:523","2:14461:286","2:14462:1088"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:168:697","glob":false}},"5:6171:61781":{"id":"5:6171:61781","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:5197","5:846:54687","5:847:54688"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13717:54361":{"id":"2:13717:54361","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12798:5148"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:47:1680","glob":false}},"2:10848:4261":{"id":"2:10848:4261","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10849:147","2:10850:31529","2:10851:54652"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10574:4593":{"id":"2:10574:4593","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6573:4215":{"id":"1:6573:4215","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6574:54736","1:6575:55145"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5553:4181":{"id":"1:5553:4181","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5554:54368","1:5555:54369","1:5556:54370","1:5557:54371"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6645:4192":{"id":"1:6645:4192","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646:54869"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:61779":{"id":"5:6164:61779","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2287","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:5202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2287","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:5202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23140:4828":{"id":"2:23140:4828","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23141:59459","2:23142:1239","2:23143:1240","2:23144:59460","2:23145:59461","2:23146:59462","2:23147:59463","2:23148:59464","2:23149:59465","2:23150:59466"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3376:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23153:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13730:61124":{"id":"2:13730:61124","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:3678:3598","str::slice_unchecked":"1:15889:1894","`str`":"1:15889:1894"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:6647:4205":{"id":"1:6647:4205","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648:55497"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1687","glob":false}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:96:1669","glob":false}},"1:6576:4202":{"id":"1:6576:4202","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6577:54805"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:9156:2780":{"id":"2:9156:2780","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8876:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3455:3579":{"id":"2:3455:3579","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3457:183","2:3458:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13725:55580":{"id":"2:13725:55580","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11207:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:9751:1684","glob":false}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:9756:1682","glob":false}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:166:1731","glob":false}},"2:3616:131":{"id":"2:3616:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3618:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3619:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:168:697","glob":false}},"2:3407:2283":{"id":"2:3407:2283","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:9721:1683":{"id":"21:9721:1683","crate_id":21,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9722:2303","21:9724:2310","21:9726:2311","21:9728:2312","21:9730:2314","21:9732:2315","21:9734:2318","21:9735:2319"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5513:4179":{"id":"1:5513:4179","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5514:54576","1:5515:54769"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9536:4391":{"id":"2:9536:4391","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3909:3607":{"id":"2:3909:3607","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6185:2138":{"id":"5:6185:2138","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3613:2284":{"id":"2:3613:2284","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3614:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:10419:1689","glob":false}},"1:5519:4180":{"id":"1:5519:4180","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520:55243","1:5521:55244","1:5522:54576","1:5523:55245","1:5524:4497","1:5525:4498","1:5526:55246","1:5527:1318","1:5528:55247","1:5529:55248","1:5530:55249","1:5531:55250","1:5532:55251","1:5533:55252","1:5534:55253","1:5535:55254"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3872:3606":{"id":"2:3872:3606","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13834:4246":{"id":"2:13834:4246","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:15883:1889"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50099:4247","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13353:4626":{"id":"2:13353:4626","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13355:4649","2:13356:928","2:13357:60635","2:13358:60636"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3371:2282":{"id":"2:3371:2282","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:988:1667","glob":false}},"2:10572:120":{"id":"2:10572:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"25:17:1674":{"id":"25:17:1674","crate_id":25,"name":"Sink","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:19:128","25:20:14463","25:21:52891","25:22:52892","25:23:52893"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3461:3578":{"id":"2:3461:3578","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3462:183","2:3463:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:96:1669","glob":false}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:43:1020","glob":false}},"1:4410:2336":{"id":"1:4410:2336","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:2310","1:4412:2311","1:4414:55338","1:4415:2314","1:4416:2315","1:4417:2312","1:4418:54796","1:4420:55339","1:4421:2547","1:4422:2356","1:4423:2303","1:4425:2319"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:17:1674","glob":false}},"2:3745:3600":{"id":"2:3745:3600","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3747:60295","2:3748:60296","2:3749:55617"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"20:27:1998":{"id":"20:27:1998","crate_id":20,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:28:2247"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14059:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6187:54832":{"id":"5:6187:54832","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:15889:1894"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3444:3577":{"id":"2:3444:3577","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3446:183","2:3447:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13791:61131":{"id":"2:13791:61131","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"prim@char":"1:15883:1889","self::pattern":"2:13334:4627","str::rmatch_indices":"1:15889:1894","`DoubleEndedIterator`":"2:8719:121"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49941:5017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2861:97":{"id":"2:2861:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2863:1959"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3371:2282","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13709:798":{"id":"2:13709:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15883:1889"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10580:4596":{"id":"2:10580:4596","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13720:55582":{"id":"2:13720:55582","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15900:1903"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13830:54834":{"id":"2:13830:54834","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13808:61139":{"id":"2:13808:61139","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13334:4627","prim@char":"1:15883:1889"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:67:1690","glob":false}},"2:13718:61123":{"id":"2:13718:61123","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:9163:4785":{"id":"2:9163:4785","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8199:4786","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13732:55602":{"id":"2:13732:55602","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:15889:1894"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:44:1664":{"id":"20:44:1664","crate_id":20,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:45:177","20:46:128","20:47:52884"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14059:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:39:4196","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:7282:1675","glob":false}},"2:13788:61130":{"id":"2:13788:61130","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13334:4627","prim@char":"1:15883:1889","`DoubleEndedIterator`":"2:8719:121","str::matches":"1:15889:1894"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50013:5021","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13344:4628","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13359:4630","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3498:3587":{"id":"2:3498:3587","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3500:183","2:3501:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3250:116":{"id":"2:3250:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3251:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3532:3595":{"id":"2:3532:3595","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3534:1246"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}}},"paths":{"2:24541:5069":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:32594:3567":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:12840:2105":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"1:8187:4420":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"2:52457:4776":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:49701:5001":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:6120:42464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"12:2398:59310":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"1:5519:4180":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:5080:4155":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13147:51068":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:17326:2778":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:5708:9021":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"1:8295:4300":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"18:661:6044":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:3366:5856":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:46657:5173":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:1113:9018":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:14422:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:39110:2925":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12222:50443":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"5:1673:2778":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:11359:4312":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"21:10428:2054":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"1:15905:1908":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:5398:42048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"21:18580:2168":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"21:17086:2098":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:5531:5164":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"21:15199:63937":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:3537:3596":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10851:45764":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:23765:4698":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:6468:5664":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:50065:5023":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"12:399:5492":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"20:96:1669":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"2:5729:4813":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:49132:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:634:38394":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:9948:45575":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:11960:2779":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10058:6017":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:586:38387":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"2:3674:3597":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:13126:4982":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:13755:51660":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:6931:41572":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:13873:51694":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:2864:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"2:46850:10555":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:11314:5990":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:9646:63853":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"1:1447:4366":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:10814:5911":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"21:17131:2204":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"17:13565:51610":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:32448:5121":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:3933:41381":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:47918:37625":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"30:895:59394":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"18:866:6037":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"5:2619:5296":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"17:13233:51157":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:18369:2333":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"21:14614:2168":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"5:1701:4364":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:11068:5920":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:672:38423":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"17:12527:50464":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:8152:923":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"6:580:3920":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"12:1147:4376":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:13573:51611":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"2:53083:4782":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"16:6549:5602":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:11547:46269":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"21:16274:2078":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"2:3493:3586":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:10788:45760":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:8446:4501":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"2:3616:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"17:11784:46492":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:50750:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:14404:4189":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:3105:62229":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"16:5855:5648":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11354:5914":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:8902:45557":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13361:51559":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:12261:2087":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"21:15857:2074":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"21:17695:2269":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"31:166:1731":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"9:722:5357":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"6:5186:42033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:1441:4253":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"17:11890:50257":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"21:9795:1696":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"1:4146:4464":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:2861:5840":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:51949:4748":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:49895:4988":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:88:38005":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"1:11341:12336":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:46590:4247":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"6:4127:41402":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"16:7184:5889":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:10558:45789":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"5:8232:5329":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"21:16999:2202":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:46099:2783":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"21:7997:1676":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"30:0:1868":{"crate_id":30,"path":["memchr"],"kind":"module"},"1:8777:4389":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:10801:5910":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:13271:51162":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:5331:42044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"16:6931:5887":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:6467:4180":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:5036:4928":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"21:11747:2076":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"17:10198:45642":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"2:13344:4628":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"18:790:6030":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:11615:46308":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"21:10016:3795":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"0:0:1761":{"crate_id":0,"path":["futures"],"kind":"module"},"17:9396:45566":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5427:5633":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:5204:42034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:5755:784":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:9517:2965":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:24390:4875":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:9275:43939":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"21:4468:1671":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"21:11155:151":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"2:2190:33512":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"17:11797:46493":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10082:6011":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:14074:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:4110:41400":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:2767:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"17:13774:51662":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:49144:3733":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:13091:5019":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"12:2052:4254":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:10665:4190":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"16:6679:5880":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"1:14061:2979":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:1460:4369":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"16:6533:5871":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"16:7355:5586":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"6:565:38385":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:18835:2418":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"1:1405:4364":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:5154:4476":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"15:269:5512":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"5:4581:5315":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"17:2314:5967":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:14665:4347":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:22836:4701":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:8483:5203":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:681:45556":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:15890:1895":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:2265:4816":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"21:18820:2419":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:12634:50532":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"6:4061:41394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:13410:4634":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:49749:4841":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:51378:59452":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"16:7025:5577":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:5636:4544":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"2:14109:2083":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:10775:45761":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:24350:60106":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"31:195:1733":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"1:4219:2982":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:5216:4935":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"21:16371:2184":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:11810:46506":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:9958:63859":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"12:2419:4260":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:53475:4774":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"21:18658:3792":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"21:14354:2161":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"1:11250:4551":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"30:1032:6036":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"21:14019:2167":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"12:162:5490":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:9394:54320":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"30:853:143":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:13481:4311":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"1:11154:4540":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"17:1236:45645":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:9131:45563":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"21:13346:2152":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"12:1256:4377":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"2:24515:5126":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"2:8435:59281":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"2:10568:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"6:1669:39282":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"2:23177:4697":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"20:169:1686":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"12:2412:63026":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:9873:45573":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:15022:2163":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"1:14795:54353":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11713:46478":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:47017:2058":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13522:51605":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"21:16463:2198":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"16:7415:5605":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"6:5178:42032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"21:43:1020":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"2:50222:4638":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11701:46369":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"6:6665:42834":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"6:533:38382":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"21:14918:2173":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"17:13167:51112":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:5784:5647":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"9:927:43233":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"5:6340:5259":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:7093:54783":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"6:5210:42035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"17:13747:51659":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:6573:4215":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:46617:4899":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:15849:57882":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:49599:4994":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:6173:5657":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"2:5300:2693":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:17041:189":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:3524:3593":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:10496:9013":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"30:965:6030":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:11613:2077":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"16:2772:5865":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"30:914:63926":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:50729:2397":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:13938:51704":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"16:4716:44552":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:16083:2188":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"6:3972:41384":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"16:5959:5576":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:11868:4346":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"12:928:4366":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6057:39235":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:4008:45763":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"12:940:4370":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:8199:4786":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"17:13331:51229":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:12014:4302":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:3077:5902":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:47288:32934":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:13247:51159":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"30:137:52064":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:8378:2202":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:24402:4876":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:10586:45790":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"21:17437:2263":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"1:15854:9020":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:49859:5014":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"5:7935:60773":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"31:118:1727":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"21:15144:2177":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"14:56:45985":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"1:14394:54866":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"1:11894:55310":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"27:521:3727":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"16:3177:5846":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:10672:2058":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"1:1578:4374":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:10443:4419":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"12:895:5478":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"17:10610:45792":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"12:815:4368":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:52303:4781":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:47935:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:3909:3607":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"6:6229:42471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:15388:5516":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:14968:4354":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:11102:45578":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"12:1666:5498":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"12:880:4253":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"16:6490:5665":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"21:9513:2179":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"1:11501:2199":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"18:849:6035":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:24417:37391":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:6745:4191":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:48570:4594":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"16:4975:44619":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"31:0:1725":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"1:14429:4437":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:3455:3579":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"29:39:1679":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"7:38:43114":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"12:2072:4257":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"1:9512:4471":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:22849:59838":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:15170:4233":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"28:203:2692":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"2:3179:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:48834:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:15053:4273":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6518:5600":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"31:173:1728":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"17:13073:51061":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"5:8436:5277":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:16411:2197":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:24425:37409":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:8860:4510":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:4752:4223":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"2:47076:2166":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:3407:2283":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:15315:28331":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:48003:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:15906:1909":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:6557:5667":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:12106:4286":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"21:13021:2147":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"21:18548:2342":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"18:712:4701":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:11177:4541":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"17:10571:5923":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"5:3441:5210":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"12:472:63035":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:3498:3587":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:5274:42017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"30:986:6032":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"27:495:2663":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:24074:4696":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:729:63919":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:11937:45796":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"6:4287:41415":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:11591:46272":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"30:879:2175":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:46860:10554":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:8610:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11105:4307":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"12:2392:63025":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"16:5948:5838":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"21:7017:2208":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"21:14970:2174":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"21:11349:2407":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"21:10421:1691":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"2:56601:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:3434:3575":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:15889:1894":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:4332:41420":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:5497:4177":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"21:12738:2103":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"1:10719:2332":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"21:17346:2199":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"14:0:1864":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:9163:4785":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:15935:2073":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"17:13421:51590":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12431:50457":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:3376:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"5:4281:2262":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:1610:4377":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13887:51700":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:859:4400":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:14458:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"6:6097:39212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:10503:5995":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"1:11238:4225":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:5962:60765":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"1:10902:2984":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:15192:4475":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12070:50375":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"26:0:2010":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"1:1601:4376":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:1567:39273":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"16:7309:5589":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"2:5323:4609":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:23437:4735":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:15324:54910":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:3170:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"6:527:38381":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:50045:2335":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"21:11539:2069":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"21:18159:107":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"16:3461:5852":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"30:949:2175":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"21:45:2027":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"16:2754:5832":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:10416:4196":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"24:15:3027":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"17:11742:46487":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"9:1056:5416":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"18:811:6032":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:12228:6630":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:11628:46309":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"21:18679:2113":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"21:16859:2196":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"2:46723:5169":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"6:5567:42084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"21:5885:1672":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"17:10435:5944":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:52381:4769":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:53706:19747":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:14255:60435":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:49520:4987":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:18874:2421":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"18:621:63921":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:6630:5876":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:5425:4212":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"20:127:1670":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"17:10093:6012":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:18862:2415":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:10813:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"1:14886:55549":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:6482:5873":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"2:53743:19750":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:50399:5096":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:10511:9016":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:6943:41574":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:9326:5989":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:46880:4791":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:15908:1911":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:23234:4218":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:47333:32938":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"9:900:43267":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:3060:4446":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:7379:5607":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:3656:2814":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"21:13971:2055":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"21:15232:3112":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"6:593:38388":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:13495:51600":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"16:4599:44531":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10516:45690":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"16:3340:5831":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:11591:4985":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:10803:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:3872:3606":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"2:3602:2004":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"16:3221:5848":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"21:17637:2206":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"5:3402:4255":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"6:4425:41432":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:4628:44536":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:47117:2172":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:13440:51594":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"1:14630:10036":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"30:698:6041":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:11653:46311":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"18:857:6036":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:1662:39281":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"21:14257:2164":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"1:7062:54783":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7602:4350":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:13549:51608":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:10988:45846":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"13:0:1857":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:11207:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"21:67:1690":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"21:17865:2271":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"21:14265:2162":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"17:9206:45564":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"21:15301:3110":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:3465:3581":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:3378:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"17:11769:46491":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:13660:51621":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"6:4315:41418":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"16:6089:5653":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"16:5941:5651":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:1704:39285":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"6:5216:42036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"27:515:3726":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"2:4148:4705":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"18:820:6033":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:52071:4741":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:12573:50467":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"16:3051:5901":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:2279:4820":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"2:25021:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:14460:2279":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"17:8954:5921":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"6:1544:39270":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:13562:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:3843:3605":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"6:4454:41436":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"16:3494:43943":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:7200:5603":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:50522:5040":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:696:4395":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:46756:4903":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:1588:39275":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:24955:3202":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"27:502:3724":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"2:3508:3590":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:1740:39289":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:5998:38261":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"2:46189:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:53758:19751":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"21:12990:2108":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"16:4381:44457":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:9657:4628":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:1397:2779":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"21:16972:2199":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"5:5910:2093":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"2:9536:4391":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"21:18737:2114":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"12:750:2199":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"29:49:1678":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"2:10515:2347":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:50108:5027":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:595:2682":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"17:13196:51114":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"5:3554:4253":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"2:9156:2780":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:46173:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"30:904:63919":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"24:18:3026":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"1:11196:4477":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:6481:54247":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"21:15095:2176":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"18:837:4626":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"5:4665:60799":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"2:48322:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:5887:5828":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"17:9920:45574":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:46918:4793":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"30:869:6046":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:8876:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:49162:59404":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"30:1041:6037":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4362:41424":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:23104:4815":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:3528:3594":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:14862:4345":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:4198:41408":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"8:0:1859":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2361:10023":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"16:2839:5839":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:51633:4747":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:10550:10036":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:12770:50610":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"12:2066:4256":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:18850:2416":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:10127:5976":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"1:10278:54327":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"21:18507:2338":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"2:3176:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:17355:2779":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"2:4163:4711":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"15:230:5507":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"30:708:63921":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"2:24171:5051":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:13557:51609":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:1626:39279":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"21:17778:2270":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"2:51855:4775":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:12067:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:1680:39283":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"21:18624:2346":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"16:7110:5678":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:47851:2199":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"17:13539:51607":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:5240:42038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:3029:5844":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:23964:4219":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:8638:4843":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"9:749:5358":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"1:3381:54322":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"6:3883:41377":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"12:2045:4253":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"6:4392:41428":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:2284:5212":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7323:5606":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"21:11191:2078":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"16:3908:44104":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:12716:50543":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"6:4308:41417":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:2917:2315":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:4036:2983":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:49154:59417":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:1055:5328":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"6:6114:42463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"16:5348:5628":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:18489:2336":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"2:5000:4927":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"16:6130:5655":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:14779:54332":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:46596:30782":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"21:12053:2075":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"6:1621:39278":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"6:6034:12332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:18151:2261":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"17:9988:45628":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"24:21:3028":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:51603:4759":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"16:5303:5626":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:10622:45759":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"6:3960:41382":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"17:12318:50449":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:12030:3728":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:50506:5032":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"2:9537:2654":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:51424:4766":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"21:18385:4058":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:49580:2173":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:6688:42836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"18:739:63926":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:547:5823":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:4135:41403":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"16:7131:5680":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:0:1345":{"crate_id":1,"path":["std"],"kind":"module"},"1:10993:2335":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:4855:4830":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:14150:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"16:4467:44471":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"21:16552:2192":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"2:25522:4888":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:1031:4244":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:14542:4294":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"2:50208:4635":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"21:17005:2203":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"17:10115:6014":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"27:533:3728":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"1:1477:4371":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7449:5594":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:5902:5649":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:46213:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:4492:2964":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"5:3106:60879":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"16:5412:5632":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:8974:54798":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"5:1296:5291":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:49767:5009":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"9:0:1860":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:7161:4797":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:10962:45848":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"17:13515:51604":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"18:0:1868":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:6856:42995":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:3114:60973":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"21:15579:2070":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"5:5488:2956":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4373:41425":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:10211:45648":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:32628:4390":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"16:7792:5621":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10104:6013":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:7960:60770":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:6012:5583":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:3920:41380":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"1:10930:2279":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:10394:5962":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:3745:3600":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:3576:43945":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:53583:4757":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"22:7:1687":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"2:5145:4137":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"27:0:1694":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"28:41:2199":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"21:18341:2332":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"21:17493:2265":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"6:4379:41426":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"16:5530:5637":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:51903:4760":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:6719:2054":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:1311:6018":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"24:203:2052":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"1:3042:4440":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:3837:3603":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"5:7551:60767":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:10228:54822":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:11494:46201":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"2:47097:2168":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"21:12504:2095":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"6:5982:39208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"2:3461:3578":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"30:929:63910":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:13394:10034":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"1:11836:4343":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:23140:4828":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"21:15193:63945":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"21:15451:2181":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:10223:5942":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"5:8241:2262":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:1712:39286":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:32990:4721":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:39150:4833":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:2215:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:13602:51619":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:12512:50463":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:5759:4553":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:4271:44419":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"1:15884:1890":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:9796:63854":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:6691:5669":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4340:41421":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:15897:1900":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"6:4230:41411":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:571:38386":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"1:10303:54335":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:10853:4717":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"6:1912:39426":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:3129:5854":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"6:6937:41573":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5541:42083":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"5:5609:2694":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"2:10578:4595":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"2:50563:4289":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"2:48280:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"16:4439:44467":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:13273:4310":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"21:14861:2172":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"1:6477:54243":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:47859:2778":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:542:5561":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:13052:5015":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7312:2262":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"6:618:38392":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:24856:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"2:24313:37385":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:52025:4737":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:8281:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"1:9267:57181":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:46956:2152":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:14:1977":{"crate_id":2,"path":["core","write"],"kind":"macro"},"12:777:2779":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"1:15893:1896":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"1:10527:4378":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"21:18732:4033":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"2:52877:4762":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12003:50311":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4218:41410":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"26:55:52725":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"17:10489:45689":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:545:38384":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:28332:4847":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:12482:50461":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"1:10789:3823":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:5280:4608":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"12:787:4367":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"2:46700:5168":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:6967:43021":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"30:995:6033":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:16990:2201":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"2:47867:2779":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"1:6649:4206":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:22864:59838":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"5:69:5254":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"6:4526:41443":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:9563:54348":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"16:7281:5590":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:14395:2158":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"21:11114:2065":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"17:12469:50460":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:18516:2339":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"27:474:3742":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:46126:2815":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:3375:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:11985:4301":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"1:5505:4178":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"2:56244:4725":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:11842:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"1:2914:2310":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"21:18568:2344":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"17:11002:45873":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:11436:2967":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"2:39146:5299":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"2:8671:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:7456:4340":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"12:1103:4374":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:15907:1910":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:23382:4196":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:10253:5940":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"5:7731:5259":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"1:2130:4253":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"1:6647:4205":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"17:13138:51067":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"2:3589:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:24508:37411":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:47927:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:15023:4271":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:11854:4345":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:0:1665":{"crate_id":21,"path":["futures_util"],"kind":"module"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"1:11034:4227":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:49691:5000":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"16:3103:5855":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:2813:5858":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"6:5478:42055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:7484:4342":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"2:51502:4779":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"12:1703:5500":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"30:170:52066":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:46997:2056":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"16:6595:5599":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"5:3104:5197":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:13369:51560":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:11712:4991":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:11409:3733":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"21:14249:2157":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"2:46905:2147":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:3877:41376":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"5:3395:2199":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:2420:6630":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"27:606:3776":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"17:10028:45630":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:5260:42016":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:9636:45569":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:16807:2195":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:22902:60072":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"18:896:6039":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"15:248:5508":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"30:1024:6035":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"17:12417:50456":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:1576:39274":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"12:843:4364":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"5:2376:5335":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:12596:54788":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"2:12230:5003":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:47026:4798":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:3105:2927":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"20:0:1663":{"crate_id":20,"path":["futures_core"],"kind":"module"},"1:12087:4285":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4179:41407":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"21:10074:3793":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"1:15883:1889":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:5582:42085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"17:12383:50454":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"9:809:3733":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:51402:4778":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:6016:42461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:7063:5674":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"16:6026:5581":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"9:157:5373":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"17:12700:50542":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:12143:50437":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12302:50448":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"17:8929:45558":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:5860:4484":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:9259:43940":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:10572:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:3173:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:5288:42040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"21:12402:2093":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"2:49659:4997":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"21:13600:2155":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"2:47304:32936":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:11698:4990":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:37954:4701":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:25120:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"21:15735:2071":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"2:49913:4989":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"6:4055:41393":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"2:46988:2055":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10476:5994":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"5:8257:60872":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"5:1719:4366":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"2:37930:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"16:7100:5677":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:6925:41571":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:6100:4494":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:4:985":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:49672:4998":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:11507:4326":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"6:3987:41232":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"5:3960:5283":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"17:12957:51005":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:32634:5111":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"1:6479:54245":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:13215:51116":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:10975:45847":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:11181:45582":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"5:8549:4253":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"21:9756:1682":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"16:3265:5850":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:10695:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"5:1547:4377":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:49809:4985":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:14874:4346":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:13472:51597":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:13856:2175":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"1:7739:57865":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"2:53686:19745":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:53225:4750":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:15894:1897":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6153:42467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:8849:5949":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:7090:5676":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"29:47:1680":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"21:12190:189":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"17:10266:5974":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12026:50368":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:46299:3599":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"21:10475:2055":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"2:47107:2170":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:46896:4792":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:50090:5026":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"6:3966:41383":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:48843:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"2:23428:4196":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:15882:1888":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:1088:4432":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"27:487:3723":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"2:10525:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:12565:4435":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:9240:5912":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:2512:5963":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:4743:44555":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:6642:2154":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:47054:2163":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:14067:2977":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"17:3743:5907":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:6129:42465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"21:11025:2062":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:18640:2348":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"6:4088:41398":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:53537:4739":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"21:10032:3794":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"17:11433:45984":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"6:4474:41438":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"1:10438:4405":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:7141:5681":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:49959:5018":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:56679:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:17362:2099":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"6:4346:41422":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:10973:2168":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:1526:39267":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"2:50542:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:8288:2663":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:9361:45565":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"6:5405:42049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"2:47810:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:11998:3730":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"6:6007:42460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:13075:5016":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"9:1075:5424":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:2883:5859":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:13323:51228":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:13181:2149":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"5:4372:2778":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"21:10231:2632":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"1:10963:2147":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:1684:2779":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"16:4871:44587":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:9143:4217":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:4351:2200":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:2393:2816":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"30:812:2175":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:1387:2778":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:3274:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:1551:39271":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:9883:63852":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:4440:41434":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:11190:4131":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:2147:4256":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:3481:3584":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"12:952:4371":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:11201:4478":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"13:233:63040":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"5:3838:2778":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"17:13817:51667":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"6:4208:41409":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6873:5085":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"12:979:4373":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"30:836:6044":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:2481:4430":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:8675:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"12:2253:4374":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"21:661:54332":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"17:11031:45577":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:7659:5685":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:6219:4202":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"1:6576:4202":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:10942:2281":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"23:0:2009":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"6:4048:41392":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:11579:46271":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:15898:1901":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:13029:51058":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:3371:2328":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:8939:4357":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:14437:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"21:13070:2148":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:46694:4247":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"12:1121:4375":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:17627:215":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"17:10455:5993":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:13785:51663":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:4898:4784":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:24442:37410":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:2152:4257":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:4356:41423":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"2:50099:4247":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"16:3770:43990":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:1592:4375":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"1:3284:2326":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:46338:4706":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:4383:2956":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:48931:4592":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:10417:4396":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:9751:1684":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"2:3250:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"17:10166:45644":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:32794:60503":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"21:16075:2189":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"17:13281:51224":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"30:1004:6034":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:4402:41429":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"21:18805:2631":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"16:6159:5588":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"21:16140:2185":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"17:13452:51595":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:9427:57866":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"21:69:2029":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"6:5547:41292":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:51803:4768":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:52727:4738":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:973:4420":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:12262:50446":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:46331:3602":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:56627:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50779:4836":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:4867:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"6:5455:62918":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:46372:4607":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:7436:4339":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:49777:2965":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:9587:63899":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"21:11467:2081":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"9:996:5422":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"30:941:63916":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"21:13730:3111":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"16:7637:5684":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"21:16682:2191":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"21:9738:1685":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"17:11754:46488":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:687:1666":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"21:18527:2340":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"2:8024:4681":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:15895:1898":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:11048:4229":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"14:231:5206":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:48895:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:5575:4184":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:12348:50452":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"21:17223:2206":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"6:4464:41437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"2:10584:4597":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:5431:4210":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:12015:50367":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:8861:2202":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"17:11168:45581":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"6:4493:41440":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"11:54:5476":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"21:13480:2054":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"12:856:4365":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"1:15899:1902":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:3314:5830":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"11:0:1862":{"crate_id":11,"path":["adler"],"kind":"module"},"5:8449:5278":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:5217:5833":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:10390:5972":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"5:3407:5209":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"2:50365:4643":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"21:988:1667":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:48238:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:17431:2262":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"9:686:5354":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"16:6331:5504":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"21:11071:2064":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"21:18574:2345":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"17:11514:46261":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"30:919:63913":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:5566:5638":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4386:41427":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"9:234:5381":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"21:9960:163":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"16:7169:5601":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:24823:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:4428:2280":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"2:11411:2778":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"21:18649:2349":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"21:13669:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"6:5311:42043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"21:7282:1675":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"21:602:2068":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"1:10217:45556":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"18:829:6034":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:48947:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"20:27:1998":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"18:152:52065":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:7753:5260":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"21:12184:2082":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"1:15065:4279":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:49646:4791":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:18671:63934":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"17:12157:50438":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:24479:37412":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"21:599:2683":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"17:11212:5953":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:53677:19744":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:9004:45559":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"17:294:63902":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:1721:39287":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"0:116:1570":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:14064:2981":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:4903:44595":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"21:97:1693":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"17:10422:45687":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:12093:50376":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:10517:4263":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:9033:45560":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:10252:4969":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:15888:1893":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"25:17:1674":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"2:51532:4767":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"6:4081:41397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:46365:4811":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"21:15511:2069":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"1:10648:4189":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:14399:57163":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"1:11518:4327":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:6060:5624":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:299:63896":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12442:50458":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"30:843:6045":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:3520:3592":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:3167:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"5:5861:60767":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"18:136:52064":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:6841:4241":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"17:12646:50533":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"30:826:6040":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"21:9721:1683":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"2:3469:3585":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"6:5433:42052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:52693:4756":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:13364:4631":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:10874:45762":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:3686:43954":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:10799:2278":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11071:4230":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:6504:5666":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:1374:2199":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:11085:5956":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:2981:5853":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:12072:4515":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:11314:4204":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:1663:2199":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:10554:5299":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:4012:41388":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:1108:9017":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"27:585:3733":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:12360:50453":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:51833:4772":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:1764:39291":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"30:1060:6038":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:11142:45580":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"17:13721:51623":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:13761:57860":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"6:4296:41416":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"2:50376:4644":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:53413:4754":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:11409:45983":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"11:46:63024":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"18:611:6041":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1634:39280":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:9826:5976":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"21:18537:2341":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"17:12250:50445":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:4178:2979":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:11432:4322":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:4485:2343":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"1:5746:4552":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"16:6433:5663":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:12130:50436":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:17504:2266":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"16:3743:43987":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:1489:4373":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:2905:5841":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"12:1238:5489":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"16:5460:5635":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:23230:4196":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:46730:5170":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"21:12998:2109":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"6:1733:4488":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:5698:5644":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"5:8566:5255":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:23770:14238":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:5419:42050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:5708:4547":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:4660:44544":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"6:6954:41575":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"2:50737:2398":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:11491:4324":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"18:774:2175":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"21:16609:2190":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"2:48448:5091":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:48584:4595":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:3619:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:24334:4880":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:1710:4365":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:11292:12332":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"6:4067:41395":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"5:7048:2518":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:10304:5964":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:46255:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:14634:4213":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"2:12798:5148":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"12:1203:5488":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13584:51612":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:49123:4718":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:14185:2086":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"21:10844:2061":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"2:53873:19756":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"21:13539:2054":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"2:49107:4382":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46974:59271":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"20:39:4196":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"16:7079:5675":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:24463:37401":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"15:0:1865":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:3366:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:47978:2199":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:10036:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"6:1531:39268":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"18:766:63916":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:10921:1674":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:46605:4898":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:50676:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"21:10782:2059":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:13353:4626":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:9836:63851":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"9:41:5406":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"16:5238:43942":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"12:933:4369":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"5:2396:5292":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:11245:4548":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:17420:2261":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"2:3826:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:48873:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:13607:4352":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:6241:4199":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"7:0:1497":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4242:41412":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:7471:5582":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:9160:5952":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"6:5447:42054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:15886:1891":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:15901:1904":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"17:11956:45795":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:4785:2956":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"1:3755:3826":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:5151:4475":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:8453:4503":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:4843:4829":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"21:14662:2170":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"6:4028:41390":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:14371:2390":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:10565:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"18:651:6040":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"21:15657:2072":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"17:10937:45872":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"6:513:38379":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"1:3070:4451":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:6050:5652":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:32642:60509":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"17:12758:50607":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:12731:50544":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:10678:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:4270:4495":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"21:11409:2079":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"12:971:4372":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:11944:2199":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:50526:5038":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:10422:1688":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:24070:4196":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:4217:2981":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:11479:4982":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"21:16209:2186":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"16:5516:5821":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"1:13783:4344":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"17:10136:45573":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:11890:57162":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"5:1072:2199":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:10848:4261":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:4573:44529":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"28:37:2779":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"5:1152:60767":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"30:153:52065":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5378:42046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13155:51110":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:52223:59383":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"18:754:63910":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:10980:2965":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11907:50258":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:4434:41433":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:10340:5968":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"16:0:1866":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7834:4420":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"1:9439:57859":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"16:6075:5585":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:13359:4630":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:13015:5012":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"16:5176:44796":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:11088:4231":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"1:1105:9015":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:46716:5026":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"21:15467:2064":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"2:50083:5025":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:47994:2779":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:8719:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:47842:2777":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"21:42:1020":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"2:46775:5080":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"21:12447:2094":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"12:869:2262":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:56614:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:24889:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"9:27:5405":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"17:2543:5991":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"18:782:2175":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"14:11:43860":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:3297:5903":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:11952:4299":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"2:48028:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:12558:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"16:5685:5643":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"1:15865:54902":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:4143:4463":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"16:3521:43944":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:11640:46310":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"21:6654:2207":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"1:7422:4338":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"21:14541:2166":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"1:7734:2682":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"31:115:1726":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"1:10468:4138":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:47086:4794":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"21:11686:2070":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"6:6908:41569":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"1:15038:4272":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:13908:51702":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"1:10638:4243":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:7054:54335":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"6:5426:42051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:32694:60506":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"6:5247:42039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"12:2280:4376":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:6277:5659":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:10395:2417":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"18:668:6045":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:53781:19752":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"21:17316:3029":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"21:17047:2087":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"1:13413:57864":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"1:2123:2779":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:8226:2779":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"10:0:1861":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:6339:4248":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"18:720:59394":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"5:7207:60773":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"17:12048:50369":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:5745:5646":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11563:46270":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:2955:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:11689:46368":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:13037:51060":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"21:14493:2165":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"2:51358:59410":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"21:13004:2110":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"2:53717:19748":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:10643:4435":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"28:0:2011":{"crate_id":28,"path":["slab"],"kind":"module"},"16:4803:44567":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"24:237:2051":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"12:2032:2199":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:6080:39209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:10999:4225":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"16:4316:44440":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"17:13094:51062":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"12:0:1863":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"16:7238:5604":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"16:7741:5686":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:14361:2005":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:12282:50447":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:5229:42037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"12:114:63038":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"5:8406:5276":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"21:14028:2056":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"16:3199:5847":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"16:5649:5641":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:1727:39288":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:12077:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13180:51113":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"2:50534:5033":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:14801:54301":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:11684:4989":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:11256:45546":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:50694:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"5:3436:4254":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"6:5390:42047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:8684:2286":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:4411:44463":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"21:16483:2187":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"5:8373:4381":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:13953:51709":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"21:18498:2337":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"21:17482:2264":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"2:49791:2967":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:18213:2330":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:24366:37373":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:10445:45688":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:3371:2282":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:4258:2978":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:4097:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:626:38393":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"2:51673:59389":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:7295:5591":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"24:380:63997":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"12:2269:4375":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:7768:5592":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:51655:4751":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:11474:46200":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:8715:2203":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:6562:2262":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:12170:50439":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:50386:4645":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"16:3478:5851":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"21:13258:2150":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"17:11530:46262":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"16:3007:5843":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:2422:10041":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:10580:4596":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:853:4399":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:14912:54592":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:3444:3577":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"16:7247:5618":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"5:4036:60767":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:10586:4598":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:4148:41405":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"13:121:43815":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:17413:2779":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"21:17922:2325":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"1:1431:2262":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13345:51230":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:10187:45643":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:9429:1674":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:12620:50531":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:3372:4573":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:48861:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"6:6135:42466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"27:397:2663":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"21:16981:2200":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"21:14444:2159":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:46803:5082":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"5:444:2287":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"12:432:5491":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13708:51622":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:10655:4437":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"5:8420:5081":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:5998:5555":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:4017:4253":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"21:18631:2347":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"1:6924:12335":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"20:44:1664":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"16:5639:5640":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"6:4098:41399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:14142:4138":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"16:6643:5877":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:13377:51587":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"21:12662:2099":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"2:24242:5053":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:4005:41387":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"16:7121:5679":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:13481:51598":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:2326:604":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:1533:4375":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"24:0:1760":{"crate_id":24,"path":["futures_task"],"kind":"module"},"16:2733:5557":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"21:10977:2060":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"6:6979:43022":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:52663:4753":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:9159:2781":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:5605:5639":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"2:47006:4796":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:15339:54911":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13507:51603":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"29:0:1677":{"crate_id":29,"path":["futures_io"],"kind":"module"},"21:18441:2335":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"21:12783:2104":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"2:53796:19753":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:13257:51160":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:48196:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12455:50459":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"27:598:3775":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"17:13735:51624":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"17:12892:51003":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"17:13529:51606":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"6:6027:42462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"14:216:43869":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:51757:4780":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:5374:5630":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"21:10732:2057":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"17:11968:50264":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"21:10419:1689":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"6:4277:41414":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6717:5670":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:1729:4367":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:47909:5087":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"2:23439:4695":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13352:51242":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:7939:4420":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"1:8195:3733":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"27:467:5282":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"9:776:5403":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"17:13595:51618":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:24529:5070":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:9716:63900":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"6:1694:39284":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:50514:5037":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:15902:1905":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"21:13119:2171":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"16:5443:5634":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"1:5278:4482":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:50171:4629":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:10511:2058":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"1:14647:54812":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:51692:4736":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:11966:3727":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:12496:50462":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:14417:54814":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"2:53621:4777":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:4509:41441":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"6:5439:42053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:3104:4196":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:48591:4596":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"6:6214:42470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"20:122:4196":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"1:15232:4476":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:11869:2071":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"21:16960:3291":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"1:15900:1903":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:47066:2165":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"30:976:6031":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:48406:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:12654:2098":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"2:47313:2200":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"26:65:52726":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:10643:45774":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"1:4140:4462":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"21:9353:2200":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"17:10464:5992":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:11256:4487":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"31:190:1732":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"2:5154:4930":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:49609:4995":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"2:2861:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"21:13221:108":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"17:11725:46479":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:4516:41442":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"21:15458:2180":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"2:11387:2199":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"21:13415:2153":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"17:9561:5955":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:51448:4758":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:12567:54325":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"21:15390:2178":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:4491:2779":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"17:10068:5974":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"21:6790:63948":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"2:6902:60517":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"30:1012:4626":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:2135:4254":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11130:45579":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"1:14894:4286":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"1:2141:4255":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:50055:5022":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:3459:2329":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"5:1276:5290":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"21:12209:2084":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"16:5289:5584":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"21:17404:2778":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"27:481:3722":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"21:18377:2265":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"9:469:43239":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"16:7826:4810":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:57954:59434":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"18:704:2175":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:14931:4285":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:15887:1892":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:12921:51004":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:3462:4257":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"21:6302:2086":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"16:5362:5629":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:50351:4642":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:5326:5627":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:5149:4929":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"1:9558:54326":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"2:46647:5172":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"26:49:52724":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:49941:5017":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:3058:4445":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:11556:4984":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46927:4795":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:9676:63895":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:11449:4323":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:50767:4838":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"21:12196:2083":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"2:22883:60069":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"6:5366:42045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:607:45555":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:25054:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:3814:3601":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"21:1312:2086":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"1:7782:3742":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"17:10545:45788":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"5:3825:2199":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"4:0:1858":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:46787:5081":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:6645:4192":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"2:25153:5056":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:11603:46307":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"17:10925:45871":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:13928:54350":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"9:692:5356":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:607:38390":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:49589:4993":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:14059:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"12:183:5494":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:4467:2347":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:9539:5950":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:3428:4256":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:13306:51227":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:10711:2973":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:10407:5961":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:15253:4482":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:12082:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"1:15903:1906":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"12:353:63030":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:23293:4695":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:5563:4176":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"17:10530:45787":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:46737:5171":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"5:8287:5195":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:13298:2151":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"1:6723:4207":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:52427:4773":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"9:963:5421":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"1:2126:2262":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:6656:5878":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:6775:5231":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"1:10428:54909":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:52169:59396":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:3514:3591":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"16:6980:5672":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:18789:63932":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"16:5668:5642":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:6858:5884":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:4709:60766":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:8494:5204":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:10703:4458":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:10831:5976":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:11518:4983":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:51710:59416":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:3439:3580":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:13961:51711":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"2:53732:19749":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"21:12222:2085":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"21:14313:2160":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:2156:1668":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"1:4829:4308":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"1:1483:4372":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:694:6046":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"30:957:2175":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:11882:4347":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"6:1748:39290":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:10364:5966":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:8744:2285":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"16:3243:5849":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"5:3948:2332":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"21:11288:2078":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"2:52047:4740":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:51572:59442":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:3477:3582":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:52200:59372":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:13428:51593":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"31:88:4132":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"1:9434:54324":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"12:379:5493":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:2911:4436":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"21:1845:2107":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"0:142:1037":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"16:7051:5673":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"21:9999:3796":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"1:1452:4367":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:47322:2201":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:50538:5034":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:8361:4260":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:2046:2956":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:6205:42469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"5:8217:5202":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:777:60864":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:4157:5924":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:1418:4365":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"21:8154:1697":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"6:3993:41386":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"6:5301:42042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:14453:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:3503:3588":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:1466:4370":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"12:466:63039":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3622:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"17:2484:45676":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:13016:51006":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"17:11985:50267":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"16:2792:5573":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10318:5976":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12209:50442":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:39186:4731":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11305:45584":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"5:5906:2149":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:13463:51596":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4476:55115":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:8732:4521":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:21:676":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:8314:2779":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:5226:4607":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"12:2040:2262":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:591:2067":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"5:4509:2199":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:46669:5027":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:2119:2199":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:3831:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:1456:4368":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4256:2977":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:10914:2202":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:3532:3595":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:18066:2329":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"28:50:2778":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:50074:5024":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:52539:4761":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"21:12126:2080":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"2:47876:5085":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"17:13899:51701":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:13334:4627":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:48070:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:8000:3742":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"2:10574:4593":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10899:45861":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12585:50481":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:23389:14219":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:11234:5951":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:7721:5597":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:10913:45870":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"6:612:38391":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"5:4308:60767":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"6:4485:41439":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"28:211:4376":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"2:24922:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"21:11107:2066":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"5:984:2161":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:4765:60766":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"1:5513:4179":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"30:887:4701":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3678:3598":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:11282:45583":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"5:8308:2779":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:6310:5660":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:5293:42041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"6:4256:41413":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:5271:4936":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:57975:59318":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"16:5396:5631":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"21:14796:2061":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"17:10015:45629":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:10660:45793":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:13859:4343":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:11945:45794":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:23976:59836":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:10147:45646":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:3486:3589":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"6:4538:41445":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:0:1867":{"crate_id":17,"path":["object"],"kind":"module"},"2:50013:5021":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:23051:4692":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:10048:45647":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:50518:5036":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:12117:50435":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"21:10614:2063":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:10041:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:22904:60074":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:7369:5587":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:3384:2944":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:56640:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:49571:4992":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"6:6184:42468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:46965:2153":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:10582:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"5:5948:60792":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"18:637:2175":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"21:10051:164":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"20:194:3025":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"17:11457:45985":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:3473:3583":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"18:885:6038":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:2359:10022":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:14735:2169":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"2:51554:4771":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"6:6896:41567":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:9746:45571":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:7470:4341":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:14160:2154":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:9786:45572":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2510:4431":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:5730:4549":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:8634:4844":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"21:18768:63933":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"16:7782:5593":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:8863:4359":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"6:521:38380":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:4203:63946":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"2:53659:4742":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:53811:19754":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"6:3981:41385":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"9:603:43343":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:15896:1899":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"17:12557:50466":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:4389:2179":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"21:9874:2179":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"1:15904:1907":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:4416:41431":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"16:4775:44563":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:13129:51066":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"27:460:3777":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"6:6243:42472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:49995:5020":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:2959:5842":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"27:21:64015":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"16:6381:5598":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"16:4495:44475":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6407:5662":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"5:6851:2956":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"27:394:204":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"21:18017:2328":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"21:18722:2112":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:24988:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:10576:4594":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:11134:54905":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"2:11629:4986":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:13293:51226":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:49681:4999":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"2:49115:59384":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"21:15810:2057":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"1:4410:2336":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"12:764:2778":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"21:11930:2074":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"17:13794:51666":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"6:4532:41444":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"21:18907:3009":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:168:697":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:46677:5167":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"6:6914:41570":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:10247:4968":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"21:12909:2106":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"21:12573:2096":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"2:50530:5039":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:50575:5108":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"16:2937:5864":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"21:7692:2268":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"6:5488:42056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"21:18664:2682":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"2:48112:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"21:18007:2327":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"18:801:6031":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:4020:41389":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:47295:2203":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:4942:44610":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"6:1600:39276":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:7684:5596":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:12125:4287":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"21:9218:2956":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"2:2183:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:6250:42473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:3449:3576":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:3405:2969":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:6949:5888":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"21:18102:2147":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"2:46358:4810":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"14:250:43868":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"21:14103:2058":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"16:6141:5656":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2965:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:4840:44580":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"21:10420:1692":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"5:7477:2779":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"21:6924:3031":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"2:53834:19755":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"9:1020:5423":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"12:1682:5499":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:12183:50440":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13763:51661":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"31:206:1729":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"21:18559:2343":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"21:18392:2334":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"6:161:38072":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"21:11238:2407":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"17:10039:45631":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:1537:39269":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:49841:5013":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:15377:5516":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"27:565:3731":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"2:47986:2778":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"16:5257:43940":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:48154:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"14:194:43861":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"18:169:52066":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:383:5275":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:3155:5845":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"16:6190:5658":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:3855:4574":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:997:4251":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"6:6902:41568":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"18:645:6043":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:3613:2284":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"5:2266:60801":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:8545:4513":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:47035:2162":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"21:16755:2194":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:2397:10034":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:50287:4640":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6342:5661":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:48810:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"12:2059:4255":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:5498:5636":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"1:3044:4441":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:1606:39277":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"1:9653:8906":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:7139:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:50239:4639":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:17954:2326":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:47045:4790":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"2:49735:5092":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:1760:5288":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:5721:5645":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"2:46277:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:12330:60655":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:15071:4280":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:2504:4812":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:1146:9019":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"5:2328:5293":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:11335:5915":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"24:258:2053":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"6:157:38071":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"21:16010:2077":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"12:1162:5486":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:13612:51620":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:4180:2980":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"1:12053:4509":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"21:18275:2331":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"2:10720:59401":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:9526:4472":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"27:593:3738":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"21:13914:2156":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"2:50686:2813":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"21:8042:1392":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:46233:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:10986:2967":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"5:8249:5330":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:11264:4131":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:17150:2205":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:23240:4220":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:49358:5188":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:7358:60767":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"14:47:43860":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:4321:41419":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:6995:3033":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"21:18726:2111":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"21:17335:3030":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:12406:50455":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"5:1740:4368":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:10949:45849":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:4075:41396":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6907:5671":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:5923:5650":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:49354:5189":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"1:8646:54798":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"1:10534:10029":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"29:42:1681":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"17:9706:45570":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"2:52001:4755":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:50193:4632":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"12:1183:5487":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:11198:4196":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:49620:4996":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"21:12300:203":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"6:1558:39272":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:12660:50534":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:8497:4504":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13917:51703":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:3374:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:539:38383":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:51470:4746":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:12607:50530":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"5:1909:60767":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:52617:4749":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"2:49761:5008":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:12237:50444":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:11671:46312":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:4142:41404":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:51979:4752":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:14960:54815":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"16:7155:5682":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"17:12196:50441":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"1:15633:54330":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"1:13744:4342":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:24790:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"16:6604:5668":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"5:6759:2694":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"21:11808:2072":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"22:0:2008":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"5:8271:2779":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"7:85:43121":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"1:11912:54591":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"14:189:43860":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"2:22881:60071":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:2288:4821":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"2:8129:4788":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"21:4218:63940":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"17:11822:46507":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:11922:50259":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:12687:50536":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:7539:4344":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:46417:4909":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"17:9183:5919":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"16:4198:44370":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:56666:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"12:2036:2779":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:5149:41988":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:3907:41379":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:7938:2551":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:510:45554":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:17395:2199":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:8451:2141":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:12774:5184":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:5738:4550":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:46936:2150":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"30:1071:6039":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:48364:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8096:4420":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"17:9064:45561":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12543:50465":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:9291:45547":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:11013:45576":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"25:0:1673":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"17:12674:50535":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"6:6268:42474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"1:5553:4181":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"27:509:204":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:12197:5002":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"5:2005:4253":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:11022:4226":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"2:46633:4901":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:5978:4493":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"21:17568:2267":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"6:4038:41391":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"1:783:8906":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"12:1784:63033":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:10794:3824":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:1502:4374":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"28:71:64032":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"2:9535:2655":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"17:9431:45567":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:601:38389":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4160:41406":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:2886:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:46946:2151":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:48828:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"17:10291:5965":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:9930:63903":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"14:244:43862":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:13840:51670":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:50314:4641":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"27:188:3730":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:2919:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"17:10240:5937":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6035:5623":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"27:550:3729":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"28:220:4374":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"1:15881:1887":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"21:13791:2175":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"5:3905:60767":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"24:407:3467":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"31:164:1730":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"16:4351:44451":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:1518:4376":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:46770:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:2924:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"17:9087:45562":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:4689:44549":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"16:6286:5505":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:11270:4496":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"6:3896:41378":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:13859:51676":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"1:5567:4182":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"28:55:2262":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"6:5974:38302":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:3183:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"21:16920:2193":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"6:6643:38338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:7314:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"21:11991:2073":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"5:3110:60972":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8217:5282":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"20:110:1999":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"21:10566:2054":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:9466:45568":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:8466:60880":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:6099:5654":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"1:13245:4489":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"6:4446:41435":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:7599:4348":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"18:744:63913":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:12746:45584":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:13975:51745":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"1:11288:4214":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:1567:2097":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"6:6671:42835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"21:10917:2056":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"2:23153:4196":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"2:25087:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:50419:5097":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:10598:45791":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4116:41401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:7248:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"16:3402:5574":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"2:48577:4593":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"5:2843:5295":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:11670:4988":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"30:820:6043":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:17276:3455":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"1:14470:55545":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:7208:5683":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:4410:41430":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:52122:59382":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"12:2404:63029":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:56653:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"27:574:3732":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"17:11381:45975":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"21:16322:2183":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"1:14379:4216":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13404:51589":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:50510:5035":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:11905:54781":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"16:7702:5595":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"16:5273:43939":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"2:53697:19746":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:9756:63901":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:53335:4770":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"16:7754:5687":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:1256:62249":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"}},"external_crates":{"28":{"name":"slab","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"futures_task","html_root_url":null},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"futures_sink","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"futures_util","html_root_url":null},"31":{"name":"futures_executor","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"futures_core","html_root_url":null}},"format_version":21}