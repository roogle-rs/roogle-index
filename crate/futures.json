{"root":"0:0:2497","crate_version":"0.3.30","includes_private":false,"index":{"2:13328:30423":{"id":"2:13328:30423","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12952:8871","str::split":"2:13319:3005","prim@char":"1:12355:475","`DoubleEndedIterator`":"2:8320:129","str::rsplit_terminator":"2:13331:30424"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44084:8891","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13352:30426":{"id":"2:13352:30426","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12952:8871","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatch_indices":"2:13355:30427"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44184:8886","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-21:5264:1183":{"id":"0:38-21:5264:1183","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1183","glob":false}}},"2:13360:30429":{"id":"2:13360:30429","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:23577":{"id":"2:13286:23577","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13285:23576","str::split_at_mut_checked":"2:13288:23581"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3786:2411":{"id":"0:74-21:3786:2411","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:2411","glob":false}}},"2:13401:30440":{"id":"2:13401:30440","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5012:30440"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44351:8883","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5266:2437":{"id":"0:45-21:5266:2437","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:2437","glob":false}}},"2:13283:30420":{"id":"2:13283:30420","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12361:1734","str::slice_mut_unchecked":"2:13284:30421","crate::ops::Index":"2:39699:3213"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:2468":{"id":"0:50-31:109:2468","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:2468","glob":false}}},"2:13381:30436":{"id":"2:13381:30436","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:2413":{"id":"0:15-25:9:2413","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:2413","glob":false}}},"2:13298:2996":{"id":"2:13298:2996","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44288:3022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5709:2866":{"id":"5:5709:2866","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13274:23552":{"id":"2:13274:23552","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13331:30424":{"id":"2:13331:30424","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12952:8871","str::split":"2:13319:3005","prim@char":"1:12355:475","str::split_terminator":"2:13328:30423"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44102:8890","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:2409":{"id":"0:67-20:97:2409","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:2409","glob":false}}},"2:13397:30439":{"id":"2:13397:30439","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5014:30439"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44333:8882","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1998":{"id":"0:46:1998","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:2466","`LocalPool`":"31:120:2472"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:2466","0:49-31:68:2467","0:50-31:109:2468","0:51-31:138:2469","0:52-31:100:2470","0:53-31:102:2471","0:54-31:120:2472","0:55-31:125:2473"],"is_stripped":false}}},"2:13311:21622":{"id":"2:13311:21622","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:32-21:37:2429":{"id":"0:32-21:37:2429","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:2429","glob":false}}},"0:20-29:25:2419":{"id":"0:20-29:25:2419","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:2419","glob":false}}},"2:13337:23589":{"id":"2:13337:23589","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12355:475","str::splitn":"2:13334:23587","self::pattern":"2:12952:8871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44156:8858","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13308:22963":{"id":"2:13308:22963","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13362:30430":{"id":"2:13362:30430","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:8-21:587:2406":{"id":"0:8-21:587:2406","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:2406","glob":false}}},"5:5693:9201":{"id":"5:5693:9201","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5692:31135":{"id":"5:5692:31135","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:2977","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:303:2977","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19-29:17:2418":{"id":"0:19-29:17:2418","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:2418","glob":false}}},"0:40-21:1291:2407":{"id":"0:40-21:1291:2407","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:2407","glob":false}}},"2:13263:1005":{"id":"2:13263:1005","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12355:475"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:2409":{"id":"0:11-20:97:2409","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:2409","glob":false}}},"0:0:2497":{"id":"0:0:2497","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:2437","crate::executor":"0:46:1998","crate::stream":"21:1291:2407","crate::channel":"27:0:2434","crate::future":"21:104:854","crate::sink":"21:4707:2414"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1998","0:56:1347","0:4-2:44834:150","0:5-20:32:2403","0:7-21:422:2405","0:8-21:587:2406","0:10-20:68:2408","0:11-20:97:2409","0:13-21:2766:2410","0:14-21:3786:2411","0:15-25:9:2413","0:16-21:5171:2415","0:18-29:27:2417","0:19-29:17:2418","0:20-29:25:2419","0:21-29:20:2420","0:23-21:6217:2421","0:24-21:6182:2422","0:25-21:6212:2423","0:26-21:6199:2424","0:27-20:131:2425","0:28-22:7:2426","0:29-21:6770:2427","0:31-21:6767:2428","0:32-21:37:2429","0:33-21:20:1325","0:34-21:6769:2430","0:35-21:6768:2431","0:37-21:104:854","0:38-21:5264:1183","0:39-21:4707:2414","0:40-21:1291:2407","0:41-21:5212:2432","0:42-21:57:2433","0:43-27:0:2434","0:44-21:6240:2436","0:45-21:5266:2437"],"is_stripped":false}}},"2:13288:23581":{"id":"2:13288:23581","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13287:23580"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13387:30438":{"id":"2:13387:30438","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12913:136","`FromStr`":"2:12912:3276"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42286:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12912:3276","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12912:3276","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71-21:5171:2415":{"id":"0:71-21:5171:2415","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:2415","glob":false}}},"0:39-21:4707:2414":{"id":"0:39-21:4707:2414","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:2414","glob":false}}},"2:13302:23593":{"id":"2:13302:23593","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13262":{"id":"2:13262","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13263:1005","2:13264:22245","2:13265:30416","2:13266:30417","2:13268:30418","2:13271:22426","2:13272:30419","2:13273:335","2:13274:23552","2:13275:23548","2:13277:23549","2:13279:23550","2:13281:23551","2:13283:30420","2:13284:30421","2:13285:23576","2:13286:23577","2:13287:23580","2:13288:23581","2:13290:28750","2:13291:28651","2:13292:21966","2:13293:28753","2:13295:28747","2:13298:2996","2:13300:30422","2:13301:28751","2:13302:23593","2:13305:22961","2:13308:22963","2:13311:21622","2:13315:21623","2:13319:3005","2:13322:23583","2:13325:23585","2:13328:30423","2:13331:30424","2:13334:23587","2:13337:23589","2:13340:23591","2:13343:23592","2:13346:2728","2:13349:30425","2:13352:30426","2:13355:30427","2:13358:30428","2:13360:30429","2:13362:30430","2:13364:30431","2:13365:30432","2:13366:30433","2:13369:30434","2:13372:22231","2:13375:23594","2:13378:30435","2:13381:30436","2:13384:30437","2:13387:30438","2:13389:22447","2:13390:23302","2:13391:22451","2:13392:22452","2:13393:22453","2:13394:23305","2:13395:23306","2:13396:23307","2:13397:30439","2:13400:3137","2:13401:30440"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:82-21:6182:2422":{"id":"0:82-21:6182:2422","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:2422","glob":false}}},"2:13305:22961":{"id":"2:13305:22961","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6182:2422":{"id":"0:24-21:6182:2422","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:2422","glob":false}}},"2:13301:28751":{"id":"2:13301:28751","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44326:8872","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13349:30425":{"id":"2:13349:30425","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12952:8871","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::matches":"2:13346:2728"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44256:8889","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6212:2423":{"id":"0:83-21:6212:2423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:2423","glob":false}}},"0:79-29:20:2420":{"id":"0:79-29:20:2420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:2420","glob":false}}},"2:13268:30418":{"id":"2:13268:30418","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13266:30417"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13275:23548":{"id":"2:13275:23548","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13285:23576":{"id":"2:13285:23576","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13287:23580","str::split_at_mut":"2:13286:23577"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13364:30431":{"id":"2:13364:30431","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13358:30428":{"id":"2:13358:30428","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-27:0:2434":{"id":"0:43-27:0:2434","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:2434","glob":false}}},"0:42-21:57:2433":{"id":"0:42-21:57:2433","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:2433","glob":false}}},"0:77-29:17:2418":{"id":"0:77-29:17:2418","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:2418","glob":false}}},"2:13266:30417":{"id":"2:13266:30417","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:2417":{"id":"0:76-29:27:2417","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2417","glob":false}}},"2:13290:28750":{"id":"2:13290:28750","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44004:8878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-21:6217:2421":{"id":"0:23-21:6217:2421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:2421","glob":false}}},"0:4-2:44834:150":{"id":"0:4-2:44834:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:44834:150","glob":false}}},"2:13279:23550":{"id":"2:13279:23550","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13369:30434":{"id":"2:13369:30434","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26-21:6199:2424":{"id":"0:26-21:6199:2424","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:2424","glob":false}}},"0:69-21:422:2405":{"id":"0:69-21:422:2405","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:2405","glob":false}}},"2:13355:30427":{"id":"2:13355:30427","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12952:8871","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::match_indices":"2:13352:30426"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44202:8887","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5171:2415":{"id":"0:16-21:5171:2415","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:2415","glob":false}}},"0:52-31:100:2470":{"id":"0:52-31:100:2470","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:2470","glob":false}}},"0:34-21:6769:2430":{"id":"0:34-21:6769:2430","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:2430","glob":false}}},"2:13340:23591":{"id":"2:13340:23591","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28-22:7:2426":{"id":"0:28-22:7:2426","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:2426","glob":false}}},"2:13395:23306":{"id":"2:13395:23306","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:38884"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:22452":{"id":"2:13392:22452","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4707:2414":{"id":"0:62-21:4707:2414","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:2414","glob":false}}},"2:13334:23587":{"id":"2:13334:23587","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871","str::rsplitn":"2:13337:23589"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44138:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:30421":{"id":"2:13284:30421","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12361:1734","crate::ops::IndexMut":"2:3484:3214","str::slice_unchecked":"2:13283:30420"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13292:21966":{"id":"2:13292:21966","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44020:3331","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-21:20:1325":{"id":"0:33-21:20:1325","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1325","glob":false}}},"0:44-21:6240:2436":{"id":"0:44-21:6240:2436","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:2436","glob":false}}},"0:5-20:32:2403":{"id":"0:5-20:32:2403","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:2403","glob":false}}},"2:13272:30419":{"id":"2:13272:30419","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2766:2410":{"id":"0:13-21:2766:2410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:2410","glob":false}}},"2:13277:23549":{"id":"2:13277:23549","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42155:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5696:31136":{"id":"5:5696:31136","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5212:2432":{"id":"0:41-21:5212:2432","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:2432","glob":false}}},"0:84-21:6199:2424":{"id":"0:84-21:6199:2424","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:2424","glob":false}}},"0:18-29:27:2417":{"id":"0:18-29:27:2417","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2417","glob":false}}},"5:5708:31139":{"id":"5:5708:31139","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:303:2977","`String`":"5:7747:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:303:2977","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51-31:138:2469":{"id":"0:51-31:138:2469","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:138:2469","glob":false}}},"0:66-20:68:2408":{"id":"0:66-20:68:2408","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:2408","glob":false}}},"2:13400:3137":{"id":"2:13400:3137","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5015:3137"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44342:3138","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5707:31138":{"id":"5:5707:31138","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6770:2427":{"id":"0:29-21:6770:2427","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:2427","glob":false}}},"0:10-20:68:2408":{"id":"0:10-20:68:2408","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:2408","glob":false}}},"0:56:1347":{"id":"0:56:1347","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:854","0:59-2:44834:150","0:60-20:32:2403","0:62-21:4707:2414","0:63-25:9:2413","0:65-21:1291:2407","0:66-20:68:2408","0:67-20:97:2409","0:69-21:422:2405","0:70-21:587:2406","0:71-21:5171:2415","0:73-21:2766:2410","0:74-21:3786:2411","0:76-29:27:2417","0:77-29:17:2418","0:78-29:25:2419","0:79-29:20:2420","0:81-21:6217:2421","0:82-21:6182:2422","0:83-21:6212:2423","0:84-21:6199:2424"],"is_stripped":false}}},"2:13271:22426":{"id":"2:13271:22426","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12499:8875"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13325:23585":{"id":"2:13325:23585","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12952:8871","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split":"2:13319:3005"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44052:8856","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13375:23594":{"id":"2:13375:23594","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13315:21623":{"id":"2:13315:21623","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42155:190","prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:23302":{"id":"2:13390:23302","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40054:9016","Self::is_ascii":"2:13389:22447"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40054:9016","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13265:30416":{"id":"2:13265:30416","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:2471":{"id":"0:53-31:102:2471","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:2471","glob":false}}},"0:27-20:131:2425":{"id":"0:27-20:131:2425","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:2425","glob":false}}},"0:54-31:120:2472":{"id":"0:54-31:120:2472","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:2472","glob":false}}},"2:13365:30432":{"id":"2:13365:30432","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13322:23583":{"id":"2:13322:23583","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12767:8862","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-21:6768:2431":{"id":"0:35-21:6768:2431","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:2431","glob":false}}},"5:5711:22450":{"id":"5:5711:22450","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13393:22453"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-21:422:2405":{"id":"0:7-21:422:2405","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:2405","glob":false}}},"0:81-21:6217:2421":{"id":"0:81-21:6217:2421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:2421","glob":false}}},"0:59-2:44834:150":{"id":"0:59-2:44834:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:44834:150","glob":false}}},"0:37-21:104:854":{"id":"0:37-21:104:854","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:854","glob":false}}},"2:13300:30422":{"id":"2:13300:30422","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44298:8885","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13384:30437":{"id":"2:13384:30437","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78-29:25:2419":{"id":"0:78-29:25:2419","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:2419","glob":false}}},"2:13389:22447":{"id":"2:13389:22447","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:21-29:20:2420":{"id":"0:21-29:20:2420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:2420","glob":false}}},"0:31-21:6767:2428":{"id":"0:31-21:6767:2428","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:2428","glob":false}}},"2:13378:30435":{"id":"2:13378:30435","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13372:22231":{"id":"2:13372:22231","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:854":{"id":"0:58-21:104:854","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:854","glob":false}}},"0:63-25:9:2413":{"id":"0:63-25:9:2413","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:2413","glob":false}}},"2:13343:23592":{"id":"2:13343:23592","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12973:8868","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13346:2728":{"id":"2:13346:2728","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12952:8871","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::rmatches":"2:13349:30425"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44238:8888","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13293:28753":{"id":"2:13293:28753","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13295:28747"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44308:8874","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14-21:3786:2411":{"id":"0:14-21:3786:2411","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:2411","glob":false}}},"2:13291:28651":{"id":"2:13291:28651","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12355:475"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44010:8877","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48-31:65:2466":{"id":"0:48-31:65:2466","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:2466","glob":false}}},"2:13281:23551":{"id":"2:13281:23551","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11041:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:2403":{"id":"0:60-20:32:2403","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:2403","glob":false}}},"2:13391:22451":{"id":"2:13391:22451","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:23305":{"id":"2:13394:23305","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:38884"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13264:22245":{"id":"2:13264:22245","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13319:3005":{"id":"2:13319:3005","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12952:8871","`DoubleEndedIterator`":"2:8320:129","prim@char":"1:12355:475","str::split_whitespace":"2:13293:28753","str::rsplit":"2:13325:23585"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44034:3332","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13273:335":{"id":"2:13273:335","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13274:23552","`u8`":"1:12374:1864"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5691":{"id":"5:5691","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5692:31135","5:5693:9201","5:5696:31136","5:5699:31137","5:5707:31138","5:5708:31139","5:5709:2866","5:5710:22449","5:5711:22450"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13366:30433":{"id":"2:13366:30433","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12355:475","self::pattern":"2:12952:8871"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12958:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12978:8866","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5710:22449":{"id":"5:5710:22449","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13392:22452"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2766:2410":{"id":"0:73-21:2766:2410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:2410","glob":false}}},"2:13393:22453":{"id":"2:13393:22453","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5699:31137":{"id":"5:5699:31137","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7747:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7747:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:2473":{"id":"0:55-31:125:2473","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:2473","glob":false}}},"2:13287:23580":{"id":"2:13287:23580","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13288:23581"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42153:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:587:2406":{"id":"0:70-21:587:2406","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:2406","glob":false}}},"0:49-31:68:2467":{"id":"0:49-31:68:2467","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:2467","glob":false}}},"0:65-21:1291:2407":{"id":"0:65-21:1291:2407","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:2407","glob":false}}},"0:25-21:6212:2423":{"id":"0:25-21:6212:2423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:2423","glob":false}}},"2:13396:23307":{"id":"2:13396:23307","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1063:38884"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:28747":{"id":"2:13295:28747","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13293:28753"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44317:8873","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"1:4333:3428":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:15778:21422":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:4161:3397":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:40739:3261":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"11:430:32961":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:3597:17296":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"5:4212:3166":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:3287:8792":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"7:32:15760":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:4810:16551":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:11368:2892":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"21:15310:21666":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"6:5341:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"17:12824:17135":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:2570:16006":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"5:3092:30344":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"21:15093:3022":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"21:9004:2845":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"17:15092:21368":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:22968:28849":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14091:20615":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:46080:3669":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:5172:16660":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"21:10794:2888":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"16:4844:16562":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"5:4486:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"16:2966:16024":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"21:13248:2924":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"1:12370:899":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"21:9354:2857":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"6:559:9998":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"21:15044:3021":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"1:12306:22234":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:44437:8902":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2315:3280":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:15646:21413":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:11035:3509":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:8302:14210":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:23212:28446":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:44483:8905":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:10775:34351":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:3443:2974":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:2705:3015":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"5:7724:3260":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:3906:3369":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:4152:16054":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"1:5622:3500":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:379:3134":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:40502:8992":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"2:44326:8872":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:587:2406":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"17:10137:17083":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12201:17356":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:8636:17034":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:13399:20096":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"30:1519:21636":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"2:12499:8875":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"17:13437:20099":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:30766:8931":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:12359:334":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"30:142:21744":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"16:7542:33372":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:40054:9016":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:842:3175":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:43132:2879":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:9133:3508":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:22358:3303":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:34544:9222":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:12478:17366":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"1:11223:9386":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"6:5255:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:3658:26874":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"21:12032:2819":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"2:23256:28447":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"29:27:2417":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"21:14484:34351":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"16:3048:16027":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:3460:3170":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"21:10540:34351":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:8585:17030":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:13292:20089":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:44351:8883":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:12335:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:42872:8805":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:5282:16678":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"1:12381:1429":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"21:12800:33428":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"17:15273:21383":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"17:11595:17255":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"6:7448:15164":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"5:40:3215":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"21:7889:2816":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"21:7842:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"11:0:2616":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"21:12915:2931":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:32476:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"21:9371:2876":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"16:6808:16961":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:16176:21592":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"1:11949:15957":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"21:39:2776":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"30:974:152":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"16:5379:16706":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:23120:3303":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"21:14136:2960":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"1:12361:1734":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"21:15419:34539":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"21:10300:34351":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"6:5057:13979":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:40814:3211":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:6876:14785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:4139:3395":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"6:8308:14211":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"1:957:3174":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"5:1129:31916":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:10534:34193":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12621:17377":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:6781:16959":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:9193:3544":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"21:14003:21652":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"17:13211:20085":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"18:515:21637":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"6:570:10000":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"21:13774:2845":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"16:5449:16730":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"17:10350:17123":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"21:7132:2806":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"16:2990:16025":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:44020:3331":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:33746:9216":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"17:12572:17129":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"16:6588:16951":{"crate_id":16,"path":["gimli","read","cfi","UnwindExpression"],"kind":"struct"},"21:13526:35142":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"17:12076:17271":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12494:17331":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11293:17190":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"21:7102:34351":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"30:1583:35936":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"2:40528:8991":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"18:481:21635":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:43173:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"17:14868:21358":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:2900:16021":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"21:10231:34351":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"5:7747:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4976:13969":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:12278:17358":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:3575:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:10638:3308":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"6:7986:9946":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"2:42886:8813":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:7829:3170":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"17:12353:17360":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:44851:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"6:7316:10843":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"11:1158:3182":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:5593:14034":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:10820:30178":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"17:261:33407":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:13877:20601":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"17:14051:20612":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:7487:15168":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"21:14846:34351":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"16:6942:16971":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"17:11773:17309":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"6:6599:14735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:3855:3019":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:1089:3180":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:14111:20616":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:7736:8825":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:15301:21386":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"21:8305:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:10887:34198":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"1:9170:3167":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"16:8209:17019":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"21:14147:2961":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"2:23006:28356":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"2:6964:2967":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"1:10984:22217":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"21:15456:34543":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"21:13761:34351":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"2:4852:8968":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:6796:3533":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"5:7567:30398":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:12901:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"1:8700:3468":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"27:434:21723":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"16:5255:16674":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:15931:20084":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"17:15799:21423":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:5992:3469":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:13606:20111":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"0:0:2497":{"crate_id":0,"path":["futures"],"kind":"module"},"1:871:2935":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"16:7521:33059":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:2920:16022":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:5670:14042":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:33612:3576":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"9:480:15788":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:15678:21415":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"2:3927:2958":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:5482:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:4717:8957":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11898:17290":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:41359:9170":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:3987:16037":{"crate_id":16,"path":["gimli","arch","PowerPc64"],"kind":"struct"},"2:40794:8834":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:6513:3728":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:7818:9168":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"24:190:2800":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"21:10843:2894":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"1:944:3171":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:1844:700":{"crate_id":1,"path":["std","env"],"kind":"module"},"1:3486:3336":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"21:14049:2935":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"1:12379:974":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:6953:9183":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"2:42237:3474":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:8066:17012":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"21:7588:34377":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:44416:8901":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:6902:14786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"20:68:2408":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"6:8319:14212":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:13674:20592":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"21:11922:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"6:7414:11017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"27:11:35901":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"5:7234:31966":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"11:1900:3183":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"16:4983:16586":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"21:15159:3025":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"1:2780:3016":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"17:15944:20085":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:45884:3635":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"30:1141:21738":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"2:4905:8969":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"17:0:2621":{"crate_id":17,"path":["object"],"kind":"module"},"27:441:3546":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:9120:3507":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:6861:2805":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"30:874:21737":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"16:6794:16960":{"crate_id":16,"path":["gimli","read","relocate","RelocateReader"],"kind":"struct"},"16:8612:17032":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"21:9608:2880":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"11:881:3178":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"17:11051:17179":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"16:7938:17002":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:13972:20606":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"6:5249:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"27:0:2434":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"6:6777:14756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"1:4923:3409":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:7463:15166":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"21:7194:2808":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"5:1530:2935":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:3841:3366":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:34371:9220":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"21:11539:35147":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"2:8291:2976":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"16:2724:16013":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:15456:21402":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:123:32972":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"21:12494:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"14:7:15924":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:13538:20106":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"27:124:21704":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:5085:8980":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"16:8165:17017":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"27:368:219":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"21:9088:2850":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"21:6377:21669":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"17:10759:17129":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"21:13638:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"6:1711:10910":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:13344:20092":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"25:0:2412":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"21:8280:2821":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"16:4241:16097":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"1:5779:3505":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:44138:8860":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:14986:21364":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:44034:3332":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"5:1561:3167":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"17:13568:20108":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"16:7372:16989":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"6:6666:14742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"21:9765:2882":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"2:42181:2935":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"30:1421:21611":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"16:7282:16985":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"1:3438:3346":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"6:8343:15743":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"1:6509:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"18:718:21624":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"30:0:2622":{"crate_id":30,"path":["memchr"],"kind":"module"},"6:6823:14758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:7765:16997":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"21:6964:2810":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"16:8000:17008":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:12373:892":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:4786:8965":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:41408:9175":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"21:6284:2910":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"6:5477:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:2606:9244":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"16:6738:33430":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"2:40757:3275":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"6:5570:14032":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:44531:8906":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"21:7505:163":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"2:21667:9011":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:16151:21590":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:11166:17167":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:5992:2413":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"1:4223:3403":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:43144:28367":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:3340:3347":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"9:53:15808":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"21:11578:34409":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"9:445:15789":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"6:1521:10892":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"11:785:3169":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:4883:3457":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:9259:2853":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:46036:3608":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:3267:9213":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"21:9340:2855":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"17:15748:21419":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"20:131:2425":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"2:6256:2801":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"17:13387:20095":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:0:308":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:16212:21595":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:9844:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"21:12450:2922":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:6406:27123":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"11:2301:3179":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:14016:3191":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"30:905:21740":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"0:46:1998":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"2:23223:28463":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"2:11237:3332":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"6:7563:15172":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"21:4486:21656":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"1:2003:3251":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"11:2466:3170":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:11708:22227":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:6421:16947":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:11490:2906":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"15:0:2619":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:6144:16935":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:42189:3166":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"5:7587:3167":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:12371:17140":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"2:42286:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"17:15313:21387":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:7152:3580":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:9315:27116":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"16:7462:16993":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:15151:21373":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"30:1107:2935":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"17:11102:17163":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"21:9950:2884":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"2:0:567":{"crate_id":2,"path":["core"],"kind":"module"},"26:0:2765":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"1:8233:3164":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:14977:21363":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:13774:17316":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"16:2772:16015":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:3638:9230":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8331:27834":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"16:6713:16956":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"16:6302:16942":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:39771:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:5335:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:12952:8871":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"6:5282:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"2:46226:3609":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12362:17361":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"6:5682:14044":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:2957:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"21:14906:34351":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"17:11443:17206":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:2967:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:6461:3541":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"15:327:15953":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:12338:22155":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:21676:28242":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"20:82:2755":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"5:7760:8913":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:46575:3610":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"21:7699:34377":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"13:0:2611":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:10622:34203":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13959:20605":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:2719:27173":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:42531:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"2:21918:3303":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:41975:28485":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"21:14971:34351":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"21:7047:34351":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:3300:27674":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:6723:14749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"1:11258:22107":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"16:7192:16982":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:14147:20618":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:3035:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:21802:3303":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"17:4821:17378":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:23201:28451":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"16:8320:17024":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:986:3178":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"21:14074:2957":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"17:11764:17263":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:597:17111":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"21:13884:34351":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"18:680:21629":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:3452:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:43880:8836":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13738:20594":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:11413:3277":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:14994:21352":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:4564:8971":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:8462:2938":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:1642:3200":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"11:2420:3167":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"20:143:21648":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"1:12360:1700":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:5217:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:40854:2880":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"0:56:1347":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"1:568:3113":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:12713:9373":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:1622:3173":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:44466:8904":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:8526:3331":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:11765:2909":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"1:12353:419":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:13797:20596":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:32309:3510":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:45837:3629":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:2140:9254":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:9287:22179":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:4354:3316":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:41152:2899":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11547:17252":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:44643:8892":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:15141:3023":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"17:12485:17367":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:8341:2968":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"16:8626:17033":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:14260:20624":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:42247:3150":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7060:8936":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:21810:3588":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"5:3342:3183":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:15023:21366":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:10638:27189":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:13785:17317":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:46883:3605":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:32445:9193":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"18:0:2622":{"crate_id":18,"path":["memchr"],"kind":"module"},"21:12057:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"13:229:32977":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"28:30:21725":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"5:4302:3316":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"6:6882:13866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:12362:1824":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:13881:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:10026:29488":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:8282:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:21718:28239":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:9397:3316":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"21:11409:34351":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"1:9411:3536":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"16:6843:16964":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"6:5088:13981":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"16:6239:16940":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:32351:25291":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:553:9997":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:32387:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:1920:3236":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:8717:3487":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:659:21627":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"30:1057:21753":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"17:14372:20632":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"30:930:21742":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"16:2415:15970":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"7:79:15767":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"17:13594:20110":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"21:11842:2811":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"16:5709:16925":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"17:15176:21375":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"17:11812:17269":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:9460:3574":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"5:6711:31916":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"21:6410:21667":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"21:8183:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:8476:2827":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"27:127:21705":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"21:13402:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"17:11853:17313":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:13753:20595":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"18:726:21632":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"5:895:2890":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46389:3632":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:43840:2902":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:8238:9177":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:13716:34351":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"17:12584:17130":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"17:14788:21355":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:10913:28110":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"6:6480:14729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:40541:8993":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:11524:17251":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"21:11054:34351":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"16:7838:16998":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"5:5805:8935":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11324:17217":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"21:7464:2812":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"17:11825:17291":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"21:9116:34351":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:2604:9243":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"18:643:2904":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:15039:21367":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:15569:21406":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:3592:3023":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:7983:3303":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"11:671:2935":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:1922:3237":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:7697:9298":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6611:14736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:6767:2428":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"2:34025:9218":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:12683:17376":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:45931:3631":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:1098:3181":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:14606:3013":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:11833:2911":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"16:6837:16963":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:6953:16972":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:2044:9156":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"21:4954:2964":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:5278:28518":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:4442:29383":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5036:13976":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"30:989:21629":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"17:14855:21357":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:6573:16950":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:7597:9179":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"14:220:15934":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:4103:3394":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:5776:3503":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"3:233:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:3935:3170":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"17:2037:17205":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"21:6768:2431":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:11998:8845":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:42492:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:6507:14689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"17:11227:17159":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:13899:20602":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:44829:28496":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"16:8151:17016":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"30:1444:8869":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"2:47185:8761":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:46928:3639":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:2704:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:6708:14747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"2:22684:3712":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"21:14865:3017":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"21:14669:3015":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:3414:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"17:12863:17137":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:3211:3126":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"1:11098:27176":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:16105:21587":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"31:68:2467":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"6:532:9994":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"21:6240:2436":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"1:902:3168":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"17:15266:21382":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:5875:3316":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"2:3653:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"27:140:21706":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"5:7487:3167":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:754:21633":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:3587:16033":{"crate_id":16,"path":["gimli","arch","MIPS"],"kind":"struct"},"2:47119:8755":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"17:12768:17091":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:10818:17130":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:7224:34351":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:10412:3512":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"21:9830:2801":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"6:8290:14208":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:10828:34184":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"27:181:21709":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"16:6462:16949":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:11214:17160":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:6769:2430":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"1:1620:3170":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"21:15200:3029":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"17:14246:20623":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:11188:2935":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"21:14013:3166":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:46374:28444":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"21:15226:3032":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:46596:3616":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"24:296:35896":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"2:23075:3376":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"17:9671:17086":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:14723:21353":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"5:4372:2935":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:8641:3458":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"11:2137:3180":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:10031:29185":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:6770:14755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:4843:8967":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:11430:8857":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:12729:9375":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"11:1884:3167":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:1675:10906":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"21:4353:35354":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"17:15434:21400":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:4929:13963":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:2037:675":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:39881:8948":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"21:14993:3019":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"2:43932:8852":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:6473:14728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"30:1267:21629":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"1:894:3167":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:9839:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:10967:2969":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"21:7817:2828":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"11:809:3170":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:5972:3316":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:13698:2830":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"6:1703:10909":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:41375:9172":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:1220:31491":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:10661:17127":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"21:12310:2820":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"2:8050:2869":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"16:903:33410":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:11743:17261":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"2:39655:8795":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"17:15400:21396":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12900:17139":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:10264:2885":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"2:33340:9214":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:11204:3508":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"21:8097:2823":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"16:8137:17015":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"23:0:2764":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"2:41352:28966":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:4986:17384":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"1:12322:27117":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:12647:17372":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"17:14599:20647":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"1:10889:3459":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:5395:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"21:14091:2959":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"17:12422:17363":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:5271:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:10938:3301":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"17:14284:20626":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:13693:2939":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"2:46123:3637":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:5635:14038":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:44558:8907":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"17:14298:20627":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:8158:2819":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"17:14752:21354":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"5:7653:3163":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"6:6740:14751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"2:12978:8866":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"6:5288:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:47139:8757":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:15168:21374":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"16:2450:16000":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:41381:2936":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:15138:21372":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:44934:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:6042:16929":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"17:9755:17082":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"11:854:3176":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8556:3359":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"30:1162:21740":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"21:15029:2961":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"2:40578:8882":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:9109:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:43115:8801":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"21:7444:34351":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"5:7684:3258":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"17:15624:21411":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:47148:8758":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:5198:16663":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:7454:15165":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"5:7161:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"20:0:2402":{"crate_id":20,"path":["futures_core"],"kind":"module"},"1:6682:3530":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:46613:3665":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"21:104:854":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"11:396:32962":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:8780:34351":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:8174:3300":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"11:1880:2935":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"6:7539:15170":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:43831:8847":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:15836:21426":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"14:165:15925":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:953:3173":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:10326:225":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"5:5942:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"17:11730:17260":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"21:12858:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"30:1468:21633":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"6:5334:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:2485:3289":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:9328:16996":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"21:9696:2881":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"21:6556:34562":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"17:11354:17202":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:4819:25256":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"17:12671:17407":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"2:32362:29314":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"21:6056:2910":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"18:96:21611":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"17:14449:20637":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:43160:28460":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"5:5545:2840":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:9274:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"21:11954:2817":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"21:7663:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:338:2815":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"1:10948:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:6282:27186":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"17:16050:20088":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:527:3107":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:14575:17099":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"16:6866:16966":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:3337:9221":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:949:3172":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:12376:1852":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:15957:21582":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"30:144:21745":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"17:10573:34205":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"21:14158:2962":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"17:15126:21371":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:10044:17118":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"27:481:3488":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:15701:21416":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"18:507:2904":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"1:8509:2876":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"2:4595:3123":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"6:6680:14744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:23730:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"16:2880:16020":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"21:4045:2833":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"30:1526:21627":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"24:309:21662":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"5:3698:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:40658:8989":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"29:25:2419":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:41931:3361":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"1:9389:3529":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"1:10346:27840":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:7386:16990":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:3089:8782":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:12107:17129":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:13904:3727":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"30:1246:21741":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"1:4153:3396":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:14012:20609":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"6:578:10001":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10068:17097":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"21:9571:2879":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"21:11146:2808":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"2:4722:8958":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:15635:21412":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"21:23:2774":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"17:12508:17368":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:4120:16045":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"21:12826:2916":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"17:15116:21370":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:9320:27105":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"21:12257:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:11080:27198":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:4215:3401":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15445:21401":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"21:13373:2928":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"6:6716:14748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"2:46806:3633":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:22227:3581":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"21:15316:3112":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"17:14587:20646":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:45899:3595":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:13593:29550":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"1:6867:3540":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"18:491:34228":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"21:37:2429":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"1:8765:3488":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"7:0:1914":{"crate_id":7,"path":["unwind"],"kind":"module"},"21:10347:34351":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"1:10595:3506":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:15992:21583":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:12695:17375":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"30:1541:21628":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:15211:3030":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"17:1207:17174":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"16:7305:16986":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"16:8058:17011":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:5648:14040":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7883:16999":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"16:7223:16983":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:7472:26745":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"11:1914:3185":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"1:3032:22086":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"6:7391:11032":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:22797:28870":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:8228:3165":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:11621:17228":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"5:7551:3167":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:13290:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"17:13844:20599":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:6770:2427":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"17:13015:17099":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"21:4540:27193":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"1:8843:3491":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:3257:3577":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:8330:14213":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"9:355:15805":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:8320:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:46176:3597":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:0:1726":{"crate_id":1,"path":["std"],"kind":"module"},"21:21:1325":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"2:818:3377":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"2:47276:8766":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"8:0:2613":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"11:488:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"27:187:21710":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"21:5675:2938":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"30:1077:21739":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"1:2541:2437":{"crate_id":1,"path":["std","io"],"kind":"module"},"1:9205:3547":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"16:4956:16582":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:1657:10904":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:5658:14041":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"18:581:9011":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"21:11182:34351":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"21:5171:2415":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"6:4881:13958":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:5258:27822":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:10641:34351":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:10754:9338":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:10982:17150":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:13187:20084":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"21:15189:3028":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"21:6583:34540":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"31:125:2473":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"1:12372:911":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3046:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:8480:2969":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"6:4816:13953":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"21:12810:34535":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"17:12707:17133":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:45969:3642":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"5:4167:31916":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:6625:33379":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:5520:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"5:5305:3524":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"6:7518:15169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:12365:741":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"16:7058:16979":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:8870:3493":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:43416:3488":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"21:6182:2422":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"21:10058:34351":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"1:1616:2958":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"11:2323:3180":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:4772:3453":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:40551:8994":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"6:5488:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:47238:8764":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:4875:13957":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:42728:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:8740:3195":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:22239:28247":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:546:33293":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:40892:28963":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"16:2684:16011":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:44620:8910":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:22982:28505":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:9916:17115":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12264:17327":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"27:149:21708":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:15037:32912":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"21:9012:2846":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"2:41017:9184":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:12690:9376":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"21:12135:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:5844:3541":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:42133:3365":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:6143:2883":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5085:16642":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"21:9674:34351":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"17:13308:20090":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:10715:3345":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:11973:27193":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Bomb"],"kind":"struct"},"16:3141:16030":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:46258:3664":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"21:13486:2926":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"17:11605:17250":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"1:9308:27826":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:43219:8803":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"2:42093:3363":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"6:5241:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:3427:2761":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"17:2234:17224":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:14414:20635":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:40836:9180":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:7993:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"27:487:21721":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"6:5551:14030":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:39040:9228":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"17:10018:17090":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"16:3695:16034":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"11:1601:15916":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"5:3100:30357":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"5:7070:8937":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"24:12:21649":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"1:4925:3412":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"27:495:21722":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:11471:8860":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"21:7457:2813":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"2:21751:3589":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"30:1133:21737":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"6:8267:14205":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:155:15975":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:7578:16996":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:22205:3591":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"11:798:2958":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:8503:17026":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:7036:8935":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:9407:3475":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:10382:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:586:10002":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:14489:20640":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"1:5588:3498":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"6:5387:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:22200:3303":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:3432:8780":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:11075:17169":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:11280:8862":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13855:20600":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:10954:17149":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"16:2704:16012":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:12368:739":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"16:6173:16937":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12388:17352":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"5:7559:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:9103:3506":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:22584:29230":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"21:11706:34351":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:9452:34351":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"6:1625:10901":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"16:8528:17027":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:40513:28494":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:672:3142":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"6:6638:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"31:100:2470":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"2:23168:28469":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"6:491:9990":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"17:10720:34192":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"17:12557:17169":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"2:44317:8873":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:9710:3300":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:40702:9298":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:4805:13952":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"2:47031:3666":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"21:4275:2943":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"21:7963:2824":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"17:12318:17141":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:8597:3433":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:6748:14752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"21:14193:34351":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"2:42206:3473":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:8788:3489":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:23267:28370":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"17:13922:20603":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:7168:15943":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:538:9995":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"21:7327:2807":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"16:5649:16907":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"18:598:21750":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:15389:2861":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:8433:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:23234:28491":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:10997:17151":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"1:8064:3148":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:43105:28368":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:43780:28971":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:46307:28483":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"30:1254:21742":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"2:11392:8856":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:5168:3464":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:12433:17099":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:7990:2938":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"18:651:2904":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:1609:2935":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:15360:34351":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"2:22:823":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"21:12675:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"31:120:2472":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"27:371:3541":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"30:943:21629":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"11:1580:15915":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:15608:21409":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:10185:17088":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:21804:3584":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:10386:8804":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"6:5265:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:10486:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"18:589:21749":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"16:4929:16578":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:26130:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11567:17254":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"29:20:2420":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"1:9715:22084":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:41142:2897":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"16:6749:16958":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:6731:14750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"21:6452:3529":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"1:10755:3118":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"17:15356:21391":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:34198:9219":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:11306:22190":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"30:1411:21610":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"30:1486:35937":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"16:6640:16952":{"crate_id":16,"path":["gimli","read","dwarf","DwarfSections"],"kind":"struct"},"2:44837:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"6:6623:14737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:11647:17256":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"1:4886:3435":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"6:6521:14730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:3484:3214":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"5:1008:2935":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"18:765:21626":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:3436:3345":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:22903:28459":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"5:5497:31916":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"21:12385:2824":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"2:44084:8891":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"9:500:15792":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:513:17110":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"21:2553:35355":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"16:6970:16973":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"6:6437:14724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:10388:8812":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:7789:33414":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"27:146:219":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"21:9403:34351":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"17:12300:17359":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"17:15324:21388":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:3724:3166":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"2:45867:3630":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:14432:2966":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"21:7779:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:46336:28436":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"5:7595:3167":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:40945:9182":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"30:1475:21626":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"11:1064:15911":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"5:3804:31916":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:9442:3306":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"17:10399:3331":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:10251:17120":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"21:6747:34541":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"5:4564:3316":{"crate_id":5,"path":["alloc","collections","vec_deque","shrink_to","Guard"],"kind":"struct"},"21:15525:34544":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"5:7507:2958":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"17:10218:17089":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:9420:2877":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"6:6700:14746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"16:8233:17021":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:44010:8877":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"17:11674:17257":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"21:11651:35148":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"2:2802:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"16:7416:16991":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"2:12958:8867":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"6:5507:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"2:21749:3303":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:40968:9185":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:5289:27822":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:41366:2939":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:2930:3303":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"21:1087:2854":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"1:11276:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"2:40883:2882":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:3659:8953":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"21:10704:2890":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"2:4496:8955":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"21:11545:34418":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:10396:8811":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"11:2566:3162":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:11367:17169":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:6799:3534":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"14:40:20086":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"21:8501:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:5165:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"1:8859:3492":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11688:17223":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13424:20098":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:8746:9176":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:974:3176":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"11:2400:3166":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:31172:9011":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:47159:8759":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"17:16121:21588":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:44685:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"28:208:3181":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"21:11211:2901":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"21:5212:2432":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"6:4937:13964":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"6:4869:13956":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"21:14058:3166":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:46161:3649":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:5316:3351":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"5:2354:32038":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"5:1592:3169":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:11865:17314":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:43181:8801":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"6:1589:10899":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:13750:2833":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"17:15383:21394":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:6792:3167":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"21:14033:2935":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"5:6097:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:47081:3651":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"6:5494:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"17:11497:17198":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"21:10080:2875":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"17:12127:17279":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"16:7907:17000":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:42767:3525":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:980:3177":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"16:7508:33392":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"26:43:35897":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"17:15214:21379":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"21:8540:204":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"2:44961:8777":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"26:37:35899":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:46634:28482":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"5:219:8800":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:42248:3476":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"5:7209:31949":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:8471:2413":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5381:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:44256:8889":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:11499:8861":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:44661:8893":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:45916:3601":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:15720:21417":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"21:7082:2804":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"6:5301:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"2:44052:8856":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"16:6680:16954":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackageSections"],"kind":"struct"},"21:7541:2825":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"1:12380:1924":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"14:202:8912":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"21:6848:34351":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"1:5602:3499":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"17:11115:17162":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:47060:3617":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:42570:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:15473:21404":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"25:9:2413":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"16:6890:16968":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"16:3014:16026":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:592:3115":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:12089:17272":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:21930:3585":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:15769:21421":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:479:9988":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:303:2977":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:5541:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"21:10663:2889":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"6:5311:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:11715:17259":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:3649:3034":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"6:8284:14207":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"2:21732:28245":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"1:5965:3527":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"6:4957:13966":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"11:2148:3181":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:10837:27173":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:11350:3278":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:6037:3151":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:10092:17119":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"21:12554:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"17:14066:20613":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:5708:3502":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"11:1105:15912":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"2:41007:2895":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:42278:2762":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:4531:3316":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:11392:17201":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"21:14718:3016":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"6:6544:14733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"1:7325:27183":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:13252:20087":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"21:13837:2941":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"2:44452:8903":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"21:13687:2938":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"2:2216:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:500:27181":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:5089:3454":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"11:351:32964":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"2:44720:9387":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:11269:17189":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"21:15378:2858":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:8004:3121":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"2:40686:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:40823:2876":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"2:46019:3602":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:5428:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"17:11341:17203":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:2840:16018":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:13217:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"16:8043:33296":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:22496:3717":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"2:11212:3166":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:39861:9231":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"21:6429:186":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"11:708:3172":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"11:2545:32960":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"18:635:21753":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:9518:8867":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:46484:3650":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:3248:9192":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11242:17187":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:9341:22181":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"21:10403:34351":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:14475:20639":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11003:3502":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:39699:3213":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:8565:17029":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"30:1225:21739":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"6:5319:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"14:160:15924":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:10141:2904":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"21:14927:3018":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"2:44298:8885":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:10929:22040":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:6493:14688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11016:17152":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:8853:2935":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:9384:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"17:12213:17357":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:13485:20102":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:44841:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11042:17154":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"30:1387:21635":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:1791:31916":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"21:15168:3026":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"2:3730:8796":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:3473:17278":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"6:5186:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"6:4890:13959":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:40977:2892":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:5224:16666":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:925:2844":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"2:44973:29454":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"6:485:9989":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"1:2322:3002":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:8234:9178":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"17:15010:21365":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:40993:2894":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:23179:28477":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"17:14545:20644":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"21:3786:2411":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"17:15289:21385":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:4694:16481":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:30734:3197":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"16:8669:17035":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:12443:17354":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:14436:20636":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"30:995:21629":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"31:138:2469":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:12967:8869":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:39831:3156":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:11661:17227":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:16198:21594":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"21:779:2833":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"17:12543:17373":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"21:15501:34560":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:15249:21381":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"21:15179:3027":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"1:10995:3240":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"18:563:21640":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:2591:30333":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"21:7292:34351":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:7770:8914":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"21:0:2404":{"crate_id":21,"path":["futures_util"],"kind":"module"},"17:13723:20593":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:6098:16932":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"5:7712:3259":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:14356:20631":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:3201:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"21:8611:2834":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"24:135:2799":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"1:373:3133":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:9545:3236":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"21:13538:2914":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"1:928:2958":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:4211:3400":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"18:689:21630":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:42269:9312":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:4109:3393":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:5025:13975":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:21928:3586":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:5851:3542":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"5:4501:31945":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:12967:2932":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"5:7845:8932":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"5:6532:3729":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"2:30508:3373":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:11215:22243":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:13633:2802":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"2:23088:3375":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:21703:28240":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:43426:29090":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"21:10119:34351":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"6:5441:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"16:5727:16926":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:7999:3119":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:11725:26741":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5325:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:30798:28435":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"16:7716:33409":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"17:12724:17134":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"21:10824:34351":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:2780:34383":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"function"},"10:44:15899":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"21:14067:3167":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"21:14785:34351":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"11:1140:15913":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:497:9991":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:39753:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:6269:16941":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:3667:3030":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:12454:17364":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:41400:2937":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"2:10643:3310":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:11668:27086":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"21:10510:2883":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"18:735:21625":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11877:17270":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:11557:17253":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"29:0:2416":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:10852:28222":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"1:4927:3413":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:43627:8837":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:1494:10888":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"21:2715:2910":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"21:14576:3012":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"11:1893:3170":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:44913:29559":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"6:1489:10887":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"24:9:21650":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"2:21822:3585":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:13999:20608":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:22934:28497":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"17:16223:21596":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:13272:20088":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:7577:15173":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:2765:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:8121:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:5004:3408":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"5:2262:3107":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"5:1633:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:43906:8834":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"30:1035:21752":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"5:5541:2878":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"21:8598:34351":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"16:7471:16994":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"1:2495:3294":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"28:42:3167":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"24:0:2498":{"crate_id":24,"path":["futures_task"],"kind":"module"},"30:1212:21738":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"21:8341:2820":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"2:23026:28489":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:42334:3166":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"21:12185:2804":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"21:10990:34351":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"1:675:3143":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:10378:2803":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"2:4477:8787":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:5357:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:12289:17323":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"1:2467:3283":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:39716:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:2074:1367":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:623:3136":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"30:1003:21630":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"21:15374:2859":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"17:12659:17371":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:2620:16008":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:11634:17226":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"11:2559:32969":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11089:17164":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:15232:2897":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:8169:3299":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:6338:185":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"2:32369:8966":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:4984:13970":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"21:8403:2822":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"16:5060:16640":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:10595:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"16:4404:16214":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"30:895:21739":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"1:11657:3488":{"crate_id":1,"path":["std","sys","thread_local","fast_local","eager","State"],"kind":"enum"},"1:7984:3135":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"17:10284:17121":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"1:758:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:4184:16063":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"16:2950:16023":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"6:6462:14727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:7767:28967":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:45952:3636":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:8219:2818":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"17:437:15972":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11702:17258":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:40562:8883":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:23157:28484":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"16:3441:16032":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"18:531:21638":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"16:7337:16987":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"17:12949:17141":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"6:1690:10908":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"21:8546:2830":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"6:1643:10903":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"30:952:21746":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"21:15323:34306":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"6:5462:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"6:5622:14036":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"17:14463:20638":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:43395:3311":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"30:967:21630":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"2:2951:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:3693:8793":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:10712:3349":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:6358:3727":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"21:14258:34351":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"9:236:3488":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"21:9311:34351":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"30:1565:21630":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"18:521:21634":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:6440:16948":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:3297:22917":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:40466:3138":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"5:2301:31817":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"6:1530:10893":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"30:1496:21634":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"12:0:2617":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"21:5264:1183":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"21:422:2405":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"6:5349:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"1:10976:22232":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:11063:17173":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:14402:20634":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"2:46501:3598":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:7361:15163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:13924:3724":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"16:7969:17005":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"5:6255:3316":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:564:9999":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"21:9531:2878":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"17:11510:17197":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"16:8096:17013":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:21687:28242":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:13986:20607":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"17:14560:20645":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"2:42172:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"5:991:3188":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:40874:2881":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"21:13729:204":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:38296:9224":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"11:835:3174":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:884:3166":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:8296:14209":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"6:5044:13977":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"18:608:21751":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:42342:3167":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"10:0:2615":{"crate_id":10,"path":["adler"],"kind":"module"},"21:15331:2860":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"16:5113:16647":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:22670:3303":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"17:15102:21369":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"4:0:2612":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"6:6758:14753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:1507:10890":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"1:680:3144":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40906:2802":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:42414:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:12767:8862":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:10344:22085":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"5:6012:2958":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:12467:9326":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"5:3301:2935":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:30772:9146":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40665:8990":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"5:6881:31916":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"11:2349:3181":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"2:44288:3022":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"21:14811:117":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"6:1551:10895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:8590:3363":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"11:299:32957":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"16:6408:16946":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"18:80:21610":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14503:20641":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:12483:9328":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:47200:8762":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:10955:22175":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"9:390:15790":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:11583:17225":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"16:5348:16698":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"1:5837:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:8711:17036":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:8208:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:42375:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"30:1504:35954":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"16:6111:16933":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:8241:27670":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:8545:3368":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:3559:3316":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"21:14659:3014":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"21:11320:2903":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"5:3090:30345":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"6:5117:13983":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:11915:17315":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:2010:791":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"6:5412:1252":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"1:8050:3147":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"6:1597:10900":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"16:7554:16995":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43198:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:9510:34351":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"17:15342:21390":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4842:13955":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:39703:9229":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:3241:9190":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"1:9220:3545":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:4167:3398":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:2179:3202":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"30:1011:21749":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"1:4406:3431":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:2820:16017":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:44834:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:6084:16931":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:15471:34545":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:9781:17112":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:11357:8863":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:4792:13951":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:473:9987":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"19:0:1300":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:40570:3138":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:22572:3721":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"2:22625:3722":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"2:30787:8801":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:7212:15942":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"5:891:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"21:13599:2915":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"1:6718:3538":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:2076:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:6449:14726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:44184:8886":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:11191:3507":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"1:9732:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"16:6256:33099":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"21:14085:2958":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"21:11979:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"16:6368:16944":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:14177:20619":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:2796:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:46144:3643":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:5127:13984":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:8519:2897":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"21:9735:34351":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"21:9648:133":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"1:11942:27843":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:12043:17274":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"1:8179:3297":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"21:5266:2437":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:23041:28360":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:16138:21589":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"11:434:32949":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"21:6212:2423":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"2:42115:3364":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"1:9401:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:23068:29465":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:873:3177":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:22918:29164":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12056:17275":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:4303:26740":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:1642:3186":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"6:6652:14740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:5069:13980":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:1392:3181":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:3393:3349":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"2:4:1265":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:8797:2841":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"11:1085:32948":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:10419:17085":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:39731:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:10964:2897":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"2:33679:3578":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"14:31:15924":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:32376:9288":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"2:40624:8988":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"21:13049:2920":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"1:7924:27195":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"16:6731:16957":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:7022:2805":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"1:8070:3239":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:8637:34351":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"1:5638:3501":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"17:11256:17188":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:4766:16530":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7990:17007":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:13526:20105":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:11467:17204":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"21:2766:2410":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"5:1236:30338":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:5471:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:12189:17355":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"30:1450:21625":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"17:2203:17199":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:1861:3220":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"2:46463:3644":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:1569:10897":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"6:1584:10898":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"26:53:35898":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"2:2149:9253":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:10908:22042":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"21:8572:2832":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"5:3347:31979":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:22712:3713":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"5:3368:3186":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:6188:16938":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:7478:3198":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:2366:15917":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"21:13321:2927":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"21:11804:34351":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:6067:3316":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"16:7401:33094":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"1:6678:2939":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"6:6659:14741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"2:43980:8884":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"21:13093:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"17:16235:21597":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"1:1897:3230":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:42197:3167":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:33813:9215":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"2:44667:9386":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"2:42153:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"5:1407:3180":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:10439:17124":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"30:918:21741":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"2:38351:9225":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:3087:3254":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:46065:3663":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:16269:20097":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:40924:9186":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:46729:3599":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"21:10745:2887":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"2:3279:8790":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"6:8008:15544":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:1625:3183":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"2:40767:3274":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"30:1204:21737":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"2:40673:8986":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:6443:14725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"2:42326:2935":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:4325:3427":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:31145:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:43619:9355":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"11:102:32968":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"21:7421:2811":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"16:908:33407":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"1:1637:3185":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:7431:11015":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"21:2769:1062":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"function"},"2:2954:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"21:13154:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"5:1601:3171":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:11680:21968":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"1:1613:3167":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"18:113:21612":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:10503:22075":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"16:7919:17001":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:6853:3539":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"21:9469:2900":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"11:2380:2935":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"11:1005:3179":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:22586:9243":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:5205:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:11018:22160":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"6:545:9996":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:42689:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:8622:3426":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:8179:17018":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"17:10155:16926":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"1:9269:27112":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"16:7075:16980":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"2:44202:8887":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:15426:21399":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"6:6526:14731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:12251:17328":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:40787:3302":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:41915:3360":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"21:15440:34546":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"16:6914:16970":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"21:11441:2905":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"2:3449:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:33880:9217":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:2707:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:8031:15546":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:6959:29460":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"1:8645:3460":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"2:42609:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:10390:8813":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"21:6217:2421":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"1:8222:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:11719:26737":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:10327:3034":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:7495:33351":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:12031:8846":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"21:12208:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"2:2963:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"6:7586:15174":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:8598:17031":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"6:465:9986":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:44238:8888":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"6:1514:10891":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:14189:20620":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:16032:20087":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"11:1907:3184":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:13173:17415":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"14:0:2618":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"17:13064:17095":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"21:335:34495":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"31:38:35966":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"1:8336:27129":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:43919:8835":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:44595:8908":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:44709:3579":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:8373:2975":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:4829:13954":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"30:960:21629":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"21:15292:3035":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"21:9234:34351":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:47174:8760":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"21:13803:34351":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"21:12719:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"16:7807:33443":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:10171:8802":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"9:176:15894":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:12371:905":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"21:13464:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"2:43961:8854":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:8273:14206":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:11405:17200":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:16165:21591":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"17:14079:20614":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:38406:9226":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"16:0:2620":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:6631:14738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"21:15021:3020":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:3206:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"21:9909:34351":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:32916:9212":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"30:1175:21741":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"15:306:15949":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"21:20:1325":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"6:5295:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"1:8085:3240":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"21:11826:2912":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"11:1888:2958":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:15220:3031":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"21:15125:34351":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"2:39868:8940":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"21:14022:21653":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"1:12374:1864":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:14912:21360":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:12328:17324":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"30:1119:21629":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"16:8223:17020":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"21:12421:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"6:4947:13965":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:44333:8882":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"17:16079:21585":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"16:6337:16943":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:2796:16016":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:4577:31945":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:21720:28237":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"17:13089:17412":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:15582:21407":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:1256:31479":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:16069:21584":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:12973:8868":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:42059:28860":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:15:2731":{"crate_id":2,"path":["core","write"],"kind":"macro"},"11:2228:15907":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:1859:3219":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:11268:2902":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"11:2121:3179":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"21:15486:34542":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"21:400:27198":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"21:10607:2893":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"11:2539:28532":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:10524:17125":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:42648:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:15390:21395":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:3889:16036":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:43379:3309":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"11:1920:3186":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"21:327:2814":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"17:16259:20095":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"2:44004:8878":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"16:5417:16721":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"2:44924:3723":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"21:9801:34351":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"11:364:32966":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"16:6608:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:732:31477":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"21:10869:34351":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"5:5146:3316":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"17:9938:17116":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"16:7259:16984":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:43849:8850":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:8546:17028":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:14038:20611":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:8489:2971":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:10710:17128":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"6:6917:14787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:11092:27185":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:13235:20086":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"1:938:3170":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:13146:17414":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:963:3175":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:517:9992":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:6936:34351":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:3396:8794":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"21:1291:2407":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"1:11874:3371":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:11142:17129":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"16:7424:16992":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"21:12760:34368":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"2:4430:29384":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"2:42081:3372":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"2:10603:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"5:7495:3189":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"27:72:21720":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"6:6790:32169":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:4694:3436":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"21:14222:2963":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"2:46290:3671":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:2483:3288":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:5151:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:9737:17084":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"2:10384:8805":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"2:32385:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4970:13968":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"6:6411:14722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"2:47128:8756":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:12382:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:12375:1846":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:5007:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:896:33413":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"11:2533:32971":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:821:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"6:0:1010":{"crate_id":6,"path":["libc"],"kind":"module"},"30:1020:21750":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"21:9169:34351":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:3677:3326":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"21:7267:2803":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"2:32474:8788":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"14:187:15932":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"21:9634:34351":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"6:1696:3420":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:42351:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:7397:24858":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:10769:34204":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"21:11119:34351":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"1:8803:3490":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:8667:3411":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:9984:17117":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"15:394:15960":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:41947:3362":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:12072:8842":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:1727:10911":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"30:1397:34228":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"17:14212:20621":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"21:8366:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:9406:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:12232:2821":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"21:8975:34351":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:23190:28445":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:3303:27669":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"1:2741:3333":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"30:1432:21612":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"21:8854:2842":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"17:13363:20093":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"21:14803:2957":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"5:7668:3125":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:1545:3166":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"20:97:2409":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"6:5562:14031":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:12808:17094":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"17:11841:17312":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:8551:3367":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"17:15463:21403":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"6:523:9993":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:2726:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"5:7527:3203":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"17:13455:20100":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:16093:21586":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:1075:3179":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:12141:24860":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:47253:8765":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"21:4503:2944":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"21:10321:2802":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"17:12969:17087":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"16:5689:16924":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:15418:21398":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:42879:8812":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"2:8271:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"2:8784:29492":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:12912:3276":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"21:7157:34351":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:3820:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"21:13010:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"6:8249:14202":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"17:256:33410":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"21:12649:2825":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"21:6778:2801":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"30:1575:21631":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:6765:14754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"21:14349:2965":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"21:10615:2891":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"17:13497:20103":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:5742:16927":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:15410:21397":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:8036:2817":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"17:11153:17130":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:11537:17218":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"17:12597:17379":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"16:8298:17023":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"16:2550:16005":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:9416:3537":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"21:14291:2942":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"5:2821:30358":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:9190:2852":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"17:12399:17362":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:13026:8895":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"17:15655:21414":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"16:3834:16035":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:15384:35143":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"21:6394:21668":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"6:7341:15161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:43993:8881":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:7358:16988":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:8022:3118":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:40729:3331":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:1098:17166":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:40864:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:46679:28270":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"28:0:2766":{"crate_id":28,"path":["slab"],"kind":"module"},"17:15760:21420":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"6:7332:9869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5420:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:8532:3332":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"9:0:2614":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:12356:1886":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"28:217:3179":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:4454:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"30:1555:21629":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"28:55:3166":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"5:7517:3190":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"5:4137:2958":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:7869:17111":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:1961:3316":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"6:7604:15175":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"31:109:2468":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"9:422:15791":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"21:14119:34351":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:3313:31986":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:1107:3182":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:13581:20109":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"6:6691:14745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"5:2374:31786":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"16:2640:16009":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:3903:3370":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:9889:2801":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"5:3711:2935":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"17:12516:17383":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"16:2660:16010":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"21:8122:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:10325:3230":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:15822:21425":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10671:34183":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:5447:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:12378:1840":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"11:772:3168":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:1631:3184":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"5:1421:3182":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:7044:16978":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:9256:3528":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"6:7350:15162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:6502:15969":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"6:8261:14204":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:12584:2919":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:32355:17035":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"21:8752:2840":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"17:12464:17365":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"17:11419:17129":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"11:1674:32945":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"20:27:3303":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"21:6825:2802":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"21:11868:34351":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"21:331:3112":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"28:76:35911":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"2:3455:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"21:15513:34558":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"16:6984:16974":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"16:5757:33396":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:44892:3725":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:6199:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"6:4896:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:4921:13962":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"6:5641:14039":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"1:2635:3013":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:5112:3456":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"1:5958:3526":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"11:328:32955":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"16:7980:17006":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"21:14754:2876":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"17:13766:17318":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:1974:3250":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"16:6696:16955":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"17:11574:15907":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:9424:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:5257:437":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"21:7490:34351":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"2:46205:3603":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"6:4990:13971":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:2760:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"30:1091:21741":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"6:8014:15545":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:8428:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"6:5019:13974":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"17:14235:20622":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"27:136:3541":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"21:12699:2929":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"1:11853:3369":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:13660:2935":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"1:8196:3298":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:1500:10889":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:9162:3549":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"21:7395:34351":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:11930:8773":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:10317:17122":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"11:2551:32974":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:8186:3301":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:7350:33387":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:5950:2936":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"5:6150:9587":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"6:5450:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"21:11297:34351":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"6:7368:3460":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"6:4964:13967":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:11085:2898":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"24:169:2798":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"5:3334:3185":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"16:8014:17009":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:13188:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"21:8061:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:13963:34416":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"24:15:21651":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"15:288:15948":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:44609:8909":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:21701:28234":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:1632:10902":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"1:6183:3541":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"21:14635:34351":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"17:12238:17329":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:915:3169":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:15596:21408":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:3126:16029":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:12875:2917":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"6:5533:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"1:12366:744":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"6:5196:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:5051:13978":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:46708:28503":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"1:12369:917":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"16:6876:16967":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:38461:9227":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:36420:9223":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:13553:20107":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"6:5139:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:10369:2896":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"17:15190:21376":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"21:4607:2846":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"17:16249:21598":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"2:46275:3670":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"21:12515:2918":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"2:13610:9018":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"5:1895:3170":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"21:11676:2907":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"16:8028:17010":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:14271:20625":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"21:13577:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"1:656:3140":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:14876:21359":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"10:36:32944":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:40717:3257":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"21:12620:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"1:12327:3149":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"21:10453:2805":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"1:12377:1858":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"2:46094:3583":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:4873:16568":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:22452:3716":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:2590:676":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:4267:16100":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"2:10392:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"16:8483:17025":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"30:882:21738":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"17:14341:20630":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:6564:14734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:23245:28458":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"1:4561:3424":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"21:2566:34497":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"17:13375:20094":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"21:12110:2818":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"21:11012:2899":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"1:10918:3297":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"11:1023:3180":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:13046:17096":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:6566:34561":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"1:8539:3022":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"21:13350:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"17:13509:20104":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:32444:2973":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"21:7919:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:9235:3548":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"5:935:3187":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"2:3282:8791":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"1:8257:3019":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1583:3168":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"17:403:17109":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:13943:34351":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"21:7528:34351":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"1:6374:27180":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"21:5251:21664":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"1:9361:22183":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"17:15206:21378":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"13:110:32986":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:43404:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:11319:8851":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:41390:9173":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"21:15301:3036":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"1:4672:3435":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:15734:21418":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"1:8602:3434":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:13116:17413":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"21:8559:2831":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"2:22990:28439":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"5:2168:3201":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:5144:16655":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"1:12355:475":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:9703:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:3065:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"30:1511:21638":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"2:22360:3587":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:4008:3371":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:11503:27177":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"21:13735:2834":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"1:4807:3398":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:40472:8956":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"11:1564:15914":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:6813:14757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:44859:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:15058:21351":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:12342:17326":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"21:12944:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"21:10933:34351":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"21:8898:34351":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:4201:3399":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:9154:2935":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:14325:20629":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"21:10206:2904":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"16:6904:16969":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"5:7537:31972":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:12030:17276":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:5256:21663":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"2:46357:28464":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"5:3308:3184":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:39791:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"5:2272:31981":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:43859:8848":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:45852:3594":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11788:17310":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"2:10394:8810":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:22717:3711":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:14968:21362":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:46973:3611":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:14025:20610":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"5:1611:3172":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"1:432:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"21:8534:2829":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"2:41166:2901":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"17:12851:17136":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"28:46:2935":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"18:623:21748":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"30:1233:21740":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"2:43941:8855":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11189:17165":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:7469:15167":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"21:10481:34351":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"16:7949:17003":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"5:795:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:7308:10039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:43869:8849":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"21:13678:2937":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"6:5366:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"18:698:21631":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"6:5179:3419":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:4817:25254":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:43387:29183":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"21:14519:2967":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"16:2530:16004":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:12993:17142":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"16:7030:16977":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:6822:16962":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"21:6984:34351":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:16187:21593":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"17:10877:17131":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:39811:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:8105:17014":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:9146:3509":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"22:0:2763":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"21:10019:70":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"6:1667:10905":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:13946:20604":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"11:740:3173":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:47002:3645":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:40958:2891":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"21:57:2433":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"18:538:21639":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:5629:14037":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"17:12929:17140":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:22639:9243":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"16:6998:16975":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:15197:21377":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"6:4997:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"2:44102:8890":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"28:60:2958":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"17:14386:20633":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:7702:8998":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"16:5318:16691":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:46434:3638":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"16:7959:17004":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"2:4713:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:15333:21389":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:10688:34351":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:46051:3614":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:2318:2997":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:9176:3546":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"5:3870:3201":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"21:10599:2886":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"16:6159:16936":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"11:1049:3181":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:12653:9374":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:13175:2923":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"21:15558:34370":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:9557:34351":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"21:15283:3034":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"21:10891:2895":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"30:1154:21739":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"6:6534:14732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:44342:3138":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:11041:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:6419:14723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"6:5230:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:2175:17239":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"20:92:3303":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"11:2440:2958":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:42865:8804":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"9:328:15845":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"17:15521:21405":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:14131:20617":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:7703:8999":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"17:3264:17273":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:39619:8951":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:11031:3303":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"21:7638:2825":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"17:10612:17126":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:5224:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:5405:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"21:9994:34351":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"2:4060:3167":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:3665:8952":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:12887:17138":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"30:1183:21742":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"16:2435:15999":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:7354:28000":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:11493:17211":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:7717:27130":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:8737:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:6672:14743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:12150:17277":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:47315:8767":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"11:685:3166":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:14847:21356":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:6129:3524":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:6123:16934":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"6:1563:10896":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"16:6028:16928":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:10915:34200":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:2073:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:14281:236":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"17:13814:20597":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11956:15957":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:11513:8859":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:9807:17098":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"21:13819:2940":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"20:32:2403":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"20:17:2754":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"6:4914:13961":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:3395:3350":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:12530:17374":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:11674:3513":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:7731:3473":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"30:1045:21748":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"2:2931:9015":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:6764:9187":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"30:1460:35960":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"2:44308:8874":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5603:14035":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"1:9280:3112":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:3272:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:12354:1183":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:9348:2856":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"18:613:21752":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"16:7016:16976":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"1:4821:25258":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"21:13425:2930":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"5:288:31916":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"17:14933:21361":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"21:14741:34351":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"5:4332:3316":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"31:65:2466":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"2:13961:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:3252:3575":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:12367:760":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"18:670:21628":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:45998:3596":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:43951:8853":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:4354:3430":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:15150:3024":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:4796:8966":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:5586:14033":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"3:0:509":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:8723:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:10709:3347":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:44156:8858":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"16:2467:16001":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:5098:3455":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"2:46243:3615":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:10377:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"21:13512:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"21:11516:34351":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"17:13024:17143":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:11813:3370":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"1:6924:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:15814:21424":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"31:0:2465":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"1:3529:2936":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:11313:17191":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"21:11346:34351":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"1:12358:1323":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:2154:3019":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:6665:2958":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:4643:8826":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:13325:20091":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"21:6916:2801":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"2:3199:8789":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:45984:3648":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:46546:3604":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"6:5107:13982":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:43434:29091":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"17:14311:20628":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"30:1030:21751":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"1:4981:3414":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"16:7159:16981":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:40936:2805":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"27:467:21719":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"16:4902:16574":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:11694:21965":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:15616:21410":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:15078:17168":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:13669:2936":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"16:6389:16945":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"5:786:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:7548:15171":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40691:3256":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"21:7375:2809":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:4439:21654":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"11:1725:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:40845:9181":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:7879:27857":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:6572:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"21:8833:34351":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:44900:3726":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:15281:21384":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"21:15076:34351":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"1:11241:3306":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:11026:17153":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:13473:20101":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:9886:17114":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"21:8650:218":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"16:6205:16939":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"5:3096:30336":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:22558:3303":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"31:102:2471":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"16:6064:16930":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:14516:20642":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:9858:17113":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:1831:9124":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"11:830:3171":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"17:14529:20643":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:15222:21380":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"6:8353:15744":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6852:16965":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:13832:20598":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"27:154:3547":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"1:4487:3432":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8608:3423":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"16:2506:16003":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:47223:8763":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:22850:28871":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:11128:17161":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:14042:3167":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"5:5002:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"21:14554:34351":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"16:3110:16028":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"2:3648:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"5:1493:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:2337:8797":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:2142:9255":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"2:22957:3374":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:13725:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22534:3718":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"21:8244:34351":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11790:21979":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"21:11886:2816":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"21:7347:34351":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:3342:3348":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"30:1065:21737":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"1:2469:3284":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:1481:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:10345:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:40585:8987":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"6:1539:10894":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:8616:3368":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:14695:34351":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"16:2486:16002":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"6:6381:14660":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:8923:2843":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"16:8267:17022":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:23099:3390":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:15368:21392":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"21:15276:3033":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:12458:2921":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:13910:2942":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"21:13032:2934":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"21:6199:2424":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"21:9594:34351":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"6:5676:14043":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"21:14329:34351":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"11:698:3167":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:47102:3672":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:9133:2851":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"21:7759:2826":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:44950:8779":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:2748:16014":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:44630:8911":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"5:1376:3179":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"2:5358:985":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:10218:21997":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"16:3308:16031":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:15376:21393":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:23278:28465":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"18:706:8869":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"29:17:2418":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"21:11467:34351":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"1:3610:2970":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11755:17262":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:33128:9211":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:15258:34351":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"2:32386:2972":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"21:14398:34351":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"14:214:15933":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:42453:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:12225:17330":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"17:13412:20097":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:8199:15707":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"16:2590:16007":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"27:452:3548":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"6:5375:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"18:573:2904":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:11485:8858":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"21:12984:2933":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"1:8249:3341":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"6:4902:13960":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12792:17093":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:2860:16019":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"21:11249:34351":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"17:12175:17343":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"17:12408:17353":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"22:7:2426":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"2:3678:29526":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"6:8255:14203":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:2960:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"6:1684:10907":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:4341:3429":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:10729:34351":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:4707:2414":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:41893:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10170:16927":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"5:7642:3162":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:11799:17311":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"16:6658:16953":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:13118:2925":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"2:40915:2803":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:10905:17132":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"30:1196:21629":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"2:4874:3124":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}