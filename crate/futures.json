{"root":"0:0:1760","crate_version":"0.3.24","includes_private":false,"index":{"2:9161:4635":{"id":"2:9161:4635","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Step","id":"2:8197:4637","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3453:3578":{"id":"2:3453:3578","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3455:183","2:3456:1110"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3530:3594":{"id":"2:3530:3594","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3532:1245"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:5885:1671","glob":false}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:195:1732","glob":false}},"1:7602:4340":{"id":"1:7602:4340","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7603:55902"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:8042:1391","glob":false}},"2:13809:12734":{"id":"2:13809:12734","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5519:4199":{"id":"1:5519:4199","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5520:56398","1:5521:56399","1:5522:54413","1:5523:56400","1:5524:4496","1:5525:4497","1:5526:56401","1:5527:1317","1:5528:56402","1:5529:56403","1:5530:56404","1:5531:56405","1:5532:56406","1:5533:56407","1:5534:56408","1:5535:56409"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:24072:4630":{"id":"2:24072:4630","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:24073:4629"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:24068:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:9751:1683","glob":false}},"2:8874:158":{"id":"2:8874:158","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8875:2776","2:8876:928","2:8877:3060","2:8880:3061","2:8881:500","2:8883:3062","2:8886:3063","2:8887:3064","2:8888:3065","2:8889:2302","2:8891:2550","2:8893:3066","2:8894:3067","2:8896:847","2:8899:2543","2:8906:2529","2:8908:2530","2:8911:2528","2:8912:2551","2:8913:2540","2:8915:2541","2:8917:3068","2:8920:1321","2:8921:2318","2:8922:2539","2:8926:2537","2:8929:2535","2:8930:2545","2:8931:2555","2:8933:2546","2:8934:2290","2:8936:3069","2:8939:3070","2:8941:3071","2:8951:3072","2:8966:3073","2:8968:3074","2:8972:3075","2:8981:2534","2:8984:3076","2:8986:3077","2:8989:282","2:8996:300","2:9003:3078","2:9010:3079","2:9019:3080","2:9029:1021","2:9036:3081","2:9043:2234","2:9044:3082","2:9045:3083","2:9057:3084","2:9064:3085","2:9076:3086","2:9083:3087","2:9084:2532","2:9089:3088","2:9092:3089","2:9095:2533","2:9096:3090","2:9098:3091","2:9100:3092","2:9102:421","2:9105:3093","2:9108:1004","2:9111:3094","2:9114:608","2:9117:3095","2:9120:913","2:9122:832","2:9124:797","2:9126:716","2:9128:700","2:9130:3096","2:9131:3097","2:9139:3098"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13725:57036":{"id":"2:13725:57036","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:3907:3606":{"id":"2:3907:3606","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:47:1679","glob":false}},"20:110:1998":{"id":"20:110:1998","crate_id":20,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:111:2246"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3614:131":{"id":"2:3614:131","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3616:382"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"2:3617:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:96:1668","glob":false}},"5:6163":{"id":"5:6163","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5976:1353","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6164:61999","5:6165:2967","5:6168:62000","5:6171:62001","5:6183:62002","5:6184:62003","5:6185:2137","5:6186:55779","5:6187:55780"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13719:57033":{"id":"2:13719:57033","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8197:4637":{"id":"2:8197:4637","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8198:60635","2:8199:60636","2:8200:2554","2:8201:60630","2:8202:60637","2:8203:60634","2:8204:60633"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3743:3599":{"id":"2:3743:3599","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3745:60109","2:3746:60110","2:3747:57071"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:173:1727","glob":false}},"2:3506:3589":{"id":"2:3506:3589","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3508:183","2:3509:1244"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3248:116":{"id":"2:3248:116","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3249:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:39:1678","glob":false}},"2:9157:2780":{"id":"2:9157:2780","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13832:4213":{"id":"2:13832:4213","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5446:4213"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50097:4214","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6467:4199":{"id":"1:6467:4199","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6468:54222","1:6469:54223","1:6470:54224","1:6471:54225","1:6472:54226","1:6473:54227","1:6474:54228","1:6475:54229","1:6476:54230","1:6477:54231","1:6478:54232","1:6479:54233","1:6480:54234","1:6481:54235","1:6482:54236","1:6483:54237","1:6484:54238"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5563:4201":{"id":"1:5563:4201","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5564:56399"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13768:61347":{"id":"2:13768:61347","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888","str::split":"2:13756:2317","str::split_terminator":"2:13765:61346"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49857:5013","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14540:4388":{"id":"2:14540:4388","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14541:58600","2:14542:58601","2:14543:58602","2:14544:58603","2:14545:58604","2:14546:58605","2:14547:2546"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2862:98":{"id":"2:2862:98","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:60597"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"2:2859:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:43:1020","glob":false}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:687:1665","glob":false}},"5:6165:2967":{"id":"5:6165:2967","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:7282:1674","glob":false}},"2:3181:232":{"id":"2:3181:232","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:128","2:3184:1430"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3620:133":{"id":"2:3620:133","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3622:183","2:3623:384"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6168:62000":{"id":"5:6168:62000","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5505:4196":{"id":"1:5505:4196","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5506:54413","1:5507:55813","1:5508:55814"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:687:1665","glob":false}},"2:10563:110":{"id":"2:10563:110","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10564:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6164:61999":{"id":"5:6164:61999","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2286","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:5198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2286","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:5198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3501:3587":{"id":"2:3501:3587","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3503:183","2:3504:362"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3437:3579":{"id":"2:3437:3579","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3439:183","2:3440:1368"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13357:4681":{"id":"2:13357:4681","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13359:56215","2:13360:59418","2:13361:59419"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Searcher","id":"2:13351:4680","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3835:3602":{"id":"2:3835:3602","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3837:55209"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10811:147":{"id":"2:10811:147","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10812:656","2:10813:1976","2:10814:58656","2:10815:58657","2:10816:58658","2:10817:58659","2:10818:58660","2:10819:58661","2:10820:58662","2:10821:58663","2:10822:58664","2:10823:58665","2:10824:58666","2:10825:58667","2:10826:58668","2:10827:1549"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:8152:923","glob":false}},"2:13729:57055":{"id":"2:13729:57055","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_mut":"2:13730:57056"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:5885:1671":{"id":"21:5885:1671","crate_id":21,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:5886:2252","21:5888:2707","21:5891:2253","21:5894:298","21:5897:2710","21:5900:2711","21:5902:2712","21:5904:2619","21:5905:3239","21:5906:3075","21:5909:3244","21:5912:3245","21:5915:3248","21:5919:3069","21:5921:3243","21:5922:3240","21:5925:3241","21:5929:2403","21:5930:3074","21:5934:3242","21:5935:3246","21:5936:3247","21:5937:3250","21:5938:3249"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryStream","id":"20:127:1669","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3824:229":{"id":"2:3824:229","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3825:183","2:3826:3602","2:3827:690","2:3828:375"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FromResidual","id":"2:3829:138","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"29:42:1680":{"id":"29:42:1680","crate_id":29,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:43:54029","29:44:54030","29:45:52893","29:46:52894"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:44:1663","glob":false}},"2:10578:4581":{"id":"2:10578:4581","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10579:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:2156:1667","glob":false}},"2:3171:150":{"id":"2:3171:150","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:59143"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:39:1678":{"id":"29:39:1678","crate_id":29,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:40:54010","29:41:54011"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3522:3592":{"id":"2:3522:3592","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3524:360"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13738:30207":{"id":"2:13738:30207","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50081:5024","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:39:1678","glob":false}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:10421:1690","glob":false}},"2:13362:4682":{"id":"2:13362:4682","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:168:697","glob":false}},"5:6184:62003":{"id":"5:6184:62003","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:444:2286","`String`":"5:8472:220"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:444:2286","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8217:5198","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13756:2317":{"id":"2:13756:2317","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::rsplit":"2:13762:57065","self::pattern":"2:13332:4678","prim@char":"1:15883:1888","`DoubleEndedIterator`":"2:8717:121","str::split_whitespace":"2:13734:30222"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49789:2966","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4410:2335":{"id":"1:4410:2335","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4411:2309","1:4412:2310","1:4414:56718","1:4415:2313","1:4416:2314","1:4417:2311","1:4418:55943","1:4420:56719","1:4421:2546","1:4422:2355","1:4423:2302","1:4425:2318"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23768:14237":{"id":"2:23768:14237","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23769:59468","2:23770:59467","2:23771:59469"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialOrd","id":"2:23763:4631","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3870:3605":{"id":"2:3870:3605","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3177:233":{"id":"2:3177:233","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:128","2:3180:1431"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6576:4190":{"id":"1:6576:4190","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6577:55855"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3600:2003":{"id":"2:3600:2003","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3601:550"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Deref","id":"2:3587:117","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13715:54318":{"id":"2:13715:54318","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12796:5147"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:988:1666":{"id":"21:988:1666","crate_id":21,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:989:2706","21:991:2707","21:994:2708","21:998:2253","21:1001:2252","21:1003:2709","21:1005:298","21:1008:2710","21:1011:2711","21:1013:2712","21:1015:2403","21:1016:2713","21:1017:2714","21:1019:772","21:1020:2715"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"TryFuture","id":"20:44:1663","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6171:62001":{"id":"5:6171:62001","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3496:3586":{"id":"2:3496:3586","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3498:183","2:3499:359"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23049:4833":{"id":"2:23049:4833","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23050:4629","2:23051:59155","2:23052:59452","2:23053:59453","2:23054:59454","2:23055:41148","2:23056:59456","2:23057:59457","2:23058:59458","2:23059:59459","2:23060:59460","2:23061:59461","2:23062:59462","2:23063:59463","2:23064:59464","2:23065:59465","2:23066:59209","2:23067:59466","2:23068:59467","2:23069:59468","2:23070:59469","2:23071:59156","2:23072:59157","2:23073:59158","2:23074:59159"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:7997:1675","glob":false}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:7282:1674","glob":false}},"2:14072:151":{"id":"2:14072:151","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14073:183","2:14074:151","2:14075:772"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13351:4680":{"id":"2:13351:4680","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13353:4700","2:13354:928","2:13355:60577","2:13356:60578"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:10422:1687","glob":false}},"2:10584:4582":{"id":"2:10584:4582","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10585:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6186:55779":{"id":"5:6186:55779","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13828:55782"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3272:128":{"id":"2:3272:128","crate_id":2,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3273:5100","2:3275:54506","2:3276:54507","2:3277:54508"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"2:10563:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Display","id":"2:10570:120","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:9756:1681":{"id":"21:9756:1681","crate_id":21,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9757:2306","21:9758:4051","21:9759:2315","21:9761:2312","21:9763:2308"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncBufRead","id":"29:49:1677","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14456:142":{"id":"2:14456:142","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14457:283","2:14458:523","2:14459:286","2:14460:1087"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1031:4211":{"id":"1:1031:4211","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1032:5193","1:1033:5190","1:1034:55779","1:1035:55780","1:1036:55781","1:1037:55782","1:1038:55783"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:67:1689","glob":false}},"2:13707:798":{"id":"2:13707:798","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:15883:1888"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1677","glob":false}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:9795:1695","glob":false}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:97:1692","glob":false}},"2:13745:57073":{"id":"2:13745:57073","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13734:30222":{"id":"2:13734:30222","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"2:13735:30212"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50063:5022","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23238:4249":{"id":"2:23238:4249","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23228:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2859:97":{"id":"2:2859:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2861:1958"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13732:4707":{"id":"2:13732:4707","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:15883:1888"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49765:5008","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3512:3590":{"id":"2:3512:3590","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3514:183","2:3515:1247"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:17:1673","glob":false}},"1:4752:4215":{"id":"1:4752:4215","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:2198","1:4754:56926"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2953:179":{"id":"2:2953:179","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2954:421","2:2955:2234","2:2956:3082","2:2957:58568"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"2:2922:125","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"2:2963:186","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:206:1728","glob":false}},"2:13799:61355":{"id":"2:13799:61355","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:23763:4631":{"id":"2:23763:4631","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23764:1283","2:23765:1282","2:23766:1280","2:23767:1279"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdPartialEq","id":"2:23175:4834","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3654:2813":{"id":"2:3654:2813","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3656:242","2:3657:208","2:3658:60520"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13752:6028":{"id":"2:13752:6028","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888","`None`":"2:47810:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13728:61344":{"id":"2:13728:61344","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:15889:1893","crate::ops::IndexMut":"2:3676:3597","str::slice_unchecked":"2:13727:4290"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13802:61357":{"id":"2:13802:61357","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:96:1668":{"id":"20:96:1668","crate_id":20,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:97:2776","20:98:3103","20:99:3061"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5431:4235":{"id":"1:5431:4235","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5432:5905","1:5433:54318"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5553:4200":{"id":"1:5553:4200","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5554:54342","1:5555:54343","1:5556:54344","1:5557:54345"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13271:4376":{"id":"2:13271:4376","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13272:127","2:13273:56903"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13709:61340":{"id":"2:13709:61340","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6573:4188":{"id":"1:6573:4188","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6574:55832","1:6575:56203"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"20:127:1669":{"id":"20:127:1669","crate_id":20,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:128:177","20:129:128","20:130:52972"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:122:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:164:1729","glob":false}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1693","glob":false}},"1:5575:4204":{"id":"1:5575:4204","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5576:54413"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3812:3600":{"id":"2:3812:3600","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"2:3743:3599","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13759:30089":{"id":"2:13759:30089","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:15883:1888","self::pattern":"2:13332:4678"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:13124:4981","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4095:68":{"id":"2:4095:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4096:1443"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:311"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10846:4274":{"id":"2:10846:4274","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10847:147","2:10848:31528","2:10849:54557"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23435:4764":{"id":"2:23435:4764","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"SimdElement","id":"2:24072:4630","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23426:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13718:57037":{"id":"2:13718:57037","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:15900:1902"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:60622"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:8632:4756":{"id":"2:8632:4756","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8634:3091"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:9721:1682","glob":false}},"2:9534:4325":{"id":"2:9534:4325","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6185:2137":{"id":"5:6185:2137","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6339:4241":{"id":"1:6339:4241","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6340:59145","1:6341:59146"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23102:4625":{"id":"2:23102:4625","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23103:4629","2:23104:59155","2:23105:1238","2:23106:1239","2:23107:41148","2:23108:59205","2:23109:59206","2:23110:59207","2:23111:59208","2:23112:59209","2:23113:59156","2:23114:59157","2:23115:59158","2:23116:59159","2:23117:59160","2:23118:59161","2:23119:59162"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13801:61356":{"id":"2:13801:61356","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8682:2285":{"id":"2:8682:2285","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8684:37698","2:8686:6262","2:8687:56701"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:7997:1675","glob":false}},"21:687:1665":{"id":"21:687:1665","crate_id":21,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:688:847","21:691:2616","21:693:2531","21:696:2617","21:698:2618","21:700:2619","21:701:2535","21:702:2620","21:703:2545","21:704:2555","21:706:2547","21:707:2621","21:708:2622","21:709:1959","21:711:2548","21:713:2623","21:714:2624","21:715:2625","21:716:2626"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14057:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"29:49:1677":{"id":"29:49:1677","crate_id":29,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:50:53978","29:51:53979"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10513:2346":{"id":"2:10513:2346","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10514:1549","2:10515:56965","2:10517:3902"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13730:57056":{"id":"2:13730:57056","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13729:57055"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3484:3588":{"id":"2:3484:3588","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3485:183","2:3486:958"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:9738:1684":{"id":"21:9738:1684","crate_id":21,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9739:2251","21:9740:2247","21:9741:1976","21:9743:2320","21:9745:2321","21:9747:2307"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncWrite","id":"29:42:1680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:116:1569":{"id":"0:116:1569","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`LocalPool`":"31:190:1731","`block_on`":"31:115:1725"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:118","0:121","0:124","0:127","0:130","0:133","0:136","0:139"],"is_stripped":false}},"5:6187:55780":{"id":"5:6187:55780","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13829:55783"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6745:4175":{"id":"1:6745:4175","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6746:56916"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13765:61346":{"id":"2:13765:61346","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::rsplit_terminator":"2:13768:61347","self::pattern":"2:13332:4678","prim@char":"1:15883:1888","str::split":"2:13756:2317","`DoubleEndedIterator`":"2:8717:121"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49839:5012","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3405:2282":{"id":"2:3405:2282","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13748:3078":{"id":"2:13748:3078","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:15883:1888","`None`":"2:47810:176","self::pattern":"2:13332:4678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3369:2281":{"id":"2:3369:2281","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:115:1725","glob":false}},"2:9533:2654":{"id":"2:9533:2654","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3587:117":{"id":"2:3587:117","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3588:226","2:3589:548"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13824:4871":{"id":"2:13824:4871","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:13271:4376","FromStr::Err":"2:13272:127"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47933:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:13271:4376","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:13271:4376","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4146:4640":{"id":"2:4146:4640","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4147:54508"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6498:228":{"id":"5:6498:228","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6499:1410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13735:30212":{"id":"2:13735:30212","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"2:13734:30222"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50072:5023","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13815:61360":{"id":"2:13815:61360","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:1888","self::pattern":"2:13332:4678"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:988:1666","glob":false}},"2:13792:61352":{"id":"2:13792:61352","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"prim@char":"1:15883:1888","str::match_indices":"2:13789:61351","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:4678"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49957:5017","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3471:3582":{"id":"2:3471:3582","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3473:899"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13812:57074":{"id":"2:13812:57074","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13830:61363":{"id":"2:13830:61363","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5445:61363"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50088:5025","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:127:1669","glob":false}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:9751:1683","glob":false}},"1:6841:4194":{"id":"1:6841:4194","crate_id":1,"name":"TcpStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6842:56154","1:6843:56155"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6647:4181":{"id":"1:6647:4181","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6648:56877"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13739:57071":{"id":"2:13739:57071","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13712:61342":{"id":"2:13712:61342","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13710:61341"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:2156:1667","glob":false}},"1:5497:4197":{"id":"1:5497:4197","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5498:58841","1:5499:58843","1:5500:58842","1:5501:58844"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13783:1973":{"id":"2:13783:1973","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8717:121","str::matches":"2:13783:1973","self::pattern":"2:13332:4678","prim@char":"1:15883:1888"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49993:5019","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13777:61348":{"id":"2:13777:61348","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6219:4190":{"id":"1:6219:4190","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6220:4496","1:6221:4497","1:6222:55854","1:6223:56018","1:6225:56022","1:6227:56019","1:6228:56020","1:6230:56021"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:9756:1681","glob":false}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:118:1726","glob":false}},"2:14057:139":{"id":"2:14057:139","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:14058:183","2:14059:1020"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13733:2355":{"id":"2:13733:2355","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49775:2964","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3174:136":{"id":"2:3174:136","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:685"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:47:1679":{"id":"29:47:1679","crate_id":29,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:48:54021"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3364:215":{"id":"2:3364:215","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13762:57065":{"id":"2:13762:57065","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"2:13756:2317","prim@char":"1:15883:1888","`DoubleEndedIterator`":"2:8717:121","self::pattern":"2:13332:4678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49807:4984","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:7997:1675":{"id":"21:7997:1675","crate_id":21,"name":"SinkExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:7999:2256","21:8004:2257","21:8008:2934","21:8011:2935","21:8013:2258","21:8014:2247","21:8015:2249","21:8017:2251","21:8018:2254","21:8019:2250","21:8020:2255","21:8023:2936","21:8025:2937","21:8027:2938","21:8028:2939","21:8029:2940","21:8030:2941"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sink","id":"25:17:1673","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:988:1666","glob":false}},"1:4467:2346":{"id":"1:4467:2346","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4468:1976","1:4469:2320","1:4471:3900","1:4472:2251","1:4473:2321","1:4474:3901","1:4475:3902","1:4484:2546"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:9738:1684","glob":false}},"1:5567:4202":{"id":"1:5567:4202","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5568:56146"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:190:1731","glob":false}},"2:13806:61359":{"id":"2:13806:61359","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13780:61349":{"id":"2:13780:61349","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10801:143":{"id":"2:10801:143","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10802:718","2:10804:56316"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3611:2283":{"id":"2:3611:2283","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3612:583"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3672:3596":{"id":"2:3672:3596","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3674:183","2:3675:757"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:9738:1684","glob":false}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:8154:1696","glob":false}},"2:10572:4578":{"id":"2:10572:4578","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10573:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4492:2963":{"id":"1:4492:2963","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4493:2306","1:4494:53979","1:4495:59055","1:4497:2315","1:4498:2312","1:4500:2317","1:4501:2308"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Read","id":"1:4410:2335","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:42:1020","glob":false}},"2:9154:2779":{"id":"2:9154:2779","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:10419:1688","glob":false}},"5:6183:62002":{"id":"5:6183:62002","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:8472:220"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8472:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13721:57034":{"id":"2:13721:57034","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47810:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47808:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:4468:1670","glob":false}},"2:8669:137":{"id":"2:8669:137","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8671:688"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13821:61362":{"id":"2:13821:61362","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:15883:1888","self::pattern":"2:13332:4678"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11205:218":{"id":"2:11205:218","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:11207:183","2:11208:57033","2:11209:57034","2:11210:57035","2:11211:57036","2:11212:757","2:11213:758"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:11196:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5513:4198":{"id":"1:5513:4198","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5514:54413","1:5515:54451"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13803:61358":{"id":"2:13803:61358","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:15883:1888","self::pattern":"2:13332:4678"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:13362:4682","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:47:1679","glob":false}},"2:13717:310":{"id":"2:13717:310","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13718:57037","`u8`":"1:15900:1902"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3103:2926":{"id":"2:3103:2926","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:3102:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:4468:1670","glob":false}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:14057:139","glob":false}},"2:13818:61361":{"id":"2:13818:61361","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2922:125":{"id":"2:2922:125","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:166:1730","glob":false}},"1:4485:2342":{"id":"1:4485:2342","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4486:2316","1:4487:38112","1:4488:58756","1:4489:4089"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:169:1685","glob":false}},"2:3459:3577":{"id":"2:3459:3577","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3460:183","2:3461:919"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:9751:1683":{"id":"21:9751:1683","crate_id":21,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9752:2316","21:9753:4089"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncSeek","id":"29:47:1679","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:127:1669","glob":false}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:96:1668","glob":false}},"2:3829:138":{"id":"2:3829:138","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3831:691"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Try","id":"2:3824:229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3442:3576":{"id":"2:3442:3576","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3444:183","2:3445:898"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:44:1663","glob":false}},"2:13716:61343":{"id":"2:13716:61343","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13789:61351":{"id":"2:13789:61351","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888","`DoubleEndedIterator`":"2:8717:121","str::rmatch_indices":"2:13792:61352"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49939:5016","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6649:4182":{"id":"1:6649:4182","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6650:58886"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13786:61350":{"id":"2:13786:61350","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"`DoubleEndedIterator`":"2:8717:121","str::matches":"2:13783:1973","self::pattern":"2:13332:4678","prim@char":"1:15883:1888"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50011:5020","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3526:3593":{"id":"2:3526:3593","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3528:363"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3518:3591":{"id":"2:3518:3591","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:358"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13727:4290":{"id":"2:13727:4290","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3672:3596","`str`":"1:15889:1893","str::slice_mut_unchecked":"2:13728:61344"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:10570:120":{"id":"2:10570:120","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10571:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:9143:4246":{"id":"1:9143:4246","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9144:54323","1:9145:54324","1:9146:54325","1:9147:54326","1:9148:54327","1:9149:37700","1:9150:54322"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3376:224":{"id":"2:3376:224","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:9756:1681","glob":false}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:168:697","glob":false}},"0:142:1037":{"id":"0:142:1037","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144","0:147","0:150","0:154","0:157","0:161","0:164","0:167","0:171","0:174","0:177","0:181","0:184","0:188","0:191","0:194","0:197","0:201","0:204","0:207","0:210"],"is_stripped":false}},"2:8673:152":{"id":"2:8673:152","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8674:2776","2:8675:2778","2:8676:773"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6645:4180":{"id":"1:6645:4180","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6646:55870"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13827:55781":{"id":"2:13827:55781","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8742:2284":{"id":"2:8742:2284","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8743:798","2:8744:54289"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10576:4580":{"id":"2:10576:4580","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10577:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23175:4834":{"id":"2:23175:4834","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23176:4629","2:23177:1260","2:23178:1285"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13797:61354":{"id":"2:13797:61354","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12772:5183":{"id":"2:12772:5183","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12773:2776","2:12774:60506"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13833:61364":{"id":"2:13833:61364","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5443:61364"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50106:5026","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4896:4761":{"id":"2:4896:4761","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4897:2776","2:4898:3103","2:4899:3061"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13828:55782":{"id":"2:13828:55782","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:4468:1670":{"id":"21:4468:1670","crate_id":21,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:4469:928","21:4470:772","21:4471:847","21:4474:2528","21:4475:2529","21:4478:2530","21:4482:2531","21:4485:2290","21:4487:2532","21:4492:438","21:4493:500","21:4494:2533","21:4495:2534","21:4499:300","21:4502:282","21:4505:2535","21:4506:2536","21:4508:2537","21:4511:2538","21:4515:2539","21:4520:2540","21:4523:2541","21:4526:2542","21:4528:2543","21:4531:2544","21:4535:2318","21:4536:1321","21:4537:2545","21:4538:2546","21:4539:2547","21:4540:1959","21:4542:2548","21:4544:2273","21:4545:2549","21:4546:2550","21:4548:2302","21:4550:2551","21:4551:2552","21:4552:2553","21:4553:2554","21:4555:2317","21:4557:2555","21:4559:2556","21:4561:2557","21:4563:2558","21:4564:2559"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Stream","id":"20:96:1668","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3676:3597":{"id":"2:3676:3597","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3678:758"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"Index","id":"2:3672:3596","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:844:227":{"id":"5:844:227","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:845:5193","5:846:55954","5:847:55955"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13737:61345":{"id":"2:13737:61345","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50053:5021","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10580:191":{"id":"2:10580:191","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10581:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3479:3583":{"id":"2:3479:3583","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3481:1111"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1686","glob":false}},"2:3467:3584":{"id":"2:3467:3584","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3469:1369"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13723:57035":{"id":"2:13723:57035","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11205:218","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13710:61341":{"id":"2:13710:61341","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:15:3026":{"id":"24:15:3026","crate_id":24,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:16:64006","24:17:4345"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10574:4579":{"id":"2:10574:4579","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13706":{"id":"2:13706","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12785:1353","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13707:798","2:13708:54289","2:13709:61340","2:13710:61341","2:13712:61342","2:13715:54318","2:13716:61343","2:13717:310","2:13718:57037","2:13719:57033","2:13721:57034","2:13723:57035","2:13725:57036","2:13727:4290","2:13728:61344","2:13729:57055","2:13730:57056","2:13731:5043","2:13732:4707","2:13733:2355","2:13734:30222","2:13735:30212","2:13736:2308","2:13737:61345","2:13738:30207","2:13739:57071","2:13742:57072","2:13745:57073","2:13748:3078","2:13752:6028","2:13756:2317","2:13759:30089","2:13762:57065","2:13765:61346","2:13768:61347","2:13771:57067","2:13774:57069","2:13777:61348","2:13780:61349","2:13783:1973","2:13786:61350","2:13789:61351","2:13792:61352","2:13795:61353","2:13797:61354","2:13799:61355","2:13801:61356","2:13802:61357","2:13803:61358","2:13806:61359","2:13809:12734","2:13812:57074","2:13815:61360","2:13818:61361","2:13821:61362","2:13824:4871","2:13826:5190","2:13827:55781","2:13828:55782","2:13829:55783","2:13830:61363","2:13832:4213","2:13833:61364"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:13742:57072":{"id":"2:13742:57072","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2963:186":{"id":"2:2963:186","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2965:1004","2:2966:832","2:2967:797","2:2968:716","2:2969:700"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"2:2917:185","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13736:2308":{"id":"2:13736:2308","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50043:2334","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13826:5190":{"id":"2:13826:5190","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13731:5043":{"id":"2:13731:5043","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:15883:1888"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49759:5007","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13708:54289":{"id":"2:13708:54289","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:9721:1682":{"id":"21:9721:1682","crate_id":21,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9722:2302","21:9724:2309","21:9726:2310","21:9728:2311","21:9730:2313","21:9732:2314","21:9734:2317","21:9735:2318"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"AsyncRead","id":"29:39:1678","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10582:4572":{"id":"2:10582:4572","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10583:664"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"25:17:1673":{"id":"25:17:1673","crate_id":25,"name":"Sink","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:19:128","25:20:14462","25:21:52892","25:22:52893","25:23:52894"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:42:1680","glob":false}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1677","glob":false}},"2:2884:105":{"id":"2:2884:105","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2885:414","2:2886:416"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3447:3575":{"id":"2:3447:3575","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3449:183","2:3450:563"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3373:221":{"id":"2:3373:221","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6241:4239":{"id":"1:6241:4239","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6242:59016","1:6243:38260","1:6244:59017","1:6245:59018","1:6246:59019","1:6247:59020"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"24:258:2052":{"id":"24:258:2052","crate_id":24,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["24:261:59020","24:262:583"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"5:5906:2148":{"id":"5:5906:2148","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5908:183","5:5909:438"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:10420:1691","glob":false}},"2:13342:4677":{"id":"2:13342:4677","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13344:4680","2:13345:60052","2:13346:60057","2:13347:60053","2:13348:60055","2:13349:60054","2:13350:60056"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:5910:2092":{"id":"5:5910:2092","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5912:183","5:5913:1688"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3372:222":{"id":"2:3372:222","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:9721:1682","glob":false}},"2:3617:132":{"id":"2:3617:132","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3619:383"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"2:3620:133","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:14057:139","glob":false}},"2:8636:4757":{"id":"2:8636:4757","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8638:3092"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:17:1673","glob":false}},"2:8717:121":{"id":"2:8717:121","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8718:56215","2:8719:56216","2:8720:56217","2:8721:56218","2:8725:56219","2:8728:6028"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"2:8874:158","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3374:107":{"id":"2:3374:107","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"2:2884:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:0:1760":{"id":"0:0:1760","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::future":"21:168:697","crate::executor":"0:116:1569","crate::io":"21:8154:1696","crate::channel":"27:0:1693","crate::stream":"21:2156:1667","crate::sink":"21:7282:1674"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:116:1569","0:142:1037","0:4","0:7","0:11","0:14","0:18","0:21","0:25","0:28","0:31","0:34","0:38","0:41","0:44","0:47","0:51","0:54","0:57","0:60","0:63","0:66","0:69","0:73","0:76","0:79","0:80","0:82","0:85","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113"],"is_stripped":false}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:5885:1671","glob":false}},"2:23138:4860":{"id":"2:23138:4860","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23139:59155","2:23140:1238","2:23141:1239","2:23142:59156","2:23143:59157","2:23144:59158","2:23145:59159","2:23146:59160","2:23147:59161","2:23148:59162"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"2:3374:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"2:23151:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3432:3574":{"id":"2:3432:3574","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3434:183","2:3435:270"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13829:55783":{"id":"2:13829:55783","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13795:61353":{"id":"2:13795:61353","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13771:57067":{"id":"2:13771:57067","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:15883:1888","self::pattern":"2:13332:4678","str::rsplitn":"2:13774:57069"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49893:4987","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3535:3595":{"id":"2:3535:3595","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3537:1248"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:42:1680","glob":false}},"2:13774:57069":{"id":"2:13774:57069","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13332:4678","prim@char":"1:15883:1888","str::splitn":"2:13771:57067"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49911:4988","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:13342:4677","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:13357:4681","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:27:1997":{"id":"20:27:1997","crate_id":20,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:28:2246"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14057:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3463:3580":{"id":"2:3463:3580","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3465:271"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3475:3581":{"id":"2:3475:3581","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3477:564"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"24:18:3025":{"id":"24:18:3025","crate_id":24,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:19:4170","24:20:4171"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2917:185":{"id":"2:2917:185","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2919:608","2:2920:913"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"2:3369:2281","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5425:4233":{"id":"1:5425:4233","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5426:54360","1:5427:5280"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"1:10416:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:23387:14218":{"id":"2:23387:14218","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23388:59543","2:23389:60732","2:23390:60733"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Sealed","id":"2:23380:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3491:3585":{"id":"2:3491:3585","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3493:183","2:3494:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:44:1663":{"id":"20:44:1663","crate_id":20,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:45:177","20:46:128","20:47:52885"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"2:14057:139","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sealed","id":"20:39:4191","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"implementations":[]}}},"paths":{"2:50206:4686":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:3587:117":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"20:169:1685":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"17:10266:5956":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:4321:41420":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"2:52023:4766":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:51671:60272":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:8389:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"28:220:4308":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:3364:215":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:5505:4196":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"21:12209:2083":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"2:10851:4754":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:10115:6013":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:14148:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"12:895:5477":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"12:2253:4308":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:9033:45561":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"24:203:2051":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"2:49352:5188":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:51755:4809":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:49699:5000":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"24:407:3466":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"1:8777:4323":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"5:6340:5258":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"6:4135:41404":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:10545:45789":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"15:230:5506":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:1236:45646":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"27:598:3774":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"6:4440:41435":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"1:2123:2778":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:2005:4266":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"2:47320:2200":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:1441:4266":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"9:41:5405":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:10476:5972":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:51653:4780":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"21:14257:2163":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"2:25520:4886":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"21:18441:2334":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"21:18568:2343":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"2:51708:60192":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:12222:2084":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"1:1108:9016":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:12909:2105":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"21:14735:2168":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"1:15900:1902":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"1:7314:120":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:3479:3583":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:6679:5879":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"17:12512:50464":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:32446:5120":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:13721:51624":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"2:14359:2004":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:53657:4771":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"15:269:5511":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:13073:5015":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:24348:59895":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"12:971:4306":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"2:49679:4998":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:11890:50258":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"9:603:43344":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:15324:54386":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:15232:4475":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:17355:2778":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"21:11686:2069":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"5:1719:4300":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:5959:5598":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:28330:4760":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6050:5713":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:12077:213":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:12543:50466":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"6:4005:41388":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:3920:41381":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"5:3104:5193":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"21:17047:2086":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"2:4865:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"16:7295:5675":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:1452:4301":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:47311:2199":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:7471:5666":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"17:10240:5918":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:13515:51605":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3060:4445":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"24:21:3027":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"17:10394:5996":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:53809:19753":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:13013:5011":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:602:2067":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"2:24400:4874":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"16:5941:5712":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"17:11102:45579":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"21:17346:2198":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:52537:4790":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"16:5685:5578":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"21:13298:2150":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"17:13917:51704":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"21:14103:2057":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"5:8217:5198":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"5:6498:228":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:3530:3594":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"16:5516:5568":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:5186:42034":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"1:11491:4369":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"17:12892:51004":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:5443:5564":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:6034:12331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:15199:63935":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:12228:6629":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:3526:3593":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:11784:46493":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:10051:164":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"2:46594:30781":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"21:8154:1696":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:46698:5167":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"1:15906:1908":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"9:469:43240":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:12406:50456":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:13595:51619":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:2181:583":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:4242:41413":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"17:11985:50268":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:9563:54490":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"6:5478:42056":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"27:574:3731":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"21:16371:2183":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"2:46363:4735":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:2911:4435":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"30:929:63925":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:47865:2778":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:5855:5585":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:1405:4298":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"21:16209:2185":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:51446:4787":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"21:6995:3032":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"6:1634:39281":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"5:4281:2261":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13961:51712":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"1:1489:4307":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:5513:4198":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"30:853:143":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:7051:5734":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:3402:5594":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"5:6851:2955":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:8682:2285":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:14404:4209":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"21:10419:1688":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"17:9131:45564":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:4743:44556":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"16:4351:44452":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:859:4399":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:10245:4967":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"12:2419:4273":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"2:2765:584":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:52425:4802":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"21:12190:189":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"16:7155:5743":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:1606:39278":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"17:10516:45691":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"21:11808:2071":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"2:24854:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"21:15657:2071":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"1:11048:4221":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"2:3600:2003":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:14960:54423":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:14253:60309":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"17:12585:50482":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:10223:5926":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"16:5326:5555":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"16:6504:5727":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"21:14541:2165":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"27:397:2662":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"5:2619:5320":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:3376:224":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"9:809:3732":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"12:2045:4266":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"17:9579:129":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"21:10422:1687":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"1:9653:8905":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"2:3672:3596":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"6:4332:41421":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"12:559:144":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"31:88:4131":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"17:11769:46492":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"17:2484:45677":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"21:11349:2406":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"12:1103:4308":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:2502:4762":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:15898:1900":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"1:15888:1892":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:4896:4761":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:51356:60189":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:15071:4293":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:23768:14237":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"16:7415:5689":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:49689:4999":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"27:474:3741":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"17:13708:51623":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:4538:41446":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"6:533:38383":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:3496:3586":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"18:704:2174":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:15883:1888":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"15:0:1864":{"crate_id":15,"path":["addr2line"],"kind":"module"},"12:880:4266":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"17:13233:51158":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"16:3177:5845":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:12957:51006":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:9646:63897":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:11181:45583":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:10428:54402":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"21:14313:2159":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"21:18679:2112":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"17:11130:45580":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"21:18341:2331":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"27:515:3725":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"2:50727:2396":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:2510:4430":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:14540:4388":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:7684:5680":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"12:843:4298":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:10417:4395":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:4:985":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"1:10534:10028":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:10032:3793":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"2:53619:4806":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:52615:4778":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:6482:5872":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:11025:2061":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"17:10445:45689":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"17:9275:43940":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"17:11937:45797":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:51977:4781":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:14453:119":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:48859:108":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"12:787:4301":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12070:50376":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"6:4127:41403":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:11518:4372":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:1502:4308":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"1:853:4398":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:4467:44472":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:12469:50461":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:3174:136":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"2:3835:3602":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:12328:60509":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"31:195:1732":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"12:1666:5497":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:1740:4302":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"28:37:2778":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"18:712:4668":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:46721:5168":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"5:8249:5275":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:47105:2169":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:48236:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"30:843:6044":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:1621:39279":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:2314:5999":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"21:17276:3454":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"1:13859:4333":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"21:10016:3794":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"2:47916:37626":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"6:3960:41383":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:24169:5050":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"11:46:63025":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"17:10571:5949":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"17:10831:5971":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"5:1533:4309":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"12:1183:5486":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:51690:4765":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"21:11107:2065":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"5:3402:4268":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:12596:55944":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"21:18850:2415":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"21:13070:2147":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:47976:2198":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:12990:2107":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"16:7110:5739":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:2963:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"6:6908:41570":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:13856:2174":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"1:10554:5323":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"6:586:38388":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:11966:3726":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:5247:42040":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"17:2543:5967":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"1:6100:4493":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"6:4516:41443":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"5:1751:196":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"2:12195:5001":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"16:6533:5870":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:46171:198":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:5143:4136":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"6:4110:41401":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"5:8226:2778":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"17:10136:45574":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:7782:3741":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"5:7477:2778":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:23102:4625":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"16:6012:5667":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:52221:60270":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:10942:2280":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"28:71:64018":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"2:5298:2692":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:5575:4204":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:545:38385":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"6:580:3919":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"2:6900:60457":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"2:10582:4572":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"21:13415:2152":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"16:2883:5858":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"2:3611:2283":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:12348:50453":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"12:928:4300":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"6:6120:42465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:547:5576":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"6:5982:39209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"21:12053:2074":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"16:3297:5902":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:1031:4211":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"1:10443:4418":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"21:17086:2097":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"6:5149:41989":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"12:2269:4309":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"1:5708:4546":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:4841:4717":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"5:8373:4315":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"12:869:2261":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"28:50:2777":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"1:13394:10033":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"17:10093:6011":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:7184:5888":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"5:6775:5210":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"25:0:1672":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"21:14160:2153":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:10814:5941":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:9396:45567":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"13:0:1856":{"crate_id":13,"path":["std_detect"],"kind":"module"},"30:812:2174":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"30:1024:6034":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:52167:60153":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"6:593:38389":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:51422:4795":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"16:6407:5723":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"21:16859:2195":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"27:394:204":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"28:55:2261":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"21:17316:3028":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:50417:5096":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:12157:50439":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"2:50237:4690":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:11530:46263":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"2:50063:5022":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:8314:2778":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:50777:4830":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:10921:1673":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:13004:2109":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"1:12106:4389":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:10718:60741":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"17:13794:51667":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:10902:2983":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"1:5738:4549":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:10455:5969":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:10390:5970":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2141:4268":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"1:1601:4310":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:2156:1667":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"1:10914:2201":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"5:4709:60754":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:988:1666":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"6:6954:41576":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"11:0:1861":{"crate_id":11,"path":["adler"],"kind":"module"},"5:5388:202":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"17:12170:50440":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:22902:60044":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:32692:60279":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"20:27:1997":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"1:6576:4190":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"1:12072:4514":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:10678:130":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:32632:5110":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"2:11554:4983":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:1748:39291":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"16:5923:5711":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"6:4356:41424":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:12607:50531":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"20:194:3024":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"21:17041:189":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"6:1740:39290":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:3432:3574":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"6:3987:41233":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"1:12567:54489":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"16:6190:5719":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"6:6027:42463":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"2:48832:134":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"16:6342:5722":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:13607:4342":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"10:0:1860":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"17:10899:45862":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"18:811:6031":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:2792:5593":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:11409:45984":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"29:49:1677":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"17:12015:50368":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"18:837:4680":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:11905:55952":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"2:2884:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:6717:2053":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"5:3366:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:6723:4179":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:9361:45566":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:14437:130":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:6479:54233":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"17:13899:51702":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:51947:4777":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:10228:55946":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:14072:151":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"14:11:43861":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"6:1712:39287":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"1:4217:2980":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"1:15893:1895":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"21:10395:2416":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:24364:37374":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:3905:60755":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:11628:46310":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:161:38073":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"30:949:2174":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"17:12318:50450":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"6:5378:42047":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"21:10421:1690":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"21:12402:2092":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"2:13271:4376":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"17:10407:5995":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:48446:5090":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:47052:2162":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:9512:4470":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"1:1431:2261":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:13293:51227":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"17:9746:45572":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"5:1152:60755":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:634:38395":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:2651:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:16981:2199":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"16:7141:5742":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"1:1592:4309":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"21:11613:2076":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"26:0:2009":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"6:1912:39427":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"21:11991:2072":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"6:6688:42837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:6518:5684":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:5885:1671":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"2:47064:2164":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:6858:5883":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:6135:42467":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"21:18369:2332":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:21:676":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"21:13791:2174":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"21:16755:2193":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"1:7599:4338":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:23228:4191":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:6979:43023":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"2:13089:5018":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:10513:2346":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"21:17362:2098":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"1:15038:4285":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:5497:4197":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"5:1684:2778":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:47004:4841":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"5:777:60832":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"4:0:1857":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"1:5553:4200":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:12093:50377":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"6:5998:38262":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:3770:43991":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:17420:2260":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"12:1703:5499":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"6:6229:42472":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"21:16411:2196":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"17:11615:46309":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:50053:5021":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"27:593:3737":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"18:782:2174":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"6:4434:41434":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:11134:54445":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"17:13507:51604":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:11589:4984":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:12646:50534":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:4008:45764":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13404:51590":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"1:10703:4457":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"17:11591:46273":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"14:56:45986":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:50561:4392":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"16:6595:5683":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:49807:4984":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:10034:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"16:4573:44530":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:10198:45643":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"6:5288:42041":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:6649:4182":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:14779:54453":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"2:53223:4779":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:8187:4419":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"6:4379:41427":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"17:13073:51062":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:11868:4336":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"17:12620:50532":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:5224:4591":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:14470:59053":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"9:900:43268":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:50504:5031":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"16:3743:43988":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:5278:4592":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"9:157:5372":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:4903:44596":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"16:6907:5732":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"21:18574:2344":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"17:10801:5940":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"21:15579:2069":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"17:9326:5963":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:17568:2266":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"21:16972:2198":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"1:2147:4269":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:10930:2278":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"17:13094:51063":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:11335:5943":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:10475:2054":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"17:12674:50536":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:37952:4668":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:8127:4862":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:52691:4785":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:11516:4982":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:52379:4798":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"17:10048:45648":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"5:4765:60754":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:12026:50369":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:24461:37402":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"17:11603:46308":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"1:11890:54408":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"1:14647:54412":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"21:4218:63939":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"24:0:1759":{"crate_id":24,"path":["futures_task"],"kind":"module"},"2:22834:4668":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:5636:4543":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"1:2909:129":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:11627:4985":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:10187:45644":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:2772:5864":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:626:38394":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"21:10420:1691":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"18:0:1867":{"crate_id":18,"path":["memchr"],"kind":"module"},"1:15902:1904":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"17:13873:51695":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"9:749:5357":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:22847:59624":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"2:49130:147":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:4180:2979":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"6:571:38387":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:46675:5166":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:7093:55940":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:3812:3600":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"6:4277:41415":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"30:1004:6033":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:51831:4801":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"12:162:5489":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"16:6130:5716":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:24240:5052":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"2:46231:200":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:11256:4486":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:2044:2955":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"6:5301:42043":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:12565:4434":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"5:5910:2092":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:16483:2186":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"17:13037:51061":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:5745:5581":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"17:13735:51625":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"16:4198:44371":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"2:48110:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:11742:46488":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:1387:2777":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:6026:5665":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12302:50449":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"5:3436:4267":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:9439:55972":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"1:4146:4463":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"5:7891:239":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:24821:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"17:11547:46270":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:6467:4199":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:8376:2201":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:6630:5875":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"2:49911:4988":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13938:51705":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:15890:1894":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:10846:4274":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:49957:5017":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:11168:45582":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:9534:4325":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:6114:42464":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:1531:39269":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"2:39144:5323":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"21:15022:2162":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:5753:784":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:7369:5671":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"31:164:1729":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"12:1881:146":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"2:51468:4775":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"16:7247:5702":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:13602:51620":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"5:69:5253":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:10655:4436":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"9:722:5356":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"2:3459:3577":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:14394:54446":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"21:9756:1681":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"1:2481:4429":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"18:637:2174":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:50220:4689":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:13377:51588":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"21:11539:2068":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"16:6286:5504":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"21:7017:2207":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"12:952:4305":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:4495:44476":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"6:1544:39271":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"30:869:6045":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"18:857:6035":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:1694:39285":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:565:38386":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:11234:5987":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:2861:5839":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"21:1312:2085":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"17:11640:46311":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"2:48568:4579":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"21:16990:2200":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"2:9157:2780":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"21:10428:2053":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"17:10925:45872":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"9:27:5404":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"1:9558:54492":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"16:5566:5570":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"21:17404:2777":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:53333:4799":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:15735:2070":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"17:12143:50438":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:1374:2198":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"6:5455:62829":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:11177:4540":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"1:10468:4137":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"6:4446:41436":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"30:698:6040":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:3512:3590":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:24539:5068":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:15253:4481":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:4258:2977":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"30:708:63910":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"2:2922:125":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:53794:19752":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"17:11002:45874":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"21:11747:2075":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:23387:14218":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"5:2843:5319":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:5311:42044":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:49733:5091":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"2:3181:232":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:0:1866":{"crate_id":17,"path":["object"],"kind":"module"},"1:10799:2277":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:12228:5002":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"30:826:6039":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9706:45571":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"1:4428:2279":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:18213:2329":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"1:10278:54504":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:10576:4580":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"5:7312:2261":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"21:12840:2104":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"12:1203:5487":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:10127:5971":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"30:941:63911":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:0:1344":{"crate_id":1,"path":["std"],"kind":"module"},"16:2937:5863":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:5260:42017":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11068:5946":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:48026:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:9539:5986":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:7207:60762":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:6129:42466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:24887:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:8902:45558":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"20:44:1663":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"17:9160:5988":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:11668:4987":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"5:8232:5274":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"9:963:5420":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:3617:132":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"17:11579:46272":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"5:8494:5204":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"17:12557:50467":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"2:8022:4721":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:4386:41428":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:53581:4786":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"14:216:43870":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"6:5229:42038":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:6057:39236":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"2:50349:4693":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:24513:5125":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:13119:2170":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"2:8717:121":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8863:4351":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"5:5861:60755":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"1:11882:4337":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"2:23138:4860":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:3676:3597":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13129:51067":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:11854:4335":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"17:13167:51113":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:46336:4641":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"16:5605:5571":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:10963:2146":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:13247:51160":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:18658:3791":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"6:1764:39292":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"12:472:63031":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"21:17922:2324":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"2:10811:147":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"12:466:63029":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:15886:1890":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"2:46916:4839":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2813:5857":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:9636:45570":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:17437:2262":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"1:14886:59050":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"21:11191:2077":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:46415:4907":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:6214:42471":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"27:21:64016":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"6:4493:41441":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"2:3743:3599":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"6:5541:42084":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"1:3044:4440":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:15884:1889":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:8433:60706":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:11154:4539":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"21:10614:2062":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:47907:5086":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"21:11288:2077":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"21:4389:2178":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"1:3405:2968":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"30:153:52066":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"1:11250:4550":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"6:6243:42473":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"16:4599:44532":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:10291:5959":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:8420:5080":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:6925:41572":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"21:11155:151":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"21:18151:2260":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"2:50512:5036":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:5321:4593":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:1418:4299":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"6:5274:42018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"12:750:2198":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:1447:4300":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"1:10993:2334":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"21:14861:2171":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"0:116:1569":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"12:1238:5488":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"21:591:2066":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"1:5154:4475":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:7997:1675":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"2:23426:4191":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"16:5784:5582":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"21:15301:3109":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:9655:4677":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"2:46631:4899":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:12067:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"1:4476:56996":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"1:13481:4385":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:50384:4696":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"17:13452:51596":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:53730:19748":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:14107:2082":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"17:12130:50437":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"17:11494:46202":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"24:18:3025":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"2:49578:2172":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:49160:59613":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4036:2982":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"21:11114:2064":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"2:50508:5034":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"6:1558:39273":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"21:18722:2111":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"17:13463:51597":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"6:4315:41419":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4055:41394":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:12746:45585":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:47095:2167":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:46714:5025":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:527:38382":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"16:7025:5599":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"1:14067:2976":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"2:3853:4742":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:11314:4178":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:13138:51068":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:10660:45794":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"16:7063:5735":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:5519:4199":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"6:1727:39289":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"1:2397:10033":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:12003:50312":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:53695:19745":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:3103:5854":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:51570:60274":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"17:11725:46480":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"2:50516:5035":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:13124:4981":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:1146:9018":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"2:52120:60276":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:510:45555":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"28:41:2198":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"21:10917:2055":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"2:3907:3606":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"2:46187:196":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6717:5731":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:7484:4332":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:10975:45848":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"17:13522:51606":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"9:1056:5415":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:13362:4682":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"20:110:1998":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"1:2914:2309":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"5:2396:5316":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"27:606:3775":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"6:6184:42469":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:49597:4993":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"29:39:1678":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"21:9429:1673":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"21:18559:2342":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"17:13271:51163":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"6:4373:41426":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:6967:43022":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"17:12383:50455":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:13573:51612":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"1:4410:2335":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"21:18498:2336":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:25151:5055":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:10980:2964":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"21:12783:2103":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"0:0:1760":{"crate_id":0,"path":["futures"],"kind":"module"},"2:48826:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"29:0:1676":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:47043:4844":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:7048:2517":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"1:11894:55915":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"1:3801:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"1:8195:3732":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"2:51999:4784":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:47840:2776":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"17:13331:51230":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:9143:4246":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:6873:5084":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:12796:5147":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:14874:4336":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11968:50265":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:7281:5674":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"5:4036:60755":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:10574:4579":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"18:668:6044":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"21:18649:2348":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"2:8197:4637":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"18:678:143":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:3908:44105":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"17:13529:51607":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"16:5362:5557":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"16:2905:5840":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:6924:3030":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"2:22881:60047":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"30:887:4668":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:50011:5020":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"6:1733:4487":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"5:853:109":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"21:11409:2078":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"6:6665:42835":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:8849:5985":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"16:6490:5726":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"21:18732:4032":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:8000:3741":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"1:7539:4334":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:48871:128":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"2:8636:4757":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"17:9958:63894":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"27:585:3732":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"2:25118:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"6:4028:41391":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"5:6759:2693":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:56599:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8545:4512":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9517:2964":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"16:5289:5668":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:14968:4344":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"17:9587:63906":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"6:4485:41440":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:4143:4462":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:5860:4483":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"16:7323:5690":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"2:52725:4767":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:24311:37386":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"21:12300:203":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"1:5431:4235":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:50748:159":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"21:17627:215":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"1:11071:4222":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:6381:5682":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10435:5928":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:11270:4495":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:53411:4783":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:5427:5563":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"6:3981:41386":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"17:11754:46489":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"17:294:63900":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"6:6250:42474":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:13495:51601":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"1:10999:4217":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"20:127:1669":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"2:49759:5007":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:46954:2151":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"18:729:63919":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:2130:4266":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"14:250:43869":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"21:15193:63946":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"2:4783:2955":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"11:54:5475":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:10104:6012":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"16:6656:5877":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:13549:51609":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"16:6468:5725":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:5147:4928":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"2:47115:2171":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"12:2059:4268":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"16:6549:5686":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:12262:50447":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"16:5257:43941":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:3177:233":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"1:12030:3727":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5273:43940":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"21:18664:2681":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"2:47024:4843":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:6339:4241":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:15458:2179":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"18:774:2174":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"17:11474:46201":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"2:50536:5033":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"25:17:1673":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"14:231:5206":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11457:45986":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:7936:2550":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:10511:9015":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"1:13744:4332":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:10988:45847":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"21:13539:2053":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"1:12087:4262":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"6:4230:41412":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"1:8497:4503":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:6924:12334":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:12998:2108":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:10782:2058":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:3373:221":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"18:790:6029":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"16:7079:5736":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:23238:4249":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:7868:128":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"6:3933:41382":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:24788:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:14862:4335":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"21:15232:3111":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"2:50397:5095":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"5:3105:60925":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"17:13755:51661":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:51530:4796":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"16:5948:5837":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:12282:50448":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7309:5673":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"16:5374:5558":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:56664:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:973:4419":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"17:11381:45976":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"21:18640:2347":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"17:9291:45548":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"1:15907:1909":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"5:7358:60755":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"1:1483:4306":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"1:6645:4180":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"16:4439:44468":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:10558:45790":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"21:595:2681":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"6:4020:41390":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:3838:2777":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:14912:54391":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"2:46370:4591":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"1:8860:4509":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:48582:4580":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"6:5204:42035":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"21:16010:2076":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"6:3907:41380":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"16:2839:5838":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:10874:45763":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:22862:59624":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:47074:2165":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"1:2152:4270":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:4468:1670":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"2:3382:2943":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"16:7741:5747":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:10937:45873":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"5:4665:60784":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"21:17005:2202":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"31:0:1724":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"2:10563:110":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"21:18726:2110":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"17:9836:63901":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:4474:41439":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"27:509:204":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:13408:4685":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:50191:4683":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:15901:1903":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"21:14354:2160":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"6:5398:42049":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"21:4203:63954":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"27:481:3721":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:10580:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10068:5956":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:57952:60278":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"21:18527:2339":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"16:7355:5670":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:5698:5579":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:6671:42836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"17:12237:50445":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:47286:32935":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:47849:2198":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"1:4178:2978":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"12:979:4307":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"2:52455:4805":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"5:7935:60762":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"6:4218:41411":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:10719:2331":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"17:10586:45791":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12921:51005":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"16:3199:5846":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:11477:4981":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:10851:45765":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:10578:4581":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"21:1845:2106":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"1:6481:54235":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:53741:19749":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:1526:39268":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"21:9513:2178":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"21:18007:2326":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"1:11836:4333":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:52069:4770":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"17:11142:45581":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:18275:2330":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"17:13774:51663":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:6562:2261":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"6:6943:41575":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"17:13481:51599":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"12:114:63030":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"16:3155:5844":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:9873:45574":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"6:1721:39288":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:46773:5079":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"16:7238:5688":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"1:10711:2972":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:2917:2314":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"9:996:5421":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"17:12209:50443":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"17:4157:5950":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:8646:55934":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"21:10566:2053":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"2:9535:2653":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"6:5210:42036":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:6080:39210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"12:933:4303":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:88:38006":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:50097:4214":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8217:5286":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"16:5668:5575":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"21:6654:2206":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:56625:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:3743:5937":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:14369:2389":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:4998:4926":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"6:3877:41377":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:17482:2263":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"2:14420:203":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"17:9930:63896":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:3501:3587":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"2:37928:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:3506:3589":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:3371:2327":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"1:5567:4202":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"9:776:5402":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"24:15:3026":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"6:1704:39286":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"5:4509:2198":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:2654:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"30:895:60188":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:13413:55778":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"17:11907:50259":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"1:15895:1897":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"1:11238:4217":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:46894:4837":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3437:3579":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:6277:5720":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"27:188:3729":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"21:17954:2325":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"1:11196:4476":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:0:493":{"crate_id":2,"path":["core"],"kind":"module"},"1:997:4244":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:10082:6010":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"12:1147:4310":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"6:4256:41414":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"2:46735:5170":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"16:7768:5676":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:15881:1886":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"6:4402:41430":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:15388:5515":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:13029:51059":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:3803:128":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:11409:2777":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:51601:4788":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"6:4208:41410":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"17:9240:5922":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:48841:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:4148:41406":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"16:4316:44441":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39148:4638":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"5:8308:2778":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:3042:4439":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:6159:5672":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:39184:4675":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"17:11956:45796":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"21:12738:2102":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"2:46275:201":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:50363:4694":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"17:10643:45775":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"2:3374:107":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"30:986:6031":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:3265:5849":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"5:3114:60923":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:46963:2152":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"12:2412:63036":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:3058:4444":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"14:189:43861":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:11071:2063":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"5:8549:4266":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"1:7739:55977":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"6:5216:42037":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:12731:50545":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:14795:54497":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:1311:6017":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:11201:4477":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"12:1162:5485":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:4095:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:3129:5853":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"5:4308:60755":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"9:1020:5422":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"1:14460:2278":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"2:50374:4695":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:4489:2778":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"5:444:2286":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:43:1020":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"1:10695:119":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"21:14395:2157":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"6:1576:39275":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:12558:129":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:13361:51560":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"30:1071:6038":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"1:7062:55940":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:23380:4191":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"5:8566:5254":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"17:10622:45760":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:13761:55971":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:5303:5554":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:4694:240":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:5151:4474":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:1105:9014":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"26:49:52725":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"17:13817:51668":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"12:2066:4269":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"16:6075:5669":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:46995:2055":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"6:5240:42039":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"12:2404:63035":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"26:65:52727":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:11701:46370":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"1:2126:2261":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"5:8279:196":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"2:3484:3588":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:47808:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:14665:4337":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:46124:2814":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"2:48808:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"21:42:1020":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"21:14019:2166":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"1:11264:4130":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:15511:2068":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"6:4067:41396":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:53684:19744":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:10074:3792":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"1:696:4394":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"8:0:1858":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"16:5998:5652":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"16:5460:5565":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"2:9154:2779":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:1088:4431":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:7422:4328":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"16:6310:5721":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"17:10364:5998":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:47084:4845":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:2754:5591":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"6:539:38384":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:11944:2198":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:13472:51598":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:11245:4547":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"6:6643:38339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:13785:51664":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"18:744:63915":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:3407:5228":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"31:190:1731":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"17:12687:50537":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:14:1976":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:11292:12331":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"20:122:4191":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"17:11945:45795":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"21:13971:2054":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"2:56677:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"17:12117:50436":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:3405:2282":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"1:8281:204":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:9751:1683":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"16:7090:5737":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4081:41398":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:12222:50444":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:11085:5991":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"21:18392:2333":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"16:5238:43943":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"16:7754:5748":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"21:16140:2184":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"6:5293:42042":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"17:9064:45562":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"21:15810:2056":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"5:8436:5278":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"17:9206:45565":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"29:42:1680":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:2213:1057":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11314:5964":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"12:399:5491":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"5:6739:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:10566:110":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"21:14493:2164":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"21:18768:63933":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"1:2359:10021":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:14614:2167":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"17:10962:45849":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:2135:4267":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:11507:4371":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"30:914:63926":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:22879:60049":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"3:0:436":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:9259:43941":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"6:6896:41568":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:23435:4764":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"16:6035:5707":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"1:14894:4389":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:50088:5025":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:49893:4987":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"21:7282:1674":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"17:10610:45793":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"1:11088:4223":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"30:879:2174":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:52875:4791":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:681:45557":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:607:45556":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:3554:4266":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"6:5488:42057":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"6:4454:41437":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"6:4160:41407":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:11689:46369":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"5:2376:5334":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"6:5433:42053":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"5:3960:5287":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:2733:5592":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:49121:4755":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:1610:4311":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"27:0:1693":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"30:1012:4680":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:11359:4357":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"22:7:1686":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"21:7054:54485":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"1:3381:54474":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:15894:1896":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:0:1865":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7602:4340":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:49607:4994":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"27:487:3722":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"30:1041:6036":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"6:4392:41429":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"1:4752:4215":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"21:13021:2146":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:48320:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:10489:45690":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:23763:4631":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"16:6060:5708":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:1588:39276":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"16:6557:5728":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"12:940:4304":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"30:965:6029":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5439:42054":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"31:206:1728":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"21:17778:2269":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"2:52045:4769":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:11985:4257":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"21:69:2028":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"17:12431:50458":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"7:38:43115":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:3366:5855":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"2:5078:4154":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:32592:3566":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:18017:2327":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"1:11190:4130":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"5:8483:5203":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"21:13221:108":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"6:1551:39272":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"2:8632:4756":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"21:10672:2057":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"2:53715:19747":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"24:258:2052":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"16:4942:44611":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"28:203:2691":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"2:50081:5024":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:50674:203":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:10523:135":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"18:866:6036":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"12:1784:63039":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"6:5178:42033":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"21:17150:2204":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"16:5649:5574":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:46785:5080":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:14142:4137":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:15897:1899":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"17:11514:46262":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:49105:4316":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:2266:60770":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"1:10973:2167":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"1:1261:144":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11671:46313":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"6:3883:41378":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"1:7456:4330":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"13:121:43816":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"17:10598:45792":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"6:4198:41409":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:50072:5023":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"9:1075:5423":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"17:13147:51069":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:50765:4832":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:3948:2331":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"6:1662:39282":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"2:48362:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:9427:55973":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"19:0:1000":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"21:16682:2190":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"16:3314:5589":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"5:8361:4273":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:1626:39280":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:15023:4284":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:47302:32937":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"17:9676:63902":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:1460:4303":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:13245:4488":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:53704:19746":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"6:1537:39270":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:5706:9020":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"12:183:5493":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"21:16609:2189":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"17:9466:45569":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:56612:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"6:513:38380":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"6:0:803":{"crate_id":6,"path":["libc"],"kind":"module"},"16:6691:5730":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:13783:4334":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"16:4411:44464":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:1909:60755":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"1:14429:4436":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"21:18507:2337":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"17:11922:50260":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:8295:4256":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10039:45632":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:15849:55994":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:3522:3592":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"27:533:3727":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"1:1578:4308":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:48001:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"21:45:2026":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:49569:4991":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:8715:2202":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:1456:4302":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"16:7702:5679":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:3103:2926":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:50312:4692":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:11952:4255":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"21:599:2682":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:1567:2096":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"2:8673:152":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"21:17223:2205":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"6:6931:41573":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12496:50463":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:5978:4492":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:13859:51677":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:24506:37412":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"21:13346:2151":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"1:10794:3823":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:1669:39283":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:15095:2175":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"2:3535:3595":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:13050:5014":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:4689:44550":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"12:2072:4270":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"17:13612:51621":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"21:9353:2199":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"21:12184:2081":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"16:7721:5681":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:1991:146":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:13480:2053":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"1:6241:4239":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"1:15903:1905":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"21:67:1689":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"17:13323:51229":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:1680:39284":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:6949:5887":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"1:15908:1910":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:3171:150":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:14061:2978":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:7939:4419":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"17:9431:45568":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:51901:4789":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"17:10464:5968":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:4581:5299":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"1:12053:4508":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:49644:4838":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:8042:1391":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:49356:5187":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"6:5582:42086":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"21:14265:2161":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"18:896:6038":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:4526:41444":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"2:2263:4657":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:53535:4768":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:3462:4270":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"12:1682:5498":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:47033:2161":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:9561:5965":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:15899:1901":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"1:10438:4404":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:2512:5997":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"17:9716:63907":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11998:3729":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:50169:4679":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:5331:42045":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:11433:45985":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:11022:4218":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"6:618:38393":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:24440:37411":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:12573:2095":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"1:15896:1898":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:49747:4859":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:8874:158":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"16:7782:5677":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"5:1760:5312":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:3576:43946":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:53832:19754":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:11501:2198":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"21:15390:2177":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"2:39108:2924":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:24388:4873":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"2:48404:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"5:1256:60753":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"5:3110:60922":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:3467:3584":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:10039:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:49939:5016":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:15192:4474":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"16:4775:44564":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"1:7734:2681":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"2:3447:3575":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:14249:2156":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"17:11563:46271":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"21:12662:2098":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"2:25019:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"17:12442:50459":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:2862:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:3051:5900":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46925:4840":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:7159:4842":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"21:14918:2172":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"1:14399:54420":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"21:7692:2267":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"1:15315:28330":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"17:12048:50370":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:5727:4855":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"5:1055:5273":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:17326:2777":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"2:53779:19751":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:46903:2146":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"21:12261:2086":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"1:14064:2980":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"2:50573:5107":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"5:3825:2198":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"7:0:1496":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:11385:2198":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:13565:51611":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"21:9999:3795":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"16:3686:43955":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"1:5746:4551":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:15854:9019":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:32988:4752":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"6:5547:41293":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:13975:51746":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:4142:41405":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:10416:4191":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"18:645:6042":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:25085:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:24068:4191":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:4140:4461":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"12:2398:59543":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"29:47:1679":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:51801:4797":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:10527:4312":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"5:8287:5202":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6980:5733":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:16552:2191":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"1:9526:4471":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"30:170:52067":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"17:10015:45630":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:4287:41416":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"31:173:1727":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"6:4038:41392":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:13357:4681":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:4660:44545":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:12417:50457":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"6:601:38390":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"6:4416:41432":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"21:17413:2778":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"1:11449:4368":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"21:9874:2178":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"2:47992:2778":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:10303:54485":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:8271:2778":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"30:904:63919":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"16:5639:5572":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"1:15889:1893":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"21:18624:2345":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"2:50528:5038":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:3248:116":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:49993:5019":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:23232:4247":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"2:47331:32939":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"16:6604:5729":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"21:9218:2955":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"2:23962:4248":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12660:50535":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"12:2040:2261":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"16:3221:5847":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:50684:2812":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"2:14057:139":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:48945:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:7637:5745":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7731:5258":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"5:2328:5317":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:10517:4276":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:10253:5921":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"21:6302:2085":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"17:9183:5945":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:10775:45762":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:46329:3601":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:5759:4552":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"21:17504:2265":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"16:3029:5843":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"6:5447:42055":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"16:7208:5744":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"6:6153:42468":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:4346:41423":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:53081:4811":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:11409:3732":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:24072:4630":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"21:18102:2146":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"2:46211:197":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:2859:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"5:3814:161":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"21:10732:2056":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"17:10318:5971":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:14801:54498":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12770:50611":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:13747:51660":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"5:1296:5315":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:46667:5026":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:8446:4500":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"24:237:2050":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"12:856:4299":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"2:46356:4734":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"5:7551:60755":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:11354:5942":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"6:4410:41431":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"17:11256:45547":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:23291:4629":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"21:18580:2167":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"6:4296:41417":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"21:11238:2406":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"16:5498:5567":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"6:5426:42052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"5:1518:4310":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:6902:41569":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"2:24527:5069":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:783:8905":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"1:15882:1887":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"17:11653:46312":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:2917:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:46944:2150":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"16:6089:5714":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:52198:60275":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"17:11713:46479":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"21:13600:2154":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"17:13840:51671":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"21:18385:4057":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"31:115:1725":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"2:13560:110":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"12:379:5492":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"20:39:4191":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"1:10496:9012":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:51552:4800":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10217:45557":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:5366:42046":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:49152:59614":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:50532:5032":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"16:3077:5901":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:3755:3825":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:11288:4189":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"16:5396:5559":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:13332:4678":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"12:432:5490":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"17:13306:51228":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"1:1466:4304":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:6268:42475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:2277:4660":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"7:85:43122":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:13342:4677":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:11434:2966":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"16:4381:44458":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12183:50441":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:5906:2148":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"18:651:6039":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"30:137:52065":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:47015:2057":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:7659:5746":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"1:15339:54427":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"27:521:3726":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"2:46972:60135":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:15633:54493":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"21:17865:2270":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"27:502:3723":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"12:815:4302":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"6:4179:41408":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"17:10058:6016":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4219:2981":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:3471:3582":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:48893:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:4161:4639":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"2:25052:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"14:47:43861":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:13352:51243":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:10638:4245":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:5176:44797":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"21:16960:3290":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"2:3870:3605":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"21:8861:2201":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"1:4485:2342":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:9883:63905":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"21:15451:2180":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"6:612:38392":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"6:6205:42470":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4532:41445":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:542:5602":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:49657:4996":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"18:621:63910":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:7100:5738":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:4075:41397":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:6099:5715":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:13369:51561":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:4716:44553":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"6:4362:41425":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"2:49789:2966":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"21:18489:2335":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"12:2036:2778":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"16:7264:196":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:14417:54419":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"21:18631:2346":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"17:12455:50460":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"6:5390:42048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"6:5419:42051":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"21:17493:2264":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"1:15904:1906":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:3896:41379":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"1:6573:4188":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:52661:4782":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:9087:45563":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:9394:54483":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"5:1547:4311":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"1:6477:54231":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"2:3654:2813":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:9267:58599":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:2391:2815":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:11031:45578":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:50524:5037":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:50692:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4351:2199":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"18:820:6032":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:23175:4834":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"2:3272:128":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"21:15857:2073":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"5:3428:4269":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"6:1600:39277":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"1:15865:54375":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:2953:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:46603:4896":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"12:353:63026":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:56651:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:50735:2397":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:10304:5962":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11810:46507":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:49518:4986":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"14:0:1863":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:11682:4988":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:3372:222":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"5:1072:2198":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:49113:59894":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:57973:60277":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"2:3453:3578":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13953:51710":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"20:0:1662":{"crate_id":20,"path":["futures_core"],"kind":"module"},"1:2422:10040":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:14931:4262":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"1:2119:2198":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"30:820:6042":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"30:919:63915":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"21:12126:2079":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"21:18862:2414":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"24:380:63957":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"21:10511:2057":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"2:51376:60193":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:2326:604":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:3441:5229":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7960:60756":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:47293:2202":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:47874:5084":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"12:0:1862":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"5:8466:60819":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"2:46097:2782":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:4829:4356":{"crate_id":1,"path":["std","net","ip","display_buffer","IpDisplayBuffer"],"kind":"struct"},"16:7826:4734":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:9756:63903":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"5:1673:2777":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:11013:45577":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:13763:51662":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:8954:5947":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:49142:3732":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:50043:2334":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:8241:2261":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:49618:4995":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:9796:63904":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"1:3070:4450":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"21:13258:2149":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"2:49839:5012":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"9:0:1859":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"2:47933:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"1:4492:2963":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:6745:4175":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:3463:3580":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:51500:4808":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:3284:2325":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:9960:163":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"18:720:60188":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:12700:50543":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"6:6914:41571":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"31:118:1726":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"1:11034:4219":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"12:777:2778":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:0:1664":{"crate_id":21,"path":["futures_util"],"kind":"module"},"9:234:5380":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"5:5609:2693":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10340:6000":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:12758:50608":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:6640:2153":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:51400:4807":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:16463:2197":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"2:5214:4934":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:14379:4192":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"1:8974:55934":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"2:3841:3604":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:8472:220":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"20:96:1668":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"1:8096:4419":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"2:47984:2777":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"27:467:5286":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"5:5488:2955":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"5:1701:4298":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"16:4840:44581":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"30:995:6032":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:16075:2188":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"5:981:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:5567:42085":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"5:0:283":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:4098:41400":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"21:14796:2060":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"2:11696:4989":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:3102:4191":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"2:48068:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:5730:4548":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"6:4425:41433":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:32792:60258":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"1:15887:1891":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:844:227":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"15:248:5507":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:3475:3581":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:12573:50468":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"14:194:43862":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:46645:5171":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:47925:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:50540:122":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:10643:4434":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:9920:45575":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"17:13257:51161":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"18:169:52067":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:14634:4236":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:8406:5277":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:14183:2085":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"5:984:2160":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"26:55:52726":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"1:15170:4225":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"27:495:2662":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:13351:4680":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"16:5530:5569":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:6016:42462":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:4146:4640":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"2:3824:229":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"2:2188:33513":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"21:16274:2077":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"2:49670:4997":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11212:5989":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"21:10844:2060":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"17:13180:51114":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"28:0:2010":{"crate_id":28,"path":["slab"],"kind":"module"},"17:10028:45631":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"17:9004:45560":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"21:18066:2328":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:10166:45645":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:32626:4324":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"21:17637:2205":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:48278:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"21:16999:2201":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"21:17131:2203":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"21:18537:2340":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"18:611:6040":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:50285:4691":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"6:4088:41399":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"21:12447:2093":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"1:6647:4181":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:5563:4201":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"21:18516:2338":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"1:12125:4390":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"6:6856:42996":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"2:3829:138":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:3966:41384":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"30:0:1867":{"crate_id":30,"path":["memchr"],"kind":"module"},"6:672:38424":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"21:16920:2192":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"16:6643:5876":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"5:8449:5279":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"5:5948:60781":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"21:17335:3029":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"2:51853:4804":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:7169:5685":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"6:4308:41418":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11822:46508":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:8939:4349":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"27:460:3776":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"21:17395:2198":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"1:11842:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:24415:37392":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:9434:54488":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"17:13440:51595":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"18:754:63925":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"16:3340:5590":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:18820:2418":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"1:7436:4329":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:7470:4331":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:11912:54414":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"6:3993:41387":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"31:166:1730":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"16:7131:5741":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:8732:4520":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:8742:2284":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"5:1729:4301":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"6:4061:41395":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:7200:5687":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:18789:63934":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"5:383:5284":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"21:18377:2264":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"16:6173:5718":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:11205:218":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"5:1626:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7449:5678":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:9161:4635":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:56242:4746":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:10801:143":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"21:6790:63955":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"6:157:38072":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"12:2280:4310":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:46858:10553":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:11305:45585":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:2420:6629":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:6219:4190":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"17:12716:50544":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:4017:4266":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"21:13181:2148":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"17:12527:50465":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:9795:1695":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"21:11930:2073":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"2:5152:4929":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:152:52066":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:17695:2268":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"17:10788:45761":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:46878:4838":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:10570:120":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"30:1060:6037":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:46848:10554":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"18:766:63911":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:48152:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"6:1567:39274":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"23:0:2008":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"18:661:6043":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"28:211:4310":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"1:10648:4209":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:3478:5850":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"16:7792:5705":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"21:13730:3110":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"21:17431:2261":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"6:5405:42050":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"21:14028:2055":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"21:18874:2420":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"2:48194:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12250:50446":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:46801:5081":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:50106:5026":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:10250:4968":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:15053:4286":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"18:739:63926":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:47857:2777":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"3:321:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"5:2284:5231":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"2:46615:4897":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"16:6331:5503":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"21:18548:2341":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"2:50520:5039":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:1113:9017":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"30:1032:6035":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"2:46728:5169":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:10422:45688":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"6:6007:42461":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:4383:2955":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"21:18737:2113":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"2:48929:4577":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:24477:37413":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:53756:19750":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6931:5886":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:46754:4901":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:8449:2140":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:13345:51231":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13215:51117":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"21:18671:63942":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"6:521:38381":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"17:12634:50533":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:13428:51594":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:7834:4419":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"21:18907:3008":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"0:142:1037":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"27:565:3730":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"17:12196:50442":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:11797:46494":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"2:49857:5013":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"12:1256:4311":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"30:957:2174":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:49765:5008":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:48575:4578":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"17:8929:45559":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:11105:4355":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"18:694:6045":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:46588:4214":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:8453:4502":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"17:11282:45584":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"17:13557:51610":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"21:12654:2097":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"5:5962:60796":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"17:9786:45573":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:23049:4833":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:15065:4292":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"14:244:43863":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"2:3518:3591":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:10977:2059":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"2:5034:4927":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:5348:5556":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"16:6433:5724":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:24920:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"21:12504:2094":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"17:10147:45647":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:14662:2169":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"17:12482:50462":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:10211:45649":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"16:3007:5842":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"21:14970:2173":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"9:927:43234":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"16:3521:43945":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"21:16807:2194":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"18:801:6030":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:8288:2662":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"27:550:3728":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"2:3620:133":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"21:661:54453":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:46297:3598":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"17:13155:51111":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"5:1276:5314":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:24986:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"5:8257:60826":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"1:7139:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:46934:2149":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:10550:10035":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:299:63895":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:5974:38303":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:1397:2778":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3370:4672":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"30:836:6043":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11017:128":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:4271:44420":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"12:2032:2198":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:46253:199":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"17:9988:45629":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"21:687:1665":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"2:11710:4990":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"21:8152:923":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"21:18805:2630":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"1:15905:1907":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:9533:2654":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:5217:5596":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:3614:131":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:5412:5562":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"1:5425:4233":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"12:1121:4309":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:14456:142":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:5887:5587":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"1:7248:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"12:2052:4267":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:9826:5971":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:8610:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"21:9738:1684":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"2:22900:60046":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"6:4464:41438":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:13908:51703":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:5529:5163":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:53871:19755":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:9948:45576":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:4116:41402":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"2:11196:4191":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:4048:41393":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"18:136:52065":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:4372:2777":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:4871:44588":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:23437:4629":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"2:49587:4992":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:15377:5515":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"22:0:2007":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"12:764:2777":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:5902:5710":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:13660:51622":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:53675:19743":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:2361:10022":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:3459:2328":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"2:12772:5183":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"1:11960:2778":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:3395:2198":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"1:5278:4481":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:3369:2281":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"1:11341:12335":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:24423:37410":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:10986:2966":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"21:168:697":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:46768:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:13914:2155":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"21:10231:2631":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"2:24332:4878":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"21:13669:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"21:11869:2070":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"2:2286:4661":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"21:12196:2082":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"17:12360:50454":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"1:10665:4210":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:14630:10035":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"21:15467:2063":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"21:97:1692":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"6:3972:41385":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:4853:4718":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"21:16083:2187":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"16:7379:5691":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"18:829:6033":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"16:3243:5848":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:49775:2964":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:3461:5851":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:5869:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"16:2959:5841":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:6841:4194":{"crate_id":1,"path":["std","os","net","tcp","TcpStreamExt"],"kind":"trait"},"2:23151:4191":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"16:7121:5740":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:12014:4258":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"16:4628:44537":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"21:16322:2182":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"2:3491:3585":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"13:233:63041":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:849:6034":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"30:976:6030":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:5269:4935":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2981:5852":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:23974:59622":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:5721:5580":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"9:686:5353":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"5:1710:4299":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:4340:41422":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"1:11432:4367":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"2:46655:5172":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"17:13421:51591":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:18835:2417":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"21:9721:1682":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"2:46692:4214":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:10572:4578":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13281:51225":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:4509:41442":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:13584:51613":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"6:607:38391":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:10913:45871":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"1:13928:54495":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"2:56638:241":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"16:6141:5717":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"21:15144:2176":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:13539:51608":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:13887:51701":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"5:3106:60818":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"17:10503:5973":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"2:53473:4803":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"2:52301:4810":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:4256:2976":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"21:14444:2158":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"1:12082:214":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:11467:2080":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"6:4012:41389":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"16:3494:43944":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:48589:4581":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"2:51631:4776":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:18159:107":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"2:24953:3201":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"9:692:5355":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"6:6097:39213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:13196:51115":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"17:10949:45850":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"2:3442:3576":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"6:4270:4494":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:4803:44568":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:46986:2054":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:7753:5259":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"5:1663:2198":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"6:6937:41574":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:10584:4582":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"12:2392:63038":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10530:45788":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"16:4975:44620":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:4467:2346":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:13016:51007":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:10789:3822":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"1:1477:4305":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:32640:60259":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"21:15935:2072":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"18:885:6037":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:8669:137":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"}},"external_crates":{"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"27":{"name":"futures_channel","html_root_url":null},"29":{"name":"futures_io","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_executor","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"20":{"name":"futures_core","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"28":{"name":"slab","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"futures_task","html_root_url":null}},"format_version":21}