{"root":"0:0:1967","crate_version":"0.3.30","includes_private":false,"index":{"0:13-21:2766:1877":{"id":"0:13-21:2766:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:1877","glob":false}}},"0:50-31:109:1935":{"id":"0:50-31:109:1935","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:1935","glob":false}}},"0:21-29:20:1887":{"id":"0:21-29:20:1887","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1887","glob":false}}},"2:12970:22012":{"id":"2:12970:22012","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12859:22338":{"id":"2:12859:22338","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:1900":{"id":"0:42-21:57:1900","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1900","glob":false}}},"2:12886:22384":{"id":"2:12886:22384","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12874:20926":{"id":"2:12874:20926","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:44311:2786","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5553:30106":{"id":"5:5553:30106","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:281:2441","`String`":"5:7544:250"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2441","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3786:1878":{"id":"0:74-21:3786:1878","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:1878","glob":false}}},"2:12912:22376":{"id":"2:12912:22376","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309","str::rsplitn":"2:12915:22378"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44429:8298","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:67-20:97:1876":{"id":"0:67-20:97:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1876","glob":false}}},"2:12936:29402":{"id":"2:12936:29402","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63-25:9:1880":{"id":"0:63-25:9:1880","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1880","glob":false}}},"2:12872:27452":{"id":"2:12872:27452","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:44295:8316","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:35-21:6768:1898":{"id":"0:35-21:6768:1898","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:1898","glob":false}}},"2:12889:20499":{"id":"2:12889:20499","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:29406":{"id":"2:12943:29406","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12845:883":{"id":"2:12845:883","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12106:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:1884":{"id":"0:76-29:27:1884","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1884","glob":false}}},"0:77-29:17:1885":{"id":"0:77-29:17:1885","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1885","glob":false}}},"0:54-31:120:1939":{"id":"0:54-31:120:1939","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1939","glob":false}}},"2:12883:22383":{"id":"2:12883:22383","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12975:29413":{"id":"2:12975:29413","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4739:29413"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44624:8320","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5556:22010":{"id":"5:5556:22010","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12971:22013"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1967":{"id":"0:0:1967","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:1904","crate::executor":"0:46:1777","crate::stream":"21:1291:1874","crate::channel":"27:0:1901","crate::future":"21:104:767","crate::sink":"21:4707:1881"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1777","0:56:1180","0:4-2:45241:147","0:5-20:32:1870","0:7-21:422:1872","0:8-21:587:1873","0:10-20:68:1875","0:11-20:97:1876","0:13-21:2766:1877","0:14-21:3786:1878","0:15-25:9:1880","0:16-21:5171:1882","0:18-29:27:1884","0:19-29:17:1885","0:20-29:25:1886","0:21-29:20:1887","0:23-21:6217:1888","0:24-21:6182:1889","0:25-21:6212:1890","0:26-21:6199:1891","0:27-20:131:1892","0:28-22:7:1893","0:29-21:6770:1894","0:31-21:6767:1895","0:32-21:37:1896","0:33-21:20:1164","0:34-21:6769:1897","0:35-21:6768:1898","0:37-21:104:767","0:38-21:5264:1044","0:39-21:4707:1881","0:40-21:1291:1874","0:41-21:5212:1899","0:42-21:57:1900","0:43-27:0:1901","0:44-21:6240:1903","0:45-21:5266:1904"],"is_stripped":false}}},"2:12969:22011":{"id":"2:12969:22011","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12870:22370":{"id":"2:12870:22370","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12869:22369"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:1940":{"id":"0:55-31:125:1940","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1940","glob":false}}},"0:20-29:25:1886":{"id":"0:20-29:25:1886","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1886","glob":false}}},"2:12854:29393":{"id":"2:12854:29393","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5544:30104":{"id":"5:5544:30104","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:1937":{"id":"0:52-31:100:1937","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1937","glob":false}}},"0:15-25:9:1880":{"id":"0:15-25:9:1880","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1880","glob":false}}},"0:26-21:6199:1891":{"id":"0:26-21:6199:1891","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:1891","glob":false}}},"2:12971:22013":{"id":"2:12971:22013","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:29400":{"id":"2:12930:29400","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12541:8309","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatch_indices":"2:12933:29401"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44475:8324","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536":{"id":"5:5536","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5537:30102","5:5538:8640","5:5541:30103","5:5544:30104","5:5552:30105","5:5553:30106","5:5554:2329","5:5555:22009","5:5556:22010"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:4-2:45241:147":{"id":"0:4-2:45241:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:45241:147","glob":false}}},"0:56:1180":{"id":"0:56:1180","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:767","0:59-2:45241:147","0:60-20:32:1870","0:62-21:4707:1881","0:63-25:9:1880","0:65-21:1291:1874","0:66-20:68:1875","0:67-20:97:1876","0:69-21:422:1872","0:70-21:587:1873","0:71-21:5171:1882","0:73-21:2766:1877","0:74-21:3786:1878","0:76-29:27:1884","0:77-29:17:1885","0:78-29:25:1886","0:79-29:20:1887","0:81-21:6217:1888","0:82-21:6182:1889","0:83-21:6212:1890","0:84-21:6199:1891"],"is_stripped":false}}},"2:12942:29405":{"id":"2:12942:29405","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:1934":{"id":"0:49-31:68:1934","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1934","glob":false}}},"2:12950:20834":{"id":"2:12950:20834","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5554:2329":{"id":"5:5554:2329","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5555:22009":{"id":"5:5555:22009","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12970:22012"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48-31:65:1933":{"id":"0:48-31:65:1933","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1933","glob":false}}},"0:78-29:25:1886":{"id":"0:78-29:25:1886","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1886","glob":false}}},"0:70-21:587:1873":{"id":"0:70-21:587:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:1873","glob":false}}},"0:43-27:0:1901":{"id":"0:43-27:0:1901","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:1901","glob":false}}},"2:12878:29396":{"id":"2:12878:29396","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44589:8323","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12944:29407":{"id":"2:12944:29407","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12566:8304","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12978:29414":{"id":"2:12978:29414","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4737:29414"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44642:8321","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51-31:136:1936":{"id":"0:51-31:136:1936","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1936","glob":false}}},"2:12847:29390":{"id":"2:12847:29390","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1777":{"id":"0:46:1777","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1933","`LocalPool`":"31:120:1939"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:1933","0:49-31:68:1934","0:50-31:109:1935","0:51-31:136:1936","0:52-31:100:1937","0:53-31:102:1938","0:54-31:120:1939","0:55-31:125:1940"],"is_stripped":false}}},"0:66-20:68:1875":{"id":"0:66-20:68:1875","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1875","glob":false}}},"0:32-21:37:1896":{"id":"0:32-21:37:1896","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:1896","glob":false}}},"2:12869:22369":{"id":"2:12869:22369","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12870:22370"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12959:29410":{"id":"2:12959:29410","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-21:4707:1881":{"id":"0:39-21:4707:1881","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:1881","glob":false}}},"2:12906:29397":{"id":"2:12906:29397","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12541:8309","str::split":"2:12897:2469","prim@char":"1:12106:458","`DoubleEndedIterator`":"2:7934:128","str::rsplit_terminator":"2:12909:29398"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44375:8329","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12876:27418":{"id":"2:12876:27418","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12875:27253"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44608:8311","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:767":{"id":"0:58-21:104:767","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:767","glob":false}}},"0:29-21:6770:1894":{"id":"0:29-21:6770:1894","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:1894","glob":false}}},"2:12855:340":{"id":"2:12855:340","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12856:22341","`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12924:2192":{"id":"2:12924:2192","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12541:8309","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::rmatches":"2:12927:29399"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44529:8326","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:25-21:6212:1890":{"id":"0:25-21:6212:1890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:1890","glob":false}}},"0:69-21:422:1872":{"id":"0:69-21:422:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:1872","glob":false}}},"2:12844":{"id":"2:12844","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12845:883","2:12846:21350","2:12847:29390","2:12848:29391","2:12850:29392","2:12853:22317","2:12854:29393","2:12855:340","2:12856:22341","2:12857:22337","2:12859:22338","2:12861:22339","2:12863:22340","2:12865:29394","2:12866:29395","2:12867:22365","2:12868:22366","2:12869:22369","2:12870:22370","2:12872:27452","2:12873:27304","2:12874:20926","2:12875:27253","2:12876:27418","2:12877:2460","2:12878:29396","2:12879:27453","2:12880:22382","2:12883:22383","2:12886:22384","2:12889:20499","2:12893:20500","2:12897:2469","2:12900:22372","2:12903:22374","2:12906:29397","2:12909:29398","2:12912:22376","2:12915:22378","2:12918:22380","2:12921:22381","2:12924:2192","2:12927:29399","2:12930:29400","2:12933:29401","2:12936:29402","2:12938:29403","2:12940:29404","2:12942:29405","2:12943:29406","2:12944:29407","2:12947:29408","2:12950:20834","2:12953:22385","2:12956:29409","2:12959:29410","2:12962:29411","2:12965:29412","2:12967:22007","2:12968:23551","2:12969:22011","2:12970:22012","2:12971:22013","2:12972:23554","2:12973:23555","2:12974:23556","2:12975:29413","2:12977:2597","2:12978:29414"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12893:20500":{"id":"2:12893:20500","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42427:198","prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6769:1897":{"id":"0:34-21:6769:1897","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:1897","glob":false}}},"0:24-21:6182:1889":{"id":"0:24-21:6182:1889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:1889","glob":false}}},"0:73-21:2766:1877":{"id":"0:73-21:2766:1877","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:1877","glob":false}}},"2:12865:29394":{"id":"2:12865:29394","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12112:1548","str::slice_mut_unchecked":"2:12866:29395","crate::ops::Index":"2:40008:2672"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:30102":{"id":"5:5537:30102","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:281:2441","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:281:2441","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12863:22340":{"id":"2:12863:22340","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12938:29403":{"id":"2:12938:29403","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:1892":{"id":"0:27-20:131:1892","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:1892","glob":false}}},"0:65-21:1291:1874":{"id":"0:65-21:1291:1874","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:1874","glob":false}}},"0:31-21:6767:1895":{"id":"0:31-21:6767:1895","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:1895","glob":false}}},"2:12867:22365":{"id":"2:12867:22365","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12869:22369","str::split_at_mut":"2:12868:22366"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12900:22372":{"id":"2:12900:22372","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12357:8300","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81-21:6217:1888":{"id":"0:81-21:6217:1888","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:1888","glob":false}}},"2:12848:29391":{"id":"2:12848:29391","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:767":{"id":"0:37-21:104:767","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:767","glob":false}}},"0:11-20:97:1876":{"id":"0:11-20:97:1876","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1876","glob":false}}},"2:12974:23556":{"id":"2:12974:23556","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:35402"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:8640":{"id":"5:5538:8640","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:59-2:45241:147":{"id":"0:59-2:45241:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:45241:147","glob":false}}},"0:28-22:7:1893":{"id":"0:28-22:7:1893","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1893","glob":false}}},"2:12853:22317":{"id":"2:12853:22317","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12096:8313"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-21:20:1164":{"id":"0:33-21:20:1164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1164","glob":false}}},"0:10-20:68:1875":{"id":"0:10-20:68:1875","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1875","glob":false}}},"2:12856:22341":{"id":"2:12856:22341","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12123:1653"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-21:6217:1888":{"id":"0:23-21:6217:1888","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:1888","glob":false}}},"0:41-21:5212:1899":{"id":"0:41-21:5212:1899","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:1899","glob":false}}},"2:12897:2469":{"id":"2:12897:2469","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12541:8309","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split_whitespace":"2:12875:27253","str::rsplit":"2:12903:22374"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:44325:2787","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12915:22378":{"id":"2:12915:22378","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12106:458","str::splitn":"2:12912:22376","self::pattern":"2:12541:8309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44447:8296","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6212:1890":{"id":"0:83-21:6212:1890","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:1890","glob":false}}},"2:12965:29412":{"id":"2:12965:29412","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12502:134","`FromStr`":"2:12501:2940"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42572:233","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12501:2940","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12501:2940","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12968:23551":{"id":"2:12968:23551","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:40377:22316","Self::is_ascii":"2:12967:22007"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:40377:22316","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12875:27253":{"id":"2:12875:27253","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12876:27418"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44599:8312","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-21:422:1872":{"id":"0:7-21:422:1872","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:1872","glob":false}}},"2:12903:22374":{"id":"2:12903:22374","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12541:8309","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::split":"2:12897:2469"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:44343:8294","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12927:29399":{"id":"2:12927:29399","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12541:8309","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::matches":"2:12924:2192"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44547:8327","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:22007":{"id":"2:12967:22007","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82-21:6182:1889":{"id":"0:82-21:6182:1889","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:1889","glob":false}}},"0:14-21:3786:1878":{"id":"0:14-21:3786:1878","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:1878","glob":false}}},"2:12873:27304":{"id":"2:12873:27304","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12106:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:44301:8315","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6240:1903":{"id":"0:44-21:6240:1903","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:1903","glob":false}}},"0:79-29:20:1887":{"id":"0:79-29:20:1887","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1887","glob":false}}},"2:12879:27453":{"id":"2:12879:27453","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44617:8310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12921:22381":{"id":"2:12921:22381","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12857:22337":{"id":"2:12857:22337","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42427:198"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12940:29404":{"id":"2:12940:29404","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12861:22339":{"id":"2:12861:22339","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10643:246","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:22385":{"id":"2:12953:22385","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12956:29409":{"id":"2:12956:29409","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12962:29411":{"id":"2:12962:29411","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5541:30103":{"id":"5:5541:30103","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5552:30105":{"id":"5:5552:30105","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7544:250"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7544:250","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-20:32:1870":{"id":"0:5-20:32:1870","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1870","glob":false}}},"0:71-21:5171:1882":{"id":"0:71-21:5171:1882","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:1882","glob":false}}},"0:18-29:27:1884":{"id":"0:18-29:27:1884","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1884","glob":false}}},"0:38-21:5264:1044":{"id":"0:38-21:5264:1044","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1044","glob":false}}},"2:12909:29398":{"id":"2:12909:29398","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12541:8309","str::split":"2:12897:2469","prim@char":"1:12106:458","str::split_terminator":"2:12906:29397"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44393:8328","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5266:1904":{"id":"0:45-21:5266:1904","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:1904","glob":false}}},"2:12918:22380":{"id":"2:12918:22380","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42425:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:29408":{"id":"2:12947:29408","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40-21:1291:1874":{"id":"0:40-21:1291:1874","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:1874","glob":false}}},"2:12973:23555":{"id":"2:12973:23555","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:35402"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12880:22382":{"id":"2:12880:22382","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12106:458","self::pattern":"2:12541:8309"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:1938":{"id":"0:53-31:102:1938","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1938","glob":false}}},"0:62-21:4707:1881":{"id":"0:62-21:4707:1881","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:1881","glob":false}}},"0:8-21:587:1873":{"id":"0:8-21:587:1873","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:1873","glob":false}}},"0:19-29:17:1885":{"id":"0:19-29:17:1885","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1885","glob":false}}},"2:12877:2460":{"id":"2:12877:2460","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44579:2486","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5171:1882":{"id":"0:16-21:5171:1882","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:1882","glob":false}}},"2:12846:21350":{"id":"2:12846:21350","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12868:22366":{"id":"2:12868:22366","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12867:22365","str::split_at_mut_checked":"2:12870:22370"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12866:29395":{"id":"2:12866:29395","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12112:1548","crate::ops::IndexMut":"2:3222:2673","str::slice_unchecked":"2:12865:29394"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12972:23554":{"id":"2:12972:23554","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:910:35402"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:2597":{"id":"2:12977:2597","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4740:2597"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44633:2598","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12933:29401":{"id":"2:12933:29401","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12541:8309","`DoubleEndedIterator`":"2:7934:128","prim@char":"1:12106:458","str::match_indices":"2:12930:29400"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44493:8325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12546:8305","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12561:8306","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:1870":{"id":"0:60-20:32:1870","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1870","glob":false}}},"2:12850:29392":{"id":"2:12850:29392","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12848:29391"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6199:1891":{"id":"0:84-21:6199:1891","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:1891","glob":false}}}},"paths":{"17:12052:16202":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:3418:27828":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"21:13516:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"1:4887:2851":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"2:2721:142":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"17:11576:16182":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"30:1473:20510":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"2:22238:3162":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"24:9:20527":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"2:41199:2268":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"31:68:1934":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"2:44756:8342":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:2526:14942":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"21:9672:32872":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"11:1007:2639":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"21:11083:2362":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"21:12899:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"2:22597:27239":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:5117:13012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"21:8570:2295":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"1:7450:25797":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"2:34191:8656":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:12541:8309":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"31:102:1938":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"5:6118:2772":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"6:6079:13689":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"21:8648:226":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"5:7316:2650":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:9256:21885":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:15725:20311":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"21:10345:32872":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"16:3065:14963":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:6753:15909":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"21:14437:2430":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"2:48833:8210":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:15961:18976":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"21:7345:32872":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"6:4388:12936":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"2:43660:2765":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:10111:26107":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:3315:14965":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:3461:14966":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:4582:8406":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:11269:16094":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:30759:2827":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:47623:3055":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"21:8156:2282":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"11:1066:14845":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"1:363:2594":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"2:47031:3116":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:46939:3054":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"16:3049:14962":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"21:39:2239":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:4557:2877":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:1691:10340":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:40882:8427":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"18:531:20515":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"2:45056:8814":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:43668:27272":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:1063:2641":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:9559:16011":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:15689:20309":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"6:6071:13688":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"21:10931:32872":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"2:21983:3026":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:7802:2608":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"6:4745:12970":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"1:12118:807":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:48043:3078":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"5:3607:2626":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:12112:1548":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"21:12230:2284":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"17:15546:20299":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:41179:2266":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:43176:8252":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"17:14921:20252":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"16:7597:31777":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:22415:2758":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"21:21:1164":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"6:4351:12933":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:46462:3076":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"2:4988:28140":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:3460:16203":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"5:2975:28953":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"21:6846:32872":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"1:7759:2579":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"5:4411:2772":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:8294:135":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"17:13787:19489":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"21:8896:32872":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"30:144:20623":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"17:14413:19529":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"18:113:20488":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"21:8544:2293":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"18:719:20501":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:32776:2957":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:21294:26900":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"2:4629:8407":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:6687:15907":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:45040:8806":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:10522:2579":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:880:2629":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:9320:2695":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:4766:2903":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"2:48295:3084":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:13294:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"21:2553:33094":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"16:7651:15939":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:10852:16074":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"1:3265:2801":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"5:2062:2662":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"17:12560:16332":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"21:10401:32872":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:14818:116":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"21:10017:71":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"17:15049:20259":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"21:12673:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"28:76:34474":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"2:43405:8240":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:6804:14108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"16:7768:15945":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"21:10962:2361":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"21:6556:33087":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"1:11414:20831":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"21:12798:31974":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"21:7526:32872":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"1:4217:2867":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:11611:2825":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"18:548:150":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"16:6960:15917":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"16:7006:15919":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:9998:8251":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:13739:2297":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"5:281:2441":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"2:9142:8305":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:4449:2866":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:44608:8311":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"5:3594:2399":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:2353:8684":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"6:4902:12989":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"16:6499:15900":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"5:4092:2626":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:47160:27492":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:44137:8286":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"21:11209:2365":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"6:7668:13185":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:3581:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:4914:12991":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"1:6609:2981":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"11:351:31473":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:7993:2795":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:11514:32872":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"2:43451:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"19:0:1142":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"18:614:20630":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"1:10374:2953":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"21:11977:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:12387:16292":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:44343:8294":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:5637:2952":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"5:7520:2716":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"21:4540:21806":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"2:45241:147":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"5:4366:271":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"21:9907:32872":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:14152:2425":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"2:26433:273":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"16:6513:15901":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"18:624:20626":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"21:5266:1904":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"1:2032:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"21:14810:2421":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:8059:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:45262:214":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"21:14047:2627":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"6:4549:12953":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"2:10357:8782":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"21:7636:2288":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"21:6859:2268":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"1:2728:2480":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"6:6100:13691":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"2:41256:2358":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"16:5648:15863":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"21:12133:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:14312:19522":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"21:15028:2484":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"1:6676:2985":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"21:15036:2425":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"2:3433:8232":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"21:9188:2315":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"6:1576:10330":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"21:13733:212":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"2:44920:8349":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:922:2634":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:22544:27443":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"5:1315:2642":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:8134:15955":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"5:1151:30190":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"17:15374:20290":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"20:82:2218":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:44599:8312":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:10784:20868":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"31:136:1936":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"16:2788:14953":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"2:42543:2920":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:14057:19506":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:9813:16041":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:40807:27489":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"21:11344:32872":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"21:6934:32872":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:8546:2935":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"21:12448:2386":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:8362:2865":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:11817:16240":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:13765:32872":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"17:14181:19513":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:11030:8295":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:23800:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"21:13642:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"17:10337:16049":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"11:1566:14848":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"6:555:9434":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:10812:2626":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:15384:20291":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:10265:112":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"17:11243:16128":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"21:9338:2318":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"16:7534:15932":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:22824:27318":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"11:102:31487":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:11173:159":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"17:12115:16282":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"17:10813:32749":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"2:34328:8657":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:11364:21808":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"17:14426:19530":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"17:14373:19526":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"1:8260:2339":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"30:1016:20627":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"6:6222:13724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:33349:8651":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"21:14702:32872":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:15903:20459":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:41138:2345":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:13648:19482":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:893:2422":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"17:15631:20304":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"16:7884:15950":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"18:574:2368":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:11429:20946":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:6263:13726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:13219:2296":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:7090:31892":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"11:1051:2641":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"21:9887:2264":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"1:6532:2983":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:10925:2956":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"17:15680:20308":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:3388:261":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:3797:14985":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"26:53:34445":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"1:909:2631":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:3010:8629":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"17:11369:16129":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"1:11686:14890":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"2:2504:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:22301:2758":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"25:9:1880":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"2:47341:3083":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"6:5928:13680":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:5015:13002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"17:12273:16065":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"21:6240:1903":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"21:10889:2359":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"21:14079:2421":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"21:15566:32921":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"6:6047:13686":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:15287:20280":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"5:1536:2661":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"21:23:2237":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"17:14170:19512":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:8990:2990":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"21:7222:32872":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:13530:33816":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"16:5816:31692":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"6:119:9108":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:9169:241":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"21:15464:33071":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"29:27:1884":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"2:9651:28766":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:42425:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"21:14524:2431":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"21:7503:162":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"1:10766:2433":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"16:7462:15926":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:22277:3163":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:12930:16068":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"9:237:2934":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"2:21323:26895":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:41188:8623":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:4701:21903":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"17:16109:20470":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"5:1115:30189":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"27:0:1901":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"1:11204:21917":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"2:42404:2819":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"2:42938:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"16:5661:15864":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:9860:16042":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:46318:3074":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:4377:2872":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"2:45297:3168":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"6:4989:12998":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"5:3738:2483":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12486:16304":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"27:154:2992":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"5:7628:2630":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"21:10117:32872":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"21:7488:32872":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"1:8920:2399":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"6:4814:12978":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:42899:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:9962:141":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"2:3172:2224":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:1923:8693":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:2977:21835":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:12113:1634":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"21:10367:2360":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"17:10432:32756":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:47687:3110":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"2:3187:138":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:1521:10324":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"16:7503:15929":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:4440:12940":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"17:15301:20282":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:41270:2359":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"11:742:2633":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"16:536:31575":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:11088:16090":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:7702:14678":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:5574:15859":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"30:1516:20515":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"11:2326:2640":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"2:8399:28523":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"17:10950:16104":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:588:9439":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"6:6934:14117":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"6:6658:9475":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"2:40988:2720":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"21:6769:1897":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"5:7507:2715":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:4878:12986":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"2:22384:8683":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"5:1477:2628":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:7935:2753":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"5:3753:2662":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"0:0:1967":{"crate_id":0,"path":["futures"],"kind":"module"},"17:11307:16125":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:41156:27281":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"5:7569:8352":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:2474:28964":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"26:37:34446":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"6:1703:2862":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"1:11462:21871":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"18:671:20505":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"5:6352:3171":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"17:1203:16099":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"6:4870:12985":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"1:12117:702":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:14633:20240":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"6:5152:13017":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:9139:20849":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"6:489:9426":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"21:15157:2488":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"17:15133:20267":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:5419:15858":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"21:13968:32884":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"1:6963:21833":{"crate_id":1,"path":["std","sys","pal","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"21:9002:2308":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"1:7808:2698":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"16:7513:15930":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:3557:26043":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"15:394:14893":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"17:15311:20283":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:7633:13180":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"21:4954:2428":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:2110:8236":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"21:12717:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"21:15330:33097":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"1:12129:1708":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:2718:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"6:4584:12957":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"21:10988:32872":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"11:700:2627":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:9529:2341":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"1:5819:2974":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"1:588:2596":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:7613:15937":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:40151:2616":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"11:1142:14847":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"21:13468:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"18:515:20514":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"11:2383:2399":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"6:5885:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:7694:15941":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:7661:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:8523:2934":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"16:7436:15925":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:4444:29075":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"21:11180:32872":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"6:4738:2835":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"16:4053:15145":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"1:1885:2695":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:22831:2830":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"16:5939:15875":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"30:1188:20620":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"17:11459:16178":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:45044:8809":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:41128:2344":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:11113:8297":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"21:13603:2379":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"1:11890:21831":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"2:40107:221":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"16:4462:15482":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"5:7306:2422":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:6718:2906":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"21:10792:2352":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"1:3566:2494":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:6279:15886":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"6:1570:10329":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:12872:16012":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"5:4182:2772":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"21:1087:2317":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"21:587:1873":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"16:5727:15868":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:1072:2642":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"1:3996:2837":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:4889:15597":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:40823:8431":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4824:12979":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"21:2715:2374":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"11:856:2636":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"11:364:31480":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"1:2418:2738":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:45132:8827":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:8071:26089":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"17:11932:16201":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"6:1734:10344":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"30:1180:20619":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"21:15000:2483":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"2:22430:3157":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"21:8557:2294":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"11:1107:14846":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:13218:18978":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"17:13935:19498":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"17:13754:19487":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:7917:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:21568:3030":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"30:1437:20488":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"17:13663:19483":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:15329:20285":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:9118:20943":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:660:20504":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:47499:3043":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"5:1131:29149":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"1:7976:2624":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"2:3667:2422":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"21:327:2277":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"21:6212:1890":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"2:47417:3095":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"27:149:20586":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"5:5345:29023":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:16004:20462":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"21:13033:2398":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"1:10479:2803":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:5891:2611":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"1:3509:2434":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"16:5673:15865":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"18:736:20502":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:7671:2332":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"1:621:2600":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:12596:16058":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"5:1024:29023":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"2:33955:3021":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"6:6159:13696":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"16:5712:15867":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:4252:2399":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:4573:8405":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"7:0:1698":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6879:15913":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"21:8474:2290":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"30:947:20506":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"14:40:18974":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"30:1000:20506":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"17:12244:16251":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:11617:16184":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"9:330:14779":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"6:4595:12958":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"6:5085:13009":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:6171:213":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"21:9418:2340":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:40958:27417":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:9678:16023":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"11:299:31470":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"21:11952:2280":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"21:14263:32872":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"17:11027:16086":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:10974:16094":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:12110:339":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:2140:2640":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"6:1596:10332":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:48666:8201":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"21:14725:2480":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"11:844:2635":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"16:7722:15943":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:16076:20467":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"1:504:2569":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"24:0:1968":{"crate_id":24,"path":["futures_task"],"kind":"module"},"1:3307:2804":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:41653:8608":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"2:44547:8327":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"30:964:20506":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"16:6083:14903":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"9:450:14723":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:11666:16188":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"17:11779:16195":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:5481:2947":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:849:2626":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:38709:8665":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:13121:18973":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:15253:20277":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:34014:3023":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"5:1495:2631":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:2035:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:15117:20265":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:8912:2956":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:14698:20242":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:41221:2355":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:16146:20473":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"6:4401:12937":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:11439:2369":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"21:4486:20533":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"24:169:2261":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"17:15079:20261":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"6:7371:14489":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"5:6845:8373":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:10613:2355":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"16:8181:15958":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"17:14087:19507":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"21:12383:2287":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"16:2472:14940":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:9043:25802":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:22464:3156":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"17:15125:20266":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"16:6318:15887":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"17:13724:19485":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"11:1917:2645":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:4045:2296":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"6:4523:12949":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:15166:2489":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"2:7892:143":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:10775:20954":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"17:10355:136":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:44128:2366":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:1708:2772":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:8942:2991":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:34501:8658":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:41231:8622":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:14662:20241":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14969:20238":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:11800:16215":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"27:11:34456":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:39961:8234":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"2:3159:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:47837:3044":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"17:12718:16060":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:41629:2403":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"16:2644:14947":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"2:44742:8341":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:15493:20294":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"16:6226:15883":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:10109:21929":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:435:14906":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"2:1914:27471":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:7558:8351":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"6:4428:12938":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:5682:2772":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"17:15566:20301":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"21:12419:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"2:40065:219":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:7948:137":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:43715:27292":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:3903:2825":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:5104:13010":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"21:8278:2284":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"21:10479:32872":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"21:5992:1880":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"2:13336:114":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"17:15192:20271":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:41208:8617":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"2:44269:8322":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"15:306:14882":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:23060:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"2:46338:3039":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:14509:19535":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:12459:16094":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:11141:16112":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:8378:2875":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:12555:8307":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:44239:8291":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:23242:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"18:609:20629":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"25:0:1879":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"20:143:20525":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"17:11168:16114":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:11117:8826":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"21:14141:2424":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"17:12584:16300":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"17:13097:18972":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:12501:2940":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"11:1728:153":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:928:2635":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"6:542:9432":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"30:0:2088":{"crate_id":30,"path":["memchr"],"kind":"module"},"9:177:14828":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12140:16254":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"11:2548:31482":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"21:14354:2429":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"1:859:2627":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:4585:15509":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"21:14761:2339":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"5:7460:2584":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"21:11465:32872":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"2:45335:8222":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"2:4218:8229":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:42242:27491":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:40901:8429":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"5:2979:28951":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"18:481:20512":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"21:14090:2422":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"1:1574:2399":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"5:6969:270":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:40041:217":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"5:2154:29112":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"21:10376:2266":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"16:6017:15879":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:11714:16194":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:46384:3080":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:7441:8603":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:10746:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"17:13684:16241":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"6:1674:10338":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"21:13673:2400":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"1:1054:2640":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:4455:12782":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:9031:2921":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:3183:2438":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"18:699:20508":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:8750:2303":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"1:12128:858":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:533:2574":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"1:9179:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"21:15494:33066":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"29:25:1886":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"1:4002:2836":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:43500:8242":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:3251:2646":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:13419:18992":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:7388:14490":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:46985:3109":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"17:13869:19493":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:5322:15838":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:15480:20293":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:7128:15922":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13235:18979":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:7859:8612":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:21496:3034":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:3389:2792":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"14:7:14857":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:41087:2339":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"16:6792:15910":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:1270:2639":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:13922:19497":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:44393:8328":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"21:11488:2370":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"21:15381:2322":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"17:13273:18981":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:4691:2841":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:30990:2658":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"11:1160:2642":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7736:15944":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"21:14018:2626":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"16:6361:15891":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:42485:2399":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"5:634:29004":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"5:1505:2632":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:11978:16196":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:40190:8378":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:8615:2399":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"16:4986:15622":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:4928:16309":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"16:6944:31729":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"21:8120:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12202:16284":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"21:14748:32872":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"2:31116:27447":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:3378:8672":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:22105:2758":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"2:6587:2431":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"2:32823:28532":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:43460:8240":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"21:7697:32892":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"1:6053:227":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"13:0:2077":{"crate_id":13,"path":["std_detect"],"kind":"module"},"2:3193:140":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:5905:15874":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"21:8795:2304":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"1:1602:2645":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"21:14559:32872":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"27:127:20583":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"17:13896:19495":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"15:327:14886":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"17:14282:19520":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:13889:32872":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"16:4417:15461":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"28:42:2627":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"1:2688:2788":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:8928:2994":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"30:1070:20615":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"16:6189:31905":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"11:1676:31491":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:11085:8296":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:10000:8252":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:15224:20274":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:13504:18998":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"30:1230:20617":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"16:3655:14968":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:6545:15903":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:2504:14941":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"21:6217:1888":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"2:6391:8624":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"5:6531:29023":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"16:6742:14875":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"21:15521:33086":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"2:7855:8613":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:45360:27451":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:5566:2949":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:4535:2876":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:43919:8277":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"2:32847:2436":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"21:12647:2288":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"1:12119:804":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:10246:2764":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:41109:8616":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"2:8352:2652":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:9029:2976":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"17:12103:16281":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5403:15857":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:42554:2922":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:41021:2734":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:45052:8810":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:4246:2870":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"17:12659:16016":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"16:7269:31984":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:7733:2580":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:7985:21558":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"10:44:14833":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:3888:15028":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:46717:3028":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"6:1507:10322":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"6:5130:13014":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"21:15218:2494":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"6:6819:14110":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"6:1496:10320":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"30:1580:20508":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:21953:2758":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"16:7554:15934":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"21:10078:2338":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"21:7290:32872":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14581:2476":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"1:10736:2756":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"30:1040:20630":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"1:6363:227":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:12283:8820":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"30:1449:8307":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"21:11763:2373":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"17:13309:18984":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"2:3141:8233":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:3736:2820":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"5:830:2647":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:6243:15884":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:41170:2265":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:10102:16014":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"16:5588:15860":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"21:6583:33065":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"17:9624:16008":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"16:7474:15927":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:8370:2822":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:21321:26909":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"27:136:2986":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"2:2438:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:2420:2739":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"22:0:2226":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"6:4628:12962":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:43685:154":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"2:46593:3047":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:4921:15605":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4647:12963":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"21:8973:32872":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:1824:2678":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:15132:32872":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"1:9006:2993":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"24:296:34378":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"21:15207:2493":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"30:1560:20506":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"2:10880:8300":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"27:470:20597":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"16:4806:15586":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:5612:15861":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:40377:22316":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6569:15904":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"21:104:767":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"2:3222:2673":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:13202:18977":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:6136:30755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:4603:12959":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:4535:12951":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:8455:2915":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:41031:2733":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:3046:8669":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"6:6086:13690":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"21:10867:32872":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"2:9987:118":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:38654:8664":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:8351:2873":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"1:7913:2755":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:12758:16062":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"6:4449:12941":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:4806:8420":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:10251:2766":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"21:12492:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"2:41671:8610":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:48657:8200":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10682:2905":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"1:1040:2639":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:12126:1652":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"6:5859:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:15294:20281":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:14485:16024":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:23610:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"2:45254:234":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"21:15233:2496":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"6:5910:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"21:13581:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"21:11543:32952":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"11:2369:14851":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"11:2403:2626":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:24031:243":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"17:15101:20263":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"17:13491:18997":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"27:371:2986":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"21:14198:32872":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"2:41615:27293":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:9091:25808":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"2:45120:3024":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:5123:13013":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"6:7622:13179":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"1:8076:25796":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"2:10788:2399":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"11:434:31495":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"17:12264:16286":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"1:4060:2841":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"5:2048:2483":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"5:4020:2422":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:42362:2817":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:32846:244":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:12180:16283":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:42623:2626":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8216:1880":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"11:0:2082":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"21:10597:2350":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"16:2428:14938":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12153:16253":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"5:5155:2971":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"1:9104:15922":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"21:7419:2274":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"17:12380:16291":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"5:692:117":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:2183:29133":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"2:22193:3161":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"5:0:314":{"crate_id":5,"path":["alloc"],"kind":"module"},"1:5194:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"21:13542:2378":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"21:9010:2309":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"2:5067:864":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:22370:3167":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:9488:2755":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"17:13516:18999":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"6:4847:12982":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"16:5963:15876":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:2971:2585":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"6:4947:12994":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"1:12131:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"6:4854:12983":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"5:6014:9028":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"21:15083:32872":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"6:563:9435":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"28:46:2399":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"1:2446:2749":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"6:6837:14111":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:45060:8812":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:14489:32872":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"2:45068:8807":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:42572:233":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"12:0:2083":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:48543:3062":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:14145:19510":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"16:2450:14939":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"6:5004:13000":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"2:46514:3087":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:15235:20275":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:4054:2840":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:4860:12984":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"5:1789:2630":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:8277:2786":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11604:16183":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:10957:8301":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:2652:2479":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:40204:8386":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:5846:2975":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:22666:27313":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"17:12684:16018":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:10417:21780":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"11:2304:2639":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:31620:8449":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"21:5171:1882":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"1:2584:2477":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:4439:20531":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"28:0:2229":{"crate_id":28,"path":["slab"],"kind":"module"},"6:6898:14114":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"21:11117:32872":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"2:32873:251":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13856:19492":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"5:7544:250":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"1:5698:2986":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:2509:132":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:8303:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:13832:19491":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"30:1025:20628":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"16:6456:15897":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:21338:26898":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:41058:8274":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:21352:26904":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:4800:12976":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"17:11395:16136":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:11387:2960":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"13:110:31545":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:1832:1199":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:11194:16115":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:4866:224":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:22857:2832":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"17:13162:18975":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:13347:18987":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"1:5447:2945":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:43057:2972":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"21:11537:33091":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"17:16062:20466":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"17:12324:16288":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:13989:19502":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"17:14934:20253":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:9061:20837":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:4808:2855":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"21:15299:2499":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"1:10907:20855":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:1585:2630":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"21:7130:2269":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"16:6844:15912":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"21:7815:2291":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"21:13325:2391":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"2:46652:3108":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"21:7100:32872":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:5866:15873":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"1:4703:21905":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:22779:27450":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"21:7265:2266":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"17:12418:16308":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"21:422:1872":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"17:15279:20279":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"6:6889:14113":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"21:15186:2491":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"17:0:2087":{"crate_id":17,"path":["object"],"kind":"module"},"2:21494:2758":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:2966:254":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"18:96:20487":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"31:125:1940":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:14096:2423":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"6:6228:12849":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"17:14346:19524":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"16:8167:15957":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"16:2305:14932":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:45072:8808":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"31:65:1933":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"17:14904:20239":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"21:11407:32872":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"1:5705:2987":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"17:10051:15858":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"27:72:20598":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"21:2780:32880":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"foreign_type"},"17:14041:19505":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:4527:15499":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:22682:27241":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:42555:8756":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"11:2569:2622":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"1:4806:2852":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"21:20:1164":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"2:42979:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:44168:8276":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"16:6376:15892":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:328:31477":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"17:14122:19509":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:11536:16151":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"21:9114:32872":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:6662:2984":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"2:11598:8288":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:4237:8393":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"11:800:2422":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:21995:26908":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"16:5995:15878":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"6:4666:12964":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"21:12055:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:12121:806":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:43697:2934":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:10633:2758":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"21:10262:2349":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"18:681:20506":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"21:5675:2402":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"21:15283:2497":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"16:4949:15609":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:2712:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"21:15391:33810":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"1:5306:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"17:13254:18980":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:22845:2829":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"17:10915:16077":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:6606:2627":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:8344:2817":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"18:507:2368":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"21:2769:934":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"foreign_type"},"17:11449:16177":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:10990:21812":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"14:215:14866":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"21:9346:2319":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"16:7015:15920":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"21:11144:2271":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"6:7679:13186":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"1:7971:2625":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"30:1159:20617":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"5:7356:28940":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"17:12290:16277":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:4:1125":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"17:11991:16197":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"16:2321:14933":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"11:837:2634":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:2268:2735":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"11:2443:2422":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:4835:15591":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"5:1301:2640":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:8609:2297":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"5:4050:29023":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"21:9131:2314":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"16:3915:15031":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:5634:2950":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:574:9437":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:41280:8619":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4977:12997":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"17:11645:16186":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"17:15980:20460":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:4610:12960":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"6:527:9430":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:14324:19523":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:15239:2361":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"21:3786:1878":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"21:10139:2368":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"16:8154:15956":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"17:9891:16015":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:16160:20474":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"17:11675:16234":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:14676:2479":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"21:7442:32872":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"21:9257:2316":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"2:47387:3089":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"21:12255:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:2457:111":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:34132:8654":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"16:7318:15923":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"16:6425:15896":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"16:2907:14958":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:2266:136":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:46863:3042":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:40974:2718":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"6:7692:14677":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"16:6915:15915":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"17:12953:16021":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:400:21829":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"2:4518:8403":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:12999:16337":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"2:44910:8348":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"17:14021:19504":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"18:644:2368":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"2:7896:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:46815:3094":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"21:11840:2274":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"21:10538:32872":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"18:491:32783":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10172:16046":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"6:6741:10465":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:5969:13681":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:1664:10337":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:42213:2816":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"18:0:2088":{"crate_id":18,"path":["memchr"],"kind":"module"},"21:12856:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"21:12108:2281":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"5:7294:2649":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:4968:12996":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:2728:264":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"30:1201:20506":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"17:13909:19496":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"6:4755:12971":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"17:511:16035":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"11:883:2638":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"21:10727:32872":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"5:886:2648":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:9948:2348":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"2:44705:8339":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:12612:8333":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"21:12030:2282":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"2:45048:8811":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:46763:3082":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:7533:8264":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"14:202:8350":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"11:1923:2646":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"21:13490:2390":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"30:1238:20618":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"17:10137:16045":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:918:2633":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:36723:8662":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"11:1582:14849":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:1486:2629":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"18:636:20631":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:48581:3096":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:14399:19528":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:44727:8340":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:10701:21923":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"6:5068:13007":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"5:3191:2644":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"5:6868:8374":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"0:56:1180":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"24:309:20539":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:3558:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"6:507:9429":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"21:11052:32872":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"6:5044:13005":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"1:12088:20935":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:40847:8434":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:10973:21829":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"11:673:2399":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:43162:8244":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:12066:8770":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:9694:2345":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"6:6764:10450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:12109:1162":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"5:7038:29060":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"16:7067:31704":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11727:16216":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:7639:13181":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"6:1632:10334":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"21:14072:2627":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"2:44579:2486":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:22330:8683":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"21:13842:2405":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"17:10569:32747":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:8239:2435":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:1939:2709":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:2847:2713":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"21:6823:2265":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"30:1096:20619":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"2:41147:2346":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"17:12746:16061":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"21:15227:2495":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"2:23151:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:10090:2689":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:256:32754":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"14:221:14867":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"5:1387:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:32959:8230":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"17:12701:16019":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"11:811:2630":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"11:1883:2399":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:15003:20255":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:9401:32872":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"16:5121:15661":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:9054:2573":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"30:1426:20487":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"17:15200:20272":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"17:15177:20269":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5023:13003":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"5:1685:29023":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4480:12944":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:4810:2856":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:945:2637":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:6485:2422":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"17:12310:16278":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:9759:16039":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:44447:8296":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"17:13297:18983":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4808:12977":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"21:14666:2478":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"2:9464:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"6:580:9438":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"27:368:227":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"1:11109:20932":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:6700:14105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"16:3032:14961":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"21:14038:2399":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"17:12432:16299":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"17:11001:16088":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:45095:129":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"1:7714:2595":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:7393:32872":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:12306:8817":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"16:6560:31946":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"2:44283:8319":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:3798:2824":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"21:12985:2397":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"14:187:14865":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"27:499:20600":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:4183:28526":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"17:13676:16243":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:42821:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12536:16297":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"21:0:1871":{"crate_id":21,"path":["futures_util"],"kind":"module"},"2:42704:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"2:3315:218":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:7219:8614":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:46909:3048":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"2:10919:8287":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"5:4212:2772":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:44589:8323":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:15323:2573":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"17:13742:19486":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:12116:700":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"30:1167:20618":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"1:12120:805":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"21:14872:2481":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"17:10657:16054":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"11:1896:2630":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:8001:2483":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:7277:2659":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"17:9790:16040":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"6:6059:13687":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"6:4922:12992":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"21:4275:2407":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"14:0:2084":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"21:15448:33067":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"2:23515:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"21:14334:32872":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"5:2236:29142":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:14235:19517":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:21549:3029":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"30:978:150":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"30:1209:20615":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"17:10293:2786":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:2959:8231":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:2618:14946":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"30:1531:20504":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"17:261:32735":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"17:12850:16066":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:1291:1874":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"17:13083:16340":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:3251:16198":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:8961:2989":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"5:5808:258":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:41405:2361":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"17:12029:16204":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:15345:20287":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"21:8538:212":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"1:4116:2846":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"1:11456:21874":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:7365:14488":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:42501:2627":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"5:5878:2422":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"30:1050:20626":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"11:1025:2640":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:2435:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"11:2536:31490":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:10743:2351":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"16:5830:15872":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"2:45347:8220":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:1795:642":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"6:495:9427":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:15027:20257":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"16:5743:15869":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"16:2406:14937":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:1809:666":{"crate_id":1,"path":["std","env"],"kind":"module"},"16:2881:14957":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"6:5146:13016":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"2:4195:108":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:11412:16122":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:40025:220":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:40012:8671":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:6877:3025":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:15267:20278":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3029:8652":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:3830:14994":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:9606:2343":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"2:22733:27236":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"21:15175:2490":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"16:6467:15898":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:475:9424":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:42860:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:10315:16010":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"21:8242:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:16087:20468":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:9994:8244":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:6136:21819":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:41429:2365":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:5075:13008":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:11071:8298":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"11:1891:2422":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:12808:33073":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"21:6377:20547":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"21:12824:2380":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"17:14156:19511":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"11:2151:2641":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:13441:2651":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"21:7991:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:10207:16047":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:44899:8347":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:41118:2343":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:7738:2582":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:939:2636":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"1:640:2603":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:43900:8799":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"17:11052:16055":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"21:14008:20529":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:40859:8321":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:4095:2772":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:48718:8205":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:2271:2461":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:5374:127":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:7385:2627":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:32929:8630":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:4635:2894":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:6711:14106":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"17:12828:16065":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"21:7462:2275":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"6:1558:10328":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"2:21677:3030":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6268:31976":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"16:6352:15890":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44617:8310":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"6:0:888":{"crate_id":6,"path":["libc"],"kind":"module"},"30:1112:2399":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"21:8217:2281":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"17:11113:16085":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"17:10422:16050":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"6:5992:13684":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:3393:144":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:21675:3031":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:11679:26077":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"21:9555:32872":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"17:14251:19518":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:42493:2626":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"30:971:20507":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"21:12942:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"17:15244:20276":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:6776:2264":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"21:15509:33085":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"3:234:233":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"21:4707:1881":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:40778:2598":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"18:599:20628":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:16180:18985":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"2:23990:2831":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"16:7677:217":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"1:12111:1515":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"1:12125:1651":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"21:13778:2308":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"10:36:31468":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"17:15013:20256":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"17:15062:20260":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:10925:16078":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:1446:153":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"16:2670:14948":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"2:32848:252":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"6:596:9440":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"21:15196:2492":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"21:8431:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:44229:8293":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:8632:2939":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"17:11523:16153":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"17:15108:20264":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:7660:15940":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:48619:3117":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"1:12106:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:212:8239":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"16:2574:14944":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"16:6156:15881":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"16:7342:31948":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1546:10327":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"21:6199:1891":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"6:4932:12993":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"21:10229:32872":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"18:590:20627":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:41078:2670":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"17:13182:18976":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"21:5264:1044":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"21:7192:2271":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"1:3344:2799":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:11693:14890":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"2:13145:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:10608:16053":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:6423:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:13365:18988":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:11527:21813":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"21:6338:183":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"21:12758:32891":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"17:13478:18996":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:9309:32872":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:3346:2800":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:8227:2433":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:44325:2787":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:13026:16338":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"21:8034:2280":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"17:14822:20247":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:8621:2938":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:8043:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:8302:2821":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"5:7286:2627":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"21:13053:2384":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"6:6107:13692":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:4769:2876":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"21:15338:2323":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"21:8401:2285":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"16:6041:15880":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"21:9992:32872":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"6:6169:13697":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:31592:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"6:5955:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"21:8095:2286":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"30:1465:34502":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"6:6128:13695":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"6:4516:12948":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:14296:19521":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"6:7604:13176":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:4488:12945":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:48435:3090":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"30:1082:20617":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"16:4774:15578":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:41100:8615":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2339:14934":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:1639:10335":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:1697:10341":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"18:707:8307":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:5777:2772":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"21:7080:2267":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:9791:8241":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"16:6721:15908":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"5:266:29023":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"21:11831:2375":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"6:548:9433":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"21:6284:2374":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"1:645:2604":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:1990:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"21:12552:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"17:2169:16164":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:43915:27466":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"17:16134:20472":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:14266:19519":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:11294:16126":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"17:15037:20258":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"5:1286:2641":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:11631:8289":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"21:8532:2292":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"1:9217:3019":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8936:2627":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"1:11667:8216":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:2275:2466":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"17:14778:20245":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:3155:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"1:6606:2980":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:48703:8204":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"21:5875:2772":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"5:2983:28952":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:43169:8251":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"17:11321:16054":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:903:2630":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"2:33721:8653":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:10559:16052":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:22459:3158":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"30:1588:34506":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"16:7391:15924":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:37:1896":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"17:13334:18986":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5921:13679":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"14:31:14857":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:14385:19527":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4998:12999":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"16:6401:15894":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"21:13664:2399":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:32812:21299":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"6:6682:9309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:4705:21907":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:22:740":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"2:2806:135":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:4506:12947":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12510:16302":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:41051:2757":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"21:9167:32872":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:4607:2309":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"30:934:20620":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"21:10822:32872":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:5812:2973":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"21:8635:32872":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"6:1682:10339":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"24:135:2262":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"1:6228:21832":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"21:9632:32872":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"16:2933:14959":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:10785:32752":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"16:2696:14949":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"11:710:2632":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:6688:29023":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:13695:16242":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"21:12618:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"2:44375:8329":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:13011:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"2:44068:27812":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"2:22758:27289":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:12107:1669":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"16:4719:15571":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:5117:26070":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:15051:2485":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"21:11576:32943":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"2:11099:8299":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"21:10773:32872":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:3576:2781":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7544:15933":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"11:875:2637":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"17:15589:20302":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:3267:2802":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:43478:135":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:15356:20288":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:5967:2264":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"21:15533:33068":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"21:10841:2358":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"1:3548:2498":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7360:31966":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"6:4543:12952":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"6:6961:14119":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:47183:27460":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"16:6968:15918":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"21:15479:33070":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"2:22328:27128":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"6:7343:9385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"21:12206:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"1:3491:2487":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"1:11334:21887":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"17:2197:16124":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:43707:27345":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:45305:3169":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"16:4745:15573":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"6:4908:12990":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:11497:16180":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:8081:2432":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"1:11550:2824":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12127:16255":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"5:7013:29055":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"21:13221:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"5:7477:2717":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"27:485:2934":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:11126:16084":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14765:20244":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:4195:25755":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:41644:2400":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:10667:32753":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"1:9084:26088":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"21:13429:2394":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"16:7862:15949":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:21555:3033":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"17:14786:20246":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:10984:21826":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"16:5982:15877":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:9646:28520":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:16032:20464":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:9992:127":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:6666:10280":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"1:11154:20860":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"17:9730:16038":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:7610:13177":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:7905:2440":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"30:1416:20486":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"1:11444:20925":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:22107:3032":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"2:32837:8722":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"9:426:14725":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:62:9054":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:1537:10326":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"27:140:20584":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"21:10056:32872":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"16:5363:15855":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:44295:8316":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"21:11266:2366":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"2:12772:118":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"17:13707:19484":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"2:47129:27326":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:44953:8331":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"27:124:20582":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"21:15265:32872":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"17:10242:16048":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"17:11755:16238":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:10884:2699":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"15:288:14881":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"17:14439:19531":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:14950:20254":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:42349:2826":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:15087:20262":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"21:5256:20540":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"21:13697:2403":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"2:48756:8207":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:6120:13694":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"21:7455:2276":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"16:4641:15517":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"0:46:1777":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"16:6696:14876":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"6:4698:12967":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"6:1650:10336":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"16:5798:15871":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"8:0:2079":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:4972:2901":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"2:3019:3022":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"16:7782:15946":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:951:2638":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"30:922:20619":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"2:3405:8390":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"17:10896:16076":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:10643:246":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:40894:8428":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"30:1480:20503":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"16:4613:15513":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"6:4783:12974":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:10203:150":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"6:654:9487":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"1:8400:2906":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:15432:20292":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:42476:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"16:0:2086":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:1968:2710":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:42510:2919":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:4884:12987":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:10455:27814":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"21:12697:2393":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"2:3082:8660":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:45244:226":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:6037:2986":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:40908:8430":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:40183:8673":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"17:3584:16221":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"7:78:14701":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:32928:2437":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:6582:27486":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"6:5111:13011":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:46670:3114":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"17:10988:16089":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:7887:2279":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"21:2766:1877":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"17:10471:32750":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"21:335:33029":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"2:44493:8325":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:32961:113":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:12921:16024":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"28:60:2422":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"17:16123:20471":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"2:10004:8249":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:11701:16236":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"28:217:2639":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"17:12077:16268":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"2:7934:128":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:13976:19501":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"6:4496:12946":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"21:13682:2401":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"1:11381:21877":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"21:7961:2287":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"5:7348:217":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:1596:2644":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:5009:13001":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"17:15212:20273":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:46793:3088":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"21:14063:2626":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"6:4375:12935":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"21:13377:2392":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:45076:8826":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"30:1138:20615":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"2:34674:8659":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"5:4381:29075":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"5:3196:30330":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"30:1491:34512":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"6:5829:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5891:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:6901:15914":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:1590:2643":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"16:4862:15594":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:13395:18990":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"21:57:1900":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"2:41240:2356":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:44885:8346":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"21:10686:32872":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:12105:1044":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:11866:32872":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"1:6710:240":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"21:6914:2264":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"17:15747:20313":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:40927:8426":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"6:5867:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"27:187:20588":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"1:10756:126":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"6:6012:13685":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"20:27:2758":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:9968:16044":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:12566:8304":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"1:867:2628":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"21:12582:2383":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:47263:3077":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"2:44249:8292":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:569:9436":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"2:43155:8243":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"17:11065:16092":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:925:2307":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"21:12308:2283":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"26:43:34444":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"17:13961:19500":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"2:13194:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:48794:8209":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"27:181:20587":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"1:9096:25799":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"1:8422:2854":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"21:338:2278":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:10661:2353":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"2:47082:27263":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"17:10520:32760":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"11:2542:28174":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:11041:16054":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"17:13448:18994":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"21:6747:33072":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"6:4578:12956":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44147:8284":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:11672:8282":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"17:11256:16127":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"20:32:1870":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"30:1392:20512":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"16:5696:15866":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:2546:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"18:80:20486":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"17:14757:20243":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:44157:8285":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:5435:31934":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"2:10006:8250":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"6:1710:10342":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"18:538:20516":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:7908:2754":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"6:5974:13682":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"16:2864:14956":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"21:9467:2364":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"1:7650:21841":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"27:491:20599":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"2:44311:2786":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:6818:15911":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"21:15100:2486":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"17:12548:16296":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"16:8195:15959":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:9198:2762":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"21:6982:32872":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"30:878:20615":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"17:11226:16142":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:13584:19480":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:13463:18995":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:723:151":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:22650:27309":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"9:357:14739":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:14896:20251":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:8499:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:8778:32872":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"5:3230:30334":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"2:43423:2342":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"5:3217:2645":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:14497:19534":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"21:6566:33088":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"1:836:2399":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"17:15321:20284":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:41638:8607":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"2:22795:27341":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:44194:8274":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:10440:21823":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"16:4557:15505":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"1:1581:2422":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"16:2548:14943":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"16:2766:14952":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:42631:2627":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"21:9232:32872":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:7987:2439":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"6:6781:10448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:8356:2874":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:2228:16149":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"11:2352:2641":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:8872:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"21:12513:2382":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"1:8563:2936":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:46532:3093":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"5:3687:29023":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:15535:20298":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:42743:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"17:14208:19515":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"30:1524:20513":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"2:32816:15961":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"21:12333:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:12130:1258":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"10:0:2081":{"crate_id":10,"path":["adler"],"kind":"module"},"6:7616:13178":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"6:4893:12988":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"16:6531:15902":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"2:44933:8330":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:11657:16187":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"6:1604:10333":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"21:14403:32872":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"21:14642:32872":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"1:5691:227":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"5:2256:29138":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"1:9234:26108":{"crate_id":1,"path":["std","sys","pal","common","thread_local","fast_local","Key"],"kind":"struct"},"1:8898:2955":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"5:2144:2569":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"16:5634:15862":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"11:123:31486":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:7054:31908":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"21:14913:32872":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"2:31030:8582":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"16:8281:15962":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"1:11136:2762":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"17:15337:20286":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"18:564:20517":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"1:7610:24276":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"11:2554:31489":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"6:7598:13175":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"6:4686:12966":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:22316:3166":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:14221:19516":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"5:1439:2626":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:1607:2646":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:46633:3059":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:13809:19490":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"17:13633:19481":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"6:1514:10323":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"17:14843:20248":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"31:38:34515":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"17:12255:16285":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"21:10702:2354":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"21:15044:31432":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:22706:2828":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"20:17:2217":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"21:331:2573":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"21:15148:2487":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"18:582:8449":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"20:68:1875":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"1:1862:2689":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"21:9450:32872":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"21:10451:2268":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:7324:8620":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"5:3225:2643":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:42564:2225":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:8205:15960":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:16098:20469":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"21:15308:2500":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"1:7787:2607":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:8296:2822":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"16:8072:15952":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"16:7041:31902":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"23:0:2227":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"21:11704:32872":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"18:521:20511":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"16:8050:15951":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:4334:8411":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"28:208:2641":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"6:6114:13693":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:2676:8453":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:42156:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"11:396:31478":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"11:1910:2644":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:10035:15857":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"9:393:14724":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"29:17:1885":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"1:8290:2486":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:5853:2347":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"16:5760:15870":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"21:13807:32872":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"2:34073:8655":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"21:7155:32872":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:8852:2305":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:7325:8621":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:1501:10321":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"21:5251:20541":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"6:1913:10508":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"1:12104:408":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"24:12:20526":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"2:21284:8449":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"30:1062:20631":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"16:2596:14945":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"11:2562:31484":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"17:11469:16179":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"30:142:20622":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"2:42385:2818":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:11439:16143":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:48741:8206":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:44301:8315":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"21:14054:2399":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:42179:2814":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:7925:2756":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"24:15:20528":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"1:9174:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"21:5950:2400":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"2:21547:2758":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"6:501:9428":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:6496:2977":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"1:4864:2857":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:3470:8235":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:15990:20461":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"31:0:1932":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"21:6770:1894":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:3190:139":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:8974:2992":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"21:8831:32872":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:14878:20249":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:23895:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9918:16043":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:8355:2656":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"17:12600:135":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:683:257":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:14194:19514":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:4449:8395":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"21:13915:2406":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"21:7777:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:15160:20268":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"21:10204:2368":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"1:7713:2758":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"16:6600:15906":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:6386:15893":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:40875:8320":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:44119:8283":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:12898:16067":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"2:31058:27468":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"2:21340:26907":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"21:13122:2389":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"6:4764:12972":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"1:5512:112":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:6315:2986":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:5030:2911":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"17:11945:16199":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:42782:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:22718:27185":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"21:11802:32872":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"2:42553:2610":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:12077:2609":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:44475:8324":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"21:10508:2347":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"20:92:2758":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"1:5497:2948":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"21:11824:2376":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:15612:20303":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"1:3226:26352":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:2540:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"2:46961:3060":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:2380:14936":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:38599:8663":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"21:6767:1895":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"2:44220:8290":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"17:11485:16150":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"5:2703:28961":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"21:14296:2406":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:31046:8240":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:7523:15931":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"30:1546:20505":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"30:1146:20616":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"6:6927:14116":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"2:21666:2758":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:44529:8326":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"2:40946:2719":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:4773:16303":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"2:38764:8666":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"21:14227:2427":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"24:190:2263":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"17:12220:16066":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"21:8921:2306":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"21:7757:2289":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"5:5993:2971":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"6:6943:14118":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"2:41663:2401":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:4353:33096":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"17:12335:16024":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:12784:16063":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:23705:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:11767:16239":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:0:540":{"crate_id":2,"path":["core"],"kind":"module"},"6:4955:12995":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"21:6410:20545":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"1:3801:2823":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"17:10881:16075":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"31:120:1939":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"6:7651:13183":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"6:4789:12975":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"6:4529:12950":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:2969:14960":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:6929:15916":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"1:10476:2801":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"1:8884:2954":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:5017:15629":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"16:4497:15493":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"6:4676:12965":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"31:100:1937":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"1:11083:2954":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"5:5962:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"30:1509:34504":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"5:1516:2633":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"27:146:227":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:9944:2498":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"21:9763:2346":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"21:10639:32872":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:13691:2402":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"21:14163:2426":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"17:15943:18975":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"6:6868:14112":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"6:5982:13683":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"17:13882:19494":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"21:13406:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"1:12124:1650":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"21:14124:32872":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"2:31222:27411":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"27:453:2993":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"2:2715:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"17:11632:16185":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:11097:2955":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"17:11215:16116":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"28:30:20603":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"16:2810:14954":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:1591:10331":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"2:4445:228":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"9:0:2080":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10510:16051":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:12410:16293":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"1:415:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"29:20:1887":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"16:2359:14935":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:4225:2868":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:16170:18983":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"11:1903:2643":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"21:779:2296":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:4602:2583":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:7053:24271":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:21306:26900":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"21:11674:2371":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"21:10319:2265":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"2:10423:28125":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:1975:713":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"17:11345:16131":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:9481:136":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"1:6492:2403":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:10892:2949":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"1:557:2576":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:595:16036":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"1:8270:2361":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"21:6452:20544":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"1:2436:2744":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:48646:8199":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:42326:27279":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"21:12183:2267":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"2:33535:8650":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:15396:2324":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"2:48771:8208":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:12561:8306":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:44642:8321":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"2:39922:8389":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:2972:8224":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:42665:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:46563:3041":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:12082:8772":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:7611:2402":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:48497:3111":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"21:6394:20546":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"6:4364:12934":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"16:6893:31898":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:7556:14649":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"11:2231:14841":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"5:5389:2341":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"5:1527:217":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"1:4108:2844":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"21:6768:1898":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"17:11155:16113":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:10992:8294":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:4967:426":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"29:0:1883":{"crate_id":29,"path":["futures_io"],"kind":"module"},"21:14027:20530":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"2:45064:8813":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"16:7568:15935":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"2:1802:8591":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"1:3229:21556":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"6:4473:12943":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:12322:8819":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"21:7045:32872":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:4233:2869":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:6429:184":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"28:55:2626":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"17:11958:16200":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"16:8239:15961":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"17:15367:20289":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"11:490:151":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:40129:223":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:4528:8404":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"5:5393:2303":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"5:7340:2627":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:7377:2627":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"16:7492:15928":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"16:3764:14976":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:914:2632":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:13285:18982":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:32830:8404":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"11:774:2628":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"1:4981:2902":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"5:40:2674":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"21:8181:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:43435:27337":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"1:4094:2842":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"1:482:21817":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:10711:2752":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:12127:1649":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"1:8207:2402":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:3801:2627":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:7792:15947":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:13322:18985":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:14001:19503":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:6212:3170":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"5:6878:8375":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"16:6485:15899":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"1:11274:24209":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"1:11590:2823":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:11649:33092":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"1:4046:2839":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"16:2832:14955":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"30:1035:20629":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"17:11549:16181":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:4841:12981":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"1:3432:2400":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:44633:2598":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:4434:12939":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"21:12873:2381":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:12356:16289":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:401:16034":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:11010:2363":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"17:12230:16249":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"21:10605:2357":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"21:8596:32872":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"2:15:2195":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13948:19499":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"5:7444:2623":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"27:441:2991":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"2:10211:154":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"21:9799:32872":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"21:7840:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:40784:8394":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:7102:15921":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43676:2767":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"30:1402:32783":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"2:43395:27446":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"5:3184:2399":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:13386:149":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"2:41622:8605":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"21:9592:32872":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"17:16049:20465":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"5:1424:2399":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:6576:8618":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"21:11920:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"16:5088:15652":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:8283:2787":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:12096:8313":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:4724:12969":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"11:2469:2630":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:15507:20295":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:12122:802":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"16:6583:15905":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:12123:1653":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:10941:16079":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"16:8097:15953":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"30:994:20506":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"5:7432:2622":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12166:16252":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:14099:19508":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:40085:222":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"21:11884:2279":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"21:9508:32872":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"2:2724:265":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:46615:3053":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"2:21958:3036":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:31024:8369":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:44821:8344":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:11399:16123":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:10002:213":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:12913:2395":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"17:12445:16298":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"21:4503:2408":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"1:4297:2871":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"2:7389:27811":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"21:12965:2396":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"2:4377:8265":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"1:8307:2813":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:2434:2743":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:46362:3075":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:10803:16057":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:0:1540":{"crate_id":1,"path":["std"],"kind":"module"},"17:10775:16056":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"20:131:1892":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"30:1124:20506":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"1:4104:2843":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:0:1869":{"crate_id":20,"path":["futures_core"],"kind":"module"},"6:4830:12980":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"1:8605:2937":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"6:4556:12954":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:11426:16176":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"16:2744:14951":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:13720:32872":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"21:15290:2498":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"1:12072:25805":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"2:48677:8202":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"18:690:20507":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:7657:13184":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"21:7373:2272":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"2:42640:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:6346:15889":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"21:11318:2367":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"2:42615:2399":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"2:47653:3061":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:12345:16279":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4776:12973":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:6260:25786":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"21:9369:2339":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"21:9086:2313":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:12301:16287":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"21:2566:33026":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"6:4616:12961":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:9651:16037":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:8361:8611":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:12474:16054":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:10282:21930":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"2:40867:2598":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:15842:18972":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:4171:28540":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:11507:16175":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:15671:20307":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:48637:8198":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6813:14109":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"11:687:2626":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:14359:19525":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"21:9569:2342":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"17:12009:16054":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"1:1887:2696":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"1:10706:21914":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"21:11366:2356":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"21:14792:32872":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"16:3232:14964":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"1:637:2602":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:13145:18974":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12396:16256":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"6:7645:13182":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:12191:16248":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"6:5897:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:6332:15888":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"7:31:14694":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7708:15942":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"21:13252:2388":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:9996:8243":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"5:903:2399":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"2:3399:8391":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"30:909:20618":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"5:7491:27417":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:1528:10325":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"30:1272:20506":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"2:44773:8343":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"30:1217:20616":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"21:6962:2273":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"1:9048:114":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"21:13354:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"17:15855:18973":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"2:47007:3115":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:10962:16098":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"16:6415:15895":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"17:15733:20312":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:14887:20250":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"21:14286:244":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"21:13823:2404":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"18:652:2368":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:9493:21840":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"21:10298:32872":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"2:3051:8670":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:44624:8320":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"21:7586:32892":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"26:0:2228":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"21:14978:32872":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"2:13167:2293":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"4:0:2078":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"11:1087:31500":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"16:3600:14967":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:7965:126":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"17:15645:20305":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:15659:20306":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:4939:1112":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"17:14989:16093":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:6056:2374":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"11:787:2629":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11743:16237":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"21:7539:2288":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"5:3818:2630":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:23424:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"6:1718:10343":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:8364:32872":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12572:16301":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"17:15557:20300":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"5:790:2354":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:15710:20310":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:6798:14107":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"21:5212:1899":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"1:10724:20857":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:44429:8298":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:3012:135":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"18:755:20510":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12797:16064":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:2351:8683":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"17:15527:20297":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"6:123:9109":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:2973:29145":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:45318:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7828:15948":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:15519:20296":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"17:13056:16339":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"5:5005:2772":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"6:4710:12968":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"30:1259:20620":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"30:1455:20502":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"2:48373:3056":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:40795:8432":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:11295:32872":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"1:2666:21823":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:9985:21581":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"30:1501:20511":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"15:0:2085":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5941:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"6:4461:12942":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"18:727:20509":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:9164:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:2961:116":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:12614:16059":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:43018:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:16016:20463":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:7669:21806":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:46492:3081":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:14613:2477":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:3041:8668":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:5026:2805":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:2341:643":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"5:1455:2627":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:1826:2679":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11476:14841":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:48185:3050":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:39343:8667":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"6:4566:12955":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"1:10191:2959":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"16:7284:2919":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:5148:26070":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:8473:2933":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"22:7:1893":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"20:97:1876":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"6:5052:13006":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:7206:25750":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"11:832:2631":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"21:15427:33069":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"21:13179:2387":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"17:9943:16022":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"17:11014:16087":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"2:22969:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:12357:8300":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:4303:8410":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"21:15385:2321":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"17:10726:32740":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:9459:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"9:507:14726":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"9:486:14722":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"17:14455:19532":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"11:2423:2627":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:12972:16020":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"1:357:2593":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"21:7020:2268":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"14:165:14858":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:47577:3049":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"30:899:20617":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"2:10837:2787":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:13383:18989":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:12546:8305":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"17:12091:16280":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"11:2124:2639":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14470:19533":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"30:1570:20507":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:13347:3170":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"21:12456:2385":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:15317:20543":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"21:13097:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"17:13407:18991":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:44848:8345":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"1:3010:233":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"16:2722:14950":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"30:1251:20619":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"31:109:1935":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"5:7326:29139":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:6248:13725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"16:4344:15412":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"11:430:31499":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"2:3014:3020":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"14:160:14857":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:5140:13015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"30:886:20616":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"9:52:14742":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:15868:20458":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"1:10482:2799":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"17:15184:20270":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:7621:15938":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"11:1887:2627":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:2492:1904":{"crate_id":1,"path":["std","io"],"kind":"module"},"21:13158:32872":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"16:6261:15885":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:13948:32872":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"2:22741:27264":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:7599:16036":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:40008:2672":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:5049:15637":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"2:2675:2758":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"16:5384:15856":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"30:1008:20507":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"17:1094:16091":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3460:2772":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"6:533:9431":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:12246:8818":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:12366:16290":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:12055:20917":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:7096:21837":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"6:483:9425":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:41415:2363":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:8115:15954":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:40941:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:15367:32872":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"17:10016:16009":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:7582:15936":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"27:434:20601":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"17:10067:16013":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"11:1603:14850":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"30:956:20624":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"21:9828:2264":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:48692:8203":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"5:7644:8370":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:8396:2904":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:14853:32872":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"21:9646:2344":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"6:5033:13004":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:11563:16152":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:10716:16055":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:9733:32872":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"17:11590:16148":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:23333:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"13:226:31546":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"18:766:20503":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:6182:1889":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"2:46430:3046":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:4032:2838":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:2284:14904":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"1:1578:2627":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"1:3232:21555":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"21:9352:2320":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"17:13436:18993":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"17:13765:19488":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6913:14115":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:5461:2946":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:42196:2815":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:10618:32759":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:4454:8396":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"21:8339:2283":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"17:11690:16235":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:3305:2803":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:3343:2630":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"21:11247:32872":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"16:149:14909":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"21:14934:2482":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"2:46408:3040":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"2:44207:8275":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"21:7325:2270":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"2:40837:8433":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:8866:2953":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"17:2031:16130":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:7824:2699":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"1:7918:2752":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:34847:8661":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"6:6691:14104":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"5:5651:8373":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:6204:15882":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:2795:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:1900:8694":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"5:786:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}