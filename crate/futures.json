{"root":"0:0:1740","crate_version":"0.3.21","includes_private":false,"index":{"2:3405:3534":{"id":"2:3405:3534","crate_id":2,"name":"BitXor","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3407:181","2:3408:356"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:49:1657":{"id":"29:49:1657","crate_id":29,"name":"AsyncBufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:50:54718","29:51:54719"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"29:39:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,39],"end":[108,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:127:1649","glob":false}},"0:113":{"id":"0:113","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[150,0],"end":[150,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:8121:1676","glob":false}},"2:13538:54984":{"id":"2:13538:54984","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13543:61607":{"id":"2:13543:61607","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:16005:1866"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:49776:4951","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:207":{"id":"0:207","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,49],"end":[256,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:9659:1663","glob":false}},"2:3168:74":{"id":"2:3168:74","crate_id":2,"name":"AsMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3170:61092"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[125,0],"end":[125,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:169:1665","glob":false}},"2:3367:3527":{"id":"2:3367:3527","crate_id":2,"name":"AddAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3369:266"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13528:61604":{"id":"2:13528:61604","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5833:2127":{"id":"5:5833:2127","crate_id":5,"name":"Concat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5835:181","5:5836:432"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Item"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:13444:6946":{"id":"2:13444:6946","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_ascii_whitespace":"1:16011:1871"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:49733:4947","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110":{"id":"0:110","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[146,0],"end":[146,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:9703:1675","glob":false}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,35],"end":[119,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:39:1658","glob":false}},"2:3383:3530":{"id":"2:3383:3530","crate_id":2,"name":"RemAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3385:1103"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13487:61591":{"id":"2:13487:61591","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3733:137":{"id":"2:3733:137","crate_id":2,"name":"FromResidual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3735:687"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:144":{"id":"0:144","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,28],"end":[236,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:168:693","glob":false}},"2:13481:57469":{"id":"2:13481:57469","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:16005:1866","str::rsplitn":"1:16011:1871","self::pattern":"2:13053:4564"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:49563:4911","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:142:1030":{"id":"0:142:1030","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[222,0],"end":[222,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:144","0:147","0:150","0:154","0:157","0:161","0:164","0:167","0:171","0:174","0:177","0:181","0:184","0:188","0:191","0:194","0:197","0:201","0:204","0:207","0:210"],"is_stripped":false}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,52],"end":[135,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:8009:1376","glob":false}},"2:13472:57467":{"id":"2:13472:57467","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:16011:1871","self::pattern":"2:13053:4564","`DoubleEndedIterator`":"2:8447:120","prim@char":"1:16005:1866"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:49477:4908","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6104:62235":{"id":"5:6104:62235","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`String`":"5:8368:216","`Box<str>`":"5:432:2264"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2264","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12992:4250":{"id":"2:12992:4250","crate_id":2,"name":"FromStr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12993:126","2:12994:56780"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:9259:4317":{"id":"2:9259:4317","crate_id":2,"name":"RefUnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6867:4108":{"id":"1:6867:4108","crate_id":1,"name":"IntoRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6868:58973"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:4752:2938":{"id":"1:4752:2938","crate_id":1,"name":"BufRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4753:2283","1:4754:54719","1:4755:58985","1:4757:2292","1:4758:2289","1:4760:2294","1:4761:2285"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Read","id":"1:4670:2311","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:8879:2755":{"id":"2:8879:2755","crate_id":2,"name":"FusedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:22801:4768":{"id":"2:22801:4768","crate_id":2,"name":"SimdInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22802:4620","2:22803:59730","2:22804:1225","2:22805:1226","2:22806:41903","2:22807:61109","2:22808:6903","2:22809:61110","2:22810:61111","2:22811:59743","2:22812:59747","2:22813:59748","2:22814:59749","2:22815:59750","2:22816:61033","2:22817:61034","2:22818:61035"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13422:61585":{"id":"2:13422:61585","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:16011:1871"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[126,0],"end":[126,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1666","glob":false}},"2:3515:2261":{"id":"2:3515:2261","crate_id":2,"name":"Drop","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3516:578"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:147":{"id":"0:147","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,34],"end":[236,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:13766:138","glob":false}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,21],"end":[119,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1657","glob":false}},"1:5731:4116":{"id":"1:5731:4116","crate_id":1,"name":"PermissionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5732:55112","1:5733:55516","1:5734:55517"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8447:120":{"id":"2:8447:120","crate_id":2,"name":"DoubleEndedIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8448:59610","2:8449:59611","2:8450:59612","2:8451:59613","2:8455:59614","2:8458:5950"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13419:6735":{"id":"2:13419:6735","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13445:6944":{"id":"2:13445:6944","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```","links":{"str::split_whitespace":"1:16011:1871"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:49742:4948","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:12500:5104":{"id":"2:12500:5104","crate_id":2,"name":"SlicePattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:12501:2752","2:12502:60567"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6863:4106":{"id":"1:6863:4106","crate_id":1,"name":"AsRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6864:59590"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,39],"end":[103,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:44:1643","glob":false}},"2:13522:57476":{"id":"2:13522:57476","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3739:3549":{"id":"2:3739:3549","crate_id":2,"name":"Residual","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3741:56242"],"generics":{"params":[{"name":"O","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10539:146":{"id":"2:10539:146","crate_id":2,"name":"Hasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10540:652","2:10541:1954","2:10542:55355","2:10543:55356","2:10544:55357","2:10545:55358","2:10546:55359","2:10547:55360","2:10548:55361","2:10549:55362","2:10550:55363","2:10551:55364","2:10552:55365","2:10553:55366","2:10554:55367","2:10555:1531"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8886:4515":{"id":"2:8886:4515","crate_id":2,"name":"TrustedStep","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Step","id":"2:7927:4517","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:9659:1663":{"id":"21:9659:1663","crate_id":21,"name":"AsyncSeekExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9660:2293","21:9661:4014"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncSeek","id":"29:47:1659","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:167":{"id":"0:167","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:127:1649","glob":false}},"0:194":{"id":"0:194","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,49],"end":[250,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:47:1659","glob":false}},"2:13449:57473":{"id":"2:13449:57473","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:18:2999":{"id":"24:18:2999","crate_id":24,"name":"LocalSpawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:19:4096","24:20:4097"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5779:4119":{"id":"1:5779:4119","crate_id":1,"name":"FileTypeExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5780:55067","1:5781:55068","1:5782:55069","1:5783:55070"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:6561:4184":{"id":"1:6561:4184","crate_id":1,"name":"JoinHandleExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6562:56887","1:6563:56888"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:104":{"id":"0:104","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[139,0],"end":[139,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:97:1672","glob":false}},"2:3280:220":{"id":"2:3280:220","crate_id":2,"name":"Sync","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3521:131":{"id":"2:3521:131","crate_id":2,"name":"FnMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3523:377"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnOnce","id":"2:3524:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:690:1645":{"id":"21:690:1645","crate_id":21,"name":"FutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:691:841","21:694:2592","21:696:2507","21:699:2593","21:701:2594","21:703:2595","21:704:2511","21:705:2596","21:706:2521","21:707:2531","21:709:2523","21:710:2597","21:711:2598","21:712:1937","21:714:2524","21:716:2599","21:717:2600","21:718:2601","21:719:2602"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13766:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:130":{"id":"0:130","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,58],"end":[195,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:166:1709","glob":false}},"2:3363:3524":{"id":"2:3363:3524","crate_id":2,"name":"Neg","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3364:181","2:3365:913"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3388:3535":{"id":"2:3388:3535","crate_id":2,"name":"Not","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3389:181","2:3390:952"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:164":{"id":"0:164","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:96:1648","glob":false}},"2:13428:57439":{"id":"2:13428:57439","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:16022:1880"},"attrs":["#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6791:4169":{"id":"1:6791:4169","crate_id":1,"name":"ChildExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6792:55179","1:6793:55180"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13426:61586":{"id":"2:13426:61586","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:6105:2116":{"id":"5:6105:2116","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5793:4114":{"id":"1:5793:4114","crate_id":1,"name":"DirEntryExt2","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5794:56813"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3276:218":{"id":"2:3276:218","crate_id":2,"name":"StructuralPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13425:55059":{"id":"2:13425:55059","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12524:5067"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]","#[must_use]","#[allow(unused_attributes)]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3647:3546":{"id":"2:3647:3546","crate_id":2,"name":"RangeBounds","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3649:60796","2:3650:60797","2:3651:57473"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:157":{"id":"0:157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,32],"end":[237,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:17:1653","glob":false}},"2:10302:4717":{"id":"2:10302:4717","crate_id":2,"name":"Binary","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10303:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:210":{"id":"0:210","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,68],"end":[256,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:9646:1664","glob":false}},"2:23086:15231":{"id":"2:23086:15231","crate_id":2,"name":"ToBitMask","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23087:59813","2:23088:60949","2:23089:60950"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23079:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13440:57458":{"id":"2:13440:57458","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:16011:1871"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:154":{"id":"0:154","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[237,26],"end":[237,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:7249:1654","glob":false}},"2:7927:4517":{"id":"2:7927:4517","crate_id":2,"name":"Step","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:7928:60844","2:7929:60845","2:7930:2530","2:7931:60841","2:7932:60846","2:7933:60843","2:7934:60842"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13439:57457":{"id":"2:13439:57457","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:16011:1871"},"attrs":["#[must_use]","#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3246:115":{"id":"2:3246:115","crate_id":2,"name":"Default","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3247:59"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:7799:4271":{"id":"1:7799:4271","crate_id":1,"name":"Termination","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:7800:58892"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13540:61606":{"id":"2:13540:61606","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:16005:1866"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:49758:4950","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:6463:4134":{"id":"1:6463:4134","crate_id":1,"name":"ExitStatusExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6464:55571","1:6465:39029","1:6466:55572","1:6467:55573","1:6468:55574","1:6469:55575"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:9347:4136":{"id":"1:9347:4136","crate_id":1,"name":"StdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:9348:57244","1:9349:57245","1:9350:57246","1:9351:57247","1:9352:57248","1:9353:38486","1:9354:57243"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[113,0],"end":[113,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:17:1653","glob":false}},"1:5651:4162":{"id":"1:5651:4162","crate_id":1,"name":"OsStringExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5652:55085","1:5653:5217"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3171:149":{"id":"2:3171:149","crate_id":2,"name":"Into","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3173:59608"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:96:1648":{"id":"20:96:1648","crate_id":20,"name":"Stream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:97:2752","20:98:3076","20:99:3035"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,46],"end":[119,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:47:1659","glob":false}},"1:6865:4107":{"id":"1:6865:4107","crate_id":1,"name":"FromRawFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6866:55543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:95":{"id":"0:95","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,38],"end":[135,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:7249:1654","glob":false}},"1:6963:4101":{"id":"1:6963:4101","crate_id":1,"name":"AsFd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6964:55608"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13502:61595":{"id":"2:13502:61595","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:13053:4564","str::match_indices":"1:16011:1871","prim@char":"1:16005:1866","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:49627:4942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:22837:4784":{"id":"2:22837:4784","crate_id":2,"name":"SimdUint","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22838:59730","2:22839:1225","2:22840:1226","2:22841:59747","2:22842:59748","2:22843:59749","2:22844:59750","2:22845:61033","2:22846:61034","2:22847:61035"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:991:1646":{"id":"21:991:1646","crate_id":21,"name":"TryFutureExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:992:2682","21:994:2683","21:997:2684","21:1001:2231","21:1004:2230","21:1006:2685","21:1008:292","21:1011:2686","21:1014:2687","21:1016:2688","21:1018:2379","21:1019:2689","21:1020:2690","21:1022:767","21:1023:2691"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryFuture","id":"20:44:1643","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3181:227":{"id":"2:3181:227","crate_id":2,"name":"TryFrom","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3183:127","2:3184:1414"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10310:4720":{"id":"2:10310:4720","crate_id":2,"name":"LowerExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10311:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3346:3523":{"id":"2:3346:3523","crate_id":2,"name":"Mul","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3348:181","2:3349:892"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13493:1951":{"id":"2:13493:1951","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"`DoubleEndedIterator`":"2:8447:120","prim@char":"1:16005:1866","str::matches":"1:16011:1871","self::pattern":"2:13053:4564"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:49663:4944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13513:61601":{"id":"2:13513:61601","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"DoubleEndedSearcher","id":"2:13083:4563","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,29],"end":[131,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:67:1669","glob":false}},"2:3341:3526":{"id":"2:3341:3526","crate_id":2,"name":"Sub","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3343:181","2:3344:1353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3379:3528":{"id":"2:3379:3528","crate_id":2,"name":"DivAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3381:559"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13433:57437":{"id":"2:13433:57437","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:13505:61596":{"id":"2:13505:61596","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2862:97":{"id":"2:2862:97","crate_id":2,"name":"Borrow","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2864:1936"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"0:107":{"id":"0:107","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[143,0],"end":[143,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1673","glob":false}},"2:3518:130":{"id":"2:3518:130","crate_id":2,"name":"Fn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3520:376"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FnMut","id":"2:3521:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:116:1551":{"id":"0:116:1551","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[154,0],"end":[154,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:117:1705","`LocalPool`":"31:192:1711"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:118","0:121","0:124","0:127","0:130","0:133","0:136","0:139"],"is_stripped":false}},"2:8601:157":{"id":"2:8601:157","crate_id":2,"name":"Iterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8602:2752","2:8603:922","2:8604:3034","2:8607:3035","2:8608:495","2:8610:3036","2:8613:3037","2:8614:3038","2:8615:3039","2:8616:2280","2:8618:2526","2:8620:3040","2:8621:3041","2:8623:841","2:8626:2519","2:8633:2505","2:8635:2506","2:8638:2504","2:8639:2527","2:8640:2516","2:8642:2517","2:8644:3042","2:8647:1306","2:8648:2295","2:8649:2515","2:8653:2513","2:8656:2511","2:8657:2521","2:8658:2531","2:8660:2522","2:8661:2268","2:8663:3043","2:8666:3044","2:8668:3045","2:8678:3046","2:8693:3047","2:8695:3048","2:8699:3049","2:8708:2510","2:8711:3050","2:8713:3051","2:8716:276","2:8723:294","2:8730:3052","2:8737:3053","2:8746:3054","2:8756:1014","2:8763:3055","2:8770:2213","2:8771:3056","2:8772:3057","2:8784:3058","2:8791:3059","2:8803:3060","2:8810:3061","2:8811:2508","2:8816:3062","2:8819:3063","2:8822:2509","2:8823:3064","2:8825:3065","2:8827:415","2:8830:3066","2:8833:997","2:8836:3067","2:8839:604","2:8842:3068","2:8845:907","2:8847:826","2:8849:792","2:8851:713","2:8853:696","2:8855:3069","2:8856:3070","2:8864:3071"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5723:4115":{"id":"1:5723:4115","crate_id":1,"name":"FileExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5724:59548","1:5725:59550","1:5726:59549","1:5727:59551"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6084:62231":{"id":"5:6084:62231","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2264","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:432:2264","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:8106:5116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13466:2294":{"id":"2:13466:2294","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866","`DoubleEndedIterator`":"2:8447:120","str::rsplit":"1:16011:1871","str::split_whitespace":"1:16011:1871"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:49459:2941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13083:4563":{"id":"2:13083:4563","crate_id":2,"name":"DoubleEndedSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6441:4131":{"id":"1:6441:4131","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6442:4429","1:6443:4430","1:6444:55167","1:6445:59240","1:6447:59244","1:6449:59241","1:6450:59242","1:6452:59243"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6106:54981":{"id":"5:6106:54981","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:16011:1871"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:9629:1662":{"id":"21:9629:1662","crate_id":21,"name":"AsyncReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9630:2280","21:9632:2286","21:9634:2287","21:9636:2288","21:9638:2290","21:9640:2291","21:9642:2294","21:9643:2295"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncRead","id":"29:39:1658","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13458:3052":{"id":"2:13458:3052","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:47492:176","prim@char":"1:16005:1866","self::pattern":"2:13053:4564"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"29:42:1660":{"id":"29:42:1660","crate_id":29,"name":"AsyncWrite","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:43:54769","29:44:54770","29:45:53631","29:46:53632"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:2865:4617":{"id":"2:2865:4617","crate_id":2,"name":"BorrowMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2867:60754"],"generics":{"params":[{"name":"Borrowed","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Borrowed"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Borrow","id":"2:2862:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Borrowed"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:5657:4160":{"id":"1:5657:4160","crate_id":1,"name":"OsStrExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5658:5900","1:5659:55059"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:6794:4131":{"id":"1:6794:4131","crate_id":1,"name":"CommandExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6795:55168"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"1:10569:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:47":{"id":"0:47","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[119,57],"end":[119,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:42:1660","glob":false}},"2:10298:119":{"id":"2:10298:119","crate_id":2,"name":"Display","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10299:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13525:61603":{"id":"2:13525:61603","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:16005:1866","self::pattern":"2:13053:4564"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3774:3552":{"id":"2:3774:3552","crate_id":2,"name":"CoerceUnsized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:10574:4197":{"id":"2:10574:4197","crate_id":2,"name":"BuildHasher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10575:146","2:10576:6423","2:10577:56894"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3728:224":{"id":"2:3728:224","crate_id":2,"name":"Try","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3729:181","2:3730:3549","2:3731:686","2:3732:369"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromResidual","id":"2:3733:137","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Residual","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"kind":"resolved_path","inner":{"name":"Try","id":"2:3728:224","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13455:57475":{"id":"2:13455:57475","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:16005:1866","self::pattern":"2:13053:4564"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:2966:184":{"id":"2:2966:184","crate_id":2,"name":"PartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2968:997","2:2969:826","2:2970:792","2:2971:713","2:2972:696"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Rhs"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,23],"end":[122,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:9664:1661","glob":false}},"1:4745:2318":{"id":"1:4745:2318","crate_id":1,"name":"Seek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4746:2293","1:4747:38883","1:4748:56948","1:4749:4014"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6411:223":{"id":"5:6411:223","crate_id":5,"name":"ToString","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:6412:1395"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13063:4565":{"id":"2:13063:4565","crate_id":2,"name":"Pattern","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13065:4567","2:13066:59849","2:13067:59854","2:13068:59850","2:13069:59852","2:13070:59851","2:13071:59853"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8472:2262":{"id":"2:8472:2262","crate_id":2,"name":"ExactSizeIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8473:793","2:8474:55459"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2956:177":{"id":"2:2956:177","crate_id":2,"name":"Ord","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2957:415","2:2958:2213","2:2959:3056","2:2960:6450"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Eq","id":"2:2925:124","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialOrd","id":"2:2966:184","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2925:124":{"id":"2:2925:124","crate_id":2,"name":"Eq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"PartialEq","id":"2:2920:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:9646:1664":{"id":"21:9646:1664","crate_id":21,"name":"AsyncWriteExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9647:2229","21:9648:2225","21:9649:1954","21:9651:2297","21:9653:2298","21:9655:2284"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncWrite","id":"29:42:1660","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13431:57436":{"id":"2:13431:57436","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:4450:1650","glob":false}},"0:174":{"id":"0:174","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[242,44],"end":[242,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:991:1646","glob":false}},"0:181":{"id":"0:181","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,28],"end":[247,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:4450:1650","glob":false}},"20:110:1976":{"id":"20:110:1976","crate_id":20,"name":"FusedStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:111:2224"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:133":{"id":"0:133","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,65],"end":[195,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:168:1710","glob":false}},"2:10241:2322":{"id":"2:10241:2322","crate_id":2,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10242:1531","2:10243:55020","2:10245:3848"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5789:4120":{"id":"1:5789:4120","crate_id":1,"name":"DirEntryExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5790:58896"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3336:3521":{"id":"2:3336:3521","crate_id":2,"name":"Add","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3338:181","2:3339:265"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13072:4567":{"id":"2:13072:4567","crate_id":2,"name":"Searcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13074:4586","2:13075:922","2:13076:60034","2:13077:60035"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13448:6682":{"id":"2:13448:6682","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:49751:4949","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5837:2070":{"id":"5:5837:2070","crate_id":5,"name":"Join","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:5839:181","5:5840:1668"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,68],"end":[122,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:9646:1664","glob":false}},"2:13446:2285":{"id":"2:13446:2285","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:49713:2310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3174:135":{"id":"2:3174:135","crate_id":2,"name":"From","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3176:681"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:92":{"id":"0:92","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,31],"end":[135,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:8119:917","glob":false}},"2:8366:4764":{"id":"2:8366:4764","crate_id":2,"name":"Product","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8368:3065"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22874:4751":{"id":"2:22874:4751","crate_id":2,"name":"SimdPartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22875:4620","2:22876:1245","2:22877:1270"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3422:3538":{"id":"2:3422:3538","crate_id":2,"name":"BitAndAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3424:352"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3430:3540":{"id":"2:3430:3540","crate_id":2,"name":"BitXorAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3432:357"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3504:1981":{"id":"2:3504:1981","crate_id":2,"name":"DerefMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3505:545"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Deref","id":"2:3491:116","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"1:4727:2322":{"id":"1:4727:2322","crate_id":1,"name":"Write","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4728:1954","1:4729:2297","1:4731:3846","1:4732:2229","1:4733:2298","1:4734:3847","1:4735:3848","1:4744:2522"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8403:151":{"id":"2:8403:151","crate_id":2,"name":"IntoIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8404:2752","2:8405:2754","2:8406:768"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22748:4748":{"id":"2:22748:4748","crate_id":2,"name":"SimdFloat","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:22749:4620","2:22750:59730","2:22751:59731","2:22752:59732","2:22753:59733","2:22754:41903","2:22755:59734","2:22756:59735","2:22757:59736","2:22758:59737","2:22759:59738","2:22760:59739","2:22761:59740","2:22762:59741","2:22763:6737","2:22764:59742","2:22765:59743","2:22766:6059","2:22767:59744","2:22768:59745","2:22769:59746","2:22770:59747","2:22771:59748","2:22772:59749","2:22773:59750"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22850:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13507:61597":{"id":"2:13507:61597","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13438:61587":{"id":"2:13438:61587","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"str::slice_unchecked":"1:16011:1871","crate::ops::IndexMut":"2:3580:3544","`str`":"1:16011:1871"},"attrs":["#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"2:8882:2756":{"id":"2:8882:2756","crate_id":2,"name":"TrustedLen","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Iterator","id":"2:8601:157","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10312:4710":{"id":"2:10312:4710","crate_id":2,"name":"UpperExp","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10313:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8399:136":{"id":"2:8399:136","crate_id":2,"name":"FromIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8401:684"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:22937:4139":{"id":"2:22937:4139","crate_id":2,"name":"SupportedLaneCount","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:22927:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10304:4718":{"id":"2:10304:4718","crate_id":2,"name":"LowerHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10305:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3375:3529":{"id":"2:3375:3529","crate_id":2,"name":"MulAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3377:893"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13509:61598":{"id":"2:13509:61598","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:8412:2263":{"id":"2:8412:2263","crate_id":2,"name":"Extend","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8414:38484","2:8416:6688","2:8417:55592"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3165:75":{"id":"2:3165:75","crate_id":2,"name":"AsRef","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3167:305"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"1:5801:4122":{"id":"1:5801:4122","crate_id":1,"name":"DirBuilderExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5802:55112"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:1079:4164":{"id":"1:1079:4164","crate_id":1,"name":"AsciiExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:1080:5128","1:1081:5111","1:1082:54981","1:1083:54982","1:1084:54983","1:1085:54984","1:1086:54985"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10529:142":{"id":"2:10529:142","crate_id":2,"name":"Hash","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10530:715","2:10532:6714"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:89":{"id":"0:89","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,23],"end":[135,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:168:693","glob":false}},"0:171":{"id":"0:171","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[242,28],"end":[242,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:690:1645","glob":false}},"2:13417:793":{"id":"2:13417:793","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:16005:1866"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[129,0],"end":[129,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:10275:1667","glob":false}},"0:204":{"id":"0:204","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,30],"end":[256,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:9629:1662","glob":false}},"2:4782:4518":{"id":"2:4782:4518","crate_id":2,"name":"AsyncIterator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4783:2752","2:4784:3076","2:4785:3035"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23462:4622":{"id":"2:23462:4622","crate_id":2,"name":"SimdPartialOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23463:1268","2:23464:1267","2:23465:1265","2:23466:1264"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialEq","id":"2:22874:4751","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:10308:189":{"id":"2:10308:189","crate_id":2,"name":"Pointer","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10309:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3400:3533":{"id":"2:3400:3533","crate_id":2,"name":"BitOr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3402:181","2:3403:353"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6083":{"id":"5:6083","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5903:1338","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:6084:62231","5:6085:2942","5:6088:62232","5:6091:62233","5:6103:62234","5:6104:62235","5:6105:2116","5:6106:54981","5:6107:54982"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3177:228":{"id":"2:3177:228","crate_id":2,"name":"TryInto","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3179:127","2:3180:1415"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:47:1659":{"id":"29:47:1659","crate_id":29,"name":"AsyncSeek","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:48:54761"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13499:61594":{"id":"2:13499:61594","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866","`DoubleEndedIterator`":"2:8447:120","str::rmatch_indices":"1:16011:1871"},"attrs":["#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:49609:4941","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6085:2942":{"id":"5:6085:2942","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:258:2030":{"id":"24:258:2030","crate_id":24,"name":"UnsafeFutureObj","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["24:261:55575","24:262:578"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"outlives":"'a"}],"implementations":[]}},"5:783:222":{"id":"5:783:222","crate_id":5,"name":"ToOwned","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["5:784:5128","5:785:55188","5:786:55189"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23134:4621":{"id":"2:23134:4621","crate_id":2,"name":"MaskElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdElement","id":"2:23771:4615","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23125:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3273:2259":{"id":"2:3273:2259","crate_id":2,"name":"Sized","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:127:1649":{"id":"20:127:1649","crate_id":20,"name":"TryStream","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:128:175","20:129:127","20:130:53710"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:122:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13539:54985":{"id":"2:13539:54985","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13536:5111":{"id":"2:13536:5111","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13490:61592":{"id":"2:13490:61592","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":["#[stable(feature = \"str_split_once\", since = \"1.52.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3278:106":{"id":"2:3278:106","crate_id":2,"name":"Copy","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Clone","id":"2:2887:104","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:80":{"id":"0:80","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,38],"end":[131,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:42:1013","glob":false}},"2:13437:4213":{"id":"2:13437:4213","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"crate::ops::Index":"2:3576:3543","`str`":"1:16011:1871","str::slice_mut_unchecked":"1:16011:1871"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,40],"end":[122,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:9629:1662","glob":false}},"2:13443:2331":{"id":"2:13443:2331","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:49445:2939","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13531:61605":{"id":"2:13531:61605","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,42],"end":[110,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:5869:1651","glob":false}},"0:161":{"id":"0:161","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:2138:1647","glob":false}},"0:136":{"id":"0:136","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,77],"end":[195,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:192:1711","glob":false}},"2:3558:2789":{"id":"2:3558:2789","crate_id":2,"name":"Generator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3560:237","2:3561:206","2:3562:61055"],"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":{"kind":"tuple","inner":[]},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13511:61599":{"id":"2:13511:61599","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:150":{"id":"0:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[236,42],"end":[236,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:44:1643","glob":false}},"0:188":{"id":"0:188","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,24],"end":[250,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:49:1657","glob":false}},"0:191":{"id":"0:191","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,38],"end":[250,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:39:1658","glob":false}},"2:3716:3547":{"id":"2:3716:3547","crate_id":2,"name":"OneSidedRange","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"RangeBounds","id":"2:3647:3546","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3491:116":{"id":"2:3491:116","crate_id":2,"name":"Deref","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3492:221","2:3493:543"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3576:3543":{"id":"2:3576:3543","crate_id":2,"name":"Index","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3578:181","2:3579:753"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:9258:2630":{"id":"2:9258:2630","crate_id":2,"name":"UnwindSafe","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"5:6107:54982":{"id":"5:6107:54982","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:16011:1871"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13766:138":{"id":"2:13766:138","crate_id":2,"name":"Future","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13767:181","2:13768:1013"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3277:217":{"id":"2:3277:217","crate_id":2,"name":"StructuralEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13519:6327":{"id":"2:13519:6327","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"str_strip\", since = \"1.45.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:177":{"id":"0:177","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,4],"end":[244,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:7964:1655","glob":false}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[108,31],"end":[108,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:96:1648","glob":false}},"2:13462:5950":{"id":"2:13462:5950","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"2:13053:4564","`None`":"2:47492:176","prim@char":"1:16005:1866"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6091:62233":{"id":"5:6091:62233","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,38],"end":[131,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:43:1013","glob":false}},"2:23467:15250":{"id":"2:23467:15250","crate_id":2,"name":"SimdOrd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:23468:59745","2:23469:59744","2:23470:59746"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SimdPartialOrd","id":"2:23462:4622","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"21:7964:1655":{"id":"21:7964:1655","crate_id":21,"name":"SinkExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:7966:2234","21:7971:2235","21:7975:2909","21:7978:2910","21:7980:2236","21:7981:2225","21:7982:2227","21:7984:2229","21:7985:2232","21:7986:2228","21:7987:2233","21:7990:2911","21:7992:2912","21:7994:2913","21:7995:2914","21:7996:2915","21:7997:2916"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sink","id":"25:17:1653","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13484:57471":{"id":"2:13484:57471","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866","str::splitn":"1:16011:1871"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:49581:4912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13516:61602":{"id":"2:13516:61602","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:16005:1866","self::pattern":"2:13053:4564"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13427:304":{"id":"2:13427:304","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"1:16011:1871","`u8`":"1:16022:1880"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13496:61593":{"id":"2:13496:61593","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866","str::matches":"1:16011:1871","`DoubleEndedIterator`":"2:8447:120"},"attrs":["#[stable(feature = \"str_matches\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:49681:4945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118":{"id":"0:118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,8],"end":[195,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:117:1705","glob":false}},"2:3410:3536":{"id":"2:3410:3536","crate_id":2,"name":"Shl","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3412:181","2:3413:1231"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13542:4166":{"id":"2:13542:4166","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:16005:1866"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]","#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:49767:4167","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:6103:62234":{"id":"5:6103:62234","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3999:68":{"id":"2:3999:68","crate_id":2,"name":"Any","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4000:1427"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"outlives":"'static"}],"implementations":[]}},"0:98":{"id":"0:98","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[135,44],"end":[135,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:2138:1647","glob":false}},"2:3426:3539":{"id":"2:3426:3539","crate_id":2,"name":"BitOrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3428:354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10933:214":{"id":"2:10933:214","crate_id":2,"name":"SliceIndex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:10935:181","2:10936:57435","2:10937:57436","2:10938:57437","2:10939:57438","2:10940:753","2:10941:754"],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:10924:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:85":{"id":"0:85","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,59],"end":[131,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:10273:1671","glob":false}},"2:3357:3525":{"id":"2:3357:3525","crate_id":2,"name":"Rem","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3359:181","2:3360:1102"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13781:150":{"id":"2:13781:150","crate_id":2,"name":"IntoFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:13782:181","2:13783:150","2:13784:767"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3434:3541":{"id":"2:3434:3541","crate_id":2,"name":"ShlAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3436:1232"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:23771:4615":{"id":"2:23771:4615","crate_id":2,"name":"SimdElement","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:23772:4620"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:23767:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Copy","id":"2:3278:106","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:13469:6945":{"id":"2:13469:6945","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:16005:1866","self::pattern":"2:13053:4564"},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:12845:4905","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10300:4716":{"id":"2:10300:4716","crate_id":2,"name":"Octal","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10301:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,23],"end":[131,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:10272:1668","glob":false}},"1:6689:4118":{"id":"1:6689:4118","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:6690:56821","1:6691:56822","1:6692:56823","1:6693:56824","1:6694:56825","1:6695:56826","1:6696:56827","1:6697:56828","1:6698:56829","1:6699:56830","1:6700:56831","1:6701:56832","1:6702:56833","1:6703:56834","1:6704:56835","1:6705:56836","1:6706:56837"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:139":{"id":"0:139","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[196,8],"end":[196,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:197:1712","glob":false}},"2:13478:61590":{"id":"2:13478:61590","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:16005:1866","str::split":"1:16011:1871","self::pattern":"2:13053:4564","str::split_terminator":"1:16011:1871"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:49527:4938","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}}}},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"ReverseSearcher","id":"2:13078:4568","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"20:27:1975":{"id":"20:27:1975","crate_id":20,"name":"FusedFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:28:2224"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13766:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:2887:104":{"id":"2:2887:104","crate_id":2,"name":"Clone","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2888:408","2:2889:410"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13420:61584":{"id":"2:13420:61584","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:10306:4719":{"id":"2:10306:4719","crate_id":2,"name":"UpperHex","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10307:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:8362:4763":{"id":"2:8362:4763","crate_id":2,"name":"Sum","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:8364:3064"],"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"1:5739:4117":{"id":"1:5739:4117","crate_id":1,"name":"OpenOptionsExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5740:55112","1:5741:55129"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"21:4450:1650":{"id":"21:4450:1650","crate_id":21,"name":"StreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:4451:922","21:4452:767","21:4453:841","21:4456:2504","21:4457:2505","21:4460:2506","21:4464:2507","21:4467:2268","21:4469:2508","21:4474:432","21:4475:495","21:4476:2509","21:4477:2510","21:4481:294","21:4484:276","21:4487:2511","21:4488:2512","21:4490:2513","21:4493:2514","21:4497:2515","21:4502:2516","21:4505:2517","21:4508:2518","21:4510:2519","21:4513:2520","21:4517:2295","21:4518:1306","21:4519:2521","21:4520:2522","21:4521:2523","21:4522:1937","21:4524:2524","21:4526:2251","21:4527:2525","21:4528:2526","21:4530:2280","21:4532:2527","21:4533:2528","21:4534:2529","21:4535:2530","21:4537:2294","21:4539:2531","21:4541:2532","21:4543:2533","21:4545:2534","21:4546:2535"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Stream","id":"20:96:1648","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:127":{"id":"0:127","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,42],"end":[195,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:208:1708","glob":false}},"0:124":{"id":"0:124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,35],"end":[195,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:175:1707","glob":false}},"2:2920:183":{"id":"2:2920:183","crate_id":2,"name":"PartialEq","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:2922:604","2:2923:907"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Rhs"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[],"implementations":[]}},"2:3103:2901":{"id":"2:3103:2901","crate_id":2,"name":"FloatToInt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"Int","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"2:3102:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3524:132":{"id":"2:3524:132","crate_id":2,"name":"FnOnce","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3526:181","2:3527:378"],"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:10291:109":{"id":"2:10291:109","crate_id":2,"name":"Debug","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:10292:660"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3580:3544":{"id":"2:3580:3544","crate_id":2,"name":"IndexMut","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3582:754"],"generics":{"params":[{"name":"Idx","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Idx"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sized","id":"2:3273:2259","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Index","id":"2:3576:3543","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Idx"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:201":{"id":"0:201","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[256,8],"end":[256,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:9664:1661","glob":false}},"21:9664:1661":{"id":"21:9664:1661","crate_id":21,"name":"AsyncBufReadExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:9665:2283","21:9666:3976","21:9667:2292","21:9669:2289","21:9671:2285"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"AsyncBufRead","id":"29:49:1657","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3811:3553":{"id":"2:3811:3553","crate_id":2,"name":"DispatchFromDyn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":[],"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:7964:1655","glob":false}},"2:3395:3532":{"id":"2:3395:3532","crate_id":2,"name":"BitAnd","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3397:181","2:3398:351"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3416:3537":{"id":"2:3416:3537","crate_id":2,"name":"Shr","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3418:181","2:3419:1234"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13442:4593":{"id":"2:13442:4593","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:16005:1866"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49435:4933","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"24:15:3000":{"id":"24:15:3000","crate_id":24,"name":"Spawn","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["24:16:64301","24:17:4276"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:690:1645","glob":false}},"2:13078:4568":{"id":"2:13078:4568","crate_id":2,"name":"ReverseSearcher","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:13080:59610","2:13081:60955","2:13082:60956"],"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Searcher","id":"2:13072:4567","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[103,31],"end":[103,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:13766:138","glob":false}},"2:13418:55459":{"id":"2:13418:55459","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13537:54983":{"id":"2:13537:54983","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[must_use]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:4670:2311":{"id":"1:4670:2311","crate_id":1,"name":"Read","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:4671:2286","1:4672:2287","1:4674:55203","1:4675:2290","1:4676:2291","1:4677:2288","1:4678:6284","1:4680:55204","1:4681:2522","1:4682:2331","1:4683:2280","1:4685:2295"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13512:61600":{"id":"2:13512:61600","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:14239:4220":{"id":"2:14239:4220","crate_id":2,"name":"Allocator","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14240:59184","2:14241:59185","2:14242:59186","2:14243:59187","2:14244:59188","2:14245:59189","2:14246:2522"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,42],"end":[105,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:991:1646","glob":false}},"2:13534:4835":{"id":"2:13534:4835","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:12992:4250","FromStr::Err":"2:12992:4250"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:47619:205","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:4250","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"FromStr","id":"2:12992:4250","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:3309:2260":{"id":"2:3309:2260","crate_id":2,"name":"Unpin","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":false,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:121":{"id":"0:121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[195,18],"end":[195,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:120:1706","glob":false}},"2:13416":{"id":"2:13416","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:12513:1338","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:13417:793","2:13418:55459","2:13419:6735","2:13420:61584","2:13422:61585","2:13425:55059","2:13426:61586","2:13427:304","2:13428:57439","2:13429:57435","2:13431:57436","2:13433:57437","2:13435:57438","2:13437:4213","2:13438:61587","2:13439:57457","2:13440:57458","2:13441:4968","2:13442:4593","2:13443:2331","2:13444:6946","2:13445:6944","2:13446:2285","2:13447:61588","2:13448:6682","2:13449:57473","2:13452:57474","2:13455:57475","2:13458:3052","2:13462:5950","2:13466:2294","2:13469:6945","2:13472:57467","2:13475:61589","2:13478:61590","2:13481:57469","2:13484:57471","2:13487:61591","2:13490:61592","2:13493:1951","2:13496:61593","2:13499:61594","2:13502:61595","2:13505:61596","2:13507:61597","2:13509:61598","2:13511:61599","2:13512:61600","2:13513:61601","2:13516:61602","2:13519:6327","2:13522:57476","2:13525:61603","2:13528:61604","2:13531:61605","2:13534:4835","2:13536:5111","2:13537:54983","2:13538:54984","2:13539:54985","2:13540:61606","2:13542:4166","2:13543:61607"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:3351:3522":{"id":"2:3351:3522","crate_id":2,"name":"Div","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3353:181","2:3354:558"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,44],"end":[131,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:10274:1670","glob":false}},"0:184":{"id":"0:184","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[247,44],"end":[247,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:5869:1651","glob":false}},"2:13452:57474":{"id":"2:13452:57474","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:16005:1866","self::pattern":"2:13053:4564"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:4050:4177":{"id":"2:4050:4177","crate_id":2,"name":"Provider","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:4051:59074"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3371:3531":{"id":"2:3371:3531","crate_id":2,"name":"SubAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3373:1354"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"29:39:1658":{"id":"29:39:1658","crate_id":29,"name":"AsyncRead","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["29:40:54750","29:41:54751"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"25:17:1653":{"id":"25:17:1653","crate_id":25,"name":"Sink","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["25:19:127","25:20:6856","25:21:53630","25:22:53631","25:23:53632"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13447:61588":{"id":"2:13447:61588","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]","#[allow(deprecated)]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:49723:4946","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:13435:57438":{"id":"2:13435:57438","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1740":{"id":"0:0:1740","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[258,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# if cfg!(miri) { return; } // https://github.com/rust-lang/miri/issues/1038\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::executor":"0:116:1551","crate::io":"21:8121:1676","crate::channel":"27:0:1673","crate::future":"21:168:693","crate::sink":"21:7249:1654","crate::stream":"21:2138:1647"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:116:1551","0:142:1030","0:4","0:7","0:11","0:14","0:18","0:21","0:25","0:28","0:31","0:34","0:38","0:41","0:44","0:47","0:51","0:54","0:57","0:60","0:63","0:66","0:69","0:73","0:76","0:79","0:80","0:82","0:85","0:89","0:92","0:95","0:98","0:101","0:104","0:107","0:110","0:113"],"is_stripped":false}},"1:2576:127":{"id":"1:2576:127","crate_id":1,"name":"Error","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:2577:59072","1:2579:59071","1:2580:59073","1:2581:59074"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Debug","id":"2:10291:109","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Display","id":"2:10298:119","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"5:6088:62232":{"id":"5:6088:62232","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:8368:216"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:8368:216","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"21:5869:1651":{"id":"21:5869:1651","crate_id":21,"name":"TryStreamExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["21:5870:2230","21:5872:2683","21:5875:2231","21:5878:292","21:5881:2686","21:5884:2687","21:5886:2688","21:5888:2595","21:5889:3212","21:5890:3049","21:5893:3217","21:5896:3218","21:5899:3221","21:5903:3043","21:5905:3216","21:5906:3213","21:5909:3214","21:5913:2379","21:5914:3048","21:5918:3215","21:5919:3219","21:5920:3220","21:5921:3223","21:5922:3222"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"TryStream","id":"20:127:1649","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:14165:141":{"id":"2:14165:141","crate_id":2,"name":"GlobalAlloc","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":true,"items":["2:14166:277","2:14167:518","2:14168:280","2:14169:1079"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"20:44:1643":{"id":"20:44:1643","crate_id":20,"name":"TryFuture","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["20:45:175","20:46:127","20:47:53623"],"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Future","id":"2:13766:138","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Sealed","id":"20:39:4130","args":{"angle_bracketed":{"args":[],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"implementations":[]}},"2:3439:3542":{"id":"2:3439:3542","crate_id":2,"name":"ShrAssign","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["2:3441:1235"],"generics":{"params":[{"name":"Rhs","kind":{"type":{"bounds":[],"default":{"kind":"generic","inner":"Self"},"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13475:61589":{"id":"2:13475:61589","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:13053:4564","prim@char":"1:16005:1866","`DoubleEndedIterator`":"2:8447:120","str::rsplit_terminator":"1:16011:1871","str::split":"1:16011:1871"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:49509:4937","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"Pattern","id":"2:13063:4565","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:5012:4142":{"id":"1:5012:4142","crate_id":1,"name":"ToSocketAddrs","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5013:2177","1:5014:55536"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:3268:211":{"id":"2:3268:211","crate_id":2,"name":"Send","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":true,"is_unsafe":true,"items":[],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13429:57435":{"id":"2:13429:57435","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:47492:176"},"attrs":["#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]","#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:47492:176","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}}}}}}}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"kind":"resolved_path","inner":{"name":"SliceIndex","id":"2:10933:214","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}},"param_names":[]}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:57":{"id":"0:57","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[122,54],"end":[122,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:9659:1663","glob":false}},"0:197":{"id":"0:197","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[250,60],"end":[250,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:42:1660","glob":false}},"1:5745:4118":{"id":"1:5745:4118","crate_id":1,"name":"MetadataExt","span":null,"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["1:5746:58895","1:5747:58896","1:5748:55112","1:5749:58897","1:5750:4429","1:5751:4430","1:5752:58898","1:5753:1302","1:5754:58899","1:5755:58900","1:5756:58901","1:5757:58902","1:5758:58903","1:5759:58904","1:5760:58905","1:5761:58906"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"2:13441:4968":{"id":"2:13441:4968","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:16005:1866"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"method","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49429:4932","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}},"param_names":[]}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"paths":{"21:13767:2134":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"17:13429:52330":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"5:1653:4292":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"5:8160:2754":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:9332:5919":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:11923:4926":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:50448:4174":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:3430:3540":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"31:175:1707":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"2:51282:4646":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:12500:5104":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:9955:2157":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"6:4095:42156":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:14103:59358":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"5:2200:62423":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:46049:4771":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"1:11571:3679":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"6:531:39152":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"18:897:5960":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"21:12037:2059":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"6:3966:42141":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"2:22580:59939":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:11410:4912":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:2399:11033":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:53189:4661":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:2163:2754":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"5:1215:5235":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"5:4628:235":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"6:4431:42191":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"12:1121:4301":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"16:6554:5580":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:3439:3542":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"12:183:5413":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"11:54:5396":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"2:47550:2754":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"2:3405:3534":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:9245:5842":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"17:12741:51284":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:47004:2179":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:14948:2154":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"1:12006:181":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:47688:178":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"6:4227:42168":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:4386:45191":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"1:15230:4215":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"6:1744:40057":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"21:14515:2148":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"17:542:5474":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:4410:42188":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:24126:38206":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:14627:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"6:4112:42158":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:48616:4715":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"2:8447:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"21:15085:3084":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"17:10160:46387":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"21:10967:2042":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"28:203:2667":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"2:32397:60145":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum32"],"kind":"enum"},"1:14236:2953":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:3745:3551":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"5:0:277":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:5347:42798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:51208:4654":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"2:47611:188":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"16:4704:45284":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"12:353:63323":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:8472:2262":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"29:49:1657":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"2:10446:60791":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"16:6366:5425":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:1450:4290":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"1:1497:4293":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:8843:55161":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"16:3041:5765":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"1:15202:4208":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"16:3800:44730":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"17:12659:51273":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"21:12062:2061":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"12:2072:4193":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:3379:3528":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"21:13268:2131":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"1:16010:1870":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"23:0:1986":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"2:46021:3548":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:11152:4144":{"crate_id":1,"path":["std","net","addr","SocketAddr"],"kind":"enum"},"1:4036:3771":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"17:10988:46588":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"21:16536:2169":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:49358:4923":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"21:591:2044":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"27:521:3673":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"12:764:2753":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"17:12155:51177":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:602:2045":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"1:11336:12707":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"2:46056:4772":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"17:12118:51117":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:11405:4475":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"12:2059:4191":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:299:64200":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"5:1486:4303":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"9:1075:5344":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"9:1056:5336":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"6:3978:42142":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"17:12010:51008":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"2:10308:189":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"17:10635:46500":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"17:13898:52435":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:9729:64193":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"2:4377:2754":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"18:838:4567":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"2:48519:133":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"2:2193:34379":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"5:7780:234":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:46587:2125":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"5:8330:5215":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"21:6891:3004":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"6:5414:42805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"14:244:44602":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:5522:42836":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"21:12972:2149":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"5:4443:2177":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:46628:2129":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:16802:2178":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"17:12431:51196":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"12:2280:4302":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"2:2291:4506":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"5:5837:2070":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:11588:47011":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:13506:52339":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:3280:220":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:7755:4538":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"6:1658:40048":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:11045:46318":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"16:0:1844":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:6794:4131":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:13083:4563":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:10599:46531":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:14242:2951":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:10596:4354":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"1:11313:55151":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"2:46647:2131":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:28051:4767":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"22:7:1666":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"1:10642:10046":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"21:16316:2176":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"21:16264:2175":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:46768:4532":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"1:10591:4340":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:11416:4419":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"31:0:1704":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"1:1501:4294":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"30:708:64216":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"16:6021:5759":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"17:3743:5883":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"1:5779:4119":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13296:51903":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"21:11202:2382":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"5:432:2264":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"27:600:3721":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"21:10960:2043":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"6:6899:42330":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:1663:4293":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"2:10312:4710":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:23673:59895":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"2:9260:2629":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:10697:11047":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13924:52442":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"7:0:1479":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:53405:20752":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:13522:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"21:1833:2084":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"17:12168:51178":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:10953:3769":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"1:5745:4118":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"12:815:4294":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"1:11139:2941":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"30:698:5962":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1527:40035":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"17:12610:51222":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"1:2437:11045":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"21:18520:64234":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"21:10419:2031":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"9:1020:5343":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"27:21:64311":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"6:1522:40034":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"9:809:3679":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:11015:46614":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"21:17143:2753":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"1:10581:56809":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"5:1441:4300":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"5:920:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:12258:4221":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"1:16028:1886":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:7870:5507":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"6:4183:42164":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"21:18268:2314":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"17:13306:51965":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"17:9971:64190":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13192:51853":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:12049:4268":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:7216:5595":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:11594:4241":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"13:120:44555":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"5:7620:5159":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"12:940:4296":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:3739:3549":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:8879:2755":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"6:5359:42799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:11555:47003":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"5:1091:62409":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"1:14822:4268":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:13318:51967":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"1:15987:56804":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"2:48817:146":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"6:4215:42167":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"21:4200:64244":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"2:50045:4581":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:6203:4425":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:8929:4454":{"crate_id":1,"path":["std","sync","once","WaiterQueue"],"kind":"struct"},"2:53396:20751":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6881:42327":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"21:13111:2128":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"2:14078:2365":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"12:1203:5407":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:16016:1874":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"6:6221:43216":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"16:2733:5737":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"5:6764:2930":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:11906:2052":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"1:4475:2955":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:4643:62425":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:9664:1661":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"6:6051:39974":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:4404:4394":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:6357:5575":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:24666:3174":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"2:47679:2754":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"21:13392:2031":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"20:0:1642":{"crate_id":20,"path":["futures_core"],"kind":"module"},"21:16175:2161":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"1:8485:2638":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"17:11118:46319":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"16:5384:5543":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"5:2330:5237":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:9933:46315":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:3195:5767":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"6:3868:42133":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:3171:149":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"1:6323:4426":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:24564:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:3686:2943":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:4751:102":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:50359:190":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"6:4120:42159":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:624:39163":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"16:4823:45303":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"5:3040:61189":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:14551:4170":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:13163:51808":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"21:12851:2086":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"6:5548:42837":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"21:9629:1662":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"6:3905:42136":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"16:6949:5805":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"5:3300:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"2:10574:4197":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9162:5833":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"5:8313:5005":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:47663:2177":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"17:9551:5831":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"17:9839:5865":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"0:0:1740":{"crate_id":0,"path":["futures"],"kind":"module"},"1:11146:2310":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"21:10274:1670":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"5:8280:101":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"6:4052:42151":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:10529:46431":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:897:4335":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"1:3740:2305":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"18:850:5956":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"6:5436:62875":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"6:6887:42328":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:13709:2153":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"2:49368:4924":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:2175:4190":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:4084:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:1602:40044":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:50183:4964":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"6:1700:40052":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:1311:5939":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"21:15432:2047":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"21:10364:2035":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"6:1622:40046":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"15:269:5432":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"12:432:5410":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"21:18289:2316":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"5:8391:5118":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:3662:59391":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"17:10938:46612":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:32497:60179":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum64"],"kind":"enum"},"2:51741:4627":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:3400:3533":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"6:1760:40058":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"6:6214:43215":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:15093:4221":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"2:55964:4611":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"6:5459:42808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"2:11205:4905":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:4401:4393":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:12040:51108":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"6:3972:41988":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"21:18137:3982":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:47619:205":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:13781:150":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"21:12507:2075":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"2:46500:5006":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:4:979":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:22801:4768":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"2:46708:4536":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:16015:1873":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"17:11738:47219":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:3201:2286":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"21:69:2006":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"2:13962:59955":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"27:397:2638":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"17:12095:51116":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:9261:2178":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"2:49257:2151":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"17:10516:5925":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:7514:5521":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:3168:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"21:16337:2165":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"6:1630:40047":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:16008:1868":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"1:8384:4355":{"crate_id":1,"path":["std","sync","mpsc","sync","Packet"],"kind":"struct"},"1:15186:4207":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:13221:51855":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:24870:4980":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"21:97:1672":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"1:12731:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:1644:4291":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"1:12740:54978":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"14:189:44600":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:17444:211":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"1:15976:10053":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"1:699:4331":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"2:5207:4731":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"12:2066:4192":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"6:4419:42189":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"1:10800:4365":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"6:6100:43208":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"21:18279:2315":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"16:7453:5501":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:6101:5496":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:4157:5895":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"21:15364:2046":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"26:49:53463":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"17:12685:51275":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:51489:4655":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"6:1596:40043":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"21:12255:2070":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"9:927:43975":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"1:1522:4297":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"21:14297:2137":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"6:4371:42183":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"2:48262:4716":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"16:4477:45207":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:46424:5090":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"16:6464:5513":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"17:10001:46369":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"14:250:44608":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:12385:51194":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:56387:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"30:1061:5959":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"21:16062:2164":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"2:45857:196":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"17:12142:51176":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:3576:3543":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"16:7342:5534":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"2:3757:4773":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"21:4371:2157":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"21:18431:2090":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"1:9722:4401":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutex"],"kind":"struct"},"2:2966:184":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12234:51183":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:2366:600":{"crate_id":1,"path":["std","env"],"kind":"module"},"5:3370:4190":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"21:15243:2156":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"16:5672:5555":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"16:7195:5593":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"15:248:5428":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:4145:42162":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"6:6200:43214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:2186:578":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:49839:4566":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:12992:4250":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:1623:4300":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"1:12248:4287":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:13205:51854":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:13370:51971":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:24103:4838":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:13819:52407":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"17:10253:5853":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"1:5934:4474":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:50020:4579":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"16:3018:5764":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"6:1547:40038":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13402:52328":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"5:3839:62409":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:14644:59341":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"17:12343:51190":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:13627:52360":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"28:211:4302":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"1:12278:4222":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:49877:4572":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"1:14566:56944":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:7250:5598":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"24:203:2029":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"6:4281:42172":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"16:6605:5515":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:16952:2182":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"6:4033:42148":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:10864:46505":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:52129:4660":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:46679:2033":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:49336:4921":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"21:11844:2050":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"5:2262:5238":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"14:216:44609":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"2:9978:4892":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:12783:51348":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"2:48513:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"21:15588:2048":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"1:1194:10052":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"17:8954:5892":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"7:85:43863":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"31:192:1711":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"17:12598:51208":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"5:994:5228":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"2:51375:4623":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"6:3997:42144":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:2268:4502":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"21:16713:2174":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"2:3277:217":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"5:8298:5214":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:6954:2493":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:4425:42190":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"21:18250:2312":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"16:7843:5602":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"16:3392:5777":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:13074:107":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"2:53126:4641":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"16:7279:5810":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:10300:4716":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:10558:46529":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:5255:42772":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:45919:198":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:46470:5004":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:13598:52352":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"6:5167:42786":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"21:595:2657":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"16:7894:5537":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"21:9814:3739":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"1:6561:4184":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"17:13554:52347":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"27:481:3668":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"1:13782:4273":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"27:188:3676":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:23771:4615":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"0:116:1551":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"1:7931:2657":{"crate_id":1,"path":["std","sync","mpsc","blocking","Inner"],"kind":"struct"},"30:843:5966":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"18:637:2153":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"21:12874:2125":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"21:5869:1651":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"1:1079:4164":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"2:48276:4719":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"21:10275:1667":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"17:9034:46301":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:10924:4130":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:2159:2177":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:13933:52443":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"30:1013:4567":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"21:14823:2152":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"16:6269:5574":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"16:7333:5520":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"6:6935:43764":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"5:7453:62409":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"1:3345:4376":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"17:12507:51202":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"14:0:1842":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:50436:4175":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"21:17299:2241":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"12:2269:4301":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"30:836:5965":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:10279:5863":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:13078:4568":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:47015:33835":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"12:880:4189":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"29:42:1660":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"2:23462:4622":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"21:18121:2308":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"12:1162:5405":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"21:13644:2153":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"6:616:39162":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"19:0:994":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"1:5723:4115":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"17:11822:47234":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10041:46371":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"21:11783:2051":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"17:12051:51109":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:13278:38448":{"crate_id":2,"path":["core","str","lossy","Utf8Lossy"],"kind":"struct"},"6:6852:42323":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"28:50:2753":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"16:4955:45335":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"21:18376:2321":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"16:6126:5568":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"1:11264:4277":{"crate_id":1,"path":["std","net","ip","Ipv6MulticastScope"],"kind":"enum"},"16:3506:5772":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:12982:51746":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:11628:47048":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"6:4023:42147":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:9703:1675":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"6:6614:39108":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"12:895:5404":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:12738:4365":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"17:10331:5865":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:13465:52335":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:47559:5009":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"2:50199:4958":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:10805:4127":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"21:14588:2147":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"16:5855:5563":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"4:0:1836":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"5:7212:2239":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7295:5518":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"6:6923:43763":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:9767:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:24496:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:48091:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:24182:38209":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"20:122:4130":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"2:2920:183":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:11126:2146":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:6068:39977":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"17:12537:51204":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:10926:46611":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"9:749:5278":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:24065:38171":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:8399:136":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"26:55:53464":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"1:7653:4261":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:12442:51197":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"1:6699:56830":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"6:4046:42150":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:5717:5557":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"5:69:5154":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:49266:4916":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"5:2310:5255":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"1:10822:4128":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"18:0:1846":{"crate_id":18,"path":["memchr"],"kind":"module"},"2:7857:4527":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"21:16862:187":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"17:11947:51000":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13574:52349":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:46431:5091":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"17:13865:52411":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"6:6091:43207":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"6:4203:42166":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"16:5295:44682":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"6:5563:42838":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:49891:4575":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:32337:5028":{"crate_id":2,"path":["core","mem","valid_align","ValidAlign"],"kind":"struct"},"16:3429:5487":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"6:5185:42787":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"17:13986:52452":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"5:8379:5117":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:7927:4517":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:12524:5067":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"21:11661:2049":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"1:4688:2257":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:8742:4445":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:10579:4604":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"17:12247:51184":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"17:12467:51199":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"17:11100:5840":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:51096:4653":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"18:705:2153":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:16021:1879":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"20:127:1649":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"16:6591:5582":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"16:6577:5581":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"1:7511:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:10370:46297":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"17:13446:52331":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:690:1645":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"6:4005:42145":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"5:3336:4191":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"17:13963:52445":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:12061:59130":{"crate_id":1,"path":["std","sync","mpsc","shared","StartResult"],"kind":"enum"},"2:51231:4658":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:16009:1869":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"17:2512:5849":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"2:46618:2128":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"27:394:202":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"6:5312:42797":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:24768:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"16:4762:45292":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"14:56:46726":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"21:14467:2146":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"1:7290:55135":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:14953:59362":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"17:11640:47049":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:12769:55159":{"crate_id":1,"path":["std","sys","unix","fs","TimespecDebugAdapter"],"kind":"struct"},"5:8263:4307":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:294:64194":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"1:6867:4108":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:2816:5779":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:22937:4139":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:7633:4260":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"12:2036:2754":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"2:46296:4812":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:12426:2073":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"17:11030:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:11611:4242":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"2:48792:4308":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"16:3145:5775":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:16020:1878":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:10543:46528":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:9758:162":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"17:9065:46302":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"2:10306:4719":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:50191:4963":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:5651:4162":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"16:5707:5556":{"crate_id":16,"path":["gimli","read","cfi","UninitializedUnwindContext"],"kind":"struct"},"2:50195:4957":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:49459:2941":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"9:469:43981":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:50203:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"21:17221:2753":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"2:56400:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"24:237:2028":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"16:6964:5009":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"6:4501:42198":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"16:547:5744":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:45942:197":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"6:4133:42161":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"6:3945:42138":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:49378:4925":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:14013:2132":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:13609:52353":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"20:39:4130":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"31:117:1705":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"6:4459:42194":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"2:49297:4919":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:16018:1876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"16:4448:45203":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:23125:4130":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"5:2218:5132":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"18:651:5961":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"5:3488:4189":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"16:5561:5552":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:24219:5043":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"12:1238:5408":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"1:4745:2318":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:4671:45276":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:10529:142":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:46371:5087":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"18:821:5954":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:10448:5914":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"16:7042:5809":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:2507:4774":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:1534:4299":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"17:11406:46716":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"6:591:39158":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:5386:42802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"17:11337:5920":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:5241:42771":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:3491:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7360:194":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"17:10489:5924":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"21:168:693":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"1:9638:59393":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutexGuard"],"kind":"struct"},"21:43:1013":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"17:2484:46417":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:46450:4817":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"16:6166:5569":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:16024:1882":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:4669:2930":{"crate_id":2,"path":["core","array","try_collect_into_array","Guard"],"kind":"struct"},"17:510:46295":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"21:6626:2185":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"17:13788:52402":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12521:51203":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"1:7979:3688":{"crate_id":1,"path":["std","sync","mpsc","mpsc_queue","Queue"],"kind":"struct"},"12:2412:63318":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:11189:4146":{"crate_id":1,"path":["std","net","addr","SocketAddrV6"],"kind":"struct"},"2:49417:4786":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"5:8344:5216":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"17:11604:47012":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"21:13151:2129":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"2:3521:131":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"5:783:222":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:13119:51803":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"6:5420:42806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:48632:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:11678:47052":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"21:18602:2391":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"21:8009:1376":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"16:5231:45536":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"21:15304:2159":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:12208:51181":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:9770:59390":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockReadGuard"],"kind":"struct"},"21:14166:2138":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"17:0:1845":{"crate_id":17,"path":["object"],"kind":"module"},"30:1042:5958":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:13072:4567":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:11176:4145":{"crate_id":1,"path":["std","net","addr","SocketAddrV4"],"kind":"struct"},"5:5415:2930":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"30:870:5967":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:17512:2246":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"17:13356:51970":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:10854:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:24212:38208":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"17:13054:51799":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:8176:5125":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"1:6703:56834":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:46465:100":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:12154:4326":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:11424:4913":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"24:21:3001":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"12:2404:63322":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"1:2401:11034":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11767:47228":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"21:16811:2179":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"21:17237:2238":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"6:4293:42173":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"17:11159:46321":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:10701:5244":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:11835:47247":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13746:52364":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:42:1013":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"18:886:5959":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"2:56374:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"21:4450:1650":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"16:7158:5590":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"30:950:2153":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"2:8403:151":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"21:12043:187":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"31:168:1710":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"3:300:205":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:48558:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:6962:3006":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"2:32156:5038":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"6:5269:42793":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"1:4727:2322":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"21:11722:2048":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"2:23868:4975":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:4304:2957":{"crate_id":1,"path":["std","io","readbuf","ReadBuf"],"kind":"struct"},"1:10948:3768":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"2:51313:4634":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:17093:3422":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"31:166:1709":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"17:10052:46372":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:13935:54975":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"1:12298:4223":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"16:4304:45159":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"21:10585:2034":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"14:11:44600":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:7549:5509":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"28:71:64328":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"6:6185:43213":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:7669:2526":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:4494:42197":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"2:49527:4938":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"6:4470:42195":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:10377:5854":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"21:10878:2039":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"1:3565:2302":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"1:15392:4408":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"21:14875:2141":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"1:3204:2291":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:46558:11662":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"17:10584:5894":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:5033:4852":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"6:5969:39031":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:2797:4173":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:51355:60187":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"21:13881:2033":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"20:110:1976":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"2:48800:60014":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:49908:4576":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"17:13884:52417":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:13063:4565":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"2:46548:11663":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"21:7249:1654":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"17:13810:52404":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"16:5456:5547":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:1136:4179":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"17:11358:5889":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"21:14118:2140":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:24090:4837":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"17:13564:52348":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:15332:4152":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"5:8197:2754":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:53462:20757":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:57675:60146":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"2:46410:4950":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:47525:2752":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"31:120:1706":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"5:374:5189":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"2:23086:15231":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"27:502:3670":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"1:7445:185":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"1:9064:4442":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"6:5274:42794":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"2:46799:2150":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:11073:1653":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:11979:2057":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"2:5038:4853":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"16:3172:5766":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:49767:4167":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:14937:59360":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"5:3396:4193":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10149:46314":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"1:2938:180":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:9186:5891":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:10570:4332":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:24734:165":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"21:13453:2133":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"17:13637:52361":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:6176:43212":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"18:783:2153":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"17:10420:5847":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"21:12114:2064":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"2:51866:60089":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"13:0:1835":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:11520:4231":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"16:6780:5585":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:4438:2954":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:11458:46725":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:3174:135":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:6688:5210":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11847:47248":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:1442:2754":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"6:632:39164":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"16:7174:5591":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:11066:2180":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"6:5191:42788":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:2794:5486":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"16:6569:5794":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"16:2912:5762":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"21:10635:2036":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"17:9799:46313":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:47542:2753":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:16011:1871":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"28:37:2754":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"12:1256:4303":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"21:0:1644":{"crate_id":21,"path":["futures_util"],"kind":"module"},"2:22601:59938":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:6208:5571":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:12223:4441":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:51592:4647":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"27:509:202":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"16:3320:5824":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:8478:202":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:10801:46501":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"21:11600:2053":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:8362:4763":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"6:1908:40193":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"2:52400:4643":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:52369:4640":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"2:3728:224":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"11:0:1840":{"crate_id":11,"path":["adler"],"kind":"module"},"21:18259:2313":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"2:45898:195":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"16:7185:5592":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"12:1666:5418":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"17:10028:46370":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"16:6176:5570":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:11254:5832":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:3343:4375":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:7681:4263":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"17:9659:64198":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:10304:5851":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"5:5833:2127":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"2:50055:4582":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"30:0:1846":{"crate_id":30,"path":["memchr"],"kind":"module"},"2:3733:137":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:48839:59993":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"2:4920:4851":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"16:3772:44727":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"2:47965:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"7:38:43856":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:51250:60124":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:13418:4421":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:46287:31742":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:8446:4189":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"2:46281:4167":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:13488:52337":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"27:467:5223":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"2:46394:5088":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"6:578:3865":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"17:10673:46534":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:10071:5938":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:4736:55019":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"21:661:59360":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"21:15928:2167":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"17:12645:51272":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"21:17772:2302":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:3274:4519":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:4193:42165":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"21:16793:2177":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"6:4255:4427":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"1:15971:59147":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"17:13348:51969":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:18572:2394":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"6:5371:42800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:51073:4665":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"2:46309:4813":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"18:611:5962":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"5:5788:62409":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:51718:4624":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"21:17321:2243":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"6:4262:42170":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:11026:46317":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"2:22837:4784":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:49402:5016":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"9:0:1838":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:6136:5540":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:22561:59892":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:6633:60775":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"24:15:3000":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"6:569:39156":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:3276:218":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"16:4535:45215":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"12:2392:63320":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:10887:46503":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:11293:56812":{"crate_id":1,"path":["std","net","ip","fmt","Span"],"kind":"struct"},"1:786:9935":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:11653:47050":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"1:2181:4191":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"18:775:2153":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:4514:2951":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"17:10827:5887":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"30:996:5954":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"5:1195:61228":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"26:65:53465":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"5:8362:61234":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"1:5012:4142":{"crate_id":1,"path":["std","net","addr","ToSocketAddrs"],"kind":"trait"},"12:843:4290":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"6:4341:42179":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"1:11664:2177":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"30:137:52805":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"27:567:3677":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"1:14610:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"24:407:3434":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"17:11001:46587":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"1:4398:4392":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"1:4516:2952":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"17:13620:52359":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:11162:2941":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"18:802:5952":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:18300:2317":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"1:1505:4295":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"17:607:46296":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"2:49776:4951":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:12568:51206":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"21:16826:2181":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"2:48847:59997":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:16026:1884":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"21:18416:2657":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"2:48528:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"6:4331:42178":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"21:991:1646":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"2:51670:4639":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:9631:54970":{"crate_id":1,"path":["std","sys_common","mutex","StaticMutex"],"kind":"struct"},"16:2843:5760":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:53416:20753":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:10431:59363":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:15217:4209":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:4614:45269":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:3416:3537":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:0:1329":{"crate_id":1,"path":["std"],"kind":"module"},"2:38868:4522":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"2:22599:59934":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"21:45:2004":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:51144:4633":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:9643:54971":{"crate_id":1,"path":["std","sys_common","mutex","MovableMutex"],"kind":"struct"},"6:4317:42176":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"6:1540:40037":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"30:888:4672":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:6219:5572":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"1:1655:4303":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:49286:4918":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"21:11466:2054":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"27:608:3722":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:3375:3529":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:3558:2789":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"17:12712:51277":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9178:55161":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"1:16022:1880":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:24802:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"2:32296:3513":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"17:13540:52345":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"21:10273:1671":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"2:10251:134":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"30:987:5953":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:6941:4105":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"2:50341:201":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"1:9598:55458":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:48546:107":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"18:136:52805":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:5164:4730":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:8492:4325":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"12:750:2177":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"5:3970:62409":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:3518:130":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"1:8977:4315":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"21:15863:2054":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"1:12401:7687":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"2:8366:4764":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:4300:42174":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"2:12810:4943":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"16:6424:5577":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:16012:1872":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"5:2553:5241":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:47492:176":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"2:51898:60186":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"12:399:5411":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:3351:3522":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:17133:3002":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"28:0:1988":{"crate_id":28,"path":["slab"],"kind":"module"},"21:16820:2180":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"16:6110:5539":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"2:46325:4815":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"2:9259:4317":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:8912:2181":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"18:713:4672":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"16:4852:45307":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:50225:4225":{"crate_id":2,"path":["core","time","FromFloatSecsError"],"kind":"struct"},"21:18326:2320":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:3422:3538":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:1457:4302":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"1:2598:55111":{"crate_id":1,"path":["std","error","from","StringError"],"kind":"struct"},"1:1511:4296":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:16025:1883":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:11670:4245":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"1:9347:4136":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:8106:2180":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"17:13912:52441":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:5927:5564":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:49435:4933":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"2:2282:4505":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"21:14110:2142":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"5:2777:5240":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"6:3918:42137":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:7021:59398":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"2:3103:2901":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"21:18401:2324":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"2:56348:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:1476:2239":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"21:6760:64242":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"6:4523:42201":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"17:12262:51185":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:10673:4304":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"21:12357:2072":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"2:10302:4717":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"16:7146:5589":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"16:5433:5546":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:50418:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12195:51180":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"21:18193:2310":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"21:17595:2247":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"12:2040:2239":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"2:45873:194":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:10924:2041":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"6:4377:42184":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"21:18392:2323":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"18:645:5964":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"2:46748:2143":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:51818:60104":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"15:230:5427":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:6864:42325":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"2:22850:4130":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"6:5953:39973":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"6:3892:42135":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:12253:4288":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"6:161:38844":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"17:13331:51968":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"27:595:3684":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"2:3286:2918":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"17:13172:51809":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"1:9737:4402":{"crate_id":1,"path":["std","sys_common","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:4306:42175":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"16:4890:45320":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"16:7378:5505":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:49248:4915":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:9380:4565":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:7736:4265":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"6:3957:42140":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"1:11082:2256":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"2:49039:5109":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"31:208:1708":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"17:13733:52363":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:15123:55123":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"21:9421:2157":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"16:3118:5776":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"21:16224:2162":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"17:11750:47220":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:1717:40054":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"12:559:143":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"5:3039:61191":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"12:952:4297":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:1676:40050":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:11350:4055":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:14317:4063":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"17:10317:5850":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"13:232:63331":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:3774:3552":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"0:142:1030":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"17:11378:5888":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:4417:45197":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:8882:2756":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:45809:2790":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:11681:4246":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"16:7073:5588":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:10770:2033":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"6:1729:4420":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"9:603:44085":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"21:12515:2076":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"17:11499:46941":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:12183:4327":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:49742:4948":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"2:2218:1050":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"12:472:63326":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:4436:2953":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:12134:3673":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:38805:2899":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12795:51351":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:53252:4626":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:21:672":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"1:2187:4192":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:15755:57358":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:3894:5224":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:4439:42192":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"17:12287:51187":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:48269:4718":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:1419:2177":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:46028:4178":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"12:2052:4190":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"2:8412:2263":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:22927:4130":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:7856:5603":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"5:6475:2239":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"1:15046:59345":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"17:12771:46325":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:88:38777":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"6:0:798":{"crate_id":6,"path":["libc"],"kind":"module"},"2:3580:3544":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"2:13857:187":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:10912:46602":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"6:5945:39072":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"15:0:1843":{"crate_id":15,"path":["addr2line"],"kind":"module"},"17:10224:46389":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:11147:46320":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:4739:4760":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:46986:33833":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"21:13956:2035":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"17:8929:46299":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"5:1011:2177":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"17:13685:52362":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"17:13760:52365":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:12057:59535":{"crate_id":1,"path":["std","sync","mpsc","blocking","SignalToken"],"kind":"struct"},"2:53338:4664":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:12671:51274":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"1:11453:13376":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:10328:2032":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"17:9133:46304":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"21:14394:2144":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"22:0:1985":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:49713:2310":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:50395:2372":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"16:6691:5584":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:7884:5508":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:11915:50998":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:10266:5852":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"21:1315:2063":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:10310:4720":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:9896:64201":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"6:3862:42132":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"1:11094:2258":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:49429:4932":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"27:515:3672":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"9:157:5293":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"2:46736:2141":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:49723:4946":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"2:47602:38411":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13590:52351":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"17:9809:64195":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"2:23134:4621":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"29:0:1656":{"crate_id":29,"path":["futures_io"],"kind":"module"},"21:17454:2184":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:32331:4316":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:3371:3531":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:3999:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:9280:44679":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:50171:4959":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"16:5029:45359":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:48049:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:2396:2791":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:13957:4265":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:52243:4648":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:51922:60122":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"17:10200:46384":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"1:5956:4476":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:16029:1887":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:12199:3674":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:6252:5573":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"30:977:5952":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:12243:4448":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:3410:3536":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:22874:4751":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:6463:4134":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"17:13842:52408":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"21:15510:2049":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"5:1685:194":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"21:18311:2318":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"2:4782:4518":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"2:46656:59822":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:5377:4407":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"1:4670:2311":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"17:11981:46536":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"12:933:4295":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:3515:2261":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"2:6892:4535":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11304:46324":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:1528:4298":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"6:5978:43203":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"21:14102:2135":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"6:6644:43578":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"16:3064:5822":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"2:46717:2140":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"16:6072:5519":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:15131:4275":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:10084:2607":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"1:8197:3688":{"crate_id":1,"path":["std","sync","mpsc","spsc_queue","Queue"],"kind":"struct"},"12:2045:4189":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"2:51543:4662":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"2:46779:2146":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"21:12857:2087":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"1:14634:2256":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"21:10697:2038":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"1:8293:4355":{"crate_id":1,"path":["std","sync","mpsc","stream","Packet"],"kind":"struct"},"6:3881:42134":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"5:1472:4301":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"5:8138:5230":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"21:12923:2126":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"17:11970:46535":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:46108:4792":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"6:1572:40041":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"1:1045:4187":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:14207:2139":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"16:7226:5596":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"1:7121:13378":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:3273:2259":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:1533:40036":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"1:9143:4286":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"2:14239:4220":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"1:11475:4104":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"30:920:64215":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"5:8146:61208":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"21:10467:2040":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"2:10304:4718":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"3:0:430":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12552:51205":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"1:7336:186":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"2:22748:4748":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:7796:4269":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:5029:4062":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"30:820:5964":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:8168:194":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:5964:4477":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:49983:4578":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:1843:62409":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"2:14129:201":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:11956:4927":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:2754:5753":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"16:7928:4771":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:11008:150":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"2:24836:164":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"14:231:5120":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:10095:5932":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"5:7642:5160":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"21:18241:2311":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"1:12000:4264":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"1:2166:2239":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"12:1147:4302":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:4790:45295":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:53377:4629":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:24598:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:10706:2125":{"crate_id":1,"path":["std","error","Chain"],"kind":"struct"},"21:15936:2166":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:15154:3082":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"17:9759:46312":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"6:5130:42743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:10958:2255":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:46727:4529":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:10458:46429":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"12:379:5412":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:1723:40055":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"6:6870:42326":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"16:7971:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:12845:4905":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"21:16868:2064":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"6:4013:42146":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"2:3363:3524":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:13766:138":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"16:5314:44680":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:6863:4106":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"6:5528:42048":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"1:10680:11040":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:49681:4945":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"21:17163:2177":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"5:5315:200":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"18:767:64221":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"17:12456:51198":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"1:14809:4163":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:9440:46308":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:4995:45350":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"5:3044:61187":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"6:4325:42177":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"5:792:108":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"5:8130:2239":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:5862:4471":{"crate_id":1,"path":["std","os","unix","net","addr","AsciiEscaped"],"kind":"struct"},"21:18144:2309":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"1:12120:4324":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:10962:46590":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"6:670:39193":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"18:621:64216":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"16:5522:5551":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:12167:3676":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:12307:51188":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:3811:3553":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:6086:4416":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"11:46:63315":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"8:0:1837":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"2:48580:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:11430:4428":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"21:16907:2075":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"5:8463:5155":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:15236:4216":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"1:12128:2754":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:13772:52400":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:2576:127":{"crate_id":1,"path":["std","error","Error"],"kind":"trait"},"17:13098:51802":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"1:7259:55135":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:9210:46305":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:4478:42196":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:13547:52346":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"1:12238:3739":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"16:4734:45289":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"1:3355:4381":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"16:5407:5544":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:12734:4936":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:8807:162":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:11204:4148":{"crate_id":1,"path":["std","net","ip","IpAddr"],"kind":"enum"},"5:1607:2753":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"18:668:5966":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5736:5558":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:23079:4130":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"6:5221:42791":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:9719:46311":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"12:971:4298":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"1:3327:4370":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:2889:5780":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"12:0:1841":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:5380:4408":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"16:6014:5567":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6391:5576":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"21:15788:2050":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"17:13154:51807":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"2:8163:59819":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"17:13282:51901":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"21:8121:1676":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"17:13258:51898":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:16019:1877":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"1:1432:2753":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"1:12034:4267":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:2991:5774":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"2:5604:4513":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"6:4364:42182":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"21:17212:2177":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"1:15073:55513":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"1:6963:4101":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"9:722:5277":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:9088:46303":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:56322:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"31:197:1712":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"1:16030:1888":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"27:0:1673":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"21:17884:2305":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:10117:5934":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"21:12636:2081":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"30:170:52807":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:3341:5129":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:10381:55113":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:57696:60096":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"17:10656:46515":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"27:487:3669":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"12:162:5409":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"1:10657:10049":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:7467:5502":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:5972:4479":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"1:15413:4414":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"1:8136:4355":{"crate_id":1,"path":["std","sync","mpsc","shared","Packet"],"kind":"struct"},"30:915:64212":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:49477:4908":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"9:776:5323":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"16:3604:44685":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"9:27:5325":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"24:18:2999":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"29:47:1659":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"17:13453:52334":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:49197:4910":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:9592:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"21:18484:5979":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"17:13386:52300":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"1:11502:13379":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"16:5580:5742":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"17:13240:51857":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:45988:3545":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:22533:4672":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"2:48495:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:2768:579":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"16:7761:5601":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"18:169:52807":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"29:39:1658":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:49043:5108":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"21:17179:2076":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"1:14805:11047":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"17:9769:64188":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"16:4641:45271":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:10241:2322":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"9:41:5326":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"17:11809:47233":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:14714:2150":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"5:1597:2177":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:16127:2055":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"2:8601:157":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"21:13199:2130":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"17:9368:46306":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:14589:55134":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:13062:51801":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"16:5815:5562":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"12:2253:4300":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"17:14000:52486":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"5:5536:2669":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10788:46502":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"2:8886:4515":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"21:18031:2306":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"18:755:64219":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:6510:2031":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:22578:59936":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:6858:42324":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"27:576:3678":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"6:5428:42807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"21:18410:3741":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"17:11277:46287":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"21:13333:2031":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:3309:2260":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"6:5197:42789":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"21:17969:2238":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"2:50187:4962":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"21:18423:64241":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"21:16774:2171":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"17:11519:46942":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:11539:47002":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"1:9865:9935":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"1:2941:179":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"9:234:5301":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"2:53500:20759":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"21:18557:2606":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"1:11449:4168":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:12699:51276":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"2:53592:20763":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"17:12725:51283":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"2:3434:3541":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"30:1033:5957":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"21:17310:2242":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"5:7257:62409":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"6:6893:42329":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"2:10539:146":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:10106:5933":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:46388:4167":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:47923:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"21:11091:2382":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:49956:4577":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"16:6807:5586":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"17:13377:51983":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:8643:4433":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:11082:5838":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:2062:2930":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"12:979:4299":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"16:3488:5773":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"12:1682:5419":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:10291:109":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:11616:47013":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"16:7571:5497":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"6:4164:42163":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"21:10248:2392":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"28:55:2239":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"21:16971:2183":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"16:6744:5799":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"2:48829:3679":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:46578:4530":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"21:11044:2055":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"17:10236:5829":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:3346:3523":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:11246:4150":{"crate_id":1,"path":["std","net","ip","Ipv6Addr"],"kind":"struct"},"2:24049:60005":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"2:22931:4137":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12275:51186":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:12794:4940":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:10795:4141":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:4050:4177":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"25:0:1652":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"17:12756:51285":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"16:3939:44844":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"6:1708:40053":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"16:3091:5823":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:16023:1881":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"21:18474:2089":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"30:853:142":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:52003:4668":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"5:1694:5233":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"16:6518:5579":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:13892:2063":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"12:1103:4300":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:3198:4366":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"5:3759:2177":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"2:51766:4628":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"30:812:2153":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"21:17172:2754":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"16:6768:5801":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"24:258:2030":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"21:13583:3083":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"1:5504:4414":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"16:2866:5761":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"1:10663:4199":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"1:4477:2956":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:4643:2930":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"1:11228:4149":{"crate_id":1,"path":["std","net","ip","Ipv4Addr"],"kind":"struct"},"16:6644:5583":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:10614:4063":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:46609:4533":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:14959:59397":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"30:930:64219":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:53299:4644":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"21:17040:2184":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"1:10870:2947":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"9:996:5342":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"21:12843:2085":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"16:7264:5516":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:18383:2322":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"6:4517:42200":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"5:3375:5130":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"28:220:4300":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:5110:4729":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"6:605:39160":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"17:13942:52444":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"12:466:63330":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:5210:42790":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"2:12056:61032":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"6:4073:42154":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"6:5159:42785":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:10128:5935":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"17:12327:51189":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"2:3367:3527":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"21:18626:2396":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"1:8414:5223":{"crate_id":1,"path":["std","sync","mpsc","sync","Node"],"kind":"struct"},"17:10477:5922":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"1:16003:1864":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:10435:46428":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"17:10179:46385":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"6:6910:42331":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"21:18659:2982":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"2:51121:4645":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"6:4358:42181":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:6085:43206":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"1:16004:1865":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"21:7659:2245":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"2:3426:3539":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"16:5330:44679":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"21:10525:2035":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"17:9005:46300":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"12:2419:4196":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:10611:46532":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:15054:4222":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"21:17977:106":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"2:50175:4961":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:6441:4131":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:7823:5512":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:9574:5839":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"1:2170:4189":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:3341:3526":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:5789:4120":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:7619:4259":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"1:1306:143":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"17:11696:47053":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"2:11438:4914":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"5:1939:4189":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"21:16661:2173":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:47671:2753":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:6411:223":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:46670:2032":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"5:4699:62425":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:51048:60219":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"17:11962:46537":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"2:24166:38198":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:50404:2373":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"5:1235:5236":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:6689:4118":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"6:4040:42149":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"30:1072:5960":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:13799:52403":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"1:5739:4117":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:12946:51745":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"2:47839:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:23136:4620":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:5975:5565":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:13824:2032":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"2:47593:5011":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"17:10502:46430":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"2:25240:4819":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:11361:4410":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"1:11356:4409":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:46970:33831":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:11434:46724":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"12:1881:145":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:11199:46323":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"2:9258:2630":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"6:6028:40000":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"6:6005:13376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:51177:4666":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"5:8115:2754":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:730:64224":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"21:17248:2239":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"2:22546:59892":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:6155:43211":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:14030:4264":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"16:7477:5523":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"31:88:4056":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"2:3278:106":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:23939:4977":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:2031:145":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"21:15320:2041":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"16:5472:5548":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:17739:2301":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"16:4230:45110":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:5766:5560":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"1:9775:59388":{"crate_id":1,"path":["std","sys_common","rwlock","StaticRwLockWriteGuard"],"kind":"struct"},"2:48808:4605":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:46977:2181":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"5:4515:5198":{"crate_id":5,"path":["alloc","collections","vec_deque","pair_slices","PairSlices"],"kind":"struct"},"16:6999:5587":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:9649:46310":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:46995:2178":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"16:5421:5545":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:15499:5436":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"21:16781:3263":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"2:11317:4908":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"2:9762:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"9:900:44009":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:3652:2304":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"6:4083:42155":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"21:7964:1655":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"17:10061:46388":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"6:4401:42187":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"21:15710:2051":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"2:51027:60097":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"20:96:1648":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"1:7667:4262":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:49445:2939":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"16:7303:5599":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:1637:4301":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:10407:5848":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"1:4611:2178":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"2:3246:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"5:3951:4189":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"21:18489:2091":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"17:11714:47109":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:47534:2177":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"6:4272:42171":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:6812:43737":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:8106:5116":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"2:49563:4911":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"6:563:39155":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:56335:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2755:4172":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"6:519:39150":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:11262:2056":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:3395:3532":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"16:3264:5770":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:2865:4617":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"21:9337:1653":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"17:11482:46726":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"21:14649:2038":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:2462:11052":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"5:6672:2669":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"20:44:1643":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"10:0:1839":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"2:4884:4850":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"17:12221:51182":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"6:511:39149":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:5595:5553":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:13978:52450":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"5:8121:5229":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:10836:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"21:17920:2125":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"6:5987:43204":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:49323:4920":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:5228:42792":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"21:18614:2390":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"17:9961:46316":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"6:610:39161":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:51520:4659":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"21:9126:2930":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"12:2032:2177":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"21:17385:2244":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"17:10403:5861":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"30:966:5951":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:18478:2088":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:10569:4130":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"2:51693:4642":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"26:0:1987":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"17:13497:52338":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:15510:5436":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"16:4350:45180":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"18:695:5967":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"5:3329:2177":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4387:42185":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"17:8902:46298":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:48255:4717":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:15354:4407":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:52160:4663":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"2:46758:2144":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"30:1025:5956":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"25:17:1653":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"17:12480:51200":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"21:12591:2080":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"16:5996:5566":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:51442:4667":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:47881:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:11116:2125":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"5:3048:61190":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"6:3951:42139":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"17:9849:64192":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"21:14997:2155":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"2:50034:4580":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"21:13872:2145":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"2:13053:4564":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"27:534:3674":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"5:8368:216":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"16:2968:5763":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"17:10623:46533":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"17:12073:51110":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:24032:4842":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"6:5998:43205":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"21:11392:2046":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:4727:4759":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:13564:11045":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"21:12049:2060":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"1:8031:4355":{"crate_id":1,"path":["std","sync","mpsc","oneshot","Packet"],"kind":"struct"},"18:745:64215":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:525:39151":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"1:12019:4266":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"21:11141:2055":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"21:18093:2307":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"2:46363:4951":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:50179:4960":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:4511:42199":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"16:3338:5751":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:12079:55512":{"crate_id":1,"path":["std","sync","mpsc","cache_aligned","CacheAligned"],"kind":"struct"},"17:13582:52350":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:543:39154":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"2:11113:2177":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"12:2398:59813":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:46340:5092":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"17:10950:46613":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:823:9935":{"crate_id":1,"path":["std","thread","local","os","Key"],"kind":"struct"},"1:16006:1867":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:4395:42186":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:3990:42143":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"17:11779:47229":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"18:721:60221":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:15020:4266":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:7119:5492":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"21:14248:2136":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"12:1784:63316":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"1:13655:4279":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"5:5889:62408":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"2:37624:178":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"14:194:44601":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11654:4243":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:46688:4534":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"6:6636:43577":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:1153:10048":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:12408:51195":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:4008:46504":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"2:24144:38207":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"21:6286:2063":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"2:3336:3521":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"24:380:64283":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"2:2887:104":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:47797:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:11133:2939":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:1161:10051":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"21:12153:201":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"2:5184:2668":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"21:599:2658":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:10830:2037":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"17:10353:5856":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"17:11328:46325":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"2:53047:4657":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:49627:4942":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"21:15993:2163":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"6:584:39157":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"21:4185:64243":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"5:7849:62422":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:52435:4625":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:11726:47110":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:2862:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"1:11424:4055":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:10812:4367":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"21:18129:2242":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"5:4306:2753":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:49509:4937":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"16:6032:5491":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:2314:5855":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"6:1563:40040":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:5407:5084":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"21:16463:2168":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"6:4101:42157":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"16:5753:5559":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"17:12373:51193":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:5100:4858":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"16:6413:5424":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:10571:46530":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"20:27:1975":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"2:3388:3535":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"5:4215:2239":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:1021:4355":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:46600:4531":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:12072:55107":{"crate_id":1,"path":["std","sync","mpsc","sync","Failure"],"kind":"enum"},"21:17152:3003":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"6:5400:42803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"1:6791:4169":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"1:14239:2955":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"16:7205:5594":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"2:32693:4779":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:3181:227":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"6:5282:42795":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"5:4599:62421":{"crate_id":5,"path":["alloc","collections","vec_deque","spec_extend","spec_extend","WrapAddOnDrop"],"kind":"struct"},"17:10140:5865":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:10294:109":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"16:7420:5522":{"crate_id":16,"path":["gimli","read","unit","UnitOffset"],"kind":"struct"},"21:12762:2083":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"16:5360:5542":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:10878:2307":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:3524:132":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"21:17254:2240":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"21:16609:2172":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"16:5488:5549":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:14571:59536":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7786:5511":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:53530:20761":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10468:5923":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"6:537:39153":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:9659:1663":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"2:4964:4080":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:24700:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:3504:1981":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"18:812:5953":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:858:5957":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"21:15663:2034":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"6:4449:42193":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"16:7024:5808":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"17:12632:51271":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:24530:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"21:12300:2071":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"2:23467:15250":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"2:49349:4922":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:6620:5792":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"12:777:2754":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:8769:2180":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"14:47:44600":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:46699:2035":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"16:5632:5554":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"16:4922:45327":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"30:826:5961":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:46638:2130":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"17:9689:64197":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:52586:4649":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:4066:42153":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"1:4082:205":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"2:3716:3547":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"2:10933:214":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:50351:2788":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"16:3287:5771":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"16:6682:5514":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:49758:4950":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:53451:20756":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"21:18320:2319":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"16:7804:5510":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"21:14771:2151":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"27:474:3688":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"2:11137:2753":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:5273:5754":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"2:53425:20754":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11231:5834":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"2:49751:4949":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"21:6984:2186":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:48133:5015":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"6:4241:42169":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"17:1236:46386":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"5:1635:4290":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"30:958:2153":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"16:2945:5785":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:9404:46307":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"28:41:2177":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"17:12494:51201":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"1:2192:4193":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"1:1486:4189":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"16:6636:5517":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10814:5886":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:16017:1875":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:9600:64189":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"2:49609:4941":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:14602:4367":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"21:16406:2170":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"17:2543:5921":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"17:12582:51207":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10081:5863":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:0:488":{"crate_id":2,"path":["core"],"kind":"module"},"17:11993:51005":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"17:13477:52336":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"17:9886:46314":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:3882:2307":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:5985:4480":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:599:39159":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"17:10975:46589":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:1665:40049":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"17:13780:52401":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"5:3748:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:50167:4956":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"9:686:5274":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:52322:4636":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"20:194:2998":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"17:13532:52344":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"30:896:60221":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:6701:56832":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"2:49663:4944":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:9264:44680":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:12917:51744":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:46350:5093":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:13583:54966":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"12:114:63329":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:14165:141":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:13041:51747":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"16:3241:5769":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:11186:46322":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"1:8694:4436":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:5731:4116":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"19:117:64225":{"crate_id":19,"path":["panic_unwind","dwarf","eh","EHContext"],"kind":"struct"},"6:5379:42801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"1:1646:4302":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:9646:1664":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"16:7236:5597":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:32345:60121":{"crate_id":2,"path":["core","mem","valid_align","ValidAlignEnum16"],"kind":"enum"},"2:14068:1982":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"1:8392:3679":{"crate_id":1,"path":["std","sync","mpsc","sync","State"],"kind":"struct"},"17:10211:46383":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"12:869:2239":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"16:6152:5500":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"17:13272:51900":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"21:8119:917":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"1:9471:59165":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:5407:42804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"16:7406:5504":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"12:787:4293":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:9528:2939":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"6:6124:43210":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"2:24010:38183":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:16005:1866":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"1:8650:4435":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"18:791:5951":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:52936:4637":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"9:692:5276":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"2:49862:4569":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:2460:7687":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:12182:51179":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:4060:42152":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"5:1618:2754":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"1:1156:10050":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"2:3357:3525":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:10456:59398":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"5:4242:62409":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:2956:177":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"21:18332:2146":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"17:13520:52341":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"2:3383:3530":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:7738:5600":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"18:678:142":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"2:51639:4635":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:11794:47232":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"16:6718:5797":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"6:5292:42796":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"12:1703:5420":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"21:12693:2082":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"21:18541:64233":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:14346:2143":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"2:11355:4909":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"18:152:52806":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:2925:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:4065:4176":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"21:9837:3738":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"2:14:1954":{"crate_id":2,"path":["core","write"],"kind":"macro"},"21:15311:2158":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"2:13129:4571":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:52082:4656":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:9973:4891":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:24247:4993":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:11244:4906":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"16:6238:5503":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:45965:199":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"16:5790:5561":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"1:1492:4292":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"21:1570:2074":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"27:587:3679":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"16:5941:189":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"17:13394:52301":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:13283:38449":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunksIter"],"kind":"struct"},"1:5793:4114":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:47755:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"6:1617:40045":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:6087:5498":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"30:880:2153":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:11396:4911":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:681:46297":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"21:9795:3740":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"21:17682:2248":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:46063:4729":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"27:552:3675":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"2:53553:20762":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"6:1554:40039":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"16:5960:5749":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"6:6106:43209":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"9:963:5341":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:1584:40042":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"17:13180:51851":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:53436:20755":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:5346:5499":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"18:661:5965":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:7379:2754":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"5:5875:62424":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"1:6865:4107":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:3102:4130":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"12:1183:5406":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"6:6239:43217":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"2:46789:2148":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"16:3218:5768":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:4127:42160":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"21:2138:1647":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"2:5155:4859":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:4506:45211":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:1463:4291":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:6491:5578":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"2:45781:2758":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"5:6652:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"21:15052:64232":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"5:1674:4294":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:1736:40056":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"1:13919:4263":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"2:50068:38450":{"crate_id":2,"path":["core","str","lossy","Utf8LossyChunk"],"kind":"struct"},"2:37648:4672":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"1:7799:4271":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"2:24632:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"21:13034:2127":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"2:11282:4907":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"30:1005:5955":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:903:4336":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"5:6257:5159":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"2:53515:20760":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:46417:5089":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"21:67:1669":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"5:7824:62427":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:3196:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"21:11320:2058":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"2:8179:2119":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:10298:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"12:928:4292":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:51394:60220":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:5505:5550":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"6:4347:42180":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"21:10272:1668":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"5:7111:62427":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"12:856:4291":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:9476:46309":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:22990:4620":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"2:53477:20758":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"5:923:2139":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"17:12028:51052":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:9067:4283":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:48007:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"18:740:64212":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"6:5469:42809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"21:18587:2393":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:12771:4939":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:16027:1885":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"1:7936:54980":{"crate_id":1,"path":["std","sync","mpsc","blocking","WaitToken"],"kind":"struct"},"18:867:5958":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"2:51336:4638":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:3365:5752":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:3177:228":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:5583:10054":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"30:153:52806":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"2:6437:2132":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:3647:3546":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"2:13816:2060":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:14576:4127":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"21:17835:2304":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"27:495:2638":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"16:6731:5798":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"24:0:1739":{"crate_id":24,"path":["futures_task"],"kind":"module"},"21:17230:2754":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"1:5657:4160":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"2:3165:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:56361:236":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"5:3362:4192":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:1560:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"30:942:64221":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"2:46483:5005":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:50238:5025":{"crate_id":2,"path":["core","time","FromFloatSecsErrorKind"],"kind":"enum"},"16:7392:5506":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"17:11665:47051":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"18:830:5955":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:10281:2031":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"17:11572:47010":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"2:5630:779":{"crate_id":2,"path":["core","iter"],"kind":"module"},"21:17825:2303":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"21:12075:2062":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"6:1690:40051":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"1:15475:29333":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:15033:4267":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"6:157:38843":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"5:8250:4196":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:12112:2177":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"17:8849:5830":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"5:3772:2753":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"27:460:3723":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"2:3268:211":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"17:11932:50999":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"16:3522:44683":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"1:11398:4144":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"2:23661:4138":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"5:3038:5128":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"16:3714:44694":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:9943:64187":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"21:11539:2047":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"16:2773:5786":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:10844:5865":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:52793:4669":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:24118:38188":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:15484:56805":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"21:15046:64235":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"5:8203:2754":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"2:49276:4917":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"17:9296:46288":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"2:23767:4130":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:3329:4371":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:49733:4947":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:11410:4478":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:10862:4388":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"30:905:64224":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:4752:2938":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:3549:44684":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:47713:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:24234:4994":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:5801:4122":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:49581:4912":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"20:169:1665":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"}},"external_crates":{"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"26":{"name":"pin_project_lite","html_root_url":null},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"futures_util","html_root_url":null},"29":{"name":"futures_io","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"31":{"name":"futures_executor","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"futures_sink","html_root_url":null},"28":{"name":"slab","html_root_url":null},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"23":{"name":"futures_macro","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/0.2.3/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":16}