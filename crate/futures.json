{"root":"0:0:2489","crate_version":"0.3.30","includes_private":false,"index":{"0:24-21:6182:2414":{"id":"0:24-21:6182:2414","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:2414","glob":false}}},"0:8-21:587:2398":{"id":"0:8-21:587:2398","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:2398","glob":false}}},"0:32-21:37:2421":{"id":"0:32-21:37:2421","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:2421","glob":false}}},"2:13277:23791":{"id":"2:13277:23791","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12365:1854"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5171:2407":{"id":"0:16-21:5171:2407","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:2407","glob":false}}},"2:13336:23828":{"id":"2:13336:23828","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12346:471","str::splitn":"2:13333:23826","self::pattern":"2:12955:8864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:44094:8851","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13271:31091":{"id":"2:13271:31091","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°üíõ\");\n```","links":{"str::floor_char_boundary":"2:13269:31090"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13363:31104":{"id":"2:13363:31104","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™\";\nassert!(Some('◊¢') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13383:31110":{"id":"2:13383:31110","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13391:22494":{"id":"2:13391:22494","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Gr√º√üe, J√ºrgen ‚ù§\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5266:2429":{"id":"0:45-21:5266:2429","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:2429","glob":false}}},"2:13278:23787":{"id":"2:13278:23787","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"üóª‚ààüåè\");\n\nassert_eq!(Some(\"üóª\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:42082:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63-25:9:2405":{"id":"0:63-25:9:2405","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:2405","glob":false}}},"2:13296:28347":{"id":"2:13296:28347","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13297:28370"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:44246:8867","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13333:23826":{"id":"2:13333:23826","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864","str::rsplitn":"2:13336:23828"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:44076:8853","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13368:31107":{"id":"2:13368:31107","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13318:2998":{"id":"2:13318:2998","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12955:8864","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::split_whitespace":"2:13296:28347","str::rsplit":"2:13324:23824"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43972:3325","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13276:336":{"id":"2:13276:336","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13277:23791","`u8`":"1:12365:1854"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6240:2428":{"id":"0:44-21:6240:2428","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:2428","glob":false}}},"0:5-20:32:2395":{"id":"0:5-20:32:2395","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:2395","glob":false}}},"0:49-31:68:2459":{"id":"0:49-31:68:2459","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:2459","glob":false}}},"0:70-21:587:2398":{"id":"0:70-21:587:2398","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:2398","glob":false}}},"0:38-21:5264:1176":{"id":"0:38-21:5264:1176","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1176","glob":false}}},"2:13299:31095":{"id":"2:13299:31095","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:44236:8878","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13393:25195":{"id":"2:13393:25195","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:38817"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:2462":{"id":"0:52-31:100:2462","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:2462","glob":false}}},"2:13275:31092":{"id":"2:13275:31092","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"üóª‚ààüåè\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"üçî‚ààüåè\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:31808":{"id":"5:5621:31808","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2970","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:304:2970","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13354:31100":{"id":"2:13354:31100","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12955:8864","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::match_indices":"2:13351:31099"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:44140:8880","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13389:25192":{"id":"2:13389:25192","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39981:9009","Self::is_ascii":"2:13388:22489"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39981:9009","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-27:0:2426":{"id":"0:43-27:0:2426","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:2426","glob":false}}},"0:67-20:97:2401":{"id":"0:67-20:97:2401","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:2401","glob":false}}},"2:13291:23820":{"id":"2:13291:23820","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13290:23819"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13314:21603":{"id":"2:13314:21603","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('√©'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:42082:191","prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5636:31811":{"id":"5:5636:31811","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tsch√º√ü\";\n\nassert_eq!(\"TSCH√úSS\", s.to_uppercase());\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-21:4707:2406":{"id":"0:39-21:4707:2406","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:2406","glob":false}}},"2:13288:23815":{"id":"2:13288:23815","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n```","links":{"str::split_at_checked":"2:13290:23819","str::split_at_mut":"2:13289:23816"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:2465":{"id":"0:55-31:125:2465","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:2465","glob":false}}},"2:13293:29171":{"id":"2:13293:29171","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"yÃÜ\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'yÃÜ'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12346:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43942:8871","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5639:22491":{"id":"5:5639:22491","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"GR√º√üE, J√ºRGEN ‚ù§\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13391:22494"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5622:9193":{"id":"5:5622:9193","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:2460":{"id":"0:50-31:109:2460","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:2460","glob":false}}},"0:20-29:25:2411":{"id":"0:20-29:25:2411","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:2411","glob":false}}},"0:14-21:3786:2403":{"id":"0:14-21:3786:2403","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:2403","glob":false}}},"2:13265":{"id":"2:13265","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13266:999","2:13267:22092","2:13268:31089","2:13269:31090","2:13271:31091","2:13274:22256","2:13275:31092","2:13276:336","2:13277:23791","2:13278:23787","2:13280:23788","2:13282:23789","2:13284:23790","2:13286:31093","2:13287:31094","2:13288:23815","2:13289:23816","2:13290:23819","2:13291:23820","2:13293:29171","2:13294:28795","2:13295:22333","2:13296:28347","2:13297:28370","2:13298:2989","2:13299:31095","2:13300:29172","2:13301:23832","2:13304:23833","2:13307:23834","2:13310:21602","2:13314:21603","2:13318:2998","2:13321:23822","2:13324:23824","2:13327:31096","2:13330:31097","2:13333:23826","2:13336:23828","2:13339:23830","2:13342:23831","2:13345:2721","2:13348:31098","2:13351:31099","2:13354:31100","2:13357:31101","2:13359:31102","2:13361:31103","2:13363:31104","2:13364:31105","2:13365:31106","2:13368:31107","2:13371:22402","2:13374:23835","2:13377:31108","2:13380:31109","2:13383:31110","2:13386:31111","2:13388:22489","2:13389:25192","2:13390:22493","2:13391:22494","2:13392:22495","2:13393:25195","2:13394:25196","2:13395:25197","2:13396:31112","2:13398:3130","2:13399:31113"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13371:22402":{"id":"2:13371:22402","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:2401":{"id":"0:11-20:97:2401","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:2401","glob":false}}},"0:74-21:3786:2403":{"id":"0:74-21:3786:2403","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:2403","glob":false}}},"0:56:1340":{"id":"0:56:1340","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:850","0:59-2:44889:150","0:60-20:32:2395","0:62-21:4707:2406","0:63-25:9:2405","0:65-21:1291:2399","0:66-20:68:2400","0:67-20:97:2401","0:69-21:422:2397","0:70-21:587:2398","0:71-21:5171:2407","0:73-21:2766:2402","0:74-21:3786:2403","0:76-29:27:2409","0:77-29:17:2410","0:78-29:25:2411","0:79-29:20:2412","0:81-21:6217:2413","0:82-21:6182:2414","0:83-21:6212:2415","0:84-21:6199:2416"],"is_stripped":false}}},"0:81-21:6217:2413":{"id":"0:81-21:6217:2413","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:2413","glob":false}}},"2:13374:23835":{"id":"2:13374:23835","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2766:2402":{"id":"0:73-21:2766:2402","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:2402","glob":false}}},"5:5620":{"id":"5:5620","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5621:31808","5:5622:9193","5:5625:31809","5:5628:31810","5:5636:31811","5:5637:31812","5:5638:2859","5:5639:22491","5:5640:22492"],"negative":false,"synthetic":false,"blanket_impl":null}}},"0:82-21:6182:2414":{"id":"0:82-21:6182:2414","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:2414","glob":false}}},"0:54-31:120:2464":{"id":"0:54-31:120:2464","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:2464","glob":false}}},"2:13310:21602":{"id":"2:13310:21602","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('√©'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:42082:191","prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:65-21:1291:2399":{"id":"0:65-21:1291:2399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:2399","glob":false}}},"0:27-20:131:2417":{"id":"0:27-20:131:2417","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:2417","glob":false}}},"2:13357:31101":{"id":"2:13357:31101","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13365:31106":{"id":"2:13365:31106","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12981:8859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1988":{"id":"0:46:1988","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:2458","`LocalPool`":"31:120:2464"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:2458","0:49-31:68:2459","0:50-31:109:2460","0:51-31:136:2461","0:52-31:100:2462","0:53-31:102:2463","0:54-31:120:2464","0:55-31:125:2465"],"is_stripped":false}}},"0:51-31:136:2461":{"id":"0:51-31:136:2461","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:2461","glob":false}}},"2:13280:23788":{"id":"2:13280:23788","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:42082:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13380:31109":{"id":"2:13380:31109","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13289:23816":{"id":"2:13289:23816","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-L√∂f\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-L√∂f\", last);\n}\nassert_eq!(\"PER Martin-L√∂f\", s);\n```","links":{"str::split_at":"2:13288:23815","str::split_at_mut_checked":"2:13291:23820"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13298:2989":{"id":"2:13298:2989","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:44226:3015","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:2410":{"id":"0:77-29:17:2410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:2410","glob":false}}},"2:13297:28370":{"id":"2:13297:28370","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13296:28347"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:44255:8866","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71-21:5171:2407":{"id":"0:71-21:5171:2407","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:2407","glob":false}}},"2:13269:31090":{"id":"2:13269:31090","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji üßë‚Äçüî¨ (scientist) could be split so that the string only\nincludes üßë (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"‚ù§Ô∏èüß°üíõüíöüíôüíú\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"‚ù§Ô∏èüß°\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13394:25196":{"id":"2:13394:25196","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:38817"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13345:2721":{"id":"2:13345:2721","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12955:8864","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::rmatches":"2:13348:31098"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:44176:8881","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:2409":{"id":"0:76-29:27:2409","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2409","glob":false}}},"2:13321:23822":{"id":"2:13321:23822","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12770:8855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13284:23790":{"id":"2:13284:23790","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"üóª‚ààüåè\");\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13287:31094":{"id":"2:13287:31094","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12352:1724","crate::ops::IndexMut":"2:3489:3207","str::slice_unchecked":"2:13286:31093"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:10-20:68:2400":{"id":"0:10-20:68:2400","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:2400","glob":false}}},"0:69-21:422:2397":{"id":"0:69-21:422:2397","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:2397","glob":false}}},"0:28-22:7:2418":{"id":"0:28-22:7:2418","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:2418","glob":false}}},"0:23-21:6217:2413":{"id":"0:23-21:6217:2413","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:2413","glob":false}}},"2:13268:31089":{"id":"2:13268:31089","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\nassert!(s.is_char_boundary(0));\n// start of `ËÄÅ`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `√∂`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `ËÄÅ`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48-31:65:2458":{"id":"0:48-31:65:2458","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:2458","glob":false}}},"0:25-21:6212:2415":{"id":"0:25-21:6212:2415","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:2415","glob":false}}},"0:35-21:6768:2423":{"id":"0:35-21:6768:2423","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:2423","glob":false}}},"0:37-21:104:850":{"id":"0:37-21:104:850","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:850","glob":false}}},"5:5625:31809":{"id":"5:5625:31809","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13301:23832":{"id":"2:13301:23832","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5638:2859":{"id":"5:5638:2859","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:31-21:6767:2420":{"id":"0:31-21:6767:2420","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:2420","glob":false}}},"2:13339:23830":{"id":"2:13339:23830","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13395:25197":{"id":"2:13395:25197","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:1061:38817"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13290:23819":{"id":"2:13290:23819","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that‚Äôs not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\nlet s = \"Per Martin-L√∂f\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-L√∂f\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside ‚Äú√∂‚Äù\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13291:23820"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13399:31113":{"id":"2:13399:31113","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:5020:31113"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44289:8876","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6212:2415":{"id":"0:83-21:6212:2415","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:2415","glob":false}}},"2:13348:31098":{"id":"2:13348:31098","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12955:8864","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::matches":"2:13345:2721"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:44194:8882","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6199:2416":{"id":"0:84-21:6199:2416","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:2416","glob":false}}},"0:62-21:4707:2406":{"id":"0:62-21:4707:2406","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:2406","glob":false}}},"2:13361:31103":{"id":"2:13361:31103","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13304:23833":{"id":"2:13304:23833","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13377:31108":{"id":"2:13377:31108","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2766:2402":{"id":"0:13-21:2766:2402","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:2402","glob":false}}},"0:78-29:25:2411":{"id":"0:78-29:25:2411","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:2411","glob":false}}},"5:5640:22492":{"id":"5:5640:22492","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert_eq!(\"gr√º√üe, j√ºrgen ‚ù§\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13392:22495"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5628:31810":{"id":"5:5628:31810","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Œ£\";\n\nassert_eq!(\"œÉ\", sigma.to_lowercase());\n\n// but at the end of a word, it's œÇ, not œÉ:\nlet odysseus = \"·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£\";\n\nassert_eq!(\"·ΩÄŒ¥œÖœÉœÉŒµœçœÇ\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"ÂÜúÂéÜÊñ∞Âπ¥\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7652:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13300:29172":{"id":"2:13300:29172","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Za≈º√≥≈Çƒá gƒô≈õlƒÖ ja≈∫≈Ñ\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:44264:8865","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:19-29:17:2410":{"id":"0:19-29:17:2410","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:2410","glob":false}}},"0:21-29:20:2412":{"id":"0:21-29:20:2412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:2412","glob":false}}},"0:26-21:6199:2416":{"id":"0:26-21:6199:2416","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:2416","glob":false}}},"5:5637:31812":{"id":"5:5637:31812","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:304:2970","`String`":"5:7652:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:304:2970","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7652:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:18-29:27:2409":{"id":"0:18-29:27:2409","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2409","glob":false}}},"0:34-21:6769:2422":{"id":"0:34-21:6769:2422","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:2422","glob":false}}},"2:13307:23834":{"id":"2:13307:23834","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12346:471","self::pattern":"2:12955:8864"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13266:999":{"id":"2:13266:999","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"∆íoo\".len(), 4); // fancy f!\nassert_eq!(\"∆íoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12346:471"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:42-21:57:2425":{"id":"0:42-21:57:2425","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:2425","glob":false}}},"0:59-2:44889:150":{"id":"0:59-2:44889:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:44889:150","glob":false}}},"0:66-20:68:2400":{"id":"0:66-20:68:2400","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:2400","glob":false}}},"2:13327:31096":{"id":"2:13327:31096","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12955:8864","str::split":"2:13318:2998","prim@char":"1:12346:471","`DoubleEndedIterator`":"2:8333:129","str::rsplit_terminator":"2:13330:31097"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:44022:8884","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13286:31093":{"id":"2:13286:31093","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"L√∂we ËÄÅËôé L√©opard\";\n\nunsafe {\n    assert_eq!(\"L√∂we ËÄÅËôé L√©opard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12352:1724","str::slice_mut_unchecked":"2:13287:31094","crate::ops::Index":"2:39626:3206"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13351:31099":{"id":"2:13351:31099","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12955:8864","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::rmatch_indices":"2:13354:31100"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:44122:8879","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13388:22489":{"id":"2:13388:22489","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Gr√º√üe, J√ºrgen ‚ù§\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13386:31111":{"id":"2:13386:31111","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12916:136","`FromStr`":"2:12915:3269"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:42213:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12915:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12915:3269","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13398:3130":{"id":"2:13398:3130","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:5023:3130"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44280:3131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:33-21:20:1318":{"id":"0:33-21:20:1318","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1318","glob":false}}},"2:13294:28795":{"id":"2:13294:28795","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"yÃÜes\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'yÃÜ')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12346:471"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43948:8870","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13324:23824":{"id":"2:13324:23824","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12955:8864","`DoubleEndedIterator`":"2:8333:129","prim@char":"1:12346:471","str::split":"2:13318:2998"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43990:8849","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40-21:1291:2399":{"id":"0:40-21:1291:2399","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:2399","glob":false}}},"0:79-29:20:2412":{"id":"0:79-29:20:2412","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:2412","glob":false}}},"0:7-21:422:2397":{"id":"0:7-21:422:2397","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:2397","glob":false}}},"0:15-25:9:2405":{"id":"0:15-25:9:2405","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:2405","glob":false}}},"0:0:2489":{"id":"0:0:2489","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:2429","crate::executor":"0:46:1988","crate::stream":"21:1291:2399","crate::channel":"27:0:2426","crate::future":"21:104:850","crate::sink":"21:4707:2406"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1988","0:56:1340","0:4-2:44889:150","0:5-20:32:2395","0:7-21:422:2397","0:8-21:587:2398","0:10-20:68:2400","0:11-20:97:2401","0:13-21:2766:2402","0:14-21:3786:2403","0:15-25:9:2405","0:16-21:5171:2407","0:18-29:27:2409","0:19-29:17:2410","0:20-29:25:2411","0:21-29:20:2412","0:23-21:6217:2413","0:24-21:6182:2414","0:25-21:6212:2415","0:26-21:6199:2416","0:27-20:131:2417","0:28-22:7:2418","0:29-21:6770:2419","0:31-21:6767:2420","0:32-21:37:2421","0:33-21:20:1318","0:34-21:6769:2422","0:35-21:6768:2423","0:37-21:104:850","0:38-21:5264:1176","0:39-21:4707:2406","0:40-21:1291:2399","0:41-21:5212:2424","0:42-21:57:2425","0:43-27:0:2426","0:44-21:6240:2428","0:45-21:5266:2429"],"is_stripped":false}}},"2:13396:31112":{"id":"2:13396:31112","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"‚ù§\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"‚ù§\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"‚ù§\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"‚ù§\\n!\".escape_debug().to_string(), \"‚ù§\\\\n!\");\n```","links":{"`char::escape_debug`":"2:5022:31112"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:44271:8875","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6770:2419":{"id":"0:29-21:6770:2419","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:2419","glob":false}}},"2:13359:31102":{"id":"2:13359:31102","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  ◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊¢') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13392:22495":{"id":"2:13392:22495","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GR√ú√üE, J√úRGEN ‚ù§\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"gr√ú√üe, j√úrgen ‚ù§\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13282:23789":{"id":"2:13282:23789","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"üóª‚ààüåè\";\nunsafe {\n    assert_eq!(\"üóª\", v.get_unchecked(0..4));\n    assert_eq!(\"‚àà\", v.get_unchecked(4..7));\n    assert_eq!(\"üåè\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:11045:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13390:22493":{"id":"2:13390:22493","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√∂S\"));\nassert!(!\"Ferr√∂s\".eq_ignore_ascii_case(\"FERR√ñS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13295:22333":{"id":"2:13295:22333","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43958:3324","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13267:22092":{"id":"2:13267:22092","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:850":{"id":"0:58-21:104:850","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:850","glob":false}}},"2:13330:31097":{"id":"2:13330:31097","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12955:8864","str::split":"2:13318:2998","prim@char":"1:12346:471","str::split_terminator":"2:13327:31096"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:44040:8883","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:2395":{"id":"0:60-20:32:2395","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:2395","glob":false}}},"2:13274:22256":{"id":"2:13274:22256","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12502:8868"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5212:2424":{"id":"0:41-21:5212:2424","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:2424","glob":false}}},"2:13342:23831":{"id":"2:13342:23831","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:42080:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12961:8860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12976:8861","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:2463":{"id":"0:53-31:102:2463","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:2463","glob":false}}},"2:13364:31105":{"id":"2:13364:31105","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"◊¢◊ë◊®◊ô◊™  \";\nassert!(Some('◊™') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:4-2:44889:150":{"id":"0:4-2:44889:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:44889:150","glob":false}}}},"paths":{"2:43032:29204":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"17:13252:20067":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"17:15092:21348":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"18:613:21732":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:8063:2862":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"2:21913:3296":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:4772:3446":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"6:5191:13974":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"6:7461:15154":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:10842:23560":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"1:2705:3008":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"16:7857:17003":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:10399:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"21:2780:34377":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"function"},"2:22235:29421":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:14356:20611":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"21:9188:2845":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"6:6738:14739":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:12349:1316":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"6:7339:15149":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"2:5981:3309":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:11273:22314":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"1:8659:3453":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"17:15023:21346":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"21:6182:2414":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"2:39758:3149":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:42302:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:12264:17307":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"17:13899:20582":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:10743:2880":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"17:10954:17129":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"21:8095:2816":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"1:12356:737":{"crate_id":1,"path":["std","f16"],"kind":"primitive"},"1:10609:3499":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"6:564:9988":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"21:9694:2874":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"17:14545:20624":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"16:6398:16942":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"17:13844:20579":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"2:46260:3596":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"17:2175:17219":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"2:4438:28492":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:5361:13995":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"21:15484:34293":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"21:7130:2799":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"6:1663:10891":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:22708:3706":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"16:6120:16934":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:3656:254":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"16:6079:16932":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"21:14256:35214":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"5:304:2970":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"6:4965:13953":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"21:7265:2796":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"6:6811:14745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:12913:2924":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:8304:2969":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12724:17114":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:21680:29412":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"6:5336:13992":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"16:7910:17005":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"21:13817:2933":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"11:2148:3174":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"6:5665:14027":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"17:12318:17121":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:6199:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:15206:21358":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"2:40505:8875":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:47229:8753":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"11:1564:15902":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"21:9338:2848":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"1:6572:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:1642:3179":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:11282:8855":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:6412:16943":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:44280:3131":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"21:10661:2882":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"17:15333:21369":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:10999:27215":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"16:5307:16892":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"30:1045:21728":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"2:44140:8880":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:10981:2962":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"2:21658:9004":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5031:13961":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"21:10451:2798":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"2:2132:9246":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"21:15074:35214":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"1:7150:3573":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"1:10360:23721":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"16:2438:15992":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:10643:3301":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:12981:8859":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:12478:17346":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"24:0:2490":{"crate_id":24,"path":["futures_task"],"kind":"module"},"2:9852:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:21744:3296":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:7716:8992":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:8753:3188":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"6:1526:10879":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"2:3661:146":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:15039:21347":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:10184:8795":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"6:7452:15153":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:2712:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:9176:3542":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"21:4439:21634":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"17:13064:17075":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"16:5863:16924":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"21:12255:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"30:1450:21605":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"2:47028:3604":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:12683:17356":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"6:473:9976":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"11:1140:15901":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"6:4952:13951":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"6:5014:13959":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:44979:3716":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"17:13497:20083":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"1:8183:3292":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"2:4572:8964":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"5:883:3180":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"11:1888:2951":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"17:13986:20587":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"30:1162:21720":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"2:2067:1360":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"21:23:2767":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:43942:8871":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"17:13235:20066":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:3448:2967":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"21:4486:21636":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"1:1481:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"6:6519:14718":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:41327:2930":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:15426:21379":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"21:21:1318":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"1:5004:3401":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"21:14693:35214":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"1:10903:3452":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:40656:3324":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"17:15655:21394":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:40872:9174":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"16:3810:16039":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:7355:16978":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"17:12993:17122":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"6:5643:14025":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"1:980:3170":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"21:7757:2819":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"1:568:3106":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"21:8181:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:32314:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:46362:28730":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"6:6379:14645":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"1:12362:899":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:45016:8770":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:38333:9218":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:15463:21383":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"21:7526:35214":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"30:1196:21609":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"2:13734:2826":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"16:5385:16911":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"1:3906:3362":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:6452:3522":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:9114:35214":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:10039:28488":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"21:11010:2892":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"2:8441:178":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:10339:226":{"crate_id":2,"path":["core","fmt","Result"],"kind":"type_alias"},"16:6532:16952":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:44581:8885":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"19:0:1293":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"5:7629:3253":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"16:8301:17017":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:15799:21403":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"30:1421:21591":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"17:12388:17332":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"1:10517:23435":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:12132:23573":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:16165:21571":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"21:13759:35214":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"2:44194:8882":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:6358:3720":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:5638:3494":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:5927:16926":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"21:10538:35214":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:5352:13994":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"16:6560:16954":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"17:15616:21390":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"12:0:2610":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:7549:16985":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:2769:1056":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"function"},"30:0:2615":{"crate_id":30,"path":["memchr"],"kind":"module"},"30:1065:21717":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"1:1859:3212":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"5:7750:8925":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"2:42269:3160":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"11:798:2951":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12969:17067":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"2:2807:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"5:6941:8928":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"2:13597:9011":{"crate_id":2,"path":["core","future","async_drop","AsyncDropInPlace"],"kind":"struct"},"17:13344:20072":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"21:10117:35214":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"21:14904:35214":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"2:44547:8902":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:9748:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"17:14463:20618":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"16:7052:16974":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"17:12887:17118":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"21:10056:35214":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"11:881:3171":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"21:10639:35214":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"5:7641:8818":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"6:5370:13996":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"17:12150:17257":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"16:4468:16536":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:3257:3568":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"21:10597:2879":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"2:46007:3629":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:5992:3462":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"21:4540:23563":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"2:10393:8797":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"17:14503:20621":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:10943:22325":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"2:32313:2965":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"6:5598:14020":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"17:12647:17352":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"21:9529:2871":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"17:15222:21360":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"16:5914:32957":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:41069:2890":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:43972:3325":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"17:14284:20606":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:11239:3325":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"17:15473:21384":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"18:96:21591":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"5:7602:9290":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"16:2572:15998":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"17:14933:21341":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:4153:3389":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"1:12367:1842":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:40468:8986":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"2:4362:3309":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"21:8557:2824":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"2:33055:9203":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"20:68:2400":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"16:6543:16953":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"17:14212:20601":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"21:8570:2825":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"6:8265:14190":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:38278:9217":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"6:6746:14740":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"30:142:21724":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"1:12351:1690":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"17:9984:17097":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"6:485:9978":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:39582:8788":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"31:125:2465":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"29:20:2412":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"30:1267:21609":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"5:956:2928":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"9:502:15780":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"21:10367:2889":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"2:47255:8755":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"20:92:3296":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"6:8247:14187":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"16:4502:16547":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"16:6442:16946":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"17:10671:33917":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"1:1861:3213":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"21:8156:2812":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"6:6821:14746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"21:7222:35214":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:1897:3223":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"21:8474:2820":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"16:2478:15994":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"17:15078:17148":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:9342:16977":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:12357:740":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"20:97:2401":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"1:8630:3361":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"21:10613:2884":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"14:7:15912":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"2:6077:3309":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"2:44122:8879":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:43059:2872":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"6:5376:13997":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"23:0:2757":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"6:5677:14029":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:12915:3269":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:43071:29219":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"17:15596:21388":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:7891:23006":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"17:14986:21344":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:13814:20577":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:12359:735":{"crate_id":1,"path":["std","f128"],"kind":"primitive"},"2:40618:3249":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"9:424:15779":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:44558:8903":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:46489:3631":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"21:10262:2878":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"2:46518:3637":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"21:7697:34307":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"1:4341:3422":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"30:1107:2928":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"2:9531:8860":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"6:6706:14735":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"1:6718:3531":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"21:7488:35214":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"2:22568:3714":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"17:11674:17237":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"21:15224:3025":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"30:1504:35895":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"21:6429:187":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"21:11266:2895":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"28:76:35860":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"6:545:9985":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"6:578:9990":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:10828:34075":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"17:11128:17141":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"2:32303:9280":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:11166:17147":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:1692:3413":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"17:15734:21398":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"21:14552:35214":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"2:42175:3469":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"2:44702:9362":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:3092:3247":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"2:43769:8840":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"21:6217:2413":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"21:39:2769":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"21:11884:2809":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"1:3067:137":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"28:217:3172":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"17:15383:21374":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"2:42124:3160":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:12056:17255":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"21:12333:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:672:3135":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:40489:8876":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"11:1158:3175":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"6:5020:13960":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"30:1035:21732":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"30:895:21719":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"17:11313:17171":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"21:12647:2818":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"11:0:2609":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"6:5457:14005":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"16:2854:16011":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"21:9646:133":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"2:40694:3267":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"6:7561:15160":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"17:12371:17120":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"21:9992:35214":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"11:2349:3174":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"30:1119:21609":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"21:6394:21648":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"27:140:21686":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"21:10319:2795":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"2:30438:3366":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12695:17355":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:1637:3178":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"6:6900:14774":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"6:7537:15158":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:2221:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:8604:3356":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"6:6597:14723":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"5:7412:2951":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:42380:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"30:952:21726":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"6:5146:13971":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:8155:17010":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"11:772:3161":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"21:15274:3026":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"17:256:33331":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"17:13375:20074":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:12362:17341":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"11:835:3167":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:11206:3500":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:12486:9320":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:7492:3160":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:44022:8884":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"21:5256:21643":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"2:44706:9360":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"16:3778:16030":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"6:5617:14021":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"16:5995:16928":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:8222:139":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:819:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:44354:8894":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"9:447:15777":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:41286:9162":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"17:15957:21562":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"21:338:2808":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:12717:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"16:5700:16914":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"6:6756:14741":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"21:6767:2420":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"21:7192:2801":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"1:11659:22431":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"21:14716:3009":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:13146:17394":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"1:7409:23554":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:43087:29207":{"crate_id":2,"path":["core","fmt","rt","ArgumentType"],"kind":"enum"},"1:6406:22202":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"1:11010:3233":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"5:3318:3179":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"2:6972:29205":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"21:9086:2843":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:9807:17078":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"5:1204:31887":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"30:1475:21606":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"6:6775:14744":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"5:5733:8928":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"16:4641:16571":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"1:8099:3233":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:13485:20082":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"21:10298:35214":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"2:11432:8850":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:46149:3576":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:0:2613":{"crate_id":16,"path":["gimli"],"kind":"module"},"21:10727:35214":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"5:4481:3309":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:22580:28412":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"1:8546:3325":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:10905:17112":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"16:6353:16940":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"2:2936:9008":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"5:4252:3309":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:8873:3485":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"18:706:8862":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:10726:3342":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"17:12824:17115":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"21:13667:2929":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"1:11647:22213":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"1:1613:3160":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"21:11831:2904":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"21:7539:2818":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"21:6776:2794":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"5:1559:3165":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:7695:16995":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:7337:23574":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"5:3885:3163":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"6:6664:14730":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:8341:15731":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"21:13030:2927":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"17:14260:20604":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:39643:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"30:1496:21614":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"16:7528:16983":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"6:5477:14008":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"11:2566:3155":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"21:7840:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:39718:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:4882:3117":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:10887:34044":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"31:68:2459":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"1:10990:27217":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"6:7984:9935":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"17:9916:17095":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:12251:17308":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:42575:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"17:11898:17270":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:8197:15695":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"24:9:21630":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"1:9134:3500":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2935:3296":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"17:1207:17154":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"5:4515:30810":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:46281:3602":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:1639:10889":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"21:14969:35214":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"17:14372:20612":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"17:13211:20065":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"1:9375:22228":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"21:12552:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"17:12175:17323":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"16:6749:16962":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:4607:2839":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"2:23164:28724":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"2:2968:258":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:16032:20067":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"17:11493:17191":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:1954:3309":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"1:4215:3394":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:15608:21389":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:12470:9318":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"17:14912:21340":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"21:2715:2903":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"2:38223:9216":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:21805:3581":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"16:4856:16648":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"27:467:21699":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"29:27:2409":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"2:44690:9357":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"17:15273:21363":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"16:2684:16003":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:12363:905":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"21:12873:2910":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"2:22356:3580":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"24:190:2793":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"1:7995:3128":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:12344:417":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:12342:17306":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"21:12965:2925":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"1:8565:3360":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"11:1064:15899":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:4924:13948":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"2:43807:8842":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"17:12659:17351":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"21:2566:34457":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"21:11763:2902":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"17:13046:17076":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13999:20588":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:46983:3632":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"6:5039:13962":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"6:6562:14722":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"17:15720:21397":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"2:13580:29947":{"crate_id":2,"path":["core","future","async_drop","AsyncDropOwning"],"kind":"struct"},"2:10044:28827":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"6:4811:13938":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:4485:8780":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"21:13658:2928":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"21:8059:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"5:1590:3193":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"1:8064:3140":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"21:12582:2912":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"16:6849:16965":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"2:3216:3119":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:46734:28770":{"crate_id":2,"path":["core","core_arch","simd","m16x16"],"kind":"struct"},"21:12030:2812":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"16:6066:16931":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"24:309:21642":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"30:1444:8862":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"17:12328:17304":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"6:8294:14194":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"16:6634:16959":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"17:14855:21337":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"20:32:2395":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:45907:3587":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"21:12697:2922":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"17:11341:17183":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:12076:17251":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:12494:17311":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"21:7586:34307":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"17:12201:17336":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"16:5107:16715":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"1:12371:1914":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:41317:9165":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"6:8288:14193":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:11142:17109":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"20:0:2394":{"crate_id":20,"path":["futures_core"],"kind":"module"},"1:2318:2990":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"21:13801:35214":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"6:4971:13954":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"1:12353:1814":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"14:31:15912":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"6:1490:10874":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"16:3614:16021":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"2:3051:137":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"17:12353:17340":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"16:7321:3466":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"21:15299:3029":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"2:11473:8853":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"17:10524:17105":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:16223:21576":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"6:5314:13989":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5200:13975":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:2533:32901":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"2:32401:8781":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"21:10605:2886":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"17:14177:20599":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"2:11321:8844":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"17:12768:17071":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:46345:3664":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:22582:9235":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_exposed_provenance"],"kind":"function"},"6:5306:13988":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"6:5122:13969":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"21:13524:34330":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"2:43899:8847":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:9355:22412":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"18:491:34161":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"6:1503:10876":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"21:9467:2893":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"6:5624:14022":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"2:22914:28845":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"21:12808:34351":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"21:14667:3008":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:34125:9211":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"17:12516:17363":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:12329:22433":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"16:7085:33316":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3529:2929":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"5:1509:3160":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:5250:13981":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"30:918:21721":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"6:8259:14189":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"11:2440:2951":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"16:2788:16008":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"17:10661:17107":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"16:3899:16082":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"17:13024:17123":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"6:8317:14197":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"17:14147:20598":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:2959:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"21:8499:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:39808:8941":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:44722:9378":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"21:15376:2851":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"1:9334:22241":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"21:7020:2798":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"21:12183:2797":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"2:23274:28728":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"16:2902:16013":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:5781:16919":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"16:4940:16663":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"21:8303:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:7455:2806":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"21:14047:2928":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"17:597:17091":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"17:9938:17096":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"2:10648:3303":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:3454:140":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:39546:8944":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:6509:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"31:65:2458":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"27:187:21690":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"18:563:21620":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"2:3738:8789":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:11832:3362":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"16:7473:16980":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"11:2323:3173":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"31:136:2461":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"1:915:3162":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"13:110:32917":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"21:422:2397":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"17:261:33363":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"30:1583:35869":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"17:13674:20572":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"2:46938:3598":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"30:882:21718":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"1:1920:3229":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:22953:3367":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:2458:15993":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:2766:2402":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"21:15123:35214":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"2:2595:672":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:1974:3243":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:10997:17131":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:13882:35214":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"1:8345:23750":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"21:9352:2850":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"21:7100:35214":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:7665:8906":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"21:13676:2930":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"17:12530:17354":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"2:32289:28937":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:47293:8757":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"6:5174:3412":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"11:1880:2928":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:7442:30394":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11051:17159":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"1:3649:3027":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"21:13510:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"17:14516:20622":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"21:779:2826":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:40904:2885":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"21:14517:2960":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"3:0:505":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"21:7887:2809":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:45971:3594":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:14298:20607":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"21:4707:2406":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"21:7961:2817":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"11:830:3164":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"18:689:21610":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:11367:17149":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"2:40585:8982":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:13424:20078":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"27:149:21688":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:10931:35214":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"17:15836:21406":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:1535:10880":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"21:8431:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:3032:23431":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"16:6026:16929":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:32236:3503":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:12399:17342":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"5:4282:3309":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:42008:3365":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:11419:17109":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:12464:17345":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"21:327:2807":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"6:4942:13950":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"2:11359:8856":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"30:1057:21733":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"1:12352:1724":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"6:5536:14014":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:43718:29966":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:11824:2905":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:15214:21359":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"26:43:35831":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:3253:9184":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"21:6212:2415":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"17:15368:21372":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"16:2374:15989":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"1:11018:3495":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:46135:3662":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"21:5266:2429":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"21:8538:205":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"16:5846:16923":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:33807:9209":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"16:6948:16969":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"2:22978:29177":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"17:12213:17337":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"2:44469:8899":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"21:8544:2823":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"17:11042:17134":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:11730:17240":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:4352:16466":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:10401:35214":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:6629:14726":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:11190:2928":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"21:11866:35214":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"11:873:3170":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:13597:2908":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"17:9737:17064":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"21:13319:2920":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"17:14235:20602":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:14327:35214":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"17:13509:20084":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"18:698:21611":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"17:14091:20595":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"11:1725:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"21:11920:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"2:816:3370":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"17:15822:21405":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"17:10769:34074":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"6:517:9981":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"5:3284:3178":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"1:4103:3387":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"6:1565:10883":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:42419:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:5474:2833":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"17:12443:17334":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"21:9733:35214":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:42655:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:44176:8881":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"16:4614:16567":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:15646:21393":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"6:1547:10881":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"11:1580:15903":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"18:538:21619":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:5037:16691":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"21:12456:2914":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"1:4886:3428":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:22:819":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"21:11952:2810":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"21:11537:34376":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"1:9415:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:32282:17016":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:11392:17181":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"21:12308:2813":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"17:11102:17143":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"16:8202:17013":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"21:11514:35214":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"2:40781:2873":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"16:7428:16979":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"21:4045:2826":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"17:11788:17290":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"20:27:3296":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"17:13594:20090":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:2838:16010":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"1:3667:3023":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:16269:20077":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"11:2137:3173":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:32371:2966":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"16:2394:15990":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"1:5622:3493":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:10622:33788":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:15116:21350":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"29:25:2411":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"1:12360:911":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:42278:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:8236:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"16:7648:16992":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"2:3262:3570":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"2:3292:8785":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"17:15521:21385":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:2380:2928":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:16050:20068":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"16:6231:16935":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:44255:8866":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:7931:23550":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"2:10600:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:2780:3009":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"11:1005:3172":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:40934:2888":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"2:21712:29422":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"16:6466:16948":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"5:5868:251":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"21:13484:2919":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"17:15569:21386":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:8300:14195":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"2:47174:8748":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6768:14743":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"2:45028:29148":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"16:6758:15931":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"2:40644:3250":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"21:6768:2423":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"21:15358:35214":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"17:12238:17309":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"18:521:21614":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:47308:8758":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:2030:671":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"30:1030:21731":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"21:15314:3105":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"16:2808:16009":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:23726:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:8817:3483":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"1:2073:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"1:11687:22579":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"2:22635:9235":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","with_exposed_provenance"],"kind":"function"},"21:37:2421":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"6:6409:14710":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:6880:13851":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:7345:35214":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:12673:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"31:38:35900":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"5:7573:3118":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"5:839:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:8018:3114":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:13437:20079":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"16:7888:17004":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:6621:14725":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"17:10018:17070":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:15190:21356":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"7:79:15755":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"11:2545:32897":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"17:11825:17271":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"21:6962:2803":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"30:1183:21722":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"16:4062:16199":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:7464:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:15058:21331":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:44568:8904":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:6763:14742":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"2:3284:8783":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:43042:8794":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"16:3475:16020":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:46539:3643":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"11:430:32904":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"31:120:2464":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"1:9301:22341":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"1:9425:3529":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"6:5630:14023":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"21:8609:2827":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"18:651:2897":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:8759:9168":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:953:3166":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"2:46313:3657":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"2:3040:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"6:5219:13977":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"21:9508:35214":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"6:1653:10890":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"15:327:15941":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"22:7:2418":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"21:14031:2928":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"17:9671:17066":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"17:12485:17347":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:11595:17235":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"1:12345:1176":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:3559:3309":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"2:3287:8784":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"21:7442:35214":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"21:5950:2929":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"2:6966:9175":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"21:8596:35214":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"16:2355:15988":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"27:136:3534":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"5:2220:30359":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:7061:16975":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"2:11035:3296":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:43343:3481":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"17:12707:17113":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"6:5445:14004":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"21:13371:2921":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"2:4851:8960":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:3841:3359":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"2:3667:8946":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"21:6846:35214":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"1:2495:3287":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:46444:3625":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"17:15678:21395":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:11799:17291":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1621:10887":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"21:9346:2849":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:8852:2835":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"1:8802:3482":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"17:13308:20070":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"21:11465:35214":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"21:6859:2798":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"1:11033:22418":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"2:13682:2823":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:8779:3481":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:39981:9009":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:7741:16997":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"11:740:3166":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"5:6619:30811":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:14414:20615":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"21:14574:3005":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"1:8263:3334":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:1616:2951":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:11016:17132":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4864:13941":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:43990:8849":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:11773:17289":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:33952:9210":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:4201:3392":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:14968:21342":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"1:6682:3523":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:3646:9222":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"30:1411:21590":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"17:15176:21355":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"16:6927:16968":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"16:5347:16909":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:14994:21332":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"1:4303:27209":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"6:5212:13976":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"2:21925:3578":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"11:2121:3172":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"6:479:9977":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"2:44764:3572":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"29:0:2408":{"crate_id":29,"path":["futures_io"],"kind":"module"},"16:6620:16958":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"16:8259:17016":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:14072:2950":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"17:14868:21338":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"1:3486:3329":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"21:15329:2853":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"17:4986:17364":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:2539:28479":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:9257:2846":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"17:12278:17338":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"9:392:15778":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"11:364:32885":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"6:523:9982":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:40399:8949":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"16:5400:16912":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7570:16987":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"17:11075:17149":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"2:21923:3579":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:14783:35214":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"1:2232:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"16:2418:15991":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:4819:22307":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:9726:3293":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"1:10769:3111":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"16:8093:17007":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"6:6524:14719":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:500:23578":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"1:9322:23751":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"11:2466:3163":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"17:14038:20591":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"21:12618:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"2:10395:8805":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"21:11144:2801":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"2:40851:9178":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"21:11977:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:11318:2896":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"21:11649:34361":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"21:13152:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"15:394:15948":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"6:5483:14009":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:40592:8983":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"2:43958:3324":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"6:6698:14734":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"6:6441:14713":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"16:8136:17009":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"11:351:32881":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"16:8226:17015":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:22492:3710":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"6:570:9989":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:3437:8773":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"21:14809:117":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"1:5837:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:13772:2838":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"2:46216:3642":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"5:6023:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"6:5083:13966":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:5335:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"11:685:3159":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"2:43561:28385":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:43546:9347":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"21:13091:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"6:7584:15162":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"5:3039:8775":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"1:9556:3229":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"21:8921:2836":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"21:9887:2794":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"21:15382:34334":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"2:23252:28695":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"16:7590:16989":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:10608:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"21:10017:70":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"2:2770:134":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"21:15290:3028":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"21:14482:35214":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"2:40714:3295":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"6:7366:3453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"5:3040:32000":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:8540:3324":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:2010:787":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"15:306:15937":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:7727:16996":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"2:3935:2951":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"2:41986:28608":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"21:11083:2891":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"16:2878:16012":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:10792:2881":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"1:6374:23572":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"5:3263:30880":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"16:867:33331":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"17:10818:17110":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"30:1225:21719":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"17:14386:20613":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:15281:21364":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"5:3754:30811":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:15197:21357":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"2:22201:3584":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"17:13538:20086":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:1075:3172":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"6:8271:14191":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"2:40666:3254":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"6:586:9991":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"17:10573:33818":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"17:12671:17387":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"1:11518:23565":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"2:8251:9169":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"21:4275:2936":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:43818:8829":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:4354:3423":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:31072:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:43125:137":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:5098:3448":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"6:5565:14017":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"17:14402:20614":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"21:11576:34343":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"2:13191:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:4603:3116":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:1844:696":{"crate_id":1,"path":["std","env"],"kind":"module"},"18:507:2897":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:3669:16022":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"5:5938:2951":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"2:42213:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"21:12448:2915":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"17:13455:20080":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6385:16941":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"1:3300:27499":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:5851:3535":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"21:15454:34314":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"6:553:9986":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:40819:28356":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"17:13363:20073":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"30:1246:21721":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"21:6556:34502":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"1:9123:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:2210:3100":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:16093:21566":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:11428:3270":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"1:8255:23717":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"21:15027:2954":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"17:15102:21349":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"2:4:1258":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:8364:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:7379:33314":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:11394:8849":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:1631:3177":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"17:11227:17139":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:16121:21568":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:26126:267":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"28:46:2928":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"6:1628:10888":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:14056:3159":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"21:7503:164":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"17:11583:17205":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"6:6505:14674":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"6:5502:14011":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:1843:3163":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"21:15387:2854":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"0:0:2489":{"crate_id":0,"path":["futures"],"kind":"module"},"17:9886:17094":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:6777:9179":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"17:11702:17238":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:8476:2931":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"21:20:1318":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"17:11574:15895":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"2:39738:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"30:930:21722":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"5:6055:3517":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:3583:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"21:12856:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"5:7139:30853":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:46556:3591":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:41842:3353":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"1:8247:3157":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"21:8648:219":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"2:47157:3665":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:3272:9205":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"16:7604:16990":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"21:14220:2956":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"21:10686:35214":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:40863:2798":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"26:37:35830":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"2:4450:28491":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:44718:9356":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"5:3258:3177":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:8616:3427":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:47194:8750":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:2765:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:11219:3501":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"21:13348:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"21:9828:2794":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"17:16212:21575":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"6:6915:14775":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"6:5266:13983":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"21:5992:2405":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"1:9403:3522":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"21:13423:2923":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"5:2102:3012":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"6:5407:1245":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"11:2400:3159":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:12000:8838":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"21:11674:2900":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"11:1049:3174":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:47203:8751":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:11510:17177":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"2:5324:3344":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"21:15281:3027":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"21:8635:35214":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"6:4837:13940":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"24:169:2791":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"16:2323:15986":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:379:3127":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:7397:33325":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"17:11688:17203":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"6:6478:14717":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"1:4883:3450":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"6:5415:14001":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:46120:3656":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:42133:3466":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"1:12318:3142":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:11405:17180":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"2:43331:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:12368:1848":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:4923:3402":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:9294:3105":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:43314:28842":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"27:127:21685":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"1:8355:2961":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:15582:21387":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"5:2539:30421":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"27:154:3540":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"6:1559:10882":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:2962:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"17:10044:17098":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"17:13581:20089":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"16:2636:16001":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"27:441:3539":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"16:6872:16966":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"21:15091:3015":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"21:12230:2814":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"17:11497:17178":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:43844:8827":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"21:10841:2887":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"5:1581:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"5:3042:30244":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"6:5296:13987":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:13089:17392":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"26:53:35832":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:13832:20578":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"5:289:30811":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11256:3299":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:3046:30242":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:47057:3638":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:9755:17062":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"21:10889:2888":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"1:11614:23715":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"16:5742:16916":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"5:1739:30811":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"28:42:3160":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"21:12055:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:11256:17168":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"6:6636:14727":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"18:481:21615":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"14:187:15920":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"21:15218:3024":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"21:14279:237":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"2:3211:247":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"11:1900:3176":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"17:10137:17063":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"16:3014:16016":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"17:2234:17204":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"30:1175:21721":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"6:1485:10873":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"11:698:3160":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"6:5588:14019":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:8611:3426":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"17:11853:17293":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"1:8681:3404":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:46651:3609":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"1:675:3136":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:13961:34283":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"21:9948:2877":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"2:39795:8933":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:6282:23556":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"1:957:3167":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"21:0:2396":{"crate_id":21,"path":["futures_util"],"kind":"module"},"2:40741:3204":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:3419:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"16:7755:16998":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:623:3129":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"20:17:2747":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"2:42116:3159":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:45005:8772":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:13292:20069":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:13325:20071":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:16235:21577":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:46763:28776":{"crate_id":2,"path":["core","core_arch","simd","m32x8"],"kind":"struct"},"2:41302:9164":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:6076:9579":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"21:12492:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"21:14801:2950":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:7373:2802":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:11117:35214":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"2:13944:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"11:671:2928":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"17:11547:17232":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"18:531:21618":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"5:1369:3175":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"21:7393:35214":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"18:589:21729":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"14:160:15912":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"27:434:21703":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"2:6268:2794":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:4333:3421":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"17:14051:20592":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:8200:3294":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"16:2748:16006":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"27:452:3541":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"17:11242:17167":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"11:2228:15895":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"21:9569:2872":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"5:4087:2951":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:14111:20596":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"6:7485:15156":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"5:2322:30290":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:3686:28684":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:8073:17006":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"1:7994:3296":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"1:3303:27489":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:14436:20616":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:9719:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"2:44040:8883":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"2:4730:8951":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"27:371:3534":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"16:5960:16927":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:12792:17073":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"16:4913:16659":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"22:0:2756":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"21:6769:2422":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"2:45892:3622":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"30:1575:21611":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:45939:3628":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"5:7383:3191":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"16:860:33334":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:8284:145":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:3677:3319":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"1:5779:3498":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:7045:35214":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:12133:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:41874:3355":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:43879:8848":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:3436:3338":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:4981:3407":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:2553:34933":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"1:871:2928":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"11:785:3162":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"18:670:21608":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2741:3326":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"16:7497:16981":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"30:874:21717":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"17:9781:17092":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"17:12189:17335":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:9420:3468":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"5:3297:30874":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"17:15434:21380":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:13387:20075":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"5:1184:30809":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"2:43857:8828":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"6:5320:13990":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"21:11407:35214":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"21:13246:2917":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"2:43870:8845":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:22899:28574":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"16:6317:16938":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11524:17231":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"1:944:3164":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:42792:8797":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:40791:133":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:46391:28733":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:10969:22413":{"crate_id":1,"path":["std","sys","pal","unix","fs","Mode"],"kind":"struct"},"1:9398:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"21:7991:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"20:131:2417":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"1:11050:3502":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:46178:3630":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"5:1168:31886":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"17:14189:20600":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:13606:20091":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:8003:2931":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:44775:9379":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"17:513:17090":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"21:15511:34299":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"21:13288:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"1:8503:2964":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"16:7168:16977":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"1:11909:8766":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"1:6853:3532":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"5:1531:3161":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:41820:170":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"16:872:33363":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"5:3661:2928":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:592:3108":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:11295:35214":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"5:1540:3162":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"6:5244:13980":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"2:45986:3624":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:15376:21373":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"11:1601:15904":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"27:11:35833":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"17:11915:17295":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"14:0:2611":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:40497:3131":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"21:10773:35214":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"5:4451:30810":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"1:4807:3391":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"2:2134:9247":{"crate_id":2,"path":["core","ptr","metadata","Thin"],"kind":"trait_alias"},"6:8282:14192":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"17:12621:17357":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:2609:9235":{"crate_id":2,"path":["core","ptr","with_exposed_provenance"],"kind":"function"},"1:4487:3425":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"5:5426:30811":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"6:5671:14028":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"30:144:21725":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"17:13272:20068":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11936:15945":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"1:8523:2869":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:11812:17249":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"2:46429:28774":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:1922:3230":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"6:5557:14016":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"6:5225:13978":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:9672:35214":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"2:44496:8900":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"21:15035:32846":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"4:0:2605":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"17:13187:20064":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"1:3438:3339":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:3204:8782":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:5436:14003":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"2:42341:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"21:15166:3019":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"1:8731:3480":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"6:5581:14018":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"17:4821:17358":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"21:10376:2796":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"2:46074:3595":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:6799:3527":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:40810:2875":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:11113:23559":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"16:2303:15958":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"30:905:21720":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"16:6940:32986":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:758:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"21:14604:3006":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"27:72:21700":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"21:12383:2817":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"21:14134:2953":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"24:15:21631":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:13029:8888":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:5102:13967":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:44390:8896":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"16:7006:16972":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:10720:33567":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"21:12206:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"30:1526:21607":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"2:10825:30115":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"14:220:15922":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"21:15523:34331":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"2:46231:3590":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"2:12732:9367":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"2:2342:8790":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"2:47183:8749":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"2:22223:3574":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:5089:3447":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"21:14083:2951":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"21:6583:34297":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"6:5344:13993":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:7509:16982":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"17:14560:20625":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"21:14289:2935":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"17:10710:17108":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"1:2469:3277":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:5286:30211":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"2:10391:8798":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:15139:3016":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"21:13733:2827":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"17:1098:17146":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"17:12572:17109":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:8193:3290":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"17:11537:17198":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"27:146:220":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:7610:9171":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:15456:21382":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:4162:3159":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:12502:8868":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"21:57:2425":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"2:12716:9365":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:14145:2954":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"16:7799:17000":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:3401:8787":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"2:44710:9361":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:42108:2928":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:40944:9176":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:5160:13972":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:559:9987":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:8494:2962":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:10962:2890":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"2:46668:3658":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5290:13986":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"16:7813:17001":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"2:41079:2892":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:11063:17153":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"6:5112:13968":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:8884:3486":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"11:488:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:23116:3296":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"1:9219:3540":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:3297:22966":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"30:1486:35883":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"16:6991:33007":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:42813:8806":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:11698:22332":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"14:202:8905":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"28:0:2759":{"crate_id":28,"path":["slab"],"kind":"module"},"5:7617:3252":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:7306:10028":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"21:6338:186":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"17:10185:17068":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"30:1432:21592":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"21:14844:35214":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"21:13685:2931":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"16:4424:16515":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:44884:29206":{"crate_id":2,"path":["core","future","async_drop","Noop"],"kind":"struct"},"20:143:21628":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"2:2972:257":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"16:3029:16017":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"2:12656:9366":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"21:9002:2838":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"17:15342:21370":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:10384:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:8333:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"6:1517:10878":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"1:4211:3393":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:4008:3364":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:5602:3492":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"25:9:2405":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"21:15019:3013":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"21:13941:35214":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"5:6782:30811":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:15390:21375":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:42616:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"30:1204:21717":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"1:11673:22347":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"6:7467:15155":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"21:11247:35214":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"1:9288:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"18:80:21590":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"16:6574:16955":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"21:14396:35214":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"21:8339:2813":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"1:12361:893":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:21726:29417":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:11865:17294":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:6471:14716":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:2548:15997":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"21:5264:1176":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"21:9907:35214":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:1585:10885":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:2146:29159":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:9270:3521":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"11:1907:3177":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:3597:17276":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"21:5875:3309":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"6:1707:10896":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"5:4938:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:42020:3356":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:12949:17121":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:4802:16640":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:15324:21368":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"13:0:2604":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:11743:17241":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:9329:22243":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:14847:21336":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"5:0:309":{"crate_id":5,"path":["alloc"],"kind":"module"},"6:1686:10894":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"5:3292:3176":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"21:7777:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:14012:20589":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"21:15198:3022":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"5:3050:30243":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"11:1105:15900":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"1:10500:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:34471:9214":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"17:3264:17253":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"2:13709:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"2:22846:28624":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"17:10419:17065":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"1:4925:3405":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:43889:8846":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"21:14863:3010":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"16:2592:15999":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"5:7456:3160":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"16:5769:16918":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:10251:17100":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"16:7559:16986":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:9632:35214":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"6:4985:13956":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"17:3473:17258":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"16:6782:16963":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:23037:28610":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:33539:3569":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"30:1233:21720":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"1:8013:3112":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"1:6678:2932":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"1:928:2951":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"6:8328:14198":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:13620:2795":{"crate_id":2,"path":["core","future","async_drop","Fuse"],"kind":"struct"},"30:1519:21616":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"1:1620:3163":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"9:238:3481":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"1:9184:3160":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:32372:9185":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"6:5636:14024":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"31:0:2457":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"2:44694:9359":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"16:3196:16018":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"21:10345:35214":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"10:0:2608":{"crate_id":10,"path":["adler"],"kind":"module"},"21:9450:35214":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"2:44698:9358":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"5:3805:3012":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"5:4436:265":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:23064:29200":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"1:3340:3340":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:938:3163":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:6435:14712":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"16:6480:16949":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"27:481:3481":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"2:22964:28654":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:15356:21371":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"14:165:15913":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:4561:3417":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:6037:3144":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"5:7675:8907":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"2:1827:9117":{"crate_id":2,"path":["core","intrinsics","AggregateRawPtr"],"kind":"trait"},"9:482:15776":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:3701:8786":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"16:6456:16947":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"11:1914:3178":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:22448:3709":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"21:14657:3007":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"17:15151:21353":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"17:12043:17254":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:5756:16917":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:5289:23701":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:16151:21570":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"5:3410:3163":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:21817:3578":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"6:5329:13991":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"6:6460:14715":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"30:989:21609":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"21:11366:2885":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"6:5382:13998":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"5:680:30457":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"16:5075:16706":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"17:11115:17142":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"30:1154:21719":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"17:10092:17099":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"6:7389:11018":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:11026:17133":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:12089:17252":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"2:22621:3715":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"17:15769:21401":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:1340:3174":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:23175:28775":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"18:598:21730":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:44236:8878":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"16:7618:16991":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:10759:9330":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"17:13553:20087":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:8485:2405":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"2:11214:3159":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"17:10317:17102":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:44375:8895":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"2:42806:8805":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:10652:23568":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"18:0:2615":{"crate_id":18,"path":["memchr"],"kind":"module"},"11:1884:3160":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:1089:3173":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"14:40:20066":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:22554:3296":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"2:44599:8886":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"17:15126:21351":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"2:43787:8843":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"16:5415:33327":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"21:14020:21633":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"17:14025:20590":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"21:13047:2913":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"21:7815:2821":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"18:754:21613":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"17:12808:17074":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"16:6665:16961":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:15313:21367":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"1:7950:23563":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"2:44264:8865":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"5:5470:2871":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"0:46:1988":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"5:1441:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:3393:3342":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"6:5046:13963":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"16:2728:16005":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"17:10982:17130":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"21:10139:2897":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:40684:3268":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"21:14925:3011":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"1:9234:3538":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"21:14040:3160":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"1:5965:3520":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"21:9401:35214":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"1:680:3137":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:40801:2874":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:40600:8979":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:44947:3718":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"17:16249:21578":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"21:331:3105":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"2:13907:3717":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:11365:3271":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"2:0:563":{"crate_id":2,"path":["core"],"kind":"module"},"30:1212:21718":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"2:2037:9148":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"21:13575:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"2:44226:3015":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"21:7636:2818":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"2:40895:9177":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"5:7432:3196":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"2:47086:3659":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13116:17393":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"21:14991:3012":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"30:1011:21729":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"2:41279:29210":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"21:8034:2810":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"2:4794:8958":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"21:8278:2814":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"2:44955:3719":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"1:8242:3158":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"2:47240:8754":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"21:14752:2869":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"5:40:3208":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"31:102:2463":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"5:2127:3195":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:40721:8827":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:10932:3290":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:5654:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:8655:3451":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"21:9799:35214":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"6:1699:10895":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"6:4979:13955":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"16:8175:17011":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"2:40393:3131":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"21:5675:2931":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"21:11704:35214":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:34298:9212":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"9:53:15796":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"5:4322:2928":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"30:1460:35880":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"6:4870:13942":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"21:14089:2952":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"17:15010:21345":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"2:46091:3601":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:8188:3293":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"1:12313:22216":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"15:288:15936":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"6:1510:10877":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"17:13015:17079":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"6:5546:14015":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"5:7422:3183":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"16:5006:16683":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"21:15321:34333":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"2:23208:28769":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"2:41293:2932":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:12358:756":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:44404:8897":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"17:11661:17207":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"21:11840:2804":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"2:46412:28771":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:10822:35214":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:10358:23433":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"2:8295:165":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:10952:3294":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"21:925:2837":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"17:16198:21574":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"1:2322:2995":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:36347:9215":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:39626:3206":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"2:3432:2754":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"21:8831:35214":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:9592:35214":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"21:12982:2926":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"6:5489:14010":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"1:432:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"5:1493:3159":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"6:7348:15150":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"6:6447:14714":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"2:11045:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"21:14001:21632":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"21:8532:2822":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"1:12297:23709":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"2:40833:2795":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:43931:8874":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:4927:3406":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"17:13922:20583":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:6427:16944":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"2:42799:8798":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:44686:9354":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"16:6300:16937":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:5686:16913":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"1:9430:3530":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"1:1098:3174":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:8778:35214":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:15:2724":{"crate_id":2,"path":["core","write"],"kind":"macro"},"1:2076:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:14325:20609":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"21:11543:34590":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"16:6047:16930":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:8750:149":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"5:3251:2928":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"17:12030:17256":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:15556:34325":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"2:3457:141":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"21:13536:2907":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"6:4824:13939":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:13946:20584":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"30:1141:21718":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"17:14876:21339":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:43948:8870":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"5:1549:3164":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"21:9131:2844":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"20:82:2748":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"21:7290:35214":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:2302:30420":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:4531:16553":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:13972:20586":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:44714:9355":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"18:718:21604":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"11:123:32890":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"5:7500:3160":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"21:11802:35214":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"16:4718:16625":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"6:4885:13944":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"21:13714:35214":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"17:12851:17116":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12454:17344":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"2:40772:9173":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:6491:14673":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:11189:17145":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:1570:3166":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"6:5466:14006":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"17:11293:17170":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:13399:20076":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"17:15400:21376":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:12584:17110":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"21:13835:2934":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"21:9309:35214":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:23230:28735":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"30:1541:21608":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"2:21799:3577":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"1:9168:2928":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"14:214:15921":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"5:3674:3159":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:5653:14026":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"17:15701:21396":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:14131:20597":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"16:2936:16014":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:12433:17079":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"1:9731:23436":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:12976:8861":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:4504:8948":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"21:11052:35214":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"2:46784:3592":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"21:7917:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:6606:16957":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"21:15256:35214":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"5:1077:30811":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"17:14246:20603":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"11:102:32896":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:42042:3357":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:47331:8759":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:949:3165":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"1:9147:3501":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"6:6689:14733":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:41308:2929":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:11214:17140":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"21:10078:2868":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"11:1920:3179":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"1:6461:3534":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"2:44533:8901":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"30:1077:21719":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"6:1723:10897":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"1:3610:2963":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:11354:17182":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:8636:3419":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"16:5802:16920":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"1:5112:3449":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:16176:21572":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"2:42205:2755":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"1:2483:3281":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:656:3133":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:39788:9223":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:2528:15996":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"18:635:21733":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"11:1674:32894":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:13959:20585":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"21:10988:35214":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"17:11089:17144":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:15417:34291":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"5:5234:3517":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"5:6700:3160":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"21:14011:3159":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"1:2719:23560":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:23071:3369":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"5:7652:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:12557:17149":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"9:0:2607":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:12863:17117":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:12513:2911":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"17:10284:17101":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:6802:15930":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:11647:17236":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"6:7330:9858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:150:15963":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"21:15308:21646":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"21:15187:3021":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"1:5588:3491":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"30:1003:21610":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"2:40613:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:335:34460":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"2:43353:28681":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:11557:17233":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"2:40842:2796":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"17:12300:17339":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:1107:3175":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:15624:21391":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"2:44968:29965":{"crate_id":2,"path":["core","task","wake","ExtData"],"kind":"enum"},"17:14489:20620":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"17:13753:20575":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"17:15944:20065":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:6714:14736":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:6263:33294":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"21:587:2398":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"17:14723:21333":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:12961:8860":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:11636:22320":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"2:22354:3296":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"21:15209:3023":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"21:13008:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"17:11443:17186":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"11:1023:3173":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:14739:35214":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"2:44289:8876":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:1291:2399":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"21:11488:2899":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:12422:17343":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:44906:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"11:328:32889":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:22196:3296":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"21:8120:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:986:3171":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:7729:22245":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:10723:3340":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"17:2203:17179":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:9232:35214":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"5:743:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"21:14347:2958":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"17:15168:21354":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:9167:35214":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"18:573:2897":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:15931:20064":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"1:8084:3232":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"17:10068:17077":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:4913:8962":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"2:38388:9219":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"2:23002:28644":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"6:465:9975":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:10857:29394":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"2:31099:9004":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:15814:21404":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:42060:3358":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:12597:17359":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:42497:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"2:43146:8796":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"17:12900:17119":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:6199:2416":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"2:44989:180":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7014:16973":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"2:44892:164":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:32843:9204":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:5366:979":{"crate_id":2,"path":["core","iter"],"kind":"module"},"1:2635:3006":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"5:6975:8930":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"10:44:15887":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"31:100:2462":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"2:10397:8806":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:23022:28591":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:542:32974":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:23095:3383":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:4109:3386":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"16:7823:17002":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"2:46199:3636":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:6813:16964":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:2965:144":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"5:3820:3194":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:30725:28573":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"6:5423:14002":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:47136:3644":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"18:659:21607":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:5212:2424":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"2:32312:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"2:32296:8959":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"2:43322:3304":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:3828:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"30:960:21609":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"16:7132:33284":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:11487:8851":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:42536:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"6:491:9979":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"21:15157:3018":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"11:2301:3172":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:46024:3635":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:4830:16645":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:42694:3518":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"21:15469:34292":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"21:3786:2403":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"1:373:3126":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:3206:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:42261:3159":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:11567:17234":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"2:4721:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"17:15748:21399":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"2:22666:3296":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"18:623:21728":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"17:15138:21352":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"15:0:2612":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40512:8980":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"17:10534:33925":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:40629:9290":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:532:9983":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"21:6284:2903":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"1:2485:3282":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"2:21668:29412":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:14575:17079":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"11:1893:3163":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"27:487:21701":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"6:5134:13970":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:22930:28497":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:40885:2884":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"6:4992:13957":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"21:5171:2407":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"5:1324:3172":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10457:138":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:46689:28732":{"crate_id":2,"path":["core","core_arch","simd","m8x32"],"kind":"struct"},"16:7539:16984":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"1:5708:3495":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"21:6747:34295":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:10867:35214":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"21:6410:21647":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"27:0:2426":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"2:3489:3207":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"6:5181:13973":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"16:6976:16971":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"16:4743:16627":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:9857:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:2660:16002":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"5:7547:3155":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"6:1593:10886":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"2:46298:3608":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"6:5390:13999":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"21:9418:2870":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"6:0:1004":{"crate_id":6,"path":["libc"],"kind":"module"},"2:3673:8945":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:23263:28725":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"1:11921:23727":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"1:4817:22305":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"16:5722:16915":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:15418:21378":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:44889:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:8797:28487":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"21:13215:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"17:16138:21569":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"21:15177:3020":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"2:12693:9368":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"21:11180:35214":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"1:9420:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"25:0:2404":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"2:2956:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:14449:20617":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:47214:8752":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:12033:8839":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"16:6342:33374":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"30:1020:21730":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"2:22680:3705":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"21:12108:2811":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"1:11704:22280":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"6:5236:13979":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"24:296:35761":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"16:4882:16651":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:6934:35214":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:12770:8855":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:11769:23428":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"9:330:15833":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"21:8217:2811":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"21:8973:35214":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:21714:29419":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"18:515:21617":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2313:138":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:41335:9167":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:33267:9206":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"28:208:3174":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"16:5897:16925":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:5093:8973":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:43778:2895":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"9:178:15882":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"6:8351:15732":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:8078:3141":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:15992:21563":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"17:11764:17243":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"16:3329:16019":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:3925:16085":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"21:14117:35214":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"1:4223:3396":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:21797:3296":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"21:13908:2935":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"17:12107:17109":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"30:967:21610":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"11:809:3163":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:11755:17242":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"2:39680:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:884:3159":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"17:12225:17310":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:11653:3506":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"16:6433:16945":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:12508:17348":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:2708:16004":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"1:7881:17091":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:40440:28647":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:5515:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"5:6180:3309":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"5:2116:3194":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"16:4560:16559":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:33606:3571":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:12370:968":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"17:15249:21361":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"21:14191:35214":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"1:12346:471":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:7715:8991":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:902:3161":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"21:12758:34350":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"17:14271:20605":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"28:30:21705":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"6:8012:15533":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"2:6977:2960":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"17:2037:17185":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"17:13723:20573":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"21:10479:35214":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"1:10339:3223":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"2:10401:8803":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"30:1511:21618":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"1:9207:3537":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:23084:3368":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:5776:3496":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"1:8714:3461":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"2:43100:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"21:9369:2869":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"11:2551:32903":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:23219:28734":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"1:4325:3420":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"28:60:2951":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"21:15042:3014":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"17:10439:17104":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:15778:21402":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:7366:23012":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"6:538:9984":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8036:3111":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"17:11841:17292":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"1:11291:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"0:56:1340":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"1:11928:15945":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:6098:16933":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"18:608:21731":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:8401:2815":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"16:6494:16950":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"21:10229:35214":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:14475:20619":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11621:17208":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:8216:17014":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:11792:3363":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:11715:17239":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:10915:33918":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"5:7589:3251":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:10389:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"2:42164:3467":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:3342:3341":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"16:5831:16922":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:23153:28768":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"2:44740:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"30:1555:21609":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"18:765:21606":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"17:16105:21567":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:894:3160":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:44896:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"2:4860:8961":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"1:9160:3502":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"16:2508:15995":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"1:4821:22309":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"21:14156:2955":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"1:12366:1836":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"6:8253:14188":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:5400:14000":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"17:14341:20610":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"17:16079:21565":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"5:7472:30246":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"21:15438:34294":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"1:11238:9378":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"2:23197:28731":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"21:8750:2833":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:8242:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:42099:173":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"6:8306:14196":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"5:3222:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"17:13877:20581":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"2:12955:8864":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:33673:9208":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"16:8313:137":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"16:6504:16951":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:8247:9170":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:22530:3711":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"9:357:15793":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:43918:8877":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"30:1091:21721":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"16:8118:17008":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:10340:3027":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"17:13797:20576":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"1:12347:1876":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"17:13785:17297":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:2731:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"17:16259:20075":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"6:4800:13937":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"21:15372:2852":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"17:12408:17333":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"5:2249:30333":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"21:12942:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"5:5081:3309":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:6796:3526":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"21:10508:2876":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"1:8350:22244":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"27:124:21684":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:43108:8794":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:22793:28648":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"16:6335:16939":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"6:8006:15532":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:11107:23525":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"2:42253:2928":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:7098:33343":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:45954:3588":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:11321:22342":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:4694:3429":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"6:5277:13984":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:13965":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"1:5258:23701":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"16:6588:16956":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"1:5447:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:5260:13982":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"24:135:2792":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"2:11515:8852":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"2:4725:8950":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:11605:17230":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:7575:15161":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:13766:17298":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:4406:3424":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"21:11344:35214":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"1:1609:2928":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"21:8795:2834":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"21:4954:2957":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"21:7080:2797":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"1:9474:3567":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"2:43361:28682":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"6:5002:13958":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"21:6377:21649":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"21:14633:35214":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"5:843:2883":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:46861:3626":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:7602:15163":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"17:10350:17103":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:7686:16994":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:2155:9245":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:12373:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"1:9411:3309":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"21:9555:35214":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"6:5515:14012":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"17:11877:17250":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:32403:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"17:15266:21362":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"21:13116:2918":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:12970:8862":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5052:13964":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"2:10403:8804":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:6240:2428":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"11:434:32905":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"6:7412:11003":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"28:55:3159":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"21:9763:2875":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"5:6573:2951":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:4651:8819":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"2:47370:8760":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:3460:142":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"5:6421:3721":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"11:299:32878":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"17:15289:21365":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:2611:9236":{"crate_id":2,"path":["core","ptr","with_exposed_provenance_mut"],"kind":"function"},"17:14788:21335":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:41858:3354":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:16069:21564":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"5:1355:3173":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:10702:2883":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"5:939:3181":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:3395:3343":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"13:229:32910":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:6183:3534":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"21:11439:2898":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"1:527:3100":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:6788:32214":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"1:12369:1830":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"17:16187:21573":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"21:8896:35214":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:10877:17111":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"16:2998:16015":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"1:8857:3484":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"5:219:8793":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:4876:13943":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:39658:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"2:21697:29414":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"17:15301:21366":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"2:44094:8851":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:47115:3610":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:6154:2876":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"11:708:3165":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"5:2770:30417":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"1:2003:3244":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"30:1468:21613":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"16:3842:16048":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"2:21746:3582":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"6:5283:13985":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:7446:15152":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"27:368:220":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"1:5958:3519":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7633:33063":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"17:12289:17303":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"21:6982:35214":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:7484:27206":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:2768:16007":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"17:14066:20593":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"1:11853:3364":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:40478:8987":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"16:8188:17012":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:46053:3589":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11634:17206":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:46106:3607":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"5:1478:2928":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:13173:2916":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"1:10232:21921":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"11:2420:3160":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:4909:13946":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"21:6566:34503":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"17:13473:20081":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:6542:14721":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:42458:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12711:137":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"16:2338:15987":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"17:0:2614":{"crate_id":17,"path":["object"],"kind":"module"},"6:4916:13947":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:12074:8835":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"6:4891:13776":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"2:44076:8853":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"30:1397:34161":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"21:14065:3160":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"2:30714:8794":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"17:10155:16911":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:5367:16910":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:30699:9139":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:40920:2887":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:3342:9213":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:3246:9182":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:12929:17120":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"6:1680:10893":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"2:42080:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"17:10612:17106":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"6:7314:10832":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"18:680:21609":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:4976:16676":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:14752:21334":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"1:10729:3338":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"1:11230:27212":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"11:2559:32899":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:8553:3015":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:15445:21381":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"1:1625:3176":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:3648:182":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:10962:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"1:3903:3363":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:13526:20085":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"1:4672:3428":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:44914:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:5844:3534":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"16:6895:16967":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:42196:9304":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"21:13636:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"21:14430:2959":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"17:11467:17184":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"6:7516:15157":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:4804:8959":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"1:8533:2890":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"2:13864:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:6721:14737":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"21:4503:2937":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"1:9283:22233":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:10399:3324":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"1:3592:3016":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:11501:8854":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"30:995:21609":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"30:1387:21615":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:12350:335":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"11:2366:15905":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"1:3658:27897":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:2612:16000":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"6:8029:15534":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"17:13568:20088":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"17:9858:17093":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"2:22986:28577":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:23241:28767":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"5:734:250":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:9438:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"5:7734:3163":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:4462:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"21:7325:2800":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"6:497:9980":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"16:6648:16960":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:22713:3704":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"1:2541:2429":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:10358:143":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:8210:3291":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"18:113:21592":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8570:3352":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"16:7656:16993":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"21:10204:2897":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"21:6823:2795":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"21:13400:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"17:10759:17109":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:7306:33288":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:12372:1421":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"21:12899:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"1:3065:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"6:5472:14007":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"21:12798:33372":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"17:11324:17197":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:2709:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"6:6678:14732":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:9190:3539":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4959:13952":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"21:1087:2847":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"17:13173:17395":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"16:6160:15957":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"17:10170:16912":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"2:46630:3603":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"6:4787:13936":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:41902:28815":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:11153:17110":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"24:12:21629":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"17:403:17089":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"8:0:2606":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:2315:3273":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:14311:20608":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"17:12127:17259":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"17:10218:17069":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"1:9249:3541":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"1:9117:3499":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:46039:3641":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:8559:3361":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"21:7419:2804":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"17:14587:20626":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"5:4117:30811":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"17:14599:20627":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:44421:8898":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"26:0:2758":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"6:5528:14013":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:21695:29408":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:13691:2932":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"1:11095:23576":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:6056:2903":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"17:15760:21400":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"1:9456:3299":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:5168:3457":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"21:13462:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"1:10922:22426":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"5:7392:3160":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"21:9010:2839":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"17:437:15960":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:6417:14711":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:5265:435":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"6:6874:14773":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"27:495:21702":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"18:735:21605":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"18:726:21612":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"16:6962:16970":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"18:643:2897":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:4771:16632":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"1:4139:3388":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:10426:3505":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:7780:28659":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:43306:3302":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"5:7558:3156":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"2:45922:3623":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"21:104:850":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"1:6867:3533":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"2:33740:9207":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:10927:22328":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:7144:16976":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"2:43797:8841":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"16:4587:16563":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:6609:14724":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:13412:20077":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:4932:13949":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:12365:1854":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"6:1580:10884":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"30:974:153":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"11:1085:32909":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"17:15635:21392":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"21:5251:21644":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"21:9606:2873":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"17:14529:20623":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"5:6440:3722":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"6:6650:14728":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:1496:10875":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"31:109:2460":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"1:12364:886":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"21:11209:2894":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"5:7114:30813":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40551:8981":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"17:13774:17296":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"30:1133:21717":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"2:46601:3597":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"5:6965:8929":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:32278:27333":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"21:15499:34316":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"1:8271:3012":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"2:42174:3143":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"5:7400:3182":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"6:6532:14720":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"21:13727:205":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"30:1565:21610":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:4167:3391":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"11:396:32887":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:13887:3720":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:4897:13945":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"1:8622:3416":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"17:14977:21343":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"21:7155:35214":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:15230:2890":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"21:15148:3017":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:30661:3190":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:41093:2894":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"21:7462:2805":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"17:15410:21377":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:40455:8984":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:6922:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:7429:11001":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:46330:3663":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"6:7359:15151":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"16:7580:16988":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:44246:8867":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"5:7066:264":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"17:14079:20594":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:47278:8756":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"21:6914:2794":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"21:7661:35214":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:13855:20580":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:6670:14731":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"2:38967:9220":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:43565:8830":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"7:0:1904":{"crate_id":7,"path":["unwind"],"kind":"module"},"1:4161:3390":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"21:12824:2909":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"2:39630:9221":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"2:40763:9172":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"21:4353:34935":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"27:181:21689":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"21:6770:2419":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:40429:8985":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:13738:20574":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"2:7831:9160":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"6:6657:14729":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"18:581:9004":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"30:943:21609":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"17:11269:17169":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:2467:3276":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"6:6729:14738":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:0:1716":{"crate_id":1,"path":["std"],"kind":"module"},"2:2801:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"30:1254:21722":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"2:8386:2968":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:30693:8924":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:4068:3160":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"11:842:3168":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"2:40750:2869":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:1671:10892":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"2:39698:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:6278:16936":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"21:400:23576":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"16:7111:33283":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"10:36:32877":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"11:854:3169":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:8867:2928":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"7:32:15748":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:7546:15159":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"1:963:3168":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:974:3169":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7769:16999":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:13999:3184":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:5817:16921":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:44271:8875":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:23186:28726":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"21:12419:35214":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"29:17:2410":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"17:12543:17353":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":29}