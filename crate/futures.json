{"root":"0:0:1755","crate_version":"0.3.25","includes_private":false,"index":{"2:11443:61573":{"id":"2:11443:61573","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:46:1565":{"id":"0:46:1565","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:1721","`LocalPool`":"31:120:1727"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:48","0:49","0:50","0:51","0:52","0:53","0:54","0:55"],"is_stripped":false}},"2:11360:5887":{"id":"2:11360:5887","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"2:49998:6116","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11351:57387":{"id":"2:11351:57387","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:81":{"id":"0:81","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:5978:1676","glob":false}},"2:11340:61554":{"id":"2:11340:61554","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:11338:61553"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5121:62214":{"id":"5:5121:62214","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:286:2284","`String`":"5:6994:221"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2284","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6739:5510","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11387:57418":{"id":"2:11387:57418","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"2:10860:5537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:28":{"id":"0:28","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:1681","glob":false}},"2:11334":{"id":"2:11334","crate_id":2,"name":null,"span":null,"visibility":{"restricted":{"parent":"2:10599:1352","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["2:11335:789","2:11336:55231","2:11337:61552","2:11338:61553","2:11340:61554","2:11343:57265","2:11344:61555","2:11345:309","2:11346:57389","2:11347:57385","2:11349:57386","2:11351:57387","2:11353:57388","2:11355:61556","2:11356:61557","2:11357:57409","2:11358:57410","2:11359:6152","2:11360:5887","2:11361:2353","2:11362:59465","2:11363:59484","2:11364:2306","2:11365:61558","2:11366:59499","2:11367:57426","2:11370:57427","2:11373:57428","2:11376:4252","2:11380:7242","2:11384:2315","2:11387:57418","2:11390:57420","2:11393:61559","2:11396:61560","2:11399:57422","2:11402:57424","2:11405:61561","2:11408:61562","2:11411:1968","2:11414:61563","2:11417:61564","2:11420:61565","2:11423:61566","2:11425:61567","2:11427:61568","2:11429:61569","2:11430:61570","2:11431:61571","2:11434:61572","2:11437:55063","2:11440:57429","2:11443:61573","2:11446:61574","2:11449:61575","2:11452:5972","2:11454:6315","2:11455:54497","2:11456:54498","2:11457:54499","2:11458:61576","2:11460:5346","2:11461:61577"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:69":{"id":"0:69","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::FutureExt","name":"_","id":"21:417:1660","glob":false}},"0:19":{"id":"0:19","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:1673","glob":false}},"5:5106:3546":{"id":"5:5106:3546","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11456:54498":{"id":"2:11456:54498","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11434:61572":{"id":"2:11434:61572","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:74":{"id":"0:74","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3567:1666","glob":false}},"0:25":{"id":"0:25","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:5973:1678","glob":false}},"2:11402:57424":{"id":"2:11402:57424","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"str::splitn":"2:11399:57422","prim@char":"1:12300:408","self::pattern":"2:11036:5856"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"2:50144:5533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11367:57426":{"id":"2:11367:57426","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:76":{"id":"0:76","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1672","glob":false}},"2:11427:61568":{"id":"2:11427:61568","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11455:54497":{"id":"2:11455:54497","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:67":{"id":"0:67","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:1664","glob":false}},"2:11431:61571":{"id":"2:11431:61571","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11036:5856"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:11061:5860","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11346:57389":{"id":"2:11346:57389","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12317:1448"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11399:57422":{"id":"2:11399:57422","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408","str::rsplitn":"2:11402:57424"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"2:50126:5535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:70":{"id":"0:70","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFutureExt","name":"_","id":"21:582:1661","glob":false}},"0:63":{"id":"0:63","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:1668","glob":false}},"2:11452:5972":{"id":"2:11452:5972","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"`FromStr`":"2:10997:5618","FromStr::Err":"2:10998:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"2:48198:207","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"2:10997:5618","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:10997:5618","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11347:57385":{"id":"2:11347:57385","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:48056:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11349:57386":{"id":"2:11349:57386","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:48056:176"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:66":{"id":"0:66","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:1663","glob":false}},"0:8":{"id":"0:8","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:582:1661","glob":false}},"5:5112:62212":{"id":"5:5112:62212","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11411:1968":{"id":"2:11411:1968","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"prim@char":"1:12300:408","`DoubleEndedIterator`":"2:7079:120","self::pattern":"2:11036:5856","str::matches":"2:11411:1968"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"2:50226:6127","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11337:61552":{"id":"2:11337:61552","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:73":{"id":"0:73","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::stream::StreamExt","name":"_","id":"21:2727:1665","glob":false}},"2:11405:61561":{"id":"2:11405:61561","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:15":{"id":"0:15","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:1668","glob":false}},"5:5109:62211":{"id":"5:5109:62211","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11363:59484":{"id":"2:11363:59484","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:11362:59465"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"2:50305:6131","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11425:61567":{"id":"2:11425:61567","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11366:59499":{"id":"2:11366:59499","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"2:50314:6132","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:13":{"id":"0:13","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2727:1665","glob":false}},"2:11458:61576":{"id":"2:11458:61576","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4467:61576"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"2:50321:6133","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:34":{"id":"0:34","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6522:1685","glob":false}},"2:11343:57265":{"id":"2:11343:57265","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:10604:6273"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11380:7242":{"id":"2:11380:7242","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"prim@char":"1:12300:408","`None`":"2:48056:176","self::pattern":"2:11036:5856"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11420:61565":{"id":"2:11420:61565","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"2:7079:120","str::match_indices":"2:11417:61564","prim@char":"1:12300:408","self::pattern":"2:11036:5856"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"2:50190:6125","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11359:6152":{"id":"2:11359:6152","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"2:49992:6115","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:48":{"id":"0:48","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:1721","glob":false}},"0:10":{"id":"0:10","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:1663","glob":false}},"0:50":{"id":"0:50","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::enter","name":"enter","id":"31:109:1723","glob":false}},"0:77":{"id":"0:77","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:1673","glob":false}},"2:11376:4252":{"id":"2:11376:4252","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"prim@char":"1:12300:408","`None`":"2:48056:176","self::pattern":"2:11036:5856"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11373:57428":{"id":"2:11373:57428","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:56:1036":{"id":"0:56:1036","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:58","0:59","0:60","0:62","0:63","0:65","0:66","0:67","0:69","0:70","0:71","0:73","0:74","0:76","0:77","0:78","0:79","0:81","0:82","0:83","0:84"],"is_stripped":false}},"5:5122:2132":{"id":"5:5122:2132","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11457:54499":{"id":"2:11457:54499","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11353:57388":{"id":"2:11353:57388","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:9138:219","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:37":{"id":"0:37","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future","name":"future","id":"21:104:684","glob":false}},"0:51":{"id":"0:51","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:1724","glob":false}},"2:11361:2353":{"id":"2:11361:2353","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"2:50008:3543","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11396:61560":{"id":"2:11396:61560","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"str::split":"2:11384:2315","prim@char":"1:12300:408","str::split_terminator":"2:11393:61559","self::pattern":"2:11036:5856"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"2:50090:6121","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:84":{"id":"0:84","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:5960:1679","glob":false}},"2:11356:61557":{"id":"2:11356:61557","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"2:2991:4738","str::slice_unchecked":"2:11355:61556","`str`":"1:12306:1352"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:43":{"id":"0:43","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_channel","name":"channel","id":"27:0:1689","glob":false}},"0:18":{"id":"0:18","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:1672","glob":false}},"2:11461:61577":{"id":"2:11461:61577","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4465:61577"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"2:50339:6134","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:78":{"id":"0:78","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:1674","glob":false}},"0:11":{"id":"0:11","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:1664","glob":false}},"2:11393:61559":{"id":"2:11393:61559","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"str::split":"2:11384:2315","`DoubleEndedIterator`":"2:7079:120","prim@char":"1:12300:408","self::pattern":"2:11036:5856","str::rsplit_terminator":"2:11396:61560"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"2:50072:6120","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:33":{"id":"0:33","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::poll","name":"poll","id":"21:20:1019","glob":false}},"2:11446:61574":{"id":"2:11446:61574","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:35":{"id":"0:35","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::try_join","name":"try_join","id":"21:6521:1686","glob":false}},"2:11345:309":{"id":"2:11345:309","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:11346:57389","`u8`":"1:12317:1448"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11437:55063":{"id":"2:11437:55063","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11036:5856"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7":{"id":"0:7","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:417:1660","glob":false}},"0:32":{"id":"0:32","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::pending","name":"pending","id":"21:37:1684","glob":false}},"2:11460:5346":{"id":"2:11460:5346","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4468:5346"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"2:50330:5347","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11336:55231":{"id":"2:11336:55231","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11384:2315":{"id":"2:11384:2315","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:11036:5856","`DoubleEndedIterator`":"2:7079:120","str::rsplit":"2:11390:57420","str::split_whitespace":"2:11362:59465","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"2:50022:3545","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:59":{"id":"0:59","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::Future","name":"Future","id":"2:11618:135","glob":false}},"0:21":{"id":"0:21","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:1675","glob":false}},"2:11357:57409":{"id":"2:11357:57409","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:11358:57410"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:41":{"id":"0:41","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::task","name":"task","id":"21:4980:1687","glob":false}},"0:31":{"id":"0:31","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::join","name":"join","id":"21:6520:1683","glob":false}},"5:5120:62213":{"id":"5:5120:62213","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:6994:221"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:79":{"id":"0:79","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:1675","glob":false}},"0:23":{"id":"0:23","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:5978:1676","glob":false}},"0:5":{"id":"0:5","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:1658","glob":false}},"0:44":{"id":"0:44","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::lock","name":"lock","id":"21:6001:1691","glob":false}},"2:11423:61566":{"id":"2:11423:61566","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:52":{"id":"0:52","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:1725","glob":false}},"0:27":{"id":"0:27","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_core::ready","name":"ready","id":"20:131:1680","glob":false}},"0:40":{"id":"0:40","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream","name":"stream","id":"21:1277:1662","glob":false}},"0:54":{"id":"0:54","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:1727","glob":false}},"2:11335:789":{"id":"2:11335:789","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12300:408"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5124:54496":{"id":"5:5124:54496","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:11457:54499"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"5:5104":{"id":"5:5104","crate_id":5,"name":null,"span":null,"visibility":{"restricted":{"parent":"5:5015:1352","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["5:5105:62210","5:5106:3546","5:5109:62211","5:5112:62212","5:5120:62213","5:5121:62214","5:5122:2132","5:5123:54495","5:5124:54496"],"negative":false,"synthetic":false,"blanket_impl":null}},"2:11338:61553":{"id":"2:11338:61553","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11430:61570":{"id":"2:11430:61570","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:42":{"id":"0:42","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:1688","glob":false}},"0:53":{"id":"0:53","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:1726","glob":false}},"2:11365:61558":{"id":"2:11365:61558","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"2:50286:6129","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:55":{"id":"0:55","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:1728","glob":false}},"0:60":{"id":"0:60","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:1658","glob":false}},"2:11449:61575":{"id":"2:11449:61575","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11362:59465":{"id":"2:11362:59465","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:11363:59484"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"2:50296:6130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11355:61556":{"id":"2:11355:61556","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12306:1352","crate::ops::Index":"2:2987:4737","str::slice_mut_unchecked":"2:11356:61557"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"5:5123:54495":{"id":"5:5123:54495","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:11456:54498"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"5:6994:221","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:38":{"id":"0:38","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::never","name":"never","id":"21:5032:912","glob":false}},"0:14":{"id":"0:14","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3567:1666","glob":false}},"2:11414:61563":{"id":"2:11414:61563","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"str::matches":"2:11411:1968","`DoubleEndedIterator`":"2:7079:120","self::pattern":"2:11036:5856","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"2:50244:6128","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:62":{"id":"0:62","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::sink","name":"sink","id":"21:4475:1669","glob":false}},"0:71":{"id":"0:71","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::sink::SinkExt","name":"_","id":"21:4939:1670","glob":false}},"0:65":{"id":"0:65","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::stream","name":"stream","id":"21:1277:1662","glob":false}},"2:11364:2306":{"id":"2:11364:2306","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"2:50276:2332","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11417:61564":{"id":"2:11417:61564","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408","str::rmatch_indices":"2:11420:61565","`DoubleEndedIterator`":"2:7079:120"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"2:50172:6124","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:0:1755":{"id":"0:0:1755","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::channel":"27:0:1689","crate::future":"21:104:684","crate::stream":"21:1277:1662","crate::sink":"21:4475:1669","crate::io":"21:5034:1692","crate::executor":"0:46:1565"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:46:1565","0:56:1036","0:4","0:5","0:7","0:8","0:10","0:11","0:13","0:14","0:15","0:16","0:18","0:19","0:20","0:21","0:23","0:24","0:25","0:26","0:27","0:28","0:29","0:31","0:32","0:33","0:33","0:34","0:35","0:37","0:38","0:39","0:40","0:41","0:42","0:43","0:44","0:45"],"is_stripped":false}},"2:11390:57420":{"id":"2:11390:57420","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"`DoubleEndedIterator`":"2:7079:120","self::pattern":"2:11036:5856","str::split":"2:11384:2315","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"2:50040:5531","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:58":{"id":"0:58","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"crate::future","name":"future","id":"21:104:684","glob":false}},"2:11454:6315":{"id":"2:11454:6315","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:45":{"id":"0:45","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::io","name":"io","id":"21:5034:1692","glob":false}},"2:11344:61555":{"id":"2:11344:61555","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:20":{"id":"0:20","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:1674","glob":false}},"2:11358:57410":{"id":"2:11358:57410","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:11357:57409"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11429:61569":{"id":"2:11429:61569","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:24":{"id":"0:24","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:5943:1677","glob":false}},"0:39":{"id":"0:39","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink","name":"sink","id":"21:4475:1669","glob":false}},"2:11408:61562":{"id":"2:11408:61562","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:26":{"id":"0:26","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:5960:1679","glob":false}},"0:49":{"id":"0:49","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:1722","glob":false}},"0:29":{"id":"0:29","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::select","name":"select","id":"21:6523:1682","glob":false}},"0:4":{"id":"0:4","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_core::future::Future","name":"Future","id":"2:11618:135","glob":false}},"0:16":{"id":"0:16","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:4939:1670","glob":false}},"2:11440:57429":{"id":"2:11440:57429","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12300:408","self::pattern":"2:11036:5856"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"2:48054:178","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:11056:5859","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:83":{"id":"0:83","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:5973:1678","glob":false}},"5:5105:62210":{"id":"5:5105:62210","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2284","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6739:5510","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"5:286:2284","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"5:6739:5510","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"2:11370:57427":{"id":"2:11370:57427","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"2:11036:5856","prim@char":"1:12300:408"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:11041:5855","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:82":{"id":"0:82","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"kind":"import","inner":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:5943:1677","glob":false}}},"paths":{"17:11661:51923":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"21:10072:2048":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"21:8031:2068":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"24:15:4204":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:21240:5974":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:4605:42801":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"6:5480:43428":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:10590:6311":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"5:5823:3817":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"16:7426:6859":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"18:548:140":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:14542:2332":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"2:50944:192":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"1:8217:5003":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"21:6520:1683":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"27:304:203":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"1:4904:54689":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"foreign_type"},"21:7970:2064":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"20:131:1680":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"31:125:1728":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"21:11530:64655":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"6:7249:42952":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"5:6333:6341":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"2:54156:20918":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:9764:47175":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"21:7339:2507":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"1:887:2193":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:4254:5396":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"21:13100:2196":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"21:14906:2497":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"9:505:6448":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"2:2672:223":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"21:14108:2324":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"18:531:7257":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:8055:7063":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:681:10232":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:11137:47692":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"2:39298:2609":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"17:10875:7132":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"2:50339:6134":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"6:6352:40364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:13168:53186":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:6042:2173":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"16:6210:6889":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"21:12885:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"1:8448:152":{"crate_id":1,"path":["std","net","ip_addr","IpAddr"],"kind":"enum"},"1:2612:3547":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"21:2727:1665":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"17:12850:52711":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"2:48241:2193":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:12280:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"6:4185:42757":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"21:11071:2168":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"1:6393:2386":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"2:21379:6184":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:9701:2149":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"30:648:7257":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"1:1123:5604":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:12999:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"2:50650:6216":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"5:2989:5376":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"16:7872:6851":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"2:50305:6131":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"21:12241:2179":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"21:14617:2336":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"21:13566:64655":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"2:5624:60981":{"crate_id":2,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"16:5374:6834":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:1518:40399":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"5:1396:5592":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"12:1852:5376":{"crate_id":12,"path":["hashbrown","set","Intersection"],"kind":"struct"},"21:6853:64655":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"31:109:1723":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"1:11682:56855":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"16:5219:45381":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"16:7093:6694":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"27:370:4957":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"1:8435:3545":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"1:11496:5659":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"21:7043:64655":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:5371:229":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"16:7452:195":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:47284:2160":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"13:108:63354":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"6:5782:43451":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"17:13393:53240":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"29:0:1671":{"crate_id":29,"path":["futures_io"],"kind":"module"},"2:52545:59797":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"6:608:39523":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:4745:42817":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"1:3232:3562":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"17:13024:53145":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"17:12781:52665":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"1:8379:2273":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:14780:2107":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"2:51029:5391":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:6782:5793":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"2:48130:4016":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"17:10420:7223":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"6:6277:40337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"20:92:5352":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"16:153:6704":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:2796:4722":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"21:14741:2345":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"16:2320:6708":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:52248:6033":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4247:42764":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"17:13221:53197":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"21:14486:5225":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"16:7343:6843":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"6:4300:42771":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:6576:2048":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"21:13427:4015":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"17:11315:47907":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"21:7450:2507":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"17:9362:7099":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"21:14869:64282":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"21:10051:64655":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"2:46519:4743":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"16:6496:6896":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:2445:2610":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:4574:45997":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"6:1714:40418":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:49330:5357":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"6:6329:13516":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"16:3188:45386":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"27:384:4924":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"12:1859:5377":{"crate_id":12,"path":["hashbrown","set","Difference"],"kind":"struct"},"21:6773:2051":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"21:7126:2055":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"2:49577:6313":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"21:7241:64655":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"16:2535:7004":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:20449:6007":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:54022:20908":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"27:443:4910":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"5:6739:5510":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"12:834:5598":{"crate_id":12,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"16:7211:6700":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:21329:59701":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"1:10756:5479":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"17:10642:7195":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"18:699:7247":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:8985:64655":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:13594:53323":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:21163:59453":{"crate_id":2,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"2:48122:4015":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"6:4335:42775":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"1:8422:2162":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"21:9220:2165":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"16:7956:6847":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:20021:61009":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"2:50126:5535":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:7805:58964":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:2248:128":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:47233:2156":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:47535:2197":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"17:12934:52781":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"27:475:4913":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"17:9930:47266":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"6:4286:42769":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"17:9831:7212":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"21:11048:64655":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"2:50987:2395":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"17:9700:7151":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"21:9010:2100":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"21:13061:4437":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"21:11300:64420":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"1:11112:54704":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"21:10129:2049":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"16:4385:45928":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"16:6567:6853":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"5:6304:6339":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"21:14295:64655":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"17:11684:51924":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:8093:5408":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"6:5541:43434":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"2:6610:2871":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:5845:2897":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"21:13532:2256":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"24:309:4608":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"2:1636:576":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:3263:45387":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"17:11199:47731":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:2490:132":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:0:1344":{"crate_id":1,"path":["std"],"kind":"module"},"6:7237:42950":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:11373:58966":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"1:11289:54992":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:11655:54473":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"29:27:1672":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"6:4361:42778":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:2670:5556":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:56972:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9485:55518":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"16:2825:7011":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:9071:63980":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:2822:4728":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:5763:5480":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"21:7208:2059":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"18:719:7248":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:1938:5712":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"24:9:4203":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"6:6953:39466":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"6:1541:40402":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"21:13232:2198":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"2:20870:60954":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"31:65:1721":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"21:13082:2194":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"2:6819:2135":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"21:13251:2199":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"21:12036:2067":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"30:726:64262":{"crate_id":30,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"5:3473:2329":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:3319:68":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"17:13492:53272":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"17:11259:47893":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"16:6743:6901":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"16:6719:7033":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"21:12564:2192":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"0:56:1036":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"16:6619:6899":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:12142:58846":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"18:515:7256":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"17:8774:7064":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"20:68:1663":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"30:707:59788":{"crate_id":30,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"21:12783:2185":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"5:6465:62466":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"18:636:64259":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:1828:11230":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"17:11186:47730":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"21:7389:2072":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"2:4317:6069":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:5163:6774":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"6:545:39514":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:46835:6297":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:2605:7057":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"21:14470:2330":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"2:29541:5615":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"2:49992:6115":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:47038:11767":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"17:9223:47112":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:3968:5987":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:7279:44428":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"6:135:39198":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"5:217:6391":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:1637:5379":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"21:9308:64655":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"2:46421:199":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"16:7511:6713":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:2843:4733":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:49851:5512":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:990:5598":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:53428:6055":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"2:4:983":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:8611:191":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:46821:5902":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:4706:42813":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"21:14750:2346":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"16:7603:6860":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"2:52416:6014":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"23:0:2001":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"17:11800:51990":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:2444:5352":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:5546:3945":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"2:50439:5864":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:11368:47923":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"1:12323:1501":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"18:766:7252":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"24:190:2046":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"5:782:2155":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"5:677:228":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"6:4698:42812":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"16:3010:7013":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:50518:5869":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"5:1415:5594":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"21:8297:2077":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"21:14420:64655":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"21:14951:2515":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"21:10594:2159":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"6:567:39517":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:46975:6200":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:5534:43433":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"1:7896:5302":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"2:57011:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:11585:58953":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:2564:115":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"30:638:7253":{"crate_id":30,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:50226:6127":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"21:11123:2157":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:50582:5871":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"21:7510:2073":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"2:20339:5908":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"21:13187:2092":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"1:960:5593":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:49084:109":{"crate_id":2,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"2:8599:111":{"crate_id":2,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"5:3542:5375":{"crate_id":5,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"3:223:207":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"2:53222:6035":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:5380:2148":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:21937:169":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"22:0:2000":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"21:0:1659":{"crate_id":21,"path":["futures_util"],"kind":"module"},"21:8649:64655":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:14:1971":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:1608:40409":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"1:6496:3914":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"1:9395:3933":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:2827:4730":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:49581:5513":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"21:4272:2202":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:51000:158":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:12148:52014":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"1:8694:5818":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:10204:2051":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"16:5996:6883":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"5:1060:6419":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"16:6359:6893":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:6886:214":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"17:13039:53147":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"4:0:1852":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"12:2080:5603":{"crate_id":12,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"17:13536:53281":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"1:359:5681":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:6545:43869":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"2:47167:59488":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:6137:58951":{"crate_id":1,"path":["std","sync","mpmc","array","Channel"],"kind":"struct"},"17:12198:52078":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"12:2198:63307":{"crate_id":12,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"6:560:39516":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"30:731:64253":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"17:386:47049":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:48190:190":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"6:4635:42805":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:12012:5339":{"crate_id":2,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"2:54004:6015":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"6:1707:5771":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:20706:15408":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"6:554:39515":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"21:13073:2193":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:2917:1996":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:50765:6141":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:1595:62442":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:3107:5375":{"crate_id":5,"path":["alloc","collections","btree","set","DrainFilter"],"kind":"struct"},"17:13327:53200":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"1:10860:3561":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"21:4980:1687":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"21:15008:4186":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:6975:64655":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:8639:5296":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:10257:47342":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"1:1114:5603":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:5692:43443":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"2:3199:4749":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"27:425:4908":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"2:3162:134":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"6:4629:42804":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"16:5460:6740":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"12:1832:2193":{"crate_id":12,"path":["hashbrown","set","Iter"],"kind":"struct"},"17:1021:7207":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"14:31:45306":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"17:10332:7229":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"1:8534:55687":{"crate_id":1,"path":["std","net","ip_addr","fmt","Span"],"kind":"struct"},"21:5973:1678":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"21:8056:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:2232:97":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"18:624:64258":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"24:296:64705":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"2:48367:81":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"2:46546:6714":{"crate_id":2,"path":["core","any","tags","Value"],"kind":"struct"},"16:8056:6712":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:7497:6840":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"21:13669:2261":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"1:3486:3530":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:13279:53199":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"2:21640:175":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"17:11034:47621":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"21:12147:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"21:8184:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:11576:51815":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:5574:119":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"17:11594:51859":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"6:4152:42755":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"2:11056:5859":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"2:52392:6013":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11515:51807":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:10123:5526":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"16:2509:7015":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"27:419:203":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:3157:230":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:13518:53279":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"5:3734:2256":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:10434:47367":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:50825:6228":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"5:6096:4016":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:944:2256":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"21:12856:2188":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"16:4888:46071":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"21:12937:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"16:4545:45992":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"2:2497:233":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"2:11262:111":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"21:9062:64655":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"5:2919:95":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"12:725:5591":{"crate_id":12,"path":["hashbrown","map","Keys"],"kind":"struct"},"21:2549:64335":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","InnerWaker"],"kind":"struct"},"5:1982:6422":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"21:12689:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"16:4662:46013":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"16:4441:45936":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:9031:64132":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"16:2300:7027":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:1632:5378":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"7:79:44530":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"21:14574:64655":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"16:7267:6903":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:3236:4750":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"17:12816:52668":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:7841:5855":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:10445:7189":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"17:10506:47343":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:2669:2276":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"17:9738:7155":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"21:9982:64655":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:11606:51915":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"1:4585:5776":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:3461:2344":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"12:300:6627":{"crate_id":12,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"2:46377:195":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"16:6284:6846":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"21:9171:2142":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"2:2784:4721":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"17:12337:7189":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"6:4797:42821":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"14:40:47508":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:8609:5442":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:21216:59806":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"2:21313:59730":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:2484:74":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"30:836:7248":{"crate_id":30,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"1:11144:118":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:54141:20917":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:4195:6062":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:12087:52010":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:47243:2895":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"27:11:64759":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"21:11705:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:51847:6052":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"21:21:1019":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"2:10604:6273":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:1695:40416":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"16:6472:6639":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:10426:11241":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"21:13845:64655":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"12:1836:4016":{"crate_id":12,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"17:12485:52554":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"16:3632:45415":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"6:4231:42762":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"18:538:7258":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"6:513:39511":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"12:659:4016":{"crate_id":12,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"21:10763:2164":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"21:6150:4975":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"17:9631:7082":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"21:329:3933":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"1:12299:912":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:8887:5635":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"16:2771:7010":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"21:20:1019":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"6:5741:43449":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"1:12307:1430":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"1:9450:6692":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"1:8613:5569":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV4"],"kind":"struct"},"17:8941:47060":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:8981:47061":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:8749:59805":{"crate_id":2,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"30:546:7254":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"17:10497:47371":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"17:9401:47128":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"1:2399:5727":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"6:4115:42752":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"12:1085:6622":{"crate_id":12,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"16:5963:191":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"21:10392:64655":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:9128:5352":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"17:11106:47690":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"6:575:39518":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:52102:6053":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"15:175:6641":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:48181:38754":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"17:13114:53157":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"17:9263:47114":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"16:7396:6910":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"1:12301:1464":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"21:7146:64655":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:4987:62463":{"crate_id":5,"path":["alloc","slice","insert_head","InsertionHole"],"kind":"struct"},"2:50749:6144":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"17:11070:47682":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:5660:5475":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"1:545:5699":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:5013:5418":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"1:996:5599":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"5:5526:69":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"1:4302:5399":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"16:7309:6907":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"21:11402:2753":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"21:10120:2161":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"1:8330:3564":{"crate_id":1,"path":["std","io","readbuf","BorrowedCursor"],"kind":"struct"},"17:10270:47341":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"1:9437:54974":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"17:12756:52662":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"16:5558:6748":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"25:9:1668":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"12:822:5597":{"crate_id":12,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:9322:109":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"21:11836:2064":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"1:12320:1447":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"5:1078:6420":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:49367:4915":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"2:8819:140":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"21:14732:2344":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"6:487:39507":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"16:7237:6701":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"18:671:7244":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:1105:5602":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"17:11247:47784":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"2:21252:5975":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:50402:5857":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"6:7166:44400":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"1:11533:5585":{"crate_id":1,"path":["std","sys","unix","time","inner","Instant"],"kind":"struct"},"16:7847:6912":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"21:6945:2054":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"21:13640:64655":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"16:7942:6914":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:8554:5813":{"crate_id":1,"path":["std","net","parser","AddrKind"],"kind":"enum"},"1:8625:5570":{"crate_id":1,"path":["std","net","socket_addr","SocketAddrV6"],"kind":"struct"},"12:751:2256":{"crate_id":12,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:6921:55036":{"crate_id":1,"path":["std","sync","rwlock","fmt","LockedPlaceholder"],"kind":"struct"},"16:6345:6839":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"6:1654:40412":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"1:7057:5671":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"2:9449:5538":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"2:46443:198":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"21:8920:64655":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:2652:2326":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"1:9225:5481":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"5:2955:5377":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"1:6709:5614":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"1:598:5668":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"2:49118:71":{"crate_id":2,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"2:2935:2280":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"6:5587:43436":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"27:412:4906":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"1:6217:3914":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"17:3249:7138":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"21:4043:2201":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"1:9526:215":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"17:11087:47689":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:12617:52558":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"6:4673:42810":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"5:6809:6359":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6241:6890":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"2:50607:5873":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"16:2389:6705":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"21:11559:2174":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"2:48249:4015":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"14:221:45314":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"1:4441:5822":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"2:49830:5521":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"2:11061:5860":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"17:11356:47922":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:13100:53155":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"1:12303:1017":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"21:10741:64655":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"2:49355:144":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:4532:201":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"1:7786:58968":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"5:3339:160":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"6:7266:42954":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"30:798:7245":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13148:53163":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"17:12291:52090":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"21:10015:2150":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"17:9118:63638":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"1:9302:5581":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:2768:4716":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"2:50276:2332":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"2:49051:70":{"crate_id":2,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"21:7195:64655":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"2:52962:6022":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"17:12630:52610":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"5:1954:6358":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"21:14023:2322":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"2:10860:5537":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"17:10774:7065":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"16:6137:6831":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"17:9293:7206":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"2:46845:6298":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:11164:57245":{"crate_id":1,"path":["std","sys","unix","kernel_copy","SpliceMode"],"kind":"enum"},"21:8503:2087":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"2:21184:5979":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:46784:31863":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"21:12908:2189":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"1:11384:58963":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"18:491:64263":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"21:8839:2097":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"21:13594:2259":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"17:2916:7126":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:6293:39389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"1:6233:203":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:8295:47053":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"17:9339:7204":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"18:690:7246":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"17:9371:47063":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:46605:5916":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:3192:3559":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"21:10480:64655":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:46560:5453":{"crate_id":2,"path":["core","any","tags","Ref"],"kind":"struct"},"16:5664:6753":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"6:4644:42806":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"17:10062:47253":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:2981:5378":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:5212:6339":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:5695:5477":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:46778:5347":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:54077:20913":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"18:644:2169":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:6330:6892":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"2:4086:6061":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:1737:6250":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"6:6322:43858":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"21:14055:2323":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"17:10321:7221":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"5:1359:4015":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"2:47528:59487":{"crate_id":2,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"5:2960:6355":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"21:11294:64417":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"2:29569:67":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:979:5597":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"21:336:2061":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"6:4737:42816":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:8822:63903":{"crate_id":17,"path":["object","read","any","FileInternal"],"kind":"enum"},"16:7329:6909":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:2987:4737":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:562:47051":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"18:609:64262":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:12498:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"17:10159:47256":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:52037:6009":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"21:7873:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:4268:5398":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"27:0:1689":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"1:5009:5410":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:6604:163":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"16:2894:7018":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"16:3854:45565":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"5:4949:2087":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"16:2465:7026":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"16:7483:6845":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"2:21673:172":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"21:5032:912":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"12:444:141":{"crate_id":12,"path":["hashbrown","map","HashMap"],"kind":"struct"},"6:1574:40405":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:25212:5854":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"21:6612:2051":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"2:50008:3543":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"21:23:2019":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"1:11688:56853":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:3174:4746":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:2026:182":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6059:7001":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"6:5713:43445":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:4627:3535":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"21:11648:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"1:12322:767":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"2:52200:6048":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"21:14827:2105":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"21:4475:1669":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:4272:5453":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:6270:6836":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:50936:208":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"21:13436:4206":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"2:48671:6210":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"21:14376:2328":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"1:719:10234":{"crate_id":1,"path":["std","backtrace","LazilyResolvedCapture"],"kind":"struct"},"26:53:64757":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"17:9283:47131":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:56998:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:7955:5605":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"21:12960:2190":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"2:20451:5908":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"6:5841:42665":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:7098:64655":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:13572:53287":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"21:5817:2173":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"2:8605:5440":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"1:9239:5482":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:20004:60951":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:29583:6193":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"5:4072:3535":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"1:8645:5760":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"1:10799:58957":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:1636:40410":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"21:14167:2326":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"1:1611:2256":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"21:8285:2076":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"17:9627:7095":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"2:8165:86":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:5541:6747":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"2:52370:6010":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:4262:5397":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"17:8441:7190":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:2758:4720":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"5:6883:5382":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"17:12349:52155":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:10139:7099":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:9691:7152":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"21:5759:1668":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"21:7172:2057":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"30:691:2169":{"crate_id":30,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"17:11559:51812":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:7135:6698":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"12:119:6628":{"crate_id":12,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"1:6079:5796":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"31:38:5297":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"1:6852:5755":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"21:6735:64655":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:14921:2517":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"17:8911:64197":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"2:21706:173":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"12:1840:2256":{"crate_id":12,"path":["hashbrown","set","Drain"],"kind":"struct"},"18:599:64247":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"2:46401:196":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"2:54126:20916":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"16:5761:6758":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"1:5348:55024":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:7945:5384":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"21:11568:2057":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"6:7220:42948":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:9892:2169":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"2:49751:6114":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:13456:4016":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"2:48198:207":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:38141:5338":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:50745:6145":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"20:142:4201":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"16:7278:6904":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:582:1661":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"2:11756:59632":{"crate_id":2,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"2:51815:6019":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"21:10496:2152":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"1:1476:143":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:2928:2278":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"17:13374:53238":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"2:1825:2651":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"21:10098:64655":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"21:6521:1686":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"9:709:4915":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:6070:6775":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:8272:7194":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"17:11343:47909":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:10532:127":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"5:870:2193":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:5064:5419":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"17:12211:52079":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:49033:67":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:47320:2164":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:7042:149":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"21:14681:2162":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:954:5375":{"crate_id":1,"path":["std","collections","hash","map","DrainFilter"],"kind":"struct"},"2:53072:6011":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"6:5510:43431":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"6:5625:43439":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"2:21391:6183":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"21:14759:4972":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"6:4239:42763":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"12:1866:5378":{"crate_id":12,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:13059:53151":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"16:7044:6693":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"1:11670:54470":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"21:6185:164":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"1:6441:54972":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"9:863:6458":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"21:9831:2754":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"5:6830:4016":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"17:13091:53154":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"1:8066:5678":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"21:12512:2191":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"5:2747:61116":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"2:4262:6068":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"21:7530:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9909:47250":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"2:11970:5388":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"9:622:6501":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLFlush"],"kind":"enum"},"17:9844:7213":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12265:52083":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:10752:7067":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"5:2948:2193":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:4274:42767":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"17:8212:7187":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"6:1505:40397":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:973:5596":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"1:9637:7751":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"21:9105:2104":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"21:13738:2200":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"17:10121:7130":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"26:37:64756":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"12:1044:6620":{"crate_id":12,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:47252:2157":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"16:6052:6886":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"2:46904:6133":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"2:52884:6034":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:47544:2875":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:9370:5792":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"16:5737:6757":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"2:2481:75":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"16:4689:46016":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:4722:2262":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"1:11099:5407":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"2:49096:127":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"1:8442:2332":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"6:5861:43479":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"17:13007:53144":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"17:10088:47252":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"6:4417:42782":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:1864:11241":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"1:4838:5665":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"1:10495:5624":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"17:10921:47498":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"12:815:5596":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"1:4403:5817":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"16:6200:6888":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"21:4121:64702":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"1:4908:54693":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"foreign_type"},"2:7051:2283":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"2:52055:59712":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"5:6490:62464":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:11050:5858":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:8577:5814":{"crate_id":1,"path":["std","net","parser","AddrParseError"],"kind":"struct"},"6:4346:42776":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"5:3350:2193":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:5203:45382":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"5:6779:61082":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"2:3980:103":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"21:5943:1677":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"1:12298:366":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"2:46553:59769":{"crate_id":2,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"6:4816:42824":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"1:10322:5772":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"21:14669:2341":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"17:8494:45382":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"16:7970:6848":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:931:5592":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"21:14890:64283":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"6:592:39521":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:11826:5759":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:48266:180":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"16:0:1860":{"crate_id":16,"path":["gimli"],"kind":"module"},"5:3015:5379":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"1:1002:5600":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"9:649:6502":{"crate_id":9,"path":["miniz_oxide","deflate","core","TDEFLStatus"],"kind":"enum"},"2:9577:5533":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:12282:55521":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"17:9422:47127":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:46925:6296":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:49877:2886":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:11873:51995":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"5:3561:62442":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"17:12251:52082":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:7079:120":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:51948:6032":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"21:8092:2067":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"1:7875:5702":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:4206:42605":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"6:6524:43867":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"1:2903:207":{"crate_id":1,"path":["std","io","error","Result"],"kind":"typedef"},"21:37:1684":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"2:51877:6040":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"21:8763:2093":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"16:7825:6911":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:50244:6128":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:8763:5503":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"17:11639:51917":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"21:6208:4973":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"12:2053:5601":{"crate_id":12,"path":["hashbrown","set","Entry"],"kind":"enum"},"1:9536:5585":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:1931:7083":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:6094:163":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"12:777:6612":{"crate_id":12,"path":["hashbrown","map","ConsumeAllOnDrop"],"kind":"struct"},"1:6785:5654":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"30:807:7246":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"21:6523:1682":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"18:727:7249":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"29:17:1673":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"1:12324:1091":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"30:883:7252":{"crate_id":30,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"15:0:1859":{"crate_id":15,"path":["addr2line"],"kind":"module"},"16:7298:6906":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:10962:2166":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"17:11054:47681":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"6:4559:42795":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"17:11014:47620":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"12:1555:6634":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"17:12046:52007":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"16:3457:45389":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"17:9873:47279":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:12008:52004":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7435:6875":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"17:9712:47174":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"17:11217:47732":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:6865:7040":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"12:1681:143":{"crate_id":12,"path":["hashbrown","set","HashSet"],"kind":"struct"},"5:2050:6421":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"17:13478:53254":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"27:484:4914":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"17:12884:52776":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:5394:188":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11235:47783":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"2:8615:5444":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:39:2021":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"1:12321:1444":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:20236:6058":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"14:187:45315":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"1:686:10233":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"21:7714:2071":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"2:21970:166":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"11:36:63294":{"crate_id":11,"path":["adler","algo","U32X4"],"kind":"struct"},"21:13521:2255":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"1:6681:5797":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"21:7593:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:10902:5302":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"1:12305:1322":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"21:12423:2177":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"6:1600:40408":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"17:9183:47065":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:12271:10235":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"2:48807:5441":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:8973:5640":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:46865:6292":{"crate_id":2,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:910:4016":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"16:6252:6891":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:47129:2144":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"21:11196:2170":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"16:5815:6762":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10476:47369":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:47149:2146":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"6:5523:43432":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"6:5835:43478":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"12:985:5601":{"crate_id":12,"path":["hashbrown","map","Entry"],"kind":"enum"},"21:14809:64655":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"1:3086:3563":{"crate_id":1,"path":["std","io","readbuf","BorrowedBuf"],"kind":"struct"},"2:52294:6021":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:11469:57242":{"crate_id":1,"path":["std","sys","unix","thread","cgroups","Cgroup"],"kind":"enum"},"6:4280:42768":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"2:47181:2048":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"21:10455:2155":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"16:2282:6707":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"2:9484:5531":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"21:13505:4015":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"30:699:5338":{"crate_id":30,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"6:539:39513":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:11036:5856":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"16:7319:6908":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"5:2030:61184":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"17:12322:52092":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"1:4324:5402":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:53008:6026":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"12:632:2193":{"crate_id":12,"path":["hashbrown","map","Iter"],"kind":"struct"},"1:8488:5549":{"crate_id":1,"path":["std","net","ip_addr","Ipv6Addr"],"kind":"struct"},"27:405:3914":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"21:6309:4315":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"17:10245:47365":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"21:11983:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:519:39512":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"17:8510:45381":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:2727:7008":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"21:14833:5202":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"2:52514:59776":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:29328:6240":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"21:9660:64655":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:7414:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:9555:5659":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:2327:186":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"17:12118:52012":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:9591:5536":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"5:5562:6383":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"27:503:4920":{"crate_id":27,"path":["futures_channel","mpsc","SenderTask"],"kind":"struct"},"2:2817:4727":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:7300:56856":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"2:20966:5909":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:12313:720":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"6:501:39509":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:6430:43862":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:46991:6201":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"21:7215:2058":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"16:6903:6692":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"5:6801:195":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"1:11847:5765":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:56589:6155":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"5:4945:2143":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"17:10403:7067":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"16:5510:6745":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"5:2739:61115":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"2:50813:5662":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:7939:10231":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"17:1903:47160":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"16:2683:7006":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:50753:6148":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"21:14442:2329":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"21:9745:64655":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"1:4316:5394":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"5:1426:5595":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"17:8110:47045":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:49890:5511":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"2:20044:61007":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"16:5388:6736":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"5:6793:4016":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"21:8349:64655":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"1:5506:187":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:2487:147":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:4369:5455":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"21:13298:64655":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"21:395:58966":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"16:4519:45990":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"1:8147:2329":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"21:417:1660":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"2:29507:4706":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:5178:5565":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"2:7005:2884":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"6:6500:43865":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:5733:43448":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"17:11149:47727":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"21:11491:2172":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"2:2938:2281":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"16:6593:6898":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"12:1872:5379":{"crate_id":12,"path":["hashbrown","set","Union"],"kind":"struct"},"2:2676:225":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:47305:2162":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"12:320:6626":{"crate_id":12,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"20:82:1991":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"17:8796:7073":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"17:0:1861":{"crate_id":17,"path":["object"],"kind":"module"},"6:5720:43446":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:6529:2047":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"21:7934:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:4210:5664":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:8904:5636":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"27:307:3914":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"17:9857:7137":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"6:4683:42811":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"1:4505:5767":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:12310:629":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"5:2737:5555":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:21267:59686":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"6:4592:42799":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"21:10358:2158":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"6:1678:40414":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"17:9805:7209":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"17:10670:7192":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"2:20292:5672":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:7208:42946":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"7:0:1491":{"crate_id":7,"path":["unwind"],"kind":"module"},"21:6522:1685":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"5:6928:6402":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:5001:62448":{"crate_id":5,"path":["alloc","slice","merge","MergeHole"],"kind":"struct"},"21:10575:64655":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:10857:3559":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"1:11786:5758":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"17:12926:52780":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:11758:2065":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"21:11911:2050":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"2:21275:59777":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"2:2154:577":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"6:4551:42794":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"16:5235:63506":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"11:0:1856":{"crate_id":11,"path":["adler"],"kind":"module"},"1:7192:58847":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"21:14675:2342":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"2:49922:5528":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"17:9155:47064":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:20423:15390":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"21:7279:64655":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"2:7001:2885":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"16:7357:6856":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"21:6715:2056":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"21:13879:2264":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"2:49170:73":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"6:6981:44240":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:8076:5407":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"1:3377:3535":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"5:6171:62442":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:7848:2070":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"2:9605:5534":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"17:13231:53198":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:10221:47363":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:5457:2047":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:12319:1446":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"6:4690:973":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"2:3370:5496":{"crate_id":2,"path":["core","any","Provider"],"kind":"trait"},"12:861:5600":{"crate_id":12,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"21:1277:1662":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"5:1212:5603":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"6:1525:40400":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"6:4768:42819":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"1:11954:6650":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12134:52013":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"5:6023:62442":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"21:14628:2337":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"17:12361:52158":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"17:9539:7084":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"21:10526:64655":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"9:0:1854":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:3269:3557":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"1:4454:5823":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"6:5727:43447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"17:13192:53189":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"10:0:1855":{"crate_id":10,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:11277:5480":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:49932:5529":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"6:4506:42789":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"9:896:6460":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"6:4665:42809":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"6:7243:42951":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:10836:2163":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"21:10933:64655":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"1:5826:5486":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"21:7292:2072":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"28:202:5601":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:4200:6063":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"2:29641:6194":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"21:8584:64655":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"6:4224:42761":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"2:2991:4738":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:7372:7044":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"1:4117:5765":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"1:9269:5579":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"16:6123:6833":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"1:353:5680":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"2:49346:5356":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:10200:59814":{"crate_id":2,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"2:50769:6142":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10283:47340":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"2:49385:59693":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:8607:5441":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"17:9317:7202":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"21:13357:64655":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"12:1534:6633":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"17:9658:47172":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"21:2676:2173":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"1:12317:1448":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:13184:53188":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:48172:6206":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"6:1722:40419":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:46465:200":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:11107:5863":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:2847:4734":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:57024:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:7156:156":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"21:12628:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"18:113:53673":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:47098:2141":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:6838:5754":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"5:2477:6424":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"17:9644:7081":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"6:5568:43401":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"2:1552:3535":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"16:8069:127":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:12304:307":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"24:135:2045":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"16:5981:6769":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:20173:5905":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"6:5605:43438":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"5:6988:61124":{"crate_id":5,"path":["alloc","slice","merge_sort","Run"],"kind":"struct"},"16:3402:45388":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"1:5894:5580":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"6:5749:63139":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"17:3125:47255":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"21:14838:2108":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"18:96:53672":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:6186:6835":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"2:50773:6226":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"21:14493:2331":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"17:13340:53201":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:7748:55043":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:2792:4723":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:48800:5439":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"2:10090:5525":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"2:21110:6167":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"21:14314:2327":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"1:678:10230":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:2681:4161":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"21:10154:64655":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"21:6500:2498":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"1:12300:408":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"21:11100:64655":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"5:1446:6417":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"6:581:39519":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"18:681:7245":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:12836:52709":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:9382:47130":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"6:4367:42779":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"17:13413:53244":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:8796:13523":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:9277:4016":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:6563:5851":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:2969:4747":{"crate_id":2,"path":["core","ops","generator","Generator"],"kind":"trait"},"18:652:2169":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:4906:54691":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"foreign_type"},"21:10350:2151":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"1:11307:5483":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"2:53928:6030":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"17:9601:7088":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"17:8475:7076":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:53038:6029":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"6:5672:43441":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"1:4969:5500":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"30:872:7251":{"crate_id":30,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:5880:203":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"21:10897:2054":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"1:9384:55006":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"21:9091:2102":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"6:4427:42783":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"1:3479:2340":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"6:1532:40401":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"17:11951:52001":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:10809:6123":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"12:1628:63303":{"crate_id":12,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"16:4262:45901":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"16:2341:7020":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:11858:2386":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"6:131:39197":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"1:12325:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"21:13324:2200":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"5:1944:5699":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"17:13082:53153":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"5:6958:6403":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"6:7255:42953":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"12:1120:6623":{"crate_id":12,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:9501:7097":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"1:7737:47051":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"21:12310:2180":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"1:524:58970":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:6298:6861":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"21:8291:189":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"21:14590:2333":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"2:19976:5338":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:2411:5733":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"12:738:5592":{"crate_id":12,"path":["hashbrown","map","Values"],"kind":"struct"},"17:11939:52000":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:0:1862":{"crate_id":18,"path":["memchr"],"kind":"module"},"5:1437:195":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"21:6833:2050":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:52148:6041":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:6409:58960":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"30:0:1862":{"crate_id":30,"path":["memchr"],"kind":"module"},"2:0:485":{"crate_id":2,"path":["core"],"kind":"module"},"1:11134:129":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:12311:630":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"2:20418:5352":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"17:9328:7203":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:5772:43450":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:7744:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"9:920:6457":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:12752:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"6:6311:43857":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"2:49912:5530":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"14:160:45306":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"21:10684:64655":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"1:484:55032":{"crate_id":1,"path":["std","thread","local","fast","Key"],"kind":"struct"},"17:12860:52712":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"5:950:62442":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:4217:45880":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"12:393:63298":{"crate_id":12,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"1:8713:5296":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"5:6994:221":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"17:8951:64059":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:11089:54676":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"2:52346:6028":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"21:12375:2072":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"21:3813:2080":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"2:56946:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:8650:5761":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:1919:5677":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:3716:45451":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"16:3689:45448":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"6:4139:42754":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"17:11774:51988":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"2:8873:5355":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"2:52000:6024":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"16:5525:6746":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"17:12550:52556":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"16:5184:45384":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"21:9203:64655":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"1:11124:5719":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"2:11704:2080":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:2588:58972":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"1:7978:11243":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"2:3382:5495":{"crate_id":2,"path":["core","any","Demand"],"kind":"struct"},"1:7870:5685":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"2:7102:2282":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"2:10574:6309":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"21:12176:2183":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:5169:5348":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"12:1138:5604":{"crate_id":12,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:5317:55024":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9824:128":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"5:1349:2193":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"2:2839:4732":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:12314:721":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:5780:6760":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"12:98:6624":{"crate_id":12,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"17:13404:53241":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:8601:119":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"16:5596:6750":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:2904:116":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"5:4042:62449":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:46299:4748":{"crate_id":2,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"17:9722:47171":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"29:20:1675":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"21:11164:64655":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"2:8603:5439":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"16:5433:6738":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"21:14203:2141":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"2:49998:6116":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"6:5876:43480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"1:5646:5474":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"2:9522:5532":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"2:46805:5900":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"13:0:1851":{"crate_id":13,"path":["std_detect"],"kind":"module"},"17:13214:53196":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"1:900:4015":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"2:21904:168":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"17:10894:7131":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:51917:59794":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"16:7469:6844":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:12955:52794":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"21:10545:2153":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:2856:4736":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"2:49154:5438":{"crate_id":2,"path":["core","fmt","FlagV1"],"kind":"enum"},"12:1003:5602":{"crate_id":12,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:9957:2169":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"2:20442:5352":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"6:6448:43863":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"17:10721:47067":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"17:13126:53160":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"9:188:6525":{"crate_id":9,"path":["miniz_oxide","deflate","core","HuffmanOxide"],"kind":"struct"},"12:2190:63306":{"crate_id":12,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:8701:47058":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"18:736:7250":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:2578:2325":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:51747:6051":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:9274:47115":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"17:10845:7189":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"21:4207:4207":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"17:10374:7164":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:50741:6143":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"21:3567:1666":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"16:6017:6884":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"21:8310:2078":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"1:2401:5728":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:11601:55017":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"2:50926:202":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"17:11436:51804":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"17:9947:47282":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"1:8505:5550":{"crate_id":1,"path":["std","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"17:8137:47052":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"6:4449:42785":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"2:48557:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"21:8548:2088":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"1:8741:13516":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"21:5019:4610":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:49903:5527":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:1811:597":{"crate_id":1,"path":["std","env"],"kind":"module"},"2:50757:6146":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"17:13203:53190":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"9:111:6517":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressorOxide"],"kind":"struct"},"16:7288:6905":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"1:4017:5759":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:11222:64655":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"2:50979:2394":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"2:8329:6102":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"17:11787:51989":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"21:13174:64655":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"31:100:1725":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"17:12768:52664":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"6:586:39520":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:10997:5618":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"30:556:64263":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"28:53:64761":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"21:10870:64655":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"17:12972:53115":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:58299:59804":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"30:665:140":{"crate_id":30,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"17:13527:53280":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"5:1312:94":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"1:8139:3553":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"21:11783:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:2235:98":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"16:4297:45912":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"9:19:6549":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","HashBuffers"],"kind":"struct"},"2:21358:60656":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"21:12401:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"16:2367:7002":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"2:51769:6039":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"6:4716:42814":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"17:11161:47728":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"5:7005:6362":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"2:7735:3906":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"21:9122:2141":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"2:2739:5560":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:3154:5744":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"16:4817:46048":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"8:0:1853":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"21:8726:64655":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:1604:2193":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:11921:55682":{"crate_id":1,"path":["std","personality","dwarf","eh","EHContext"],"kind":"struct"},"17:13134:53161":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:2662:217":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:6409:43859":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"12:2205:5382":{"crate_id":12,"path":["hashbrown","TryReserveError"],"kind":"enum"},"21:12346:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"21:11333:2755":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnordered"],"kind":"struct"},"12:60:63301":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"21:14765:3933":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"2:49057:130":{"crate_id":2,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"21:8401:202":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"17:9021:47062":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:9526:7085":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"1:4014:5758":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:50286:6129":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"6:4515:42790":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"5:286:2284":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"16:4921:46080":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"6:6554:43870":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"17:12514:52555":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:8561:7148":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:10625:7074":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"12:2069:5602":{"crate_id":12,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"17:12964:53114":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"6:4437:42784":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"6:4581:42798":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"17:13071:53152":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:3485:6399":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:2557:7005":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:8814:128":{"crate_id":17,"path":["object","read","any","File"],"kind":"struct"},"18:574:2169":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"6:1887:40556":{"crate_id":6,"path":["libc","unix","linux_like","linux","fpos64_t"],"kind":"enum"},"16:7117:6697":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"2:52018:59768":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:8962:5639":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"5:6421:240":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"12:697:5595":{"crate_id":12,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"2:50617:5874":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:628:5344":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"21:14649:2339":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"12:353:6625":{"crate_id":12,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"30:777:7243":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:853:6393":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:9531:216":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"2:2800:4724":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"2:9138:219":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:4326:5454":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"6:4804:42822":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"1:3953:5567":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:12237:52081":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"6:4329:42774":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"21:11245:2171":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"21:14084:64655":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"2:20290:5352":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:49980:5620":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"2:48329:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"27:495:4915":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"30:824:5858":{"crate_id":30,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:6842:63478":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"1:11947:6650":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"17:9458:7062":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:4003:5676":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"17:9897:47281":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"21:7995:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:2631:7017":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"16:3599:45406":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:6829:7038":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"21:9581:2047":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"21:14725:2343":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"21:7812:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"12:810:5593":{"crate_id":12,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"16:4606:46005":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:11547:47284":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:50296:6130":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"21:9425:64655":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"2:47569:2195":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"21:10439:64655":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:1826:11229":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"16:3566:45397":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:8324:6101":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:4354:42777":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"21:13705:64655":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"21:7018:2049":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"18:564:7259":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"26:0:2002":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"29:25:1674":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"6:4496:42788":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"2:50090:6121":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"16:2411:7021":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10546:47066":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:21772:171":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"18:707:5858":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:6043:5787":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"2:48481:89":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"16:6171:6880":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:4191:204":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"21:12472:2178":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"21:13216:64655":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"21:14660:2340":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"21:14772:64456":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"1:8131:5740":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:9261:2193":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:38124:180":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"2:11652:2077":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"21:6336:2499":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"1:9407:55021":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:46888:6293":{"crate_id":2,"path":["core","char","EscapeDefaultState"],"kind":"enum"},"2:2673:222":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:13047:53150":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"21:7670:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:9329:3545":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:3160:5746":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:8631:47056":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:2261:6731":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:11271:47896":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"9:586:6498":{"crate_id":9,"path":["miniz_oxide","deflate","core","SymFreq"],"kind":"struct"},"2:53570:6023":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:50022:3545":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"2:8868:5354":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"17:9778:7154":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"5:1196:5601":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"16:5793:6761":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"16:5878:6764":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"20:32:1658":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"21:325:2060":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"2:56959:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:10825:6126":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"21:12455:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"2:54103:20915":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"16:6463:6895":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"2:47219:2890":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:9671:7122":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"21:11271:64655":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"1:2257:2312":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:7860:55692":{"crate_id":1,"path":["std","thread","local","fast","DtorState"],"kind":"enum"},"2:49820:5523":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:11813:51991":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"1:11477:6226":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"6:4179:42756":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:51899:6044":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"7:32:44523":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:1751:60512":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:2793:7012":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"2:2285:185":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:9836:55477":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"5:5909:62466":{"crate_id":5,"path":["alloc","vec","drain_filter","drop","BackshiftOnDrop"],"kind":"struct"},"6:495:39508":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:6516:2894":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:9280:2193":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"17:11828:51992":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"17:12674:52613":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"11:44:6610":{"crate_id":11,"path":["adler","Adler32"],"kind":"struct"},"17:11761:51987":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:4894:5398":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"21:8605:2089":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"21:13463:2093":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"17:11853:51994":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"2:52648:6054":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"16:2705:7007":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"21:5034:1692":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"17:10360:7222":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:12312:723":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"17:12073:52009":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"6:4317:42773":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:10973:47507":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:10520:47372":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"5:6971:6404":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"21:13966:2265":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"21:9359:2144":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"30:97:53672":{"crate_id":30,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:9154:64655":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"2:46793:5899":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"5:5977:2256":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:47335:2166":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"6:4534:42792":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"1:7924:10228":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"1:11514:54482":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"16:2868:6772":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:8737:5501":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"17:9108:47063":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"21:6798:64655":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:8613:5443":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:3157:5745":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"20:27:5352":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"6:1595:40407":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"1:6640:55036":{"crate_id":1,"path":["std","sync","mutex","fmt","LockedPlaceholder"],"kind":"struct"},"2:2763:4717":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"31:0:1720":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"21:14707:64655":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"2:47068:2886":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"5:2255:6425":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"1:12315:722":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"16:6528:6897":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:2385:5723":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"21:9399:2145":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"2:39338:5494":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:5443:43371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"6:5504:43430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:4565:42796":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"1:7150:55391":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"21:8867:64655":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:9820:7210":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"6:6302:43856":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"17:1962:7150":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"12:2178:63309":{"crate_id":12,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"27:508:4955":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"2:50330:5347":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:8864:4915":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"21:7078:2053":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"21:10232:64655":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:21200:60296":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:6998:44241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"6:4461:42786":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"20:97:1664":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"1:1967:5713":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:6316:58951":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"6:4212:42760":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"21:8252:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"6:62:39131":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"27:460:4911":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"5:1387:5591":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:5680:5476":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"2:20858:5673":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"17:12739:52619":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:7848:5352":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"17:10296:47339":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"5:1227:5602":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"21:4309:58964":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"12:387:63302":{"crate_id":12,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:1887:7751":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"17:10108:7129":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"2:50737:6140":{"crate_id":2,"path":["core","str","LinesAnyMap"],"kind":"struct"},"1:2253:2307":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:242:64077":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"14:0:1858":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"2:46346:4739":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"5:3911:2193":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:54031:20909":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:6133:4976":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"1:3594:5552":{"crate_id":1,"path":["std","net","display_buffer","DisplayBuffer"],"kind":"struct"},"6:6975:44239":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"17:12278:52084":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"6:4294:42770":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:52568:59764":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"6:5554:43400":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"5:6754:6394":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"21:12184:2182":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"16:8014:6714":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"6:5595:43437":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:48814:5442":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"18:521:7253":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"21:7256:2066":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"17:12022:52005":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:2578:127":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:51723:59775":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"20:0:1657":{"crate_id":20,"path":["futures_core"],"kind":"module"},"21:7640:2062":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"21:10620:64655":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"17:9488:7086":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"2:46958:101":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"21:1080:2101":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:47269:2159":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"21:12584:2181":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"1:8719:5779":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"2:7426:2880":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"2:2290:124":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"6:7214:42947":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"1:11704:55032":{"crate_id":1,"path":["std","sys_common","thread_local_key","Key"],"kind":"struct"},"6:4611:42802":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"12:762:5375":{"crate_id":12,"path":["hashbrown","map","DrainFilter"],"kind":"struct"},"0:0:1755":{"crate_id":0,"path":["futures"],"kind":"module"},"21:7787:2063":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"5:3805:4015":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:53680:6043":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:6001:1691":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"2:48257:4016":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"1:8699:5821":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"17:9193:63835":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:11640:54494":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:9433:47126":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:13496:2193":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"2:52802:6049":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:6544:203":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"30:624:2169":{"crate_id":30,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:2579:7056":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:9253:5483":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:10854:7149":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"21:11861:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:2321:179":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:7539:56939":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:10445:55478":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"31:102:1726":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"30:788:7244":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"21:8755:2092":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"1:8814:5625":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"15:214:6646":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"14:165:45307":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"17:11174:47729":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:9885:47280":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"16:6877:6691":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"31:68:1722":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"26:43:64758":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"21:14525:64655":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"17:13366:53237":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"21:6667:2047":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"2:2788:4725":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"21:13091:2195":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"17:12060:52008":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"5:36:6334":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"2:47111:2888":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"16:2657:7016":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:10863:3557":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"1:3314:3550":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:13141:53162":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"21:8941:2099":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"21:13931:64655":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"1:6677:2197":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"21:11552:2175":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:9165:64118":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"21:9516:2147":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"2:19989:60951":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:4102:42751":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"2:2805:4729":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"17:11841:51993":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"21:9099:2103":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"5:7088:6335":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"21:6166:4974":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"14:215:45308":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"21:14478:2259":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"6:4379:42780":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"5:6942:6200":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"1:8590:5351":{"crate_id":1,"path":["std","net","socket_addr","SocketAddr"],"kind":"enum"},"19:0:999":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:8752:3543":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"30:769:2169":{"crate_id":30,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"2:9372:5537":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"21:12220:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"5:4901:62442":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:6430:2731":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"30:853:7250":{"crate_id":30,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"16:2487:7003":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"21:920:2091":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"2:4126:5319":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"21:5443:2196":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"1:774:141":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:6316:6862":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"6:4621:42803":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"16:7890:6850":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"2:52726:6042":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:53966:6050":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:11445:5481":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"2:2774:4719":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:20298:5674":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:11889:202":{"crate_id":2,"path":["core","task","ready","Ready"],"kind":"struct"},"2:2726:2277":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:11618:135":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"2:8556:131":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:2930:6773":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"17:11893:51996":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"21:6883:2052":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:2493:234":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:21:665":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"17:1771:7089":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:51703:59727":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"6:5582:43435":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"6:4659:42808":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"17:8871:47059":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:10182:47254":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:20249:5352":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:11094:56894":{"crate_id":1,"path":["std","sys","unix","fs","StatxExtraFields"],"kind":"struct"},"17:13459:53248":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"9:592:6500":{"crate_id":9,"path":["miniz_oxide","deflate","core","CompressionStrategy"],"kind":"enum"},"21:11019:2167":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"2:50144:5533":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"5:686:110":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:22003:6170":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"17:9061:7099":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"1:7962:11236":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:9430:55008":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"2:49338:59792":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"17:8368:7066":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:46882:5347":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"12:853:5599":{"crate_id":12,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"21:9486:64655":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"3:0:432":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:5839:6763":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"1:3230:3561":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"13:220:63310":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:1626:5377":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"6:6538:43868":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","seccomp_notif_sizes"],"kind":"struct"},"1:1889:11248":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:8160:79":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:8596:111":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"21:6687:64655":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:6654:6900":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"1:574:5703":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"16:5447:6739":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"16:7637:6849":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:54218:20920":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"16:7249:6702":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:8546:2344":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"2:2833:4731":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"21:9261:64655":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"1:9574:5660":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"21:12653:2186":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"21:9640:2047":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"21:13142:189":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"9:800:44679":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8106:129":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"2:56985:242":{"crate_id":2,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"2:4530:6289":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:4257:42765":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"17:12748:52620":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"21:8323:2079":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"6:6415:43860":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"21:14823:2106":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:54179:20919":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"21:14001:64655":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"9:676:6547":{"crate_id":9,"path":["miniz_oxide","deflate","CompressionLevel"],"kind":"enum"},"2:48139:6204":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:779:96":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"17:8241:7191":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"12:1845:5375":{"crate_id":12,"path":["hashbrown","set","DrainFilter"],"kind":"struct"},"21:13148:2081":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"17:9350:7205":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:13728:217":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"1:411:162":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"21:14936:2516":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"1:10668:55475":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"16:7909:6852":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"30:816:7247":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"20:17:1990":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"5:7071:5375":{"crate_id":5,"path":["alloc","vec","drain_filter","DrainFilter"],"kind":"struct"},"16:5703:6754":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:4216:5663":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"5:1405:5593":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:8687:5351":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"21:13776:64655":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"17:10822:47068":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3347:2194":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:12225:52080":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"17:12695:52614":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"21:14638:2338":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"17:13436:53245":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:12948:52782":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:11264:11243":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"16:5949:6767":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"1:7982:6428":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"2:50040:5531":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:13354:53202":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"2:2674:108":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"6:5472:43427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"15:193:6642":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"2:49377:59702":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"17:10682:7193":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"5:0:282":{"crate_id":5,"path":["alloc"],"kind":"module"},"2:1760:6249":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"9:977:6461":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"6:6269:39430":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"16:6517:6638":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:12609:52557":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"2:47577:2879":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:4059:6060":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"21:10715:2162":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"6:1511:40398":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"28:37:2256":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"2:3184:5925":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:53882:6012":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"21:14599:2334":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"17:12176:52029":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"28:185:3943":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"1:9283:4909":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"21:104:684":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"21:333:3934":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"21:10414:2154":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"5:630:61081":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"17:9303:7097":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"1:11154:2273":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"21:57:1688":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"2:2932:2279":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"16:7567:6863":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:4425:5819":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"5:2743:61114":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"1:8705:5770":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"2:3147:4742":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:12266:56935":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:6034:6885":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"2:46260:4018":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"17:8526:7168":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"18:582:5338":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"30:741:64258":{"crate_id":30,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"21:2534:64703":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"1:8227:2272":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:0:794":{"crate_id":6,"path":["libc"],"kind":"module"},"30:114:53673":{"crate_id":30,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"21:6908:64655":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:8083:5719":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"6:4096:42750":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:5717:2194":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"1:2029:181":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"6:4527:42791":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:14608:2335":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"14:7:45306":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"1:9213:183":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"2:48633:92":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"2:49811:2167":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:8956:2193":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"2:48105:2669":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:47550:2194":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"17:9751:7153":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"2:47210:2051":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:10490:47370":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"16:6376:6894":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:11300:47904":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"16:2842:6771":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:8393:7121":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:1580:40406":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:53758:6027":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"2:10749:6119":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:8596:47055":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"2:52178:6045":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"5:6895:5608":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"18:590:59788":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"17:10207:47354":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"21:11958:2068":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"17:11721:51984":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"27:391:4904":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:11915:139":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:969:5595":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"6:6392:40341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"1:1620:5376":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"6:1562:40404":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:9515:164":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:4778:42820":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"16:4849:46056":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:2738:61122":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:49802:5520":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:10581:5488":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"1:918:5591":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:4749:46028":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"2:48595:85":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"17:10310:47366":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"21:8227:2074":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"16:2993:7014":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"6:4761:42818":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"1:4312:5400":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"1:11763:5572":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:7980:6715":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:10350:7065":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"1:6010:5784":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:11390:58956":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"21:13538:2257":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"21:12541:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"6:600:39522":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:9442:55073":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"21:14963:2514":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"17:8339:47054":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"12:1518:6632":{"crate_id":12,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:11847:106":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"6:4810:42823":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"27:431:4909":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:2250:5718":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"21:14355:64655":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"1:1615:5375":{"crate_id":1,"path":["std","collections","hash","set","DrainFilter"],"kind":"struct"},"2:49966:6211":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:5709:5478":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"21:13605:2260":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"16:7929:6913":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:1691:5375":{"crate_id":5,"path":["alloc","collections","btree","map","DrainFilter"],"kind":"struct"},"12:646:4015":{"crate_id":12,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:4657:5777":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"2:2851:4735":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:11974:52002":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"21:11594:64655":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"1:4433:5820":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"0:46:1565":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"2:48405:88":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"21:6319:4291":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"9:956:6456":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"2:47559:2877":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:1608:4016":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"17:11500:51806":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:13580:53289":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"27:516:4956":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"21:8531:64655":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:9831:5717":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"6:1701:40417":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"2:21871:167":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"16:6816:7037":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"12:0:1857":{"crate_id":12,"path":["hashbrown"],"kind":"module"},"1:5227:13522":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"30:753:64259":{"crate_id":30,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"1:3422:2274":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"21:11934:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"1:3470:59108":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:4672:10236":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:50321:6133":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:20261:5910":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:9389:106":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"1:4246:5395":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:46911:6294":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"14:202:6365":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:11909:51997":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"2:39334:6428":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:9347:4910":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"2:20701:5911":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"2:21292:59717":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"17:12730:52618":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"17:967:47129":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:48291:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"2:50470:5868":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"21:8674:2090":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"18:481:7254":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:5011:5416":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:9411:5524":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"2:3168:4744":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"17:12909:52779":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:46857:6134":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"5:4105:62449":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:10528:7185":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:10233:47364":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"17:10385:7165":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"21:10642:2160":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"27:397:4905":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"21:5642:3535":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"16:534:6759":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"2:46487:4740":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"5:1370:4016":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:52467:59774":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"21:5024:4609":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"21:9282:2143":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"16:2433:6706":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:46361:197":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:8412:2141":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"18:755:7251":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"1:8471:5548":{"crate_id":1,"path":["std","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:9791:47176":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"1:1091:5601":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"21:10805:64655":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"1:4744:5502":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"16:4786:46041":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:50424:5861":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:6017:5786":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:47199:2896":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"12:2184:59625":{"crate_id":12,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"6:6572:43871":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:6676:6841":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:7059:6204":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"2:21739:174":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"17:10455:7224":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"6:4575:42797":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"5:271:62442":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:11268:5623":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"17:10608:7072":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"6:4398:42781":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"5:6748:4016":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"5:6763:2256":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"2:48519:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:4972:5502":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:10394:7166":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"30:681:7259":{"crate_id":30,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:10796:7186":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"21:12825:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"17:11748:51986":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"6:1738:40420":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"2:54051:20911":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"17:487:47050":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"5:4027:241":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"17:247:64021":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"21:11000:64655":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"2:29547:6002":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:3404:2333":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:3616:4016":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"21:9385:64655":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"21:9770:68":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"6:5699:43444":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"5:6771:6395":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:13031:53146":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:6375:40338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"1:5823:5484":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"16:4635:46010":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"21:13796:2263":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"17:10949:47506":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"17:8418:7134":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"2:20964:5352":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"6:1500:40396":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"17:9681:47173":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"1:661:5714":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"6:1643:40411":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"6:5498:43429":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"21:13129:64655":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"6:4653:42807":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"6:1550:40403":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:21838:170":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:39347:5559":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:6161:6887":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"17:420:6776":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"21:774:2080":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"17:10466:47368":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:13047:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"2:54088:20914":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"2:10786:6122":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"28:19:4016":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"17:13557:53282":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"1:11457:5482":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:9331:5582":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"28:23:2193":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"2:50792:121":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:3908:3535":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"21:13377:4596":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"2:2255:105":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"21:5978:1676":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"16:5614:6751":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:11041:5855":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:5087:5409":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6790:6902":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"16:3026:45385":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:11997:52003":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"31:136:1724":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"5:3764:62442":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"30:844:7249":{"crate_id":30,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"6:6479:43864":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"1:12318:1445":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:8370:1668":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"6:5660:43440":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"21:13447:2193":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:48443:82":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"16:7659:6832":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:48114:2193":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"21:14144:64655":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"2:7433:2883":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:4719:773":{"crate_id":2,"path":["core","iter"],"kind":"module"},"16:7166:6699":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:50190:6125":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:7737:3905":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:47139:2145":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"24:169:2044":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"21:14190:64655":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"28:32:4015":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"1:3194:3560":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:9563:5535":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:8946:5637":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"21:14118:2325":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"30:655:7258":{"crate_id":30,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46537:5497":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:21805:4364":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"17:10708:7188":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:54062:20912":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:47120:2889":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:2515:2323":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"17:13382:53239":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"28:193:5603":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"2:47158:2147":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"21:13021:2187":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"5:7016:6363":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:4144:45831":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:11680:2063":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"21:10261:2148":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:9475:7087":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"30:81:53671":{"crate_id":30,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"5:1241:5604":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"17:12896:52778":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"2:2753:4715":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"21:13483:64655":{"crate_id":21,"path":["futures_util","stream","select_all","_","__Origin"],"kind":"struct"},"2:52772:6046":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"6:4200:42759":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"5:6323:6340":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:50630:6215":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:13106:2197":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"2:49066:67":{"crate_id":2,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"22:7:1681":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"17:12980:53142":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:9304:4015":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"16:6146:6879":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"24:0:1756":{"crate_id":24,"path":["futures_task"],"kind":"module"},"6:4191:42758":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"12:1065:6621":{"crate_id":12,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"21:8154:2069":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"5:5437:2256":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"24:12:4202":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"2:20042:61010":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:7736:5616":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:9315:4912":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:13158:53185":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"6:1686:40415":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"5:4748:3945":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:11330:47908":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:50596:5872":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"2:20210:6004":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"12:1029:5603":{"crate_id":12,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"16:4413:45932":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"2:46944:5904":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:47048:11766":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"16:4357:45924":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:50761:6147":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:2905:127":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"2:51017:5393":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"17:9446:47132":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"17:8881:63859":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:1643:6000":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:51793:6031":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:8071:5717":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"9:827:6455":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"21:7568:2075":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"2:50072:6120":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:9553:7099":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"5:1044:61125":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"6:4307:42772":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:9250:47113":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"2:47190:2049":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:11631:2066":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"21:14252:2255":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"17:10075:47251":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:29747:6195":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"18:614:64253":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:46963:6199":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"28:0:2003":{"crate_id":28,"path":["slab"],"kind":"module"},"17:8162:7135":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:50545:5870":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"5:5634:3535":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:8388:64655":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"2:54042:20910":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"17:11617:51916":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"17:12033:52006":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"16:6668:7035":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:8117:64655":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:8666:47057":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"2:4346:3944":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"17:11125:47691":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"6:4489:5778":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"2:48793:5440":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:50453:5867":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2780:4718":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:11607:5490":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"12:669:5594":{"crate_id":12,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"1:8429:3543":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"17:11528:47285":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:10583:7069":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"30:761:2169":{"crate_id":30,"path":["memchr","memmem","x86","avx","std","Forward"],"kind":"struct"},"1:4766:5545":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"21:10366:2156":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"2:3956:5986":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"21:7909:2065":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"17:8991:63637":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"25:0:1667":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"17:11708:51983":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6735:6857":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"1:8391:2275":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"1:10651:5478":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"17:13176:53187":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:7429:2882":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"21:8362:2081":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"1:2869:5006":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:5887:3914":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"21:5960:1679":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"2:47521:2873":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"16:5494:6742":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"17:11288:47903":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:4726:42815":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"6:6424:43861":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:2812:4726":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"6:4475:42787":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"21:12061:64655":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"5:2994:6356":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"21:13417:4205":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"18:80:53671":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"27:124:4912":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:50314:6132":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:8833:144":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"21:14975:2519":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"1:8363:2196":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"2:21365:6245":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:12710:2184":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"2:22402:5842":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:2383:5722":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"16:4327:45918":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:47089:2887":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"21:4254:4209":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"16:7543:6837":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"16:5122:46257":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"17:10997:47508":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"6:7289:44429":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"16:6704:6855":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:14260:108":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"21:6599:64655":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"16:4721:46024":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:4598:42800":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"1:9207:5479":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"2:50172:6124":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:49840:5522":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"9:382:6453":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"2:53820:6047":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"16:2749:7009":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"1:7849:5694":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"21:9552:64655":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"17:11734:51985":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"2:1672:1055":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:1668:40413":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"2:48054:178":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:8123:118":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"21:11612:2062":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"30:716:64247":{"crate_id":30,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"17:12307:52091":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"5:6836:4016":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"21:10291:64655":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:51978:6020":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"16:6109:6730":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"21:8884:2098":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"16:7557:6838":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"21:14234:64655":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"18:507:2169":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"16:5472:6741":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"31:120:1727":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"17:12638:52612":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"18:660:7243":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"5:6911:102":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:58320:59770":{"crate_id":2,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"21:13583:2258":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"1:11070:5504":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:12797:52666":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"9:33:6550":{"crate_id":9,"path":["miniz_oxide","deflate","buffer","LocalBuf"],"kind":"struct"},"21:13514:4016":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"27:377:6398":{"crate_id":27,"path":["futures_channel","mpsc","queue","Node"],"kind":"struct"},"2:52324:6025":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:646:39552":{"crate_id":6,"path":["libc","unix","linux_like","timezone"],"kind":"enum"},"16:5628:6752":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"6:507:39510":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"21:4939:1670":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"17:12103:52011":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5684:43442":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:3084:4741":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"16:5411:6737":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"6:7226:42949":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"5:3430:62442":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"1:8222:5004":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:12874:52714":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:12306:1352":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"30:632:7256":{"crate_id":30,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:11903:29425":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"16:7388:6858":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"5:3363:4015":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"6:4267:42766":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"17:13506:53278":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:6690:6842":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:20023:61005":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"2:7038:133":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"21:9447:2146":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"16:6781:6854":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:4693:59987":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:12164:52015":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:3271:3558":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"1:9464:55039":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"2:21057:6165":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"17:11485:51805":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"17:11536:47283":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"2:47294:2892":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"2:11679:189":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"1:965:5594":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:46918:6295":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"6:6509:43866":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"17:9577:7090":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"2:6759:2196":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"12:274:63295":{"crate_id":12,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"21:12111:2071":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"6:4540:42793":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"1:12316:718":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:4126:42753":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"}},"external_crates":{"28":{"name":"slab","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"27":{"name":"futures_channel","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"31":{"name":"futures_executor","html_root_url":null},"11":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"12":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"24":{"name":"futures_task","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"20":{"name":"futures_core","html_root_url":null},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"21":{"name":"futures_util","html_root_url":null},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"},"25":{"name":"futures_sink","html_root_url":null},"10":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":24}