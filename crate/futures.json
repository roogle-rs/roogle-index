{"root":"0:0:2104","crate_version":"0.3.30","includes_private":false,"index":{"0:15-25:9:2017":{"id":"0:15-25:9:2017","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:2017","glob":false}}},"0:41-21:5212:2036":{"id":"0:41-21:5212:2036","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:2036","glob":false}}},"2:13018:30042":{"id":"2:13018:30042","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12635:8457","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12957:22380":{"id":"2:12957:22380","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6212:2027":{"id":"0:83-21:6212:2027","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:2027","glob":false}}},"0:50-31:109:2072":{"id":"0:50-31:109:2072","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:2072","glob":false}}},"2:12960:22382":{"id":"2:12960:22382","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13045:22734":{"id":"2:13045:22734","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5600:30745":{"id":"5:5600:30745","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2575","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:297:2575","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:69-21:422:2009":{"id":"0:69-21:422:2009","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:2009","glob":false}}},"2:12921:30025":{"id":"2:12921:30025","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:26-21:6199:2028":{"id":"0:26-21:6199:2028","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:2028","glob":false}}},"5:5607:30747":{"id":"5:5607:30747","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12951:2594":{"id":"2:12951:2594","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43428:2620","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5619:22736":{"id":"5:5619:22736","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13045:22734"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:60-20:32:2007":{"id":"0:60-20:32:2007","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:2007","glob":false}}},"2:12928:30028":{"id":"2:12928:30028","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12983:30033":{"id":"2:12983:30033","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12609:8462","str::split":"2:12971:2603","prim@char":"1:12265:458","str::split_terminator":"2:12980:30032"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43242:8481","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12947:27761":{"id":"2:12947:27761","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43150:8468","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12941:23116":{"id":"2:12941:23116","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:12943:23120","str::split_at_mut":"2:12942:23117"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:62-21:4707:2018":{"id":"0:62-21:4707:2018","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:2018","glob":false}}},"0:66-20:68:2012":{"id":"0:66-20:68:2012","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:2012","glob":false}}},"0:23-21:6217:2025":{"id":"0:23-21:6217:2025","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:2025","glob":false}}},"0:44-21:6240:2040":{"id":"0:44-21:6240:2040","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:2040","glob":false}}},"2:13024:21535":{"id":"2:13024:21535","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:40-21:1291:2011":{"id":"0:40-21:1291:2011","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:2011","glob":false}}},"0:24-21:6182:2026":{"id":"0:24-21:6182:2026","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:2026","glob":false}}},"2:12949:27855":{"id":"2:12949:27855","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12950:27858"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43448:8465","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2766:2014":{"id":"0:73-21:2766:2014","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:2014","glob":false}}},"0:4-2:44083:150":{"id":"0:4-2:44083:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:44083:150","glob":false}}},"2:12963:21201":{"id":"2:12963:21201","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12989:23129":{"id":"2:12989:23129","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12265:458","str::splitn":"2:12986:23127","self::pattern":"2:12609:8462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43296:8449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13010:30037":{"id":"2:13010:30037","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13048:24322":{"id":"2:13048:24322","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:39060"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13051:2731":{"id":"2:13051:2731","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4701:2731"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43482:2732","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12967:21202":{"id":"2:12967:21202","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41293:191","prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:587:2010":{"id":"0:70-21:587:2010","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:2010","glob":false}}},"2:12924:30027":{"id":"2:12924:30027","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12922:30026"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6199:2028":{"id":"0:84-21:6199:2028","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:2028","glob":false}}},"0:67-20:97:2013":{"id":"0:67-20:97:2013","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:2013","glob":false}}},"2:12927:23042":{"id":"2:12927:23042","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12157:8466"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:37-21:104:820":{"id":"0:37-21:104:820","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:820","glob":false}}},"2:13017:30041":{"id":"2:13017:30041","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13049:30048":{"id":"2:13049:30048","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4700:30048"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43473:8473","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12930:23092":{"id":"2:12930:23092","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1914":{"id":"0:46:1914","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:2070","`LocalPool`":"31:120:2076"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:2070","0:49-31:68:2071","0:50-31:109:2072","0:51-31:136:2073","0:52-31:100:2074","0:53-31:102:2075","0:54-31:120:2076","0:55-31:125:2077"],"is_stripped":false}}},"2:13027:23134":{"id":"2:13027:23134","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12942:23117":{"id":"2:12942:23117","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12941:23116","str::split_at_mut_checked":"2:12944:23121"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78-29:25:2023":{"id":"0:78-29:25:2023","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:2023","glob":false}}},"2:13016:30040":{"id":"2:13016:30040","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12998:2326":{"id":"2:12998:2326","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12609:8462","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatches":"2:13001:30034"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43378:8479","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13046:24320":{"id":"2:13046:24320","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:39060"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:2071":{"id":"0:49-31:68:2071","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:2071","glob":false}}},"0:31-21:6767:2032":{"id":"0:31-21:6767:2032","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:2032","glob":false}}},"2:13014:30039":{"id":"2:13014:30039","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13004:30035":{"id":"2:13004:30035","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12609:8462","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::rmatch_indices":"2:13007:30036"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43324:8477","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:2022":{"id":"0:77-29:17:2022","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:2022","glob":false}}},"0:10-20:68:2012":{"id":"0:10-20:68:2012","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:2012","glob":false}}},"2:12944:23121":{"id":"2:12944:23121","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:12943:23120"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5601:8795":{"id":"5:5601:8795","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12995:23132":{"id":"2:12995:23132","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:58-21:104:820":{"id":"0:58-21:104:820","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:820","glob":false}}},"2:12919:963":{"id":"2:12919:963","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12265:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:2104":{"id":"0:0:2104","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:2041","crate::executor":"0:46:1914","crate::stream":"21:1291:2011","crate::channel":"27:0:2038","crate::future":"21:104:820","crate::sink":"21:4707:2018"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1914","0:56:1278","0:4-2:44083:150","0:5-20:32:2007","0:7-21:422:2009","0:8-21:587:2010","0:10-20:68:2012","0:11-20:97:2013","0:13-21:2766:2014","0:14-21:3786:2015","0:15-25:9:2017","0:16-21:5171:2019","0:18-29:27:2021","0:19-29:17:2022","0:20-29:25:2023","0:21-29:20:2024","0:23-21:6217:2025","0:24-21:6182:2026","0:25-21:6212:2027","0:26-21:6199:2028","0:27-20:131:2029","0:28-22:7:2030","0:29-21:6770:2031","0:31-21:6767:2032","0:32-21:37:2033","0:33-21:20:1258","0:34-21:6769:2034","0:35-21:6768:2035","0:37-21:104:820","0:38-21:5264:1137","0:39-21:4707:2018","0:40-21:1291:2011","0:41-21:5212:2036","0:42-21:57:2037","0:43-27:0:2038","0:44-21:6240:2040","0:45-21:5266:2041"],"is_stripped":false}}},"0:18-29:27:2021":{"id":"0:18-29:27:2021","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2021","glob":false}}},"0:55-31:125:2077":{"id":"0:55-31:125:2077","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:2077","glob":false}}},"0:34-21:6769:2034":{"id":"0:34-21:6769:2034","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:2034","glob":false}}},"5:5618:22737":{"id":"5:5618:22737","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13044:22735"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13042:24317":{"id":"2:13042:24317","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39264:8606","Self::is_ascii":"2:13041:22738"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39264:8606","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:2074":{"id":"0:52-31:100:2074","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:2074","glob":false}}},"2:12920:22730":{"id":"2:12920:22730","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12977:23125":{"id":"2:12977:23125","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12609:8462","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split":"2:12971:2603"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43192:8447","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12980:30032":{"id":"2:12980:30032","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12609:8462","str::split":"2:12971:2603","prim@char":"1:12265:458","`DoubleEndedIterator`":"2:7986:131","str::rsplit_terminator":"2:12983:30033"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43224:8482","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:74-21:3786:2015":{"id":"0:74-21:3786:2015","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:2015","glob":false}}},"0:76-29:27:2021":{"id":"0:76-29:27:2021","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2021","glob":false}}},"2:13021:30043":{"id":"2:13021:30043","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:2076":{"id":"0:54-31:120:2076","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:2076","glob":false}}},"2:12971:2603":{"id":"2:12971:2603","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12609:8462","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::split_whitespace":"2:12949:27855","str::rsplit":"2:12977:23125"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43174:2926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12943:23120":{"id":"2:12943:23120","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:12944:23121"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12939:30029":{"id":"2:12939:30029","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12271:1658","str::slice_mut_unchecked":"2:12940:30030","crate::ops::Index":"2:38910:2808"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13039:30047":{"id":"2:13039:30047","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12570:137","`FromStr`":"2:12569:2871"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41434:226","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12569:2871","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12569:2871","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:29-21:6770:2031":{"id":"0:29-21:6770:2031","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:2031","glob":false}}},"0:25-21:6212:2027":{"id":"0:25-21:6212:2027","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:2027","glob":false}}},"2:12933:23089":{"id":"2:12933:23089","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13044:22735":{"id":"2:13044:22735","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:7-21:422:2009":{"id":"0:7-21:422:2009","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:2009","glob":false}}},"2:13036:30046":{"id":"2:13036:30046","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5171:2019":{"id":"0:16-21:5171:2019","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:2019","glob":false}}},"2:13052:30049":{"id":"2:13052:30049","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4698:30049"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43491:8474","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:14-21:3786:2015":{"id":"0:14-21:3786:2015","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:2015","glob":false}}},"0:59-2:44083:150":{"id":"0:59-2:44083:150","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:44083:150","glob":false}}},"2:12940:30030":{"id":"2:12940:30030","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12271:1658","crate::ops::IndexMut":"2:3178:2809","str::slice_unchecked":"2:12939:30029"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13001:30034":{"id":"2:13001:30034","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12609:8462","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::matches":"2:12998:2326"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43396:8480","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:30746":{"id":"5:5604:30746","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5616:30749":{"id":"5:5616:30749","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:297:2575","`String`":"5:7615:243"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:297:2575","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:71-21:5171:2019":{"id":"0:71-21:5171:2019","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:2019","glob":false}}},"0:65-21:1291:2011":{"id":"0:65-21:1291:2011","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:2011","glob":false}}},"5:5599":{"id":"5:5599","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5600:30745","5:5601:8795","5:5604:30746","5:5607:30747","5:5615:30748","5:5616:30749","5:5617:2463","5:5618:22737","5:5619:22736"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13030:30044":{"id":"2:13030:30044","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:38-21:5264:1137":{"id":"0:38-21:5264:1137","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1137","glob":false}}},"2:13007:30036":{"id":"2:13007:30036","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12609:8462","`DoubleEndedIterator`":"2:7986:131","prim@char":"1:12265:458","str::match_indices":"2:13004:30035"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43342:8478","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12630:8459","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12986:23127":{"id":"2:12986:23127","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462","str::rsplitn":"2:12989:23129"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43278:8451","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:13-21:2766:2014":{"id":"0:13-21:2766:2014","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:2014","glob":false}}},"0:28-22:7:2030":{"id":"0:28-22:7:2030","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:2030","glob":false}}},"0:32-21:37:2033":{"id":"0:32-21:37:2033","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:2033","glob":false}}},"0:53-31:102:2075":{"id":"0:53-31:102:2075","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:2075","glob":false}}},"2:12952:30031":{"id":"2:12952:30031","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43438:8476","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12954:23133":{"id":"2:12954:23133","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13047:24321":{"id":"2:13047:24321","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:970:39060"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:2029":{"id":"0:27-20:131:2029","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:2029","glob":false}}},"2:12992:23131":{"id":"2:12992:23131","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13043:22739":{"id":"2:13043:22739","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82-21:6182:2026":{"id":"0:82-21:6182:2026","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:2026","glob":false}}},"2:12929:334":{"id":"2:12929:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12930:23092","`u8`":"1:12282:1785"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12948:21551":{"id":"2:12948:21551","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43160:2925","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12937:23091":{"id":"2:12937:23091","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12953:27957":{"id":"2:12953:27957","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43466:8463","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:51-31:136:2073":{"id":"0:51-31:136:2073","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:2073","glob":false}}},"0:19-29:17:2022":{"id":"0:19-29:17:2022","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:2022","glob":false}}},"2:12931:23088":{"id":"2:12931:23088","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41293:191"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41291:194","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5615:30748":{"id":"5:5615:30748","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12918":{"id":"2:12918","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12919:963","2:12920:22730","2:12921:30025","2:12922:30026","2:12924:30027","2:12927:23042","2:12928:30028","2:12929:334","2:12930:23092","2:12931:23088","2:12933:23089","2:12935:23090","2:12937:23091","2:12939:30029","2:12940:30030","2:12941:23116","2:12942:23117","2:12943:23120","2:12944:23121","2:12946:27956","2:12947:27761","2:12948:21551","2:12949:27855","2:12950:27858","2:12951:2594","2:12952:30031","2:12953:27957","2:12954:23133","2:12957:22380","2:12960:22382","2:12963:21201","2:12967:21202","2:12971:2603","2:12974:23123","2:12977:23125","2:12980:30032","2:12983:30033","2:12986:23127","2:12989:23129","2:12992:23131","2:12995:23132","2:12998:2326","2:13001:30034","2:13004:30035","2:13007:30036","2:13010:30037","2:13012:30038","2:13014:30039","2:13016:30040","2:13017:30041","2:13018:30042","2:13021:30043","2:13024:21535","2:13027:23134","2:13030:30044","2:13033:30045","2:13036:30046","2:13039:30047","2:13041:22738","2:13042:24317","2:13043:22739","2:13044:22735","2:13045:22734","2:13046:24320","2:13047:24321","2:13048:24322","2:13049:30048","2:13051:2731","2:13052:30049"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12922:30026":{"id":"2:12922:30026","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:20-29:25:2023":{"id":"0:20-29:25:2023","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:2023","glob":false}}},"2:12950:27858":{"id":"2:12950:27858","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12949:27855"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43457:8464","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5617:2463":{"id":"5:5617:2463","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7615:243"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7615:243","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-21:4707:2018":{"id":"0:39-21:4707:2018","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:2018","glob":false}}},"0:35-21:6768:2035":{"id":"0:35-21:6768:2035","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:2035","glob":false}}},"0:45-21:5266:2041":{"id":"0:45-21:5266:2041","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:2041","glob":false}}},"2:13033:30045":{"id":"2:13033:30045","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:2013":{"id":"0:11-20:97:2013","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:2013","glob":false}}},"2:12974:23123":{"id":"2:12974:23123","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12265:458","self::pattern":"2:12609:8462"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12425:8453","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12615:8458","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:81-21:6217:2025":{"id":"0:81-21:6217:2025","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:2025","glob":false}}},"2:12935:23090":{"id":"2:12935:23090","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10701:239","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:79-29:20:2024":{"id":"0:79-29:20:2024","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:2024","glob":false}}},"0:33-21:20:1258":{"id":"0:33-21:20:1258","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1258","glob":false}}},"0:42-21:57:2037":{"id":"0:42-21:57:2037","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:2037","glob":false}}},"2:12946:27956":{"id":"2:12946:27956","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12265:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43144:8469","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:5-20:32:2007":{"id":"0:5-20:32:2007","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:2007","glob":false}}},"0:8-21:587:2010":{"id":"0:8-21:587:2010","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:2010","glob":false}}},"2:13041:22738":{"id":"2:13041:22738","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:43-27:0:2038":{"id":"0:43-27:0:2038","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:2038","glob":false}}},"0:56:1278":{"id":"0:56:1278","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:820","0:59-2:44083:150","0:60-20:32:2007","0:62-21:4707:2018","0:63-25:9:2017","0:65-21:1291:2011","0:66-20:68:2012","0:67-20:97:2013","0:69-21:422:2009","0:70-21:587:2010","0:71-21:5171:2019","0:73-21:2766:2014","0:74-21:3786:2015","0:76-29:27:2021","0:77-29:17:2022","0:78-29:25:2023","0:79-29:20:2024","0:81-21:6217:2025","0:82-21:6182:2026","0:83-21:6212:2027","0:84-21:6199:2028"],"is_stripped":false}}},"0:21-29:20:2024":{"id":"0:21-29:20:2024","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:2024","glob":false}}},"0:48-31:65:2070":{"id":"0:48-31:65:2070","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:2070","glob":false}}},"0:63-25:9:2017":{"id":"0:63-25:9:2017","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:2017","glob":false}}},"2:13012:30038":{"id":"2:13012:30038","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:13344:19670":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:21988:3308":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"2:43554:8492":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"17:14271:20203":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:22206:2898":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"6:6657:14325":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"21:10479:33997":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"17:12043:16852":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"2:10058:8405":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"17:13581:19687":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"1:10882:140":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"21:7462:2409":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"6:6729:14334":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:1809:672":{"crate_id":1,"path":["std","env"],"kind":"module"},"21:6199:2028":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"2:33409:8813":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"21:13685:2536":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"21:11295:33997":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"1:3328:2943":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"2:46380:8357":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"21:6914:2398":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"6:1680:10488":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"1:10861:21538":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"31:120:2076":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"10:36:32353":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"16:7144:16573":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:4232:26821":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"1:8710:3080":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"2:10481:29731":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"21:9467:2498":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"6:5014:13555":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"1:10612:2938":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"2:3097:8386":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"11:2542:28355":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"21:9346:2453":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"16:6263:32844":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"16:4587:16160":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"17:11634:16804":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:437:15557":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"6:7602:14759":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"16:5742:16513":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"2:39719:8583":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"6:8306:13792":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"2:45463:3201":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"17:12399:16940":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"30:1081:21318":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"6:570:9584":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"17:14131:20195":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"6:8328:13794":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"2:33755:8816":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"5:733:120":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:6738:14335":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:5544:3093":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"2:46070:3231":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:6695:3125":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"28:0:2363":{"crate_id":28,"path":["slab"],"kind":"module"},"17:10068:16675":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"23:0:2361":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"21:4045:2430":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"1:10395:115":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"2:9703:29659":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"2:4406:221":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"2:33040:8809":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"17:10612:16704":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:16069:21162":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"6:7537:14754":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"2:45153:3193":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"17:2203:16777":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"16:6456:16544":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"16:6574:16552":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"21:4707:2018":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"6:8282:13788":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:11751:2962":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"1:12276:730":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"30:1111:2533":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"1:1063:2775":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"21:37:2033":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"1:3607:2920":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"18:613:21331":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"6:523:9577":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:2657:145":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:11802:33997":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"6:6811:14341":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"1:8408:2017":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"21:13319:2525":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"18:765:21205":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"2:43094:8444":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:41365:2761":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"21:10017:71":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"6:5528:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"5:6945:8528":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"6:5306:13584":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"2:3149:143":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"2:728:190":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:8039:2573":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:9138:3136":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:5352:13590":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"17:12371:16718":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"17:14503:20219":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"16:2508:15592":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"6:1503:10471":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"16:542:32539":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"17:16165:21169":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"2:10050:130":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"17:10439:16702":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"20:131:2029":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"21:10204:2502":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"17:15078:16746":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"1:5494:3090":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"21:6452:3121":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"21:8431:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:9948:2482":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"2:40155:8775":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"11:2403:2760":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:41757:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:41197:28051":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"2:43733:8499":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:7914:2898":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"9:482:15372":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"28:208:2775":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"17:13173:16993":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:14986:20942":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"6:5370:13592":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"21:8609:2431":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"5:5847:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"1:11126:3099":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"17:15814:21002":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"17:3264:16851":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"16:860:32843":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"2:12624:8460":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"17:16105:21165":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"1:1581:2556":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"18:491:33674":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"27:0:2038":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"17:13774:16894":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"17:14147:20196":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"21:5675:2536":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"1:9201:3120":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"2:38251:8822":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"30:922:21320":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"16:7528:16580":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"1:621:2734":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:9329:187":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"21:12230:2418":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"5:3031:30918":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"1:8188:2934":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"1:8542:3026":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"21:9167:33997":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:11141:8449":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"17:9858:16691":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:1072:2776":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"2:30207:2792":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"21:15299:2634":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"21:10988:33997":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"6:6519:14314":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"17:14977:20941":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"1:5241:204":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"17:11574:15491":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"17:14575:16677":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"17:15010:20943":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:4849:3006":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"2:22:791":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"21:15484:33923":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"16:6098:16530":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"30:1569:21209":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"1:6583:2537":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"2:9088:3067":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"21:11952:2414":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"21:13510:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"20:27:2898":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"11:1883:2533":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"5:3281:2777":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"2:43902:8956":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"17:13146:16992":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"18:573:2502":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"1:11551:3105":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"1:3369:2938":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"21:9257:2450":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"6:5031:13557":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"1:8166:2759":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"1:2655:2613":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"17:12707:16711":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"30:1587:35392":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"1:5528:3092":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"1:2188:130":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"2:11086:8448":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:9755:16660":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:11621:16806":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"16:5914:32743":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:43075:8443":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"2:45206:3234":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"16:5107:16312":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"16:6412:16540":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"29:27:2021":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"5:3399:2764":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:44141:3317":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"26:0:2362":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"2:43696:8498":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"6:5376:13593":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"30:978:153":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"5:3252:31401":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"17:12824:16713":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"17:10622:33416":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"16:3014:15613":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:1602:2779":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"16:8118:16605":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"21:8973:33997":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:9306:21643":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:3361:8543":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"21:9694:2479":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"18:706:8460":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"16:8202:16610":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"5:7385:2784":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"2:21250:29403":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"16:7813:16598":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"21:7442:33997":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"2:45288:3206":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"16:2438:15589":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:42355:8395":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"5:3028:8374":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"17:10905:16710":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"1:12280:875":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"17:12584:16708":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"21:14020:21232":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"16:2854:15608":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:12289:1357":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"1:3013:138":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"6:6746:14336":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"6:1628:10483":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:15469:33882":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"6:1559:10477":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"17:15190:20954":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"2:38830:8542":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"21:15019:2618":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"17:11269:16767":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:6587:3122":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"21:1291:2011":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"2:12371:8959":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"21:7290:33997":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:5817:16518":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"21:10867:33997":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"5:4470:2911":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"16:7355:16575":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"27:136:3133":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"16:6588:16553":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"16:6342:32832":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:4283:3023":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"2:1949:189":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"1:11241:25142":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"21:11537:33866":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"2:39041:2750":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:7493:8759":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"9:502:15376":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"21:10743:2485":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"21:11649:33920":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"17:12201:16934":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"5:5215:3116":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"21:14552:33997":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"17:11595:16833":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"18:635:21332":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:8247:13783":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:45302:3255":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"17:15249:20959":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"7:31:15344":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"16:7857:16600":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"21:12873:2515":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"21:11514:33997":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"21:779:2430":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:43012:8440":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"16:8259:16613":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:7957:2574":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"17:12572:16707":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"2:43023:8429":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"21:11840:2408":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"5:7628:8504":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"11:0:2216":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"27:434:21302":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"21:14752:2473":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"1:8612:3004":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"1:4742:21677":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"1:11711:2963":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:10064:8403":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:9529:2475":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"17:13999:20186":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"2:41085:2955":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:10269:157":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"21:15372:2456":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:43575:8493":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"21:4540:24508":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"17:13594:19688":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"2:38981:215":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:43964:3171":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"17:9781:16690":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"2:41426:2359":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"17:15039:20945":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"6:7314:10427":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"21:14011:2760":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"6:545:9580":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"1:9091:3101":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:1207:16752":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"21:13714:33997":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"16:7098:32850":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"30:1472:21212":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"6:5630:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"2:41562:97":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:11623:25155":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:3757:2761":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"16:6560:16551":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"2:42552:3080":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"1:9219:117":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:2784:2849":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"5:724:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:12929:16718":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"21:6823:2399":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"5:7435:29768":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"27:140:21285":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"17:12328:16902":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"30:1464:35401":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"2:42562:27679":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"16:2684:15600":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"1:4744:21679":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"21:8570:2429":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"2:40528:8764":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:11847:15541":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"11:837:2768":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"6:4924:13544":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"21:12673:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"6:5039:13558":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:14968:20940":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:8175:16608":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"5:7463:2761":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:13899:20180":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:11731:8435":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"30:999:21208":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"17:16138:21167":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"17:16235:21175":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"27:124:21283":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"21:2715:2508":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"1:5942:2745":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"24:15:21230":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"17:10915:33245":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"21:13835:2539":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"1:10970:3101":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"6:578:9585":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"1:4903:3007":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"21:11920:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"21:9672:33997":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"21:10345:33997":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"21:6429:187":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"17:12443:16932":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"2:41434:226":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"6:6706:14331":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:5781:16516":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"21:13575:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"16:0:2220":{"crate_id":16,"path":["gimli"],"kind":"module"},"2:46327:8354":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"6:1510:10472":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"21:8156:2416":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"17:11537:16796":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"5:827:102":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"6:4837:13536":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:8474:2424":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"21:4353:34018":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"2:12683:8486":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"2:41915:3117":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:12270:1624":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"16:6895:16564":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"1:10819:3051":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"2:30647:8601":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"17:15266:20960":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"2:6628:8774":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:16079:21163":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"18:689:21209":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:5643:2911":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"2:44187:8372":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"16:2660:15599":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:726:21211":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"11:2326:2774":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"6:5515:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"16:5927:16523":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"21:10401:33997":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:6597:14319":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"17:12289:16901":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"31:100:2074":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"1:3236:22319":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"2:3334:8824":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"11:811:2764":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"5:2115:2797":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"0:0:2104":{"crate_id":0,"path":["futures"],"kind":"module"},"17:12076:16849":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"17:11293:16768":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"5:1192:31355":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"16:2418:15588":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:13412:19675":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"6:6788:31576":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:39821:8578":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"21:14633:33997":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"11:856:2770":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"17:12597:16957":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"2:46395:8358":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"30:1216:21317":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"21:11465:33997":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"1:7915:2729":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:8000:2742":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"5:3809:2796":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"6:6756:14337":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:8197:15291":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"17:12433:16677":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"21:4275:2541":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"6:5665:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:9418:2474":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"5:2237:31329":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"5:1569:210":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:11702:16836":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"26:37:35351":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"6:5415:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"6:6900:14370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"21:14156:2560":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"17:11227:16737":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"17:14475:20217":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:4543:8559":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43886:8948":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"21:8499:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:3196:15615":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"11:1903:2777":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:1607:2780":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:45121:3227":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"17:13986:20185":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"5:4504:30839":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"2:9516:85":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11471:27111":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"6:517:9576":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"17:10457:139":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"5:4926:217":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"2:37507:8818":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"2:42317:8393":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"16:4502:16144":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"21:327:2411":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"16:7539:16581":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"21:12255:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:3115:127":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:45273:3200":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"21:7991:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:2788:15605":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"16:4802:16237":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"17:14752:20932":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:14325:20207":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"21:13772:2442":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"6:6664:14326":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"6:6775:14340":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"17:15635:20990":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"2:2627:8605":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:7604:16587":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"21:12618:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"21:7526:33997":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"5:7697:2764":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"2:10415:8924":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:4845:3002":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:14372:20210":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:698:21210":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"11:1066:15495":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"6:5020:13556":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"30:886:21317":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"21:15387:2458":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"17:15410:20975":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"21:11674:2505":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"21:15308:21245":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"29:0:2020":{"crate_id":29,"path":["futures_io"],"kind":"module"},"1:11617:25161":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"11:434:32375":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:21213:8601":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"17:14463:20216":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:40106:8778":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"30:1095:21320":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"6:479:9572":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:5407:1205":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"18:538:21218":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"16:7799:16597":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"2:7911:8768":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"2:41416:3068":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"6:5671:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"17:15368:20970":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"17:10671:33640":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"21:10376:2400":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"2:9199:8458":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14212:20199":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"10:0:2215":{"crate_id":10,"path":["adler"],"kind":"module"},"2:2949:3167":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"1:11027:24497":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"21:9086:2447":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"17:13308:19668":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:875:2771":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"18:623:21327":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"6:5557:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"21:6770:2031":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"5:4241:2911":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"2:41474:2533":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"21:4607:2443":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"6:5146:13567":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"16:5037:16288":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"6:5314:13585":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"6:5266:13579":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"6:5200:13571":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"11:673:2533":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"6:5643:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5122:13565":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"1:4487:3017":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"16:5756:16514":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"1:1574:2533":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"2:45871:3191":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"2:32257:8806":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"21:13091:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"24:309:21241":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"17:13753:20173":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"2:42531:2906":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40304:2499":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"2:3038:8815":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"16:6066:16528":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:12630:8459":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:7509:16579":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"21:13676:2535":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"17:11256:16766":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"2:726:2970":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"1:10547:24482":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"1:12281:856":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"2:22032:3309":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"17:10092:16697":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"1:4097:2991":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"30:1415:21188":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"2:40062:8779":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"21:14517:2565":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"17:13235:19664":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"21:6776:2398":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"17:11497:16776":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"21:12808:33909":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"2:2497:202":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"20:68:2012":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"16:7648:16589":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"21:14783:33997":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"1:6366:3133":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:6562:14318":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"1:2495:2041":{"crate_id":1,"path":["std","io"],"kind":"module"},"2:39732:8585":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:7020:2402":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"1:8553:3016":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:9107:3141":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"5:7036:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"21:5251:21243":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"21:6284:2508":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"2:12635:8457":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:7376:8776":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"21:11824:2510":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"17:10982:16728":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"6:4864:13537":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"1:557:2710":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"18:608:21330":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"21:14047:2533":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"17:15151:20951":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"2:29809:2966":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"1:3836:2962":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:8750:2437":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"21:6410:21246":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"17:14298:20205":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:40002:2478":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"2:22094:2898":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"6:5320:13586":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"2:10513:29460":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"30:1454:21204":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"2:46301:8352":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"2:43906:8954":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:11155:8452":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"17:15102:20947":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"21:15511:33919":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"17:12695:16953":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"1:4254:3020":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"2:3143:141":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"6:7575:14757":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"5:7427:210":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"16:7888:16601":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"17:12543:16951":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"2:21903:3179":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:11788:16888":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"16:7379:32893":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"6:1707:10491":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"2:41837:91":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"16:6427:16541":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"1:2278:2600":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:23085:236":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:6311:27085":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"17:10317:16700":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"6:8341:15327":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"2:39753:8474":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:22492:2967":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"14:31:15508":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"1:1590:2777":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"1:12277:881":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"2:40497:8761":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"2:3178:2809":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"17:15646:20991":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"2:7441:28277":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"21:14801:2555":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"5:6672:2761":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"2:4152:111":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"17:15206:20956":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"20:0:2006":{"crate_id":20,"path":["futures_core"],"kind":"module"},"1:8144:140":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"6:5400:13596":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"18:507:2502":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"30:0:2222":{"crate_id":30,"path":["memchr"],"kind":"module"},"2:40519:2534":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"7:0:1835":{"crate_id":7,"path":["unwind"],"kind":"module"},"6:4870:13538":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:11169:8450":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"21:11576:33903":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"1:11380:2873":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"17:16269:19675":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"16:2748:15603":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"6:7446:14748":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"6:4971:13550":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"2:2491:195":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"6:553:9581":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:10261:153":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"1:4808:3028":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"17:15058:20929":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"5:1429:100":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"17:12189:16933":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"21:12108:2415":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"2:4415:8549":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"5:6412:3321":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"11:430:32372":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"1:849:2760":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"30:144:21324":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"2:45812:3202":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"17:13064:16673":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"21:6768:2035":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"17:11075:16747":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"25:0:2016":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"17:13089:16990":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"24:296:35262":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"17:12792:16671":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"17:10769:33180":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"17:15176:20953":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"1:12265:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"5:1831:2764":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:6821:233":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"6:8253:13784":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"5:5713:8526":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"1:12278:863":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:2090:2617":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"21:14430:2564":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"21:14604:2611":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"21:10686:33997":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:7570:16584":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"1:362:2728":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"1:12268:1256":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"30:993:21208":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"2:22248:3305":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"20:143:21227":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"21:12717:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"11:364:32362":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"21:6769:2034":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"21:10262:2483":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"21:2566:33790":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"1:4805:3049":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"21:6566:34002":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"6:8288:13789":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"17:12711:138":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"1:4695:3046":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"20:17:2351":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"21:11543:34001":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"2:39952:2806":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"16:6335:16536":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:6394:21247":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"6:7389:10613":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:9807:16676":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"17:13473:19679":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"1:12287:937":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"6:1580:10479":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"16:8155:16607":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"16:7686:16591":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"2:32443:8805":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"21:925:2441":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"11:102:32379":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:21299:2898":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"2:38941:210":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"21:6240:2040":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"24:135:2396":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"2:2908:2719":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"21:6583:33938":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"17:2234:16802":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"5:4151:2760":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"2:43378:8479":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"1:9054:199":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"5:5065:2911":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:45573:28013":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:2423:2879":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"1:5164:27090":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"21:14089:2557":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"17:15273:20961":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"5:7107:30876":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"27:181:21288":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"1:2033:197":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"5:1312:2773":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:10887:33247":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"2:44100:227":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"17:12671:16985":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"6:0:968":{"crate_id":6,"path":["libc"],"kind":"module"},"6:5336:13588":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"11:2536:32380":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:104:820":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"17:15289:20963":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"16:8226:16612":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:45544:28004":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"30:1229:21318":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"6:5457:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:42334:138":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:13211:19663":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"17:12251:16906":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"1:6279:24513":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"29:20:2024":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"21:8538:205":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"2:7944:146":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"17:13553:19685":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"30:1137:21316":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"1:7227:24498":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"6:5250:13577":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"2:32922:3170":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:14912:20938":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"30:1401:33674":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"21:14327:33997":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"2:10056:8404":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"16:3810:15636":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"21:13371:2526":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"21:9352:2454":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"17:14189:20198":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"16:5863:16521":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"21:14863:2615":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"6:8300:13791":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"5:4271:2911":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"16:5307:16489":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"2:43473:8473":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"2:12311:8960":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"6:1671:10487":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"17:14449:20215":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"5:7580:2851":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"2:4563:2717":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"2:15:2329":{"crate_id":2,"path":["core","write"],"kind":"macro"},"21:8242:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"18:0:2222":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:4986:16962":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"2:42974:8438":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"2:45480:3207":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:4641:16168":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"16:6758:15527":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"21:15139:2621":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"1:8645:3060":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"21:8181:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:8093:16604":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"5:2208:31327":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"21:7961:2421":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"1:6623:3130":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:3614:15618":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"30:1258:21321":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"2:6639:2565":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"16:6385:16538":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"2:46202:3209":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:4534:8558":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"27:149:21287":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"21:15177:2625":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"21:11884:2413":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"30:947:21208":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"1:4153:2996":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"6:6629:14322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"16:2338:15584":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"5:1343:2774":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:46316:8353":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"6:6460:14311":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"16:3842:15645":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:11144:2405":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"2:10975:8442":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:3326:2942":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"5:7455:2761":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:12237:2743":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"11:2231:15491":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:5219:13573":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"21:9799:33997":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"17:15333:20967":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"21:14072:2555":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"1:9253:27121":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"21:11488:2504":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"17:15655:20992":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"11:1603:15500":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"21:10229:33997":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:5769:16515":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"17:14788:20933":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"2:7907:8769":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:45381:3235":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"6:5174:3012":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"5:1537:2765":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"21:9555:33997":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"2:22634:2983":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"2:31708:3102":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"21:5992:2017":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"2:10868:2760":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"2:3514:71":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:43104:8445":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:42770:27771":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"2:40115:2490":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"17:9916:16693":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:9214:27123":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:2964:8807":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"6:532:9578":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"21:12030:2416":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"1:11033:24514":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"21:6859:2402":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"5:1497:2761":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"21:13484:2524":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"2:43324:8477":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"21:8544:2427":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"2:45721:3242":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"21:12965:2530":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"17:13526:19683":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"6:1663:10486":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"30:1007:21209":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"21:11977:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"6:6768:14339":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"17:15168:20952":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"21:12055:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:4293:8563":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:2954:3169":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"6:564:9583":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:11013:8454":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"27:467:21298":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"30:964:21208":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"21:13667:2534":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"17:14356:20209":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"17:15778:21000":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:43914:8949":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"5:7592:2852":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"6:5212:13572":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"1:9334:3121":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"6:5477:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"21:14969:33997":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"6:6880:13447":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"21:8778:33997":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:7006:16569":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"6:6409:14306":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"17:12530:16952":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"28:42:2761":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"21:15274:2631":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"1:3833:2963":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:45256:3194":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"2:32981:8810":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"21:9309:33997":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"16:3029:15614":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"17:4821:16956":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"6:6763:14338":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"21:12552:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"2:2069:8389":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:6543:16550":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"2:10498:24486":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"21:15314:2707":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"21:10078:2472":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"21:10792:2486":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"17:12422:16941":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"6:4959:13548":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"6:7461:14750":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"2:45331:3175":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"2:38910:2808":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"21:10117:33997":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"2:5028:943":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:11324:16795":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"2:11687:8437":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"6:7485:14752":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"6:5225:13574":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"17:14260:20202":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:30620:196":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"21:14991:2617":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"16:6872:16563":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"17:13399:19674":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"18:598:21329":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:5581:13614":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"21:13882:33997":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"2:1874:28038":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:5897:16522":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"30:1061:21332":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"21:331:2707":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"17:16050:19666":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"2:43160:2925":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"2:10052:8397":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"21:23:2371":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"2:39905:2869":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:43396:8480":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"5:6393:3320":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"2:21223:29396":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"7:78:15351":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:22541:28044":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"16:7559:16583":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"21:15281:2632":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"16:867:32833":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"18:113:21190":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"1:8535:2956":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"5:7395:2798":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"6:6621:14321":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"16:2478:15591":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:4262:8562":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:951:2772":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"1:5613:3094":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:43910:8955":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"18:515:21216":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"21:9907:33997":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:11153:16708":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"2:9848:8394":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"21:10605:2491":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"6:5083:13562":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"1:10938:3094":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"2:21360:3180":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"2:39983:8772":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:9099:2533":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:2198:2703":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"21:11266:2500":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"5:1547:2766":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"17:10399:2925":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:43278:8451":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"2:42755:8941":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"18:481:21214":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"9:424:15375":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:39742:8586":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"14:187:15516":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"5:6158:2911":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:43084:8446":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"17:12887:16716":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:42923:29108":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"21:15027:2559":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"1:914:2766":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"2:12387:8961":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"30:956:21325":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"17:16223:21174":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"2:39877:2856":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"5:3039:30919":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"24:12:21228":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"16:6246:206":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"2:21252:29405":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"21:9450:33997":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"1:6752:3131":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"2:42570:27678":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"21:5171:2019":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"17:15126:20949":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"1:3579:2632":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"17:16176:21170":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"11:299:32364":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"6:8294:13790":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:13606:19689":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"17:12949:16719":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"21:6962:2407":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"17:11405:16778":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"18:754:21212":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"25:9:2017":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"30:1271:21208":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"2:43590:8494":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12238:16907":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"6:7429:10596":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"21:9188:2449":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"2:46223:3243":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"2:2903:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:21779:3173":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"1:723:154":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"1:3771:2959":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"21:7757:2423":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"1:10838:24899":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"2:2651:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"14:202:8503":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:43133:8472":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"11:2140:2774":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"16:7695:16592":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"21:13733:2431":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"21:14716:2614":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"6:5617:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"2:37617:8820":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"2:43174:2926":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:5565:13613":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"16:6948:16566":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"16:2355:15585":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"17:11743:16839":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:2437:2883":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"5:944:2533":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"15:306:15533":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"16:6278:16533":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:41053:2953":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"2:3146:142":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:44162:3315":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:4885:13540":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"6:6441:14309":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"1:10930:2835":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"11:328:32361":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"14:7:15508":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"9:447:15373":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"21:8852:2439":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"17:11799:16889":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"1:928:2769":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"2:39788:8580":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"11:2469:2764":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"6:5483:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"2:21468:2898":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"2:4489:8557":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"11:700:2761":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"2:44108:207":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"21:12456:2519":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"1:9180:3140":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:5995:16525":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"1:3491:2911":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"16:5415:32887":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"16:7397:32886":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:43621:8496":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"6:6524:14315":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"1:9048:3098":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"30:1187:21321":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"6:1565:10478":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2732:126":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:45136:3187":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:5870:3119":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"21:338:2412":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"11:2562:32381":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:637:2736":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"17:11042:16732":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"1:640:2737":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"6:4952:13547":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"2:45527:3263":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:41405:3066":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"16:872:32894":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"6:6698:14330":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"2:4986:2944":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"17:3473:16856":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"17:13187:19662":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:11127:8451":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:39001:214":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:9121:3138":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"17:15608:20987":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"2:39704:28154":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"21:10613:2489":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"21:15329:2457":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"2:1754:648":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"16:7497:16578":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"1:4847:3005":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:46365:8356":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8160:129":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:9405:3166":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"21:13961:33783":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"11:2124:2773":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"21:8120:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"30:1448:8460":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"5:2290:31322":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"30:1034:21330":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"16:7168:16574":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:12348:8962":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"5:7510:2756":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"16:6648:16557":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"8:0:2213":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"17:16151:21168":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"2:42253:28136":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"21:5950:2534":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"2:43150:8468":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:8586:3050":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:8095:179":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"17:13959:20183":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"16:2612:15597":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"1:2421:2878":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"5:672:29795":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"27:487:21300":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"2:22161:3314":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"1:11150:21592":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"2:7271:8770":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"17:14025:20188":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"11:2569:2756":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"16:6849:16562":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"21:10319:2399":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"17:11547:16830":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"2:41417:8898":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:21267:29408":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:39682:8547":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:10936:8453":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"21:15187:2626":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"2:22603:28139":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"15:327:15537":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"21:9887:2398":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"17:11102:16741":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:45168:3223":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"17:12278:16936":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:22469:28143":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:3029:30934":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"1:893:2556":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"2:4336:8418":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"17:14516:20220":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"2:2421:114":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"6:5536:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"1:5559:115":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"11:844:2769":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:2769:1020":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"function"},"21:12492:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"16:2728:15602":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"2:41340:174":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"21:9632:33997":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"2:22525:28057":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"6:5296:13583":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"17:11016:16730":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"1:11772:2964":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"17:2037:16783":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"21:10931:33997":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"16:4560:16156":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"2:39974:8771":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:10284:16699":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"16:5686:16510":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"16:7306:32829":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"27:11:35359":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"2:40504:2537":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"1:8733:3081":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"5:1558:2767":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"21:11366:2490":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"16:2936:15611":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"21:8648:219":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"17:14994:20930":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"11:2443:2556":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"6:485:9573":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"17:15376:20971":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"2:39802:8582":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"2:39839:2855":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"17:14235:20200":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"21:8921:2440":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"16:5400:16509":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:16259:19673":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:11189:16743":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:2317:8838":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:0:543":{"crate_id":2,"path":["core"],"kind":"module"},"6:6505:14270":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"16:6620:16555":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"21:15523:33922":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"16:4531:16150":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"1:4033:2987":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"17:10524:16703":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"21:14191:33997":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"2:32629:8808":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"11:351:32354":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"1:9387:2901":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"2:43781:8483":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"17:12478:16944":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"2:41374:3065":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"28:30:21304":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"1:8788:3083":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"21:9763:2480":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"17:12993:16720":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:5681:3095":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:45413:3189":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:8271:13787":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"21:11407:33997":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"2:30271:28135":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"17:14855:20935":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"2:2976:8382":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:31782:244":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:3540:2568":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"17:13738:20172":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:909:2765":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"2:10309:2905":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"11:1051:2775":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:15992:21161":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"2:43940:132":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"17:12851:16714":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:12150:16855":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"1:836:2533":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"18:651:2502":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"0:46:1914":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"2:45738:3190":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"6:6915:14371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"2:42308:74":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:42013:8396":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:8274:2566":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"17:11915:16893":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"30:899:21318":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"17:11089:16742":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:11063:16751":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:597:16689":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4876:13539":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"2:37672:8821":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:10919:21581":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"2:41490:2761":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:4992:13553":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"24:190:2397":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"16:5385:16508":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"17:14876:20937":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"6:491:9574":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"2:13421:117":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"21:7661:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:40021:2480":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"18:680:21208":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:7467:14751":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:11048:8447":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"17:10997:16729":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"17:15822:21003":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"21:422:2009":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"16:4424:16112":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"2:44149:3318":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"21:5264:1137":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"2:45398:3241":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"21:8557:2428":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"21:15218:2629":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"1:645:2738":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"2:41796:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"6:6478:14313":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"21:11318:2501":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"14:0:2218":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"5:5453:2437":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:7938:2716":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"11:832:2765":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"5:1528:2763":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"2:5739:2911":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"17:11773:16887":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:14279:237":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"6:8259:13785":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:1087:2451":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"21:4486:21235":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"16:3475:15617":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"1:10606:2940":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"2:40053:2400":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"21:14117:33997":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"1:12283:1767":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"2:4140:29116":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"6:5344:13589":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"5:7638:8505":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"5:2528:29750":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"5:4425:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"21:12419:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"2:8404:2786":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:5212:2036":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"17:15214:20957":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"2:45700:3236":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:22122:8837":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"2:39761:2732":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"2:45512:3262":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"17:11647:16834":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:8301:16614":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"2:41231:2956":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:30245:8737":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:22503:28012":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"21:12982:2531":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"17:13797:20174":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"11:687:2760":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"6:1653:10485":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"6:6636:14323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"16:4976:16273":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"1:2669:24486":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"21:9369:2473":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"30:1237:21319":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"21:4503:2542":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"1:11493:25150":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"5:3286:31396":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:4730:2991":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"17:14847:20934":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"11:2423:2761":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"21:15074:33997":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"17:11341:16781":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"17:15456:20980":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"5:6033:3116":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:1054:2774":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"6:5445:13600":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"16:8313:138":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:3233:27366":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"14:220:15518":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:43448:8465":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"6:5134:13566":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"17:13766:16896":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"21:14083:2556":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"2:31750:16613":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"1:9150:3139":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"17:15400:20974":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:11016:24491":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"21:9232:33997":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:8662:3079":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"17:11605:16828":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"17:15356:20969":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"15:288:15532":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"18:659:21206":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"11:1917:2779":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"17:12516:16961":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"2:42292:28161":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"21:15157:2623":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"2:42983:2500":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"16:2572:15595":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:40131:2492":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:22120:28748":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:31869:116":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"1:3588:25346":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:41718:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"5:7346:2793":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"11:1887:2761":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"1:1968:2846":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"17:13024:16721":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"21:7539:2422":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"2:42027:8404":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"5:6054:9174":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:11865:16892":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"30:1559:21208":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"1:356:2727":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:7713:8523":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"1:3938:2964":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"6:7546:14755":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:40145:2493":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"6:5546:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15473:20982":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"17:15418:20976":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"1:3418:2931":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"21:2553:34019":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"17:14341:20208":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"6:5624:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"22:7:2030":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"21:10298:33997":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"1:2691:2927":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"1:12272:1746":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:41601:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:4440:30839":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"21:13246:2522":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"1:6104:220":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"17:10185:16666":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"30:1530:21206":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:5653:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"21:10962:2495":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"1:8399:2536":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"16:6160:15554":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:12125:8912":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:7339:14745":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"21:15376:2455":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"5:2759:29747":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"16:5846:16520":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"21:14482:33997":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"21:7373:2406":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:12942:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"21:8059:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:13288:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"6:5102:13563":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"1:4262:3021":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"2:7723:2466":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:11510:16775":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"1:414:185":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:7584:14758":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"13:109:32433":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"1:8171:2758":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"21:11209:2499":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"17:15624:20989":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:5195:27090":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"17:11026:16731":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"16:7473:16577":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"2:41219:2965":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"16:5075:16303":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"21:7155:33997":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:13941:33997":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"21:9569:2476":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"6:5423:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"21:6556:34003":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"21:10773:33997":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:31746:26845":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"17:3597:16874":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"1:9165:3137":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"31:102:2075":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"21:13759:33997":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"21:13116:2523":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"21:7192:2405":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"17:13437:19677":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"21:14657:2612":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"5:7082:30830":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:11606:21656":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:15445:20979":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"21:3786:2015":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"17:14402:20212":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"30:1250:21320":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"2:39992:2477":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"21:12206:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"2:2315:8837":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:12264:1137":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"6:4800:13533":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:15734:20996":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"10:44:15483":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"17:12362:16939":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"21:13152:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"2:25485:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:11674:16835":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"17:15569:20984":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"6:5112:13564":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"6:5290:13582":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"21:6934:33997":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"15:394:15544":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"1:4270:3022":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"21:14145:2559":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"1:12284:1773":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"2:42515:2904":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:43604:8495":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"16:7580:16585":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"21:6182:2026":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"1:11211:162":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"1:5353:203":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"6:473:9571":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:8095:2420":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"16:7061:16572":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:12056:16853":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:1891:2556":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"21:7777:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:9886:16692":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"2:4927:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"16:6976:16568":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"21:6056:2508":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"21:15230:2495":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"17:14091:20193":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:15138:20950":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"11:2151:2775":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"5:2310:31335":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"21:9992:33997":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"2:43491:8474":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"17:11730:16838":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"2:2981:8383":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"16:7711:210":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"28:60:2556":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"17:14560:20223":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"17:10828:33559":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"11:742:2767":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:15596:20986":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"28:55:2760":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"2:40096:2489":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"17:11313:16769":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:44171:181":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"16:7085:32807":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:3597:2628":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"30:1508:35417":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"17:15313:20965":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"2:30260:8393":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"16:6120:16531":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"21:12856:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"21:10139:2502":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"17:16187:21171":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"1:7958:2713":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"16:5960:16524":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"27:72:21299":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"17:14489:20218":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:2394:15587":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"2:9521:92":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"2:10893:2926":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:8494:2960":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"27:146:220":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:22610:2969":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"6:1585:10480":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"1:10255:27084":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"6:5472:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"16:4913:16256":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:11242:16765":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"1:1585:2764":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"27:154:3139":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"2:40513:8763":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:12282:1785":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:15799:21001":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:11392:16779":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"30:1166:21319":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"18:531:21217":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"21:6747:33872":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"2:22623:2968":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"1:7986:2741":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"2:39865:2854":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"17:15944:19663":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"6:1485:10468":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5046:13559":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"2:41415:2744":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"11:1728:156":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"11:490:154":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:22438:28056":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"18:521:21213":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:13814:20175":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:9640:24510":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"2:39693:8584":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"6:5244:13576":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"16:6300:16534":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"2:39091:8539":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"2:39776:8579":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"16:6494:16547":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"2:30239:8522":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"17:16093:21164":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"1:8122:2896":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:41349:2533":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"21:8635:33997":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"21:15499:33869":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"30:1200:21208":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"6:559:9582":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"1:9273:16574":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"31:0:2069":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"17:15521:20983":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"1:8264:27118":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"21:6338:186":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"6:7984:9530":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"1:1578:2761":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"21:9002:2442":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"27:127:21284":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"17:12089:16850":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"30:1425:21189":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"2:8413:8767":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"17:11853:16891":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"17:12127:16857":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"1:11139:3100":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:5742:220":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:13015:16677":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"21:14347:2563":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"1:867:2762":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"6:1535:10475":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"13:0:2211":{"crate_id":13,"path":["std_detect"],"kind":"module"},"16:7741:16594":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"6:4965:13549":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"16:3899:15679":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"18:80:21188":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"2:42020:8397":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"18:96:21189":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"21:14396:33997":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"2:22253:3303":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"2:41271:2958":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"18:670:21207":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"17:13116:16991":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"1:1826:2815":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:918:2767":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:2274:2595":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"2:2660:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"5:7375:2556":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"21:14031:2533":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"5:297:2575":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:9401:33997":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"2:40546:8766":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:43890:8951":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:43224:8482":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:7651:27635":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"1:3239:22178":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"17:12264:16905":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"16:5347:16506":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"21:12183:2401":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"1:12248:21638":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"28:46:2533":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"6:5382:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"14:214:15517":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"11:396:32359":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"16:6606:16554":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"16:7618:16588":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"17:11715:16837":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"2:43457:8464":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"31:125:2077":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"16:6665:16558":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"17:9737:16662":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"21:10367:2494":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"17:11877:16848":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:8804:3084":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"17:11661:16805":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:12225:16908":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"21:15358:33997":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"17:13509:19682":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"6:6471:14312":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"17:12175:16921":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"27:441:3138":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"1:8488:2961":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"1:8798:2533":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:10872:2896":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"21:15321:33926":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"21:7503:165":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"30:1069:21316":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"6:1547:10476":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"1:4141:2993":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"20:82:2352":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"16:2838:15607":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:256:32833":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:7321:3065":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"21:0:2008":{"crate_id":21,"path":["futures_util"],"kind":"module"},"11:1160:2776":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"16:7910:16602":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"2:41253:2957":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"21:9733:33997":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"11:1007:2773":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"1:10901:2567":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"21:8596:33997":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"16:2528:15593":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"1:2439:2884":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"1:11528:24494":{"crate_id":1,"path":["std","sys_common","once","futex","CompletionGuard"],"kind":"struct"},"2:7377:8777":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"21:8339:2417":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"6:6435:14308":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"2:41679:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"6:4985:13552":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"21:12758:33878":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"17:12508:16946":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"30:1015:21328":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"21:20:1258":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"17:16212:21173":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:12030:16854":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"21:11117:33997":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"1:9356:3128":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"30:1158:21318":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"2:22332:28028":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"19:0:1235":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"21:13817:2538":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"2:40280:2495":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:2654:163":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"21:15290:2633":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"17:11557:16831":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"16:6634:16556":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:39021:216":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"21:6377:21248":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"1:10910:21568":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"1:4091:2990":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"2:45594:27891":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"21:15198:2627":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"1:9467:2831":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"1:6263:3319":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"1:12279:869":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"5:3637:183":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"2:22070:3310":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"5:4106:30837":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:45783:3196":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"21:13215:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"21:14001:21231":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"16:7111:32520":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"17:11812:16847":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:8006:2834":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"1:1446:156":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"17:12454:16942":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"21:10451:2402":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"1:5756:3134":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"21:7917:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:4128:29114":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"6:4942:13546":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"27:187:21289":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"6:1699:10490":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"21:11831:2509":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"21:9828:2398":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"21:9508:33997":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"17:13922:20181":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"1:903:2764":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"16:2878:15609":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"21:5875:2911":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"2:12141:8914":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"11:2369:15501":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"21:15454:33939":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"2:43296:8449":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:35631:8817":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"2:11654:8436":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"5:1065:30837":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"16:6504:16548":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"17:10877:16709":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:4194:8546":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"1:9635:2895":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"30:1049:21327":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"21:7636:2422":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"21:7130:2403":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"2:43975:8973":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:538:9579":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"17:15463:20981":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"2:3355:8544":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"2:2626:2898":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"5:7521:2757":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"21:13536:2512":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"21:11083:2496":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"1:6414:220":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:10701:239":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"2:7948:166":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"21:7345:33997":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:2548:15594":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"5:6591:30837":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:45626:3224":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"31:136:2073":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"22:0:2360":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"17:15748:20997":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"6:5598:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"21:13597:2513":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"17:10155:16508":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"2:41357:2760":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"2:3349:147":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:8748:3082":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"17:15769:20999":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"2:13494:152":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"16:7549:16582":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"21:11439:2503":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"17:11142:16707":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:4311:2533":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:13439:3319":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"17:10759:16707":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"21:14925:2616":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"21:15256:33997":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"17:15324:20966":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"1:7870:24508":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"17:10954:16727":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"21:15556:33865":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"21:9114:33997":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"2:45442:3195":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:10953:21578":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"1:5684:3097":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"17:12863:16715":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"1:8180:22305":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11688:24504":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"1:8482:2620":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"2:38914:8823":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:1040:2773":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:39850:28042":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:15197:20955":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:4830:16242":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"17:13946:20182":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"6:1526:10474":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"6:5160:13568":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:7452:14749":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:45317:3261":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6782:16560":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"2:3623:2556":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"17:10170:16509":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:6079:16529":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:11419:16707":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"2:6439:8780":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"16:2902:15610":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"21:2780:33880":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"function"},"2:4175:8379":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"9:178:15478":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"21:14134:2558":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"17:11567:16832":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:14933:20939":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"5:7363:2783":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:31781:2570":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"16:2592:15596":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"2:41291:194":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:3522:2621":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:2998:15612":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"30:971:21209":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"17:15616:20988":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:5020:3048":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"17:13568:19686":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"21:6846:33997":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"21:5266:2041":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"2:2986:8384":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"2:2898:119":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"2:45104:3222":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:12107:16707":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"2:2945:8785":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"2:31838:8786":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"30:1391:21214":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:22108:3313":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"1:1885:2831":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"2:39795:8581":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"2:32863:3168":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"2:45948:3225":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"17:11443:16784":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"21:10822:33997":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:2766:2014":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"21:14256:33997":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"5:3650:2533":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"16:2636:15598":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"5:3247:2778":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:43894:8953":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"11:787:2763":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"21:7815:2425":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"17:13485:19680":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"17:11583:16803":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"21:10702:2488":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"6:5329:13587":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"1:10848:2892":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"6:5002:13554":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"16:5722:16512":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"2:13245:2427":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"21:14904:33997":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"18:581:8601":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"1:2271:2875":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"2:46281:8350":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"2:13272:205":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12900:16717":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:12051:24454":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"16:6480:16546":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"6:5466:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"2:39078:8531":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"21:39:2373":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"17:13387:19673":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:8451:29658":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"30:1145:21317":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"17:13375:19672":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"21:9338:2452":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"6:4979:13551":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"2:43898:8952":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:5052:13560":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"5:7355:2761":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:1791:1298":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"17:10251:16698":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:11166:16745":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:40538:2535":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"28:76:35363":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"16:6442:16543":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"29:25:2023":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"6:1723:10492":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"5:1466:2533":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:8364:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:4614:16164":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"1:8815:3085":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"2:38963:212":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"27:481:3080":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"17:15222:20958":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"1:5421:130":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"30:1579:21210":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:8034:2414":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"1:12286:1761":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"21:8278:2418":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"28:217:2773":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"2:4767:8572":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"21:7265:2400":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"2:40030:27860":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:2896:8381":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"16:7656:16590":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"16:6962:16567":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"2:46418:8359":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"5:220:8392":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:6447:14310":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"17:10720:33417":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"6:7359:14747":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"21:14844:33997":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"1:9342:2911":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:3669:15619":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:21352:2898":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"2:42774:8430":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"21:12383:2421":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"1:8269:27127":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"6:5283:13581":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"6:7561:14756":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:1883:8847":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"17:14038:20189":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:9065:3099":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:7769:16596":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"6:6491:14269":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"17:15383:20972":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"21:7586:33883":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"2:41876:98":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"21:15382:33942":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"21:14693:33997":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"1:9286:21646":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:282:30837":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"1:5011:3047":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"17:403:16687":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"17:15434:20978":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"16:2708:15601":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"2:10045:121":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:14386:20211":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"21:11052:33997":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"1:6698:3126":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"16:2808:15606":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"1:1824:2814":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"21:15148:2622":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"17:11128:16739":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"21:15091:2620":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"21:6217:2025":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"2:43438:8476":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:5749:3133":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"21:8532:2426":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"1:880:2763":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"17:9984:16695":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"16:150:15560":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"16:4062:15796":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"21:15123:33997":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"6:6689:14329":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"21:10639:33997":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"1:10321:3104":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"30:1123:21208":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"26:53:35349":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"16:6433:16542":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"9:53:15392":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:11367:16747":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"6:7412:10598":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"16:3329:15616":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"16:6466:16545":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"6:1692:3013":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"2:4:1218":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"2:21750:2898":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"2:45360:3229":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"17:15931:19662":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"2:41640:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"17:13292:19667":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"24:0:2105":{"crate_id":24,"path":["futures_task"],"kind":"module"},"11:2554:32384":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"16:6991:32519":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"5:7565:28042":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"21:11247:33997":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"5:3743:30837":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:40490:27980":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"1:7406:26815":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"21:9131:2448":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"2:45495:3256":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"30:1436:21190":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"1:11840:27093":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"17:513:16688":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"6:6379:14241":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"2:13549:2785":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"16:5006:16280":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"5:3035:30920":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"17:12464:16943":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:4479:8556":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"27:371:3133":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"5:7419:2761":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"5:3794:2617":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"17:12213:16935":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"1:10654:2713":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"11:2352:2775":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:10573:33233":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:8110:2895":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"5:3273:2779":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"5:6935:8527":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:7986:131":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"2:39676:2732":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"21:5256:21242":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"17:13674:20170":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"16:6927:16565":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"21:10056:33997":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"11:1566:15498":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:42540:157":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"21:12899:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"21:12824:2514":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"17:11755:16840":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"1:2269:139":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"21:13691:2537":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"17:10534:33348":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"17:12485:16945":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"1:12285:1779":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"16:4771:16229":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:4410:8548":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"31:109:2072":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"1:9361:3129":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"30:1479:21205":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"2:3389:8385":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"21:7488:33997":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"16:3778:15627":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"2:1761:8746":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"2:46342:8355":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:13785:16895":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"1:1596:2778":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"16:7132:32790":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:10001:2632":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"21:15209:2628":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"30:909:21319":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"2:43049:8427":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"2:1675:2911":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"2:40290:2497":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:4926:3001":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:6231:16532":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"11:2383:2533":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"1:5863:3118":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"1:1939:2845":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"1:8561:2961":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"2:12157:8466":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"6:6714:14332":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"6:1593:10481":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"17:11688:16801":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"2:22517:28019":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"16:6047:16527":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"2:43918:8950":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"6:5390:13595":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"16:7590:16586":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:31764:8557":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"5:41:2810":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"1:8105:2894":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:8216:16611":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"1:2587:2611":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"21:15417:33873":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"1:4039:2986":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"6:1517:10473":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"21:13462:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"14:160:15508":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:3461:2534":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"11:1582:15499":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"2:39264:8606":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"11:123:32367":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"21:13524:33902":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"6:5636:13620":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"2:2301:649":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:21477:3178":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"21:10889:2493":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"2:45089:3186":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"6:7330:9453":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"6:5236:13575":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"1:8132:2893":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"17:2175:16817":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"17:15760:20998":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"21:15166:2624":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"6:5677:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"2:21269:29400":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"5:1727:30837":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"17:14587:20224":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"17:13497:19681":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:33582:8814":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"17:11493:16789":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:10504:3098":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"1:10843:25165":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"16:6317:16535":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"17:11841:16890":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"17:14012:20187":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"5:6545:2556":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"2:41031:171":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"2:10019:144":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"1:6187:24500":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"30:1208:21316":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"17:15836:21004":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"2:21791:29402":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"17:13046:16674":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"1:9351:235":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"18:718:21203":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:44210:28063":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"5:7604:8417":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"17:14529:20221":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"1:3011:226":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"11:800:2556":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"17:12683:16954":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"2:3344:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:10018:16668":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"2:10062:8402":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:31837:2571":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:13459:3316":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"1:4069:2988":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"1:11442:2872":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"2:31780:237":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"21:12133:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"1:945:2771":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"18:548:153":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:400:24491":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"5:7552:2853":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"1:6477:186":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"17:10818:16708":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"16:4882:16248":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"2:46261:8348":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:6821:14342":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"16:5802:16517":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"6:5260:13578":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"21:7045:33997":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:4051:2911":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:41482:2760":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"1:8590:3052":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:9346:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"2:42034:8405":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:5076:3056":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"16:8136:16606":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"17:13455:19678":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"1:8475:2926":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"21:12333:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:261:32894":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"2:4948:27699":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"14:40:19664":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:9708:28192":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"2:3139:2572":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"11:1107:15496":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"6:7516:14753":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"2:22561:27973":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"2:43242:8481":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"17:14079:20192":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:9078:3100":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:43758:8501":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"21:8896:33997":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"17:12621:16955":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"16:5367:16507":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"30:1515:21217":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"17:11898:16868":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"21:7393:33997":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:13855:20178":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"2:3374:29563":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"2:42523:27893":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"5:1519:2762":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:31867:8380":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:5191:13570":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"1:6088:3133":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:46457:8360":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"2:2455:201":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"2:12843:121":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:21479:3177":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"17:13252:19665":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:503:2703":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"6:8351:15328":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"17:11214:16738":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"30:1179:21320":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"26:43:35350":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"2:44090:219":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"16:4856:16245":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"21:10508:2481":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"1:5508:3091":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"21:7840:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12300:16937":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"2:33099:8811":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:10127:22154":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"17:12353:16938":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"1:1862:2825":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"17:14545:20222":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"17:14723:20931":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"13:226:32386":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"1:7299:22725":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"17:13877:20179":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"16:6532:16549":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"21:10841:2492":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"11:2304:2773":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"6:1621:10482":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"11:1676:32368":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:21901:2898":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"17:1098:16744":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"11:1923:2780":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"21:6212:2027":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"1:12288:1845":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"16:4940:16260":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"5:5405:30837":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"17:13972:20184":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"5:5449:2475":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"21:10661:2487":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"2:6634:27981":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:22576:28138":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"2:2460:135":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"16:7052:16571":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"1:7811:21911":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:13297:2430":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"6:8012:15129":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"1:5897:3061":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"17:10218:16667":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"21:15224:2630":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"6:1639:10484":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:43922:8972":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:13538:19684":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:42992:8441":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"11:1087:32385":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:4145:2994":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"1:7049:3172":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"21:10727:33997":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"20:32:2007":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"1:1887:2832":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:1860:8848":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:2399:103":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"16:2768:15604":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"5:6754:30837":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"2:41113:28023":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"16:2458:15590":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"17:10661:16705":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"2:21354:3176":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"6:8265:13786":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"2:43342:8478":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"17:12768:16669":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"17:11354:16780":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"1:859:2761":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:43002:8439":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"4:0:2212":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"21:14056:2760":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"6:5277:13580":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"6:5064:13561":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"17:13844:20177":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"21:8217:2415":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"2:43799:8484":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:3426:8388":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"21:15042:2619":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"1:12269:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"5:2104:2796":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8469:2925":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"5:831:2488":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:11828:8366":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:6982:33997":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:7256:21919":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"17:12647:16950":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"18:735:21204":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"1:12271:1658":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"5:6001:72":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:39961:2473":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"21:11763:2507":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"17:16032:19665":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"21:587:2010":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"1:7933:2714":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:12557:16747":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"21:8303:33997":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:725:2898":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"21:7100:33997":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"12:0:2217":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"16:2323:15583":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"1:9628:139":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"21:12513:2516":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"5:6912:8526":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"11:1896:2764":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"16:7755:16595":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"1:4617:3029":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"9:357:15389":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:12615:8458":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"21:13030:2532":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"17:11467:16782":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"16:4743:16224":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"24:9:21229":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"30:1523:21215":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"17:16249:21176":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"1:11193:21647":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"21:14040:2761":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"1:11854:15541":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:12808:16672":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:21301:3181":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"1:4595:3028":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"2:38926:213":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"11:883:2772":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:11545:25172":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"21:11010:2497":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"1:588:2730":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"16:6813:16561":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"2:45221:3240":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:43482:2732":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"9:0:2214":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"17:10419:16663":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"5:3307:2780":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"20:92:2898":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"6:8006:15128":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"30:1500:21213":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"5:5917:2556":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"11:1910:2778":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"1:2730:2614":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"21:12448:2520":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"1:9225:2707":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"17:12969:16665":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:9938:16694":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"21:8401:2419":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"2:39925:2897":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"17:15281:20962":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"21:10597:2484":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"16:2374:15586":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"11:1025:2774":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"21:6767:2032":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"6:7348:14746":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"17:11051:16757":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"21:13423:2528":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"16:8073:16603":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"5:7405:31330":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"16:4352:16063":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"6:1490:10469":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:12263:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"1:10234:2825":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"17:0:2221":{"crate_id":17,"path":["object"],"kind":"module"},"17:14177:20197":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"18:589:21328":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"2:43669:8497":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:3278:2941":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"2:7663:2536":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"2:43768:8502":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"6:4932:13545":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:10412:24579":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"1:7800:16689":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:22220:3304":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"17:14246:20201":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"16:7428:16576":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"2:39769:8473":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:4131:2992":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"21:14220:2561":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"1:4083:2989":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"6:5181:13569":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"21:7697:33883":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"3:234:226":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"24:169:2395":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"21:13801:33997":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"21:13658:2533":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"17:11115:16740":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"20:97:2013":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"1:922:2768":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"21:10538:33997":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:46244:3264":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"21:7080:2401":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"2:46270:8349":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"21:14739:33997":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"2:21235:29396":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"17:15116:20948":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"2:22453:27989":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"6:465:9570":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"17:14284:20204":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"30:1024:21329":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"16:8188:16609":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"1:10609:2942":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:11578:21639":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"5:4076:2556":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"17:13272:19666":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"17:10044:16696":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"6:8029:15130":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"5:7536:2718":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"2:21755:3183":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"2:46025:3197":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"14:165:15509":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"21:21:1258":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"2:40074:2402":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:37562:8819":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:12569:2871":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:4334:3024":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"1:481:24489":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"27:368:220":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"16:4718:16222":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"21:13173:2521":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"21:8831:33997":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"16:5700:16511":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"2:40044:2399":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"2:31771:8875":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"6:8317:13793":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"5:1156:31357":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:42263:8393":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"17:15582:20985":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:8795:2438":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"17:13363:19671":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"16:6398:16539":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:44198:8370":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:8499:2952":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"6:6542:14317":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"27:452:3140":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"6:1686:10489":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"29:17:2022":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"2:41499:196":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"11:774:2762":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"16:3925:15682":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:0:1650":{"crate_id":1,"path":["std"],"kind":"module"},"17:14066:20191":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:22175:8837":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"6:5489:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"2:46173:3258":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"2:46290:8351":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"2:45189:3228":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:8021:2835":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"21:13908:2540":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"6:7306:9623":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:2030:198":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"2:41523:90":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"17:14414:20213":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"16:6940:32804":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"21:12647:2422":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"2:3271:211":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"21:13400:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"21:13636:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"31:38:35421":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"21:12798:32830":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"6:4909:13542":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"1:8115:2892":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:43144:8469":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"6:4891:13372":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"17:15678:20993":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"17:10137:16661":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:4414:3025":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"15:0:2219":{"crate_id":15,"path":["addr2line"],"kind":"module"},"2:40012:2479":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:44083:150":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"21:12308:2417":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"6:4916:13543":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"1:939:2770":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:38866:8387":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"21:13348:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"17:11764:16841":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"30:878:21316":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"5:1481:2760":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"21:13008:33997":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"21:14065:2761":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"1:12290:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:39895:2870":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:33236:8812":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:16121:21166":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"2:5930:2398":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:9232:21566":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"2:45235:3188":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:14311:20206":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:43466:8463":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"2:45611:28022":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"21:7887:2413":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"2:46115:3203":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"17:15092:20946":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"16:6353:16537":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"1:11158:8972":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"5:1172:30936":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"6:1496:10470":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"17:12408:16931":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"17:12724:16712":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"9:392:15374":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"17:15023:20944":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"16:5831:16519":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"2:44086:165":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"17:11825:16869":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"1:533:2708":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:2743:138":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"2:43747:8500":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"27:495:21301":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"21:7222:33997":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:11592:21550":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"5:927:2782":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"1:12266:1806":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:39932:8427":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"6:6721:14333":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"21:4954:2562":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"1:7851:24479":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"21:11180:33997":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"2:12425:8453":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:6678:14328":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:45671:3230":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"30:1545:21207":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"16:7633:32554":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"2:10844:2533":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:10891:129":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"1:1975:759":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"1:12275:714":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"18:643:2502":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"16:7727:16593":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"21:335:33795":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"17:12342:16904":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"17:12318:16719":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:31757:28351":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"6:7366:3052":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:12609:8462":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"21:9646:2478":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"17:11524:16829":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"9:238:3080":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:14599:20225":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:43120:8475":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"5:871:2781":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"16:2303:15555":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"17:13832:20176":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8462:2495":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"21:9010:2443":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"6:6417:14307":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"2:43428:2620":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"30:1039:21331":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"11:2548:32373":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"6:6874:14369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"17:15426:20977":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:39071:8825":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:8547:3027":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"2:10304:2903":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"30:1490:35403":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"21:11866:33997":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"2:45074:3221":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:3128:2358":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"2:22385:28030":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"16:7823:16599":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"21:13047:2518":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"17:13723:20171":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"21:12582:2517":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"6:4824:13535":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"6:4787:13532":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"21:7455:2410":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"17:15720:20995":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"17:13325:19669":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"17:9671:16664":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"1:9115:2761":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"5:1328:2775":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"18:563:21219":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"17:12388:16930":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"21:12697:2527":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"1:9260:27115":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"21:7325:2404":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"6:586:9586":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"6:5588:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"2:2664:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"5:7615:243":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"3:0:485":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"17:12659:16949":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"21:14667:2613":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"1:2978:24484":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:40083:8773":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:15957:21160":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"31:68:2071":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"17:14436:20214":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"1:8567:3019":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"1:9369:162":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"2:2402:104":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:6532:14316":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"2:8407:2790":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:3371:2939":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"21:13727:205":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"17:15301:20964":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"17:10350:16701":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"16:4468:16133":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"2:39834:107":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:10060:206":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:5816:2481":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:21281:29406":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"6:497:9575":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"21:4439:21233":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"6:4811:13534":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"1:8452:2473":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:16198:21172":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"6:6609:14320":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"30:142:21323":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"17:12494:16909":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:15701:20994":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:46144:3237":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:3276:2940":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"1:6766:3132":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"17:10710:16706":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"9:330:15429":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"1:8432:2569":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:14051:20190":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:6650:14324":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"6:6670:14327":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"21:7419:2408":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"21:14574:2610":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"16:6749:16559":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"21:15438:33868":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"16:6026:16526":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"11:1142:15497":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"17:13424:19676":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"6:5361:13591":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"5:3874:2764":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"5:1578:2795":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:43062:8428":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"11:710:2766":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"6:5436:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"1:2449:2889":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"2:45833:3208":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"21:14289:2540":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"5:3240:2533":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"2:42280:2476":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:2648:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:45850:3257":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:8196:2617":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"5:1357:2776":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"21:11704:33997":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"6:4897:13541":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"30:934:21321":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"16:6802:15526":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:14868:20936":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:7014:16570":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"21:9606:2477":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"21:12913:2529":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:43192:8447":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"17:15390:20973":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"2:4590:8560":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:11176:2901":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"5:3211:101":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"6:5502:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"1:4740:21675":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"21:11344:33997":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"2:41069:2954":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"2:10691:2898":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:8420:2567":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"1:10253:24578":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"17:14111:20194":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"21:9592:33997":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"17:15342:20968":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"2:10054:8396":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"21:57:2037":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"5:3663:2760":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"21:15035:32321":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"1:12232:27637":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"31:65:2070":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"0:56:1278":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"21:14809:119":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"1:12216:21658":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"1:9265:27119":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:21372:3177":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}