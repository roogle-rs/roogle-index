{"root":"0:0:2152","crate_version":"0.3.30","includes_private":false,"index":{"2:13155:22843":{"id":"2:13155:22843","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13202:30508":{"id":"2:13202:30508","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12804:8517","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::match_indices":"2:13199:30507"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43588:8533","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13211:30512":{"id":"2:13211:30512","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13172:22833":{"id":"2:13172:22833","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12804:8517","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split":"2:13166:2656"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43438:8502","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:54-31:120:2124":{"id":"0:54-31:120:2124","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,77],"end":[197,86]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalPool","name":"LocalPool","id":"31:120:2124","glob":false}}},"0:62-21:4707:2066":{"id":"0:62-21:4707:2066","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,26],"end":[239,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink","name":"sink","id":"21:4707:2066","glob":false}}},"0:71-21:5171:2067":{"id":"0:71-21:5171:2067","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[246,4],"end":[246,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"crate::sink::SinkExt","name":"_","id":"21:5171:2067","glob":false}}},"0:31-21:6767:2080":{"id":"0:31-21:6767:2080","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,23],"end":[133,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::join","name":"join","id":"21:6767:2080","glob":false}}},"0:69-21:422:2057":{"id":"0:69-21:422:2057","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,28],"end":[244,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::FutureExt","name":"_","id":"21:422:2057","glob":false}}},"2:13237:24192":{"id":"2:13237:24192","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39459:8663","Self::is_ascii":"2:13236:24191"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39459:8663","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13181:22835":{"id":"2:13181:22835","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517","str::rsplitn":"2:13184:22837"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43524:8506","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13146:2647":{"id":"2:13146:2647","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43674:2673","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13240:24196":{"id":"2:13240:24196","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5604:31217":{"id":"5:5604:31217","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2628","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:295:2628","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:46:1962":{"id":"0:46:1962","crate_id":0,"name":"executor","span":{"filename":"src/lib.rs","begin":[156,0],"end":[156,16]},"visibility":"public","docs":"Built-in executors and related tools.\n\nAll asynchronous computation occurs within an executor, which is\ncapable of spawning futures as tasks. This module provides several\nbuilt-in executors, as well as tools for building your own.\n\n\nThis module is only available when the `executor` feature of this\nlibrary is activated.\n\n# Using a thread pool (M:N task scheduling)\n\nMost of the time tasks should be executed on a [thread pool](ThreadPool).\nA small set of worker threads can handle a very large set of spawned tasks\n(which are much lighter weight than threads). Tasks spawned onto the pool\nwith the [`spawn_ok`](ThreadPool::spawn_ok) function will run ambiently on\nthe created threads.\n\n# Spawning additional tasks\n\nTasks can be spawned onto a spawner by calling its [`spawn_obj`] method\ndirectly. In the case of `!Send` futures, [`spawn_local_obj`] can be used\ninstead.\n\n# Single-threaded execution\n\nIn addition to thread pools, it's possible to run a task (and the tasks\nit spawns) entirely within a single thread via the [`LocalPool`] executor.\nAside from cutting down on synchronization costs, this executor also makes\nit possible to spawn non-`Send` tasks, via [`spawn_local_obj`]. The\n[`LocalPool`] is best suited for running I/O-bound tasks that do relatively\nlittle work between I/O operations.\n\nThere is also a convenience function [`block_on`] for simply running a\nfuture to completion on the current thread.\n\n[`spawn_obj`]: https://docs.rs/futures/0.3/futures/task/trait.Spawn.html#tymethod.spawn_obj\n[`spawn_local_obj`]: https://docs.rs/futures/0.3/futures/task/trait.LocalSpawn.html#tymethod.spawn_local_obj","links":{"`block_on`":"31:65:2118","`LocalPool`":"31:120:2124"},"attrs":["#[cfg(feature = \"executor\")]"],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:48-31:65:2118","0:49-31:68:2119","0:50-31:109:2120","0:51-31:136:2121","0:52-31:100:2122","0:53-31:102:2123","0:54-31:120:2124","0:55-31:125:2125"],"is_stripped":false}}},"0:4-2:44331:149":{"id":"0:4-2:44331:149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,31],"end":[105,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::Future","name":"Future","id":"2:44331:149","glob":false}}},"5:5620:31221":{"id":"5:5620:31221","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:295:2628","`String`":"5:7632:242"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:295:2628","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5623:24247":{"id":"5:5623:24247","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:13240:24196"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:23-21:6217:2073":{"id":"0:23-21:6217:2073","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,23],"end":[124,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncBufReadExt","name":"AsyncBufReadExt","id":"21:6217:2073","glob":false}}},"0:40-21:1291:2059":{"id":"0:40-21:1291:2059","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,44],"end":[137,50]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream","name":"stream","id":"21:1291:2059","glob":false}}},"2:13116:30497":{"id":"2:13116:30497","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:73-21:2766:2062":{"id":"0:73-21:2766:2062","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,28],"end":[249,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::StreamExt","name":"_","id":"21:2766:2062","glob":false}}},"2:13184:22837":{"id":"2:13184:22837","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:12325:458","str::splitn":"2:13181:22835","self::pattern":"2:12804:8517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43542:8504","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5605:8844":{"id":"5:5605:8844","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13216:30515":{"id":"2:13216:30515","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:50-31:109:2120":{"id":"0:50-31:109:2120","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,35],"end":[197,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::enter","name":"enter","id":"31:109:2120","glob":false}}},"0:37-21:104:833":{"id":"0:37-21:104:833","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,23],"end":[137,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future","name":"future","id":"21:104:833","glob":false}}},"0:29-21:6770:2079":{"id":"0:29-21:6770:2079","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[131,0],"end":[131,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select","name":"select","id":"21:6770:2079","glob":false}}},"0:25-21:6212:2075":{"id":"0:25-21:6212:2075","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,54],"end":[124,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncSeekExt","name":"AsyncSeekExt","id":"21:6212:2075","glob":false}}},"0:79-29:20:2072":{"id":"0:79-29:20:2072","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,60],"end":[252,70]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWrite","name":"AsyncWrite","id":"29:20:2072","glob":false}}},"2:13199:30507":{"id":"2:13199:30507","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12804:8517","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatch_indices":"2:13202:30508"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43570:8532","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13158:21253":{"id":"2:13158:21253","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:28-22:7:2078":{"id":"0:28-22:7:2078","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[128,0],"end":[128,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_util::pin_mut","name":"pin_mut","id":"22:7:2078","glob":false}}},"0:19-29:17:2070":{"id":"0:19-29:17:2070","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,35],"end":[121,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncRead","name":"AsyncRead","id":"29:17:2070","glob":false}}},"0:74-21:3786:2063":{"id":"0:74-21:3786:2063","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[249,44],"end":[249,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStreamExt","name":"_","id":"21:3786:2063","glob":false}}},"0:8-21:587:2058":{"id":"0:8-21:587:2058","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,42],"end":[107,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::TryFutureExt","name":"TryFutureExt","id":"21:587:2058","glob":false}}},"0:65-21:1291:2059":{"id":"0:65-21:1291:2059","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,28],"end":[240,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream","name":"stream","id":"21:1291:2059","glob":false}}},"0:81-21:6217:2073":{"id":"0:81-21:6217:2073","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,8],"end":[258,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufReadExt","name":"_","id":"21:6217:2073","glob":false}}},"0:0:2152":{"id":"0:0:2152","crate_id":0,"name":"futures","span":{"filename":"src/lib.rs","begin":[1,0],"end":[260,1]},"visibility":"public","docs":"Abstractions for asynchronous programming.\n\nThis crate provides a number of core abstractions for writing asynchronous\ncode:\n\n- [Futures](crate::future) are single eventual values produced by\n  asynchronous computations. Some programming languages (e.g. JavaScript)\n  call this concept \"promise\".\n- [Streams](crate::stream) represent a series of values\n  produced asynchronously.\n- [Sinks](crate::sink) provide support for asynchronous writing of\n  data.\n- [Executors](crate::executor) are responsible for running asynchronous\n  tasks.\n\nThe crate also contains abstractions for [asynchronous I/O](crate::io) and\n[cross-task communication](crate::channel).\n\nUnderlying all of this is the *task system*, which is a form of lightweight\nthreading. Large asynchronous computations are built up using futures,\nstreams and sinks, and then spawned as independent tasks that are run to\ncompletion, but *do not block* the thread running them.\n\nThe following example describes how the task system context is built and used\nwithin macros and keywords such as async and await!.\n\n```rust\n# use futures::channel::mpsc;\n# use futures::executor; ///standard executors to provide a context for futures and streams\n# use futures::executor::ThreadPool;\n# use futures::StreamExt;\n#\nfn main() {\n    # {\n    let pool = ThreadPool::new().expect(\"Failed to build pool\");\n    let (tx, rx) = mpsc::unbounded::<i32>();\n\n    // Create a future by an async block, where async is responsible for an\n    // implementation of Future. At this point no executor has been provided\n    // to this future, so it will not be running.\n    let fut_values = async {\n        // Create another async block, again where the Future implementation\n        // is generated by async. Since this is inside of a parent async block,\n        // it will be provided with the executor of the parent block when the parent\n        // block is executed.\n        //\n        // This executor chaining is done by Future::poll whose second argument\n        // is a std::task::Context. This represents our executor, and the Future\n        // implemented by this async block can be polled using the parent async\n        // block's executor.\n        let fut_tx_result = async move {\n            (0..100).for_each(|v| {\n                tx.unbounded_send(v).expect(\"Failed to send\");\n            })\n        };\n\n        // Use the provided thread pool to spawn the generated future\n        // responsible for transmission\n        pool.spawn_ok(fut_tx_result);\n\n        let fut_values = rx\n            .map(|v| v * 2)\n            .collect();\n\n        // Use the executor provided to this async block to wait for the\n        // future to complete.\n        fut_values.await\n    };\n\n    // Actually execute the above future, which will invoke Future::poll and\n    // subsequently chain appropriate Future::poll and methods needing executors\n    // to drive all futures. Eventually fut_values will be driven to completion.\n    let values: Vec<i32> = executor::block_on(fut_values);\n\n    println!(\"Values={:?}\", values);\n    # }\n    # std::thread::sleep(std::time::Duration::from_millis(500)); // wait for background threads closed: https://github.com/rust-lang/miri/issues/1371\n}\n```\n\nThe majority of examples and code snippets in this crate assume that they are\ninside an async block as written above.","links":{"crate::io":"21:5266:2089","crate::executor":"0:46:1962","crate::stream":"21:1291:2059","crate::channel":"27:0:2086","crate::future":"21:104:833","crate::sink":"21:4707:2066"},"attrs":["#![warn(missing_debug_implementations, missing_docs, rust_2018_idioms,\nsingle_use_lifetimes, unreachable_pub)]","#![doc(test(no_crate_inject,\nattr(deny(warnings, rust_2018_idioms, single_use_lifetimes),\nallow(dead_code, unused_assignments, unused_variables))))]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:46:1962","0:56:1318","0:4-2:44331:149","0:5-20:32:2055","0:7-21:422:2057","0:8-21:587:2058","0:10-20:68:2060","0:11-20:97:2061","0:13-21:2766:2062","0:14-21:3786:2063","0:15-25:9:2065","0:16-21:5171:2067","0:18-29:27:2069","0:19-29:17:2070","0:20-29:25:2071","0:21-29:20:2072","0:23-21:6217:2073","0:24-21:6182:2074","0:25-21:6212:2075","0:26-21:6199:2076","0:27-20:131:2077","0:28-22:7:2078","0:29-21:6770:2079","0:31-21:6767:2080","0:32-21:37:2081","0:33-21:20:1297","0:34-21:6769:2082","0:35-21:6768:2083","0:37-21:104:833","0:38-21:5264:1157","0:39-21:4707:2066","0:40-21:1291:2059","0:41-21:5212:2084","0:42-21:57:2085","0:43-27:0:2086","0:44-21:6240:2088","0:45-21:5266:2089"],"is_stripped":false}}},"0:60-20:32:2055":{"id":"0:60-20:32:2055","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,42],"end":[238,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFuture","name":"TryFuture","id":"20:32:2055","glob":false}}},"2:13231:30518":{"id":"2:13231:30518","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:53-31:102:2123":{"id":"0:53-31:102:2123","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,65],"end":[197,75]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::EnterError","name":"EnterError","id":"31:102:2123","glob":false}}},"0:14-21:3786:2063":{"id":"0:14-21:3786:2063","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,42],"end":[112,54]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::TryStreamExt","name":"TryStreamExt","id":"21:3786:2063","glob":false}}},"0:38-21:5264:1157":{"id":"0:38-21:5264:1157","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,31],"end":[137,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::never","name":"never","id":"21:5264:1157","glob":false}}},"0:42-21:57:2085":{"id":"0:42-21:57:2085","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[141,0],"end":[141,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream_select","name":"stream_select","id":"21:57:2085","glob":false}}},"2:13149:22841":{"id":"2:13149:22841","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13162:21254":{"id":"2:13162:21254","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41540:190","prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13196:30506":{"id":"2:13196:30506","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12804:8517","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::matches":"2:13193:2378"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43642:8535","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:41-21:5212:2084":{"id":"0:41-21:5212:2084","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,52],"end":[137,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::task","name":"task","id":"21:5212:2084","glob":false}}},"2:13138:22828":{"id":"2:13138:22828","crate_id":2,"name":"split_at_checked","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut_checked`]\nmethod.\n\n[`split_at_mut_checked`]: str::split_at_mut_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at_checked(3).unwrap();\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n\nassert_eq!(None, s.split_at_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_checked(16));  // Beyond the string length\n```","links":{"str::split_at_mut_checked":"2:13139:22829"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13247:30521":{"id":"2:13247:30521","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4891:30521"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:43737:8529","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13187:22839":{"id":"2:13187:22839","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13137:22825":{"id":"2:13137:22825","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_mut_checked`](str::split_at_mut_checked).\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:13136:22824","str::split_at_mut_checked":"2:13139:22829"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:45-21:5266:2089":{"id":"0:45-21:5266:2089","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[152,0],"end":[152,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::io","name":"io","id":"21:5266:2089","glob":false}}},"2:13222:22844":{"id":"2:13222:22844","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13207:30510":{"id":"2:13207:30510","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:77-29:17:2070":{"id":"0:77-29:17:2070","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,38],"end":[252,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncRead","name":"AsyncRead","id":"29:17:2070","glob":false}}},"0:10-20:68:2060":{"id":"0:10-20:68:2060","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,31],"end":[110,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::Stream","name":"Stream","id":"20:68:2060","glob":false}}},"0:13-21:2766:2062":{"id":"0:13-21:2766:2062","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[112,31],"end":[112,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::stream::StreamExt","name":"StreamExt","id":"21:2766:2062","glob":false}}},"0:26-21:6199:2076":{"id":"0:26-21:6199:2076","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,68],"end":[124,81]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncWriteExt","name":"AsyncWriteExt","id":"21:6199:2076","glob":false}}},"0:18-29:27:2069":{"id":"0:18-29:27:2069","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,21],"end":[121,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2069","glob":false}}},"2:13139:22829":{"id":"2:13139:22829","crate_id":2,"name":"split_at_mut_checked","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a valid byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point. The\nmethod returns `None` if that’s not the case.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at_checked`] method.\n\n[`split_at_checked`]: str::split_at_checked\n\n# Examples\n\n```\n#![feature(split_at_checked)]\n\nlet mut s = \"Per Martin-Löf\".to_string();\nif let Some((first, last)) = s.split_at_mut_checked(3) {\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n\nassert_eq!(None, s.split_at_mut_checked(13));  // Inside “ö”\nassert_eq!(None, s.split_at_mut_checked(16));  // Beyond the string length\n```","links":{"str::split_at_checked":"2:13138:22828"},"attrs":["#[must_use]","#[unstable(feature = \"split_at_checked\", reason = \"new API\", issue =\n\"119128\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:49-31:68:2119":{"id":"0:49-31:68:2119","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,18],"end":[197,33]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on_stream","name":"block_on_stream","id":"31:68:2119","glob":false}}},"2:13136:22824":{"id":"2:13136:22824","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is past\nthe end of the last code point of the string slice.  For a non-panicking\nalternative see [`split_at_checked`](str::split_at_checked).\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_checked":"2:13138:22828","str::split_at_mut":"2:13137:22825"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13169:22831":{"id":"2:13169:22831","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12620:8508","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:39-21:4707:2066":{"id":"0:39-21:4707:2066","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[137,38],"end":[137,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink","name":"sink","id":"21:4707:2066","glob":false}}},"2:13205:30509":{"id":"2:13205:30509","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13228:30517":{"id":"2:13228:30517","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13123:30500":{"id":"2:13123:30500","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13242:24199":{"id":"2:13242:24199","crate_id":2,"name":"trim_ascii_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\u{3000}\\n \".trim_ascii_end(), \"\\r hello world\\u{3000}\");\nassert_eq!(\"  \".trim_ascii_end(), \"\");\nassert_eq!(\"\".trim_ascii_end(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:39193"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:15-25:9:2065":{"id":"0:15-25:9:2065","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[115,0],"end":[115,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_sink::Sink","name":"Sink","id":"25:9:2065","glob":false}}},"2:13175:30504":{"id":"2:13175:30504","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12804:8517","str::split":"2:13166:2656","prim@char":"1:12325:458","`DoubleEndedIterator`":"2:8196:129","str::rsplit_terminator":"2:13178:30505"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43470:8537","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13239:24195":{"id":"2:13239:24195","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13115:21678":{"id":"2:13115:21678","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13122:22732":{"id":"2:13122:22732","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:12352:8521"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13241:24198":{"id":"2:13241:24198","crate_id":2,"name":"trim_ascii_start","span":null,"visibility":"public","docs":"Returns a string slice with leading ASCII whitespace removed.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\" \\t \\u{3000}hello world\\n\".trim_ascii_start(), \"\\u{3000}hello world\\n\");\nassert_eq!(\"  \".trim_ascii_start(), \"\");\nassert_eq!(\"\".trim_ascii_start(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:39193"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:78-29:25:2071":{"id":"0:78-29:25:2071","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,49],"end":[252,58]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeek","name":"AsyncSeek","id":"29:25:2071","glob":false}}},"2:13219:21823":{"id":"2:13219:21823","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns the substring after the prefix,\nwrapped in `Some`. Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:63-25:9:2065":{"id":"0:63-25:9:2065","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[239,32],"end":[239,36]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::sink::Sink","name":"Sink","id":"25:9:2065","glob":false}}},"0:35-21:6768:2083":{"id":"0:35-21:6768:2083","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,59],"end":[133,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::try_join","name":"try_join","id":"21:6768:2083","glob":false}}},"2:13238:24194":{"id":"2:13238:24194","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:55-31:125:2125":{"id":"0:55-31:125:2125","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[198,8],"end":[198,20]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::LocalSpawner","name":"LocalSpawner","id":"31:125:2125","glob":false}}},"2:13178:30505":{"id":"2:13178:30505","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12804:8517","str::split":"2:13166:2656","prim@char":"1:12325:458","str::split_terminator":"2:13175:30504"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43488:8536","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13213:30514":{"id":"2:13213:30514","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12830:8512","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5603":{"id":"5:5603","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5604:31217","5:5605:8844","5:5608:31218","5:5611:31219","5:5619:31220","5:5620:31221","5:5621:2516","5:5622:24246","5:5623:24247"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:13244:30520":{"id":"2:13244:30520","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4893:30520"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43719:8528","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:11-20:97:2061":{"id":"0:11-20:97:2061","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[110,39],"end":[110,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::stream::TryStream","name":"TryStream","id":"20:97:2061","glob":false}}},"2:13126:22796":{"id":"2:13126:22796","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5608:31218":{"id":"5:5608:31218","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:52-31:100:2122":{"id":"0:52-31:100:2122","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,58],"end":[197,63]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::Enter","name":"Enter","id":"31:100:2122","glob":false}}},"0:58-21:104:833":{"id":"0:58-21:104:833","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,28],"end":[238,32]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future","name":"future","id":"21:104:833","glob":false}}},"0:7-21:422:2057":{"id":"0:7-21:422:2057","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[107,31],"end":[107,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::future::FutureExt","name":"FutureExt","id":"21:422:2057","glob":false}}},"2:13113":{"id":"2:13113","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:13114:981","2:13115:21678","2:13116:30497","2:13117:30498","2:13119:30499","2:13122:22732","2:13123:30500","2:13124:334","2:13125:22800","2:13126:22796","2:13128:22797","2:13130:22798","2:13132:22799","2:13134:30501","2:13135:30502","2:13136:22824","2:13137:22825","2:13138:22828","2:13139:22829","2:13141:27972","2:13142:28305","2:13143:21963","2:13144:27970","2:13145:27971","2:13146:2647","2:13147:30503","2:13148:27973","2:13149:22841","2:13152:22842","2:13155:22843","2:13158:21253","2:13162:21254","2:13166:2656","2:13169:22831","2:13172:22833","2:13175:30504","2:13178:30505","2:13181:22835","2:13184:22837","2:13187:22839","2:13190:22840","2:13193:2378","2:13196:30506","2:13199:30507","2:13202:30508","2:13205:30509","2:13207:30510","2:13209:30511","2:13211:30512","2:13212:30513","2:13213:30514","2:13216:30515","2:13219:21823","2:13222:22844","2:13225:30516","2:13228:30517","2:13231:30518","2:13234:30519","2:13236:24191","2:13237:24192","2:13238:24194","2:13239:24195","2:13240:24196","2:13241:24198","2:13242:24199","2:13243:24200","2:13244:30520","2:13246:2784","2:13247:30521"],"negative":false,"synthetic":false,"blanket_impl":null}}},"5:5622:24246":{"id":"5:5622:24246","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:13239:24195"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:56:1318":{"id":"0:56:1318","crate_id":0,"name":"prelude","span":{"filename":"src/lib.rs","begin":[224,0],"end":[224,15]},"visibility":"public","docs":"A \"prelude\" for crates using the `futures` crate.\n\nThis prelude is similar to the standard library's prelude in that you'll\nalmost always want to import its entire contents, but unlike the\nstandard library's prelude you'll have to do so manually:\n\n```\n# #[allow(unused_imports)]\nuse futures::prelude::*;\n```\n\nThe prelude may grow over time as additional items see ubiquitous use.","links":{},"attrs":[],"deprecation":null,"inner":{"module":{"is_crate":false,"items":["0:58-21:104:833","0:59-2:44331:149","0:60-20:32:2055","0:62-21:4707:2066","0:63-25:9:2065","0:65-21:1291:2059","0:66-20:68:2060","0:67-20:97:2061","0:69-21:422:2057","0:70-21:587:2058","0:71-21:5171:2067","0:73-21:2766:2062","0:74-21:3786:2063","0:76-29:27:2069","0:77-29:17:2070","0:78-29:25:2071","0:79-29:20:2072","0:81-21:6217:2073","0:82-21:6182:2074","0:83-21:6212:2075","0:84-21:6199:2076"],"is_stripped":false}}},"2:13166:2656":{"id":"2:13166:2656","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12804:8517","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::split_whitespace":"2:13144:27970","str::rsplit":"2:13172:22833"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43420:2978","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13209:30511":{"id":"2:13209:30511","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5621:2516":{"id":"5:5621:2516","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13132:22799":{"id":"2:13132:22799","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:16-21:5171:2067":{"id":"0:16-21:5171:2067","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[117,0],"end":[117,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::sink::SinkExt","name":"SinkExt","id":"21:5171:2067","glob":false}}},"0:21-29:20:2072":{"id":"0:21-29:20:2072","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,57],"end":[121,67]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncWrite","name":"AsyncWrite","id":"29:20:2072","glob":false}}},"2:13234:30519":{"id":"2:13234:30519","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12765:135","`FromStr`":"2:12764:2923"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41671:225","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12764:2923","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12764:2923","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:70-21:587:2058":{"id":"0:70-21:587:2058","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[244,44],"end":[244,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::future::TryFutureExt","name":"_","id":"21:587:2058","glob":false}}},"5:5619:31220":{"id":"5:5619:31220","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:44-21:6240:2088":{"id":"0:44-21:6240:2088","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[148,0],"end":[148,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::lock","name":"lock","id":"21:6240:2088","glob":false}}},"0:32-21:37:2081":{"id":"0:32-21:37:2081","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,29],"end":[133,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::pending","name":"pending","id":"21:37:2081","glob":false}}},"0:59-2:44331:149":{"id":"0:59-2:44331:149","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[238,34],"end":[238,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::future::Future","name":"Future","id":"2:44331:149","glob":false}}},"2:13246:2784":{"id":"2:13246:2784","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4894:2784"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:43728:2785","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:24-21:6182:2074":{"id":"0:24-21:6182:2074","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[124,40],"end":[124,52]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_util::AsyncReadExt","name":"AsyncReadExt","id":"21:6182:2074","glob":false}}},"0:5-20:32:2055":{"id":"0:5-20:32:2055","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[105,39],"end":[105,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_core::future::TryFuture","name":"TryFuture","id":"20:32:2055","glob":false}}},"0:33-21:20:1297":{"id":"0:33-21:20:1297","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,38],"end":[133,42]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::poll","name":"poll","id":"21:20:1297","glob":false}}},"2:13119:30499":{"id":"2:13119:30499","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:13117:30498"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13145:27971":{"id":"2:13145:27971","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:13144:27970"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43703:8519","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:34-21:6769:2082":{"id":"0:34-21:6769:2082","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[133,44],"end":[133,57]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"async-await\")]"],"deprecation":null,"inner":{"import":{"source":"futures_util::select_biased","name":"select_biased","id":"21:6769:2082","glob":false}}},"0:67-20:97:2061":{"id":"0:67-20:97:2061","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,42],"end":[240,51]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::TryStream","name":"TryStream","id":"20:97:2061","glob":false}}},"0:20-29:25:2071":{"id":"0:20-29:25:2071","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[121,46],"end":[121,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_io::AsyncSeek","name":"AsyncSeek","id":"29:25:2071","glob":false}}},"2:13128:22797":{"id":"2:13128:22797","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41540:190"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:82-21:6182:2074":{"id":"0:82-21:6182:2074","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,30],"end":[258,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncReadExt","name":"_","id":"21:6182:2074","glob":false}}},"0:43-27:0:2086":{"id":"0:43-27:0:2086","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[145,0],"end":[145,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"alloc\")]","#[doc(inline)]"],"deprecation":null,"inner":{"import":{"source":"futures_channel","name":"channel","id":"27:0:2086","glob":false}}},"2:13193:2378":{"id":"2:13193:2378","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12804:8517","`DoubleEndedIterator`":"2:8196:129","prim@char":"1:12325:458","str::rmatches":"2:13196:30506"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43624:8534","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:83-21:6212:2075":{"id":"0:83-21:6212:2075","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,49],"end":[258,66]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncSeekExt","name":"_","id":"21:6212:2075","glob":false}}},"0:66-20:68:2060":{"id":"0:66-20:68:2060","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[240,34],"end":[240,40]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"crate::stream::Stream","name":"Stream","id":"20:68:2060","glob":false}}},"2:13141:27972":{"id":"2:13141:27972","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43390:8524","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13124:334":{"id":"2:13124:334","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:13125:22800","`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13152:22842":{"id":"2:13152:22842","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, in which case this function will return true if\nthe `&str` is a prefix of this string slice.\n\nThe [pattern] can also be a [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\nThese will only be checked against the first character of this string slice.\nLook at the second example below regarding behavior for slices of [`char`]s.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```\n\n```\nlet bananas = \"bananas\";\n\n// Note that both of these assert successfully.\nassert!(bananas.starts_with(&['b', 'a', 'n', 'a']));\nassert!(bananas.starts_with(&['a', 'b', 'c', 'd']));\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:76-29:27:2069":{"id":"0:76-29:27:2069","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[252,24],"end":[252,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncBufRead","name":"AsyncBufRead","id":"29:27:2069","glob":false}}},"2:13143:21963":{"id":"2:13143:21963","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43406:2977","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13130:22798":{"id":"2:13130:22798","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10895:238","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13236:24191":{"id":"2:13236:24191","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13134:30501":{"id":"2:13134:30501","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:12331:1699","str::slice_mut_unchecked":"2:13135:30502","crate::ops::Index":"2:39104:2860"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"0:84-21:6199:2076":{"id":"0:84-21:6199:2076","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[258,68],"end":[258,86]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(feature = \"std\")]","#[doc(no_inline)]","#[allow(unreachable_pub)]"],"deprecation":null,"inner":{"import":{"source":"crate::io::AsyncWriteExt","name":"_","id":"21:6199:2076","glob":false}}},"5:5611:31219":{"id":"5:5611:31219","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7632:242"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7632:242","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:48-31:65:2118":{"id":"0:48-31:65:2118","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,8],"end":[197,16]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::block_on","name":"block_on","id":"31:65:2118","glob":false}}},"0:51-31:136:2121":{"id":"0:51-31:136:2121","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[197,42],"end":[197,56]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_executor::BlockingStream","name":"BlockingStream","id":"31:136:2121","glob":false}}},"2:13190:22840":{"id":"2:13190:22840","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41538:193","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:27-20:131:2077":{"id":"0:27-20:131:2077","crate_id":0,"name":null,"span":{"filename":"src/lib.rs","begin":[127,0],"end":[127,28]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"inner":{"import":{"source":"futures_core::ready","name":"ready","id":"20:131:2077","glob":false}}},"2:13225:30516":{"id":"2:13225:30516","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:12325:458","self::pattern":"2:12804:8517"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12810:8513","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12825:8514","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13125:22800":{"id":"2:13125:22800","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:12342:1827"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13117:30498":{"id":"2:13117:30498","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13142:28305":{"id":"2:13142:28305","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:12325:458"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43396:8523","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13144:27970":{"id":"2:13144:27970","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:13145:27971"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43694:8520","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13114:981":{"id":"2:13114:981","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:12325:458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13135:30502":{"id":"2:13135:30502","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:12331:1699","crate::ops::IndexMut":"2:3374:2861","str::slice_unchecked":"2:13134:30501"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:13212:30513":{"id":"2:13212:30513","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13243:24200":{"id":"2:13243:24200","crate_id":2,"name":"trim_ascii","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing ASCII whitespace\nremoved.\n\n'Whitespace' refers to the definition used by\n[`u8::is_ascii_whitespace`].\n\n[`u8::is_ascii_whitespace`]: u8::is_ascii_whitespace\n\n# Examples\n\n```\n#![feature(byte_slice_trim_ascii)]\n\nassert_eq!(\"\\r hello world\\n \".trim_ascii(), \"hello world\");\nassert_eq!(\"  \".trim_ascii(), \"\");\nassert_eq!(\"\".trim_ascii(), \"\");\n```","links":{"u8::is_ascii_whitespace":"2:975:39193"},"attrs":["#[unstable(feature = \"byte_slice_trim_ascii\", issue = \"94035\")]","#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13147:30503":{"id":"2:13147:30503","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43684:8531","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:13148:27973":{"id":"2:13148:27973","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43712:8518","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"27:136:3186":{"crate_id":27,"path":["futures_channel","mpsc","Sender"],"kind":"struct"},"17:15102:20999":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"21:14693:34542":{"crate_id":21,"path":["futures_util","io","buf_writer","_","__Origin"],"kind":"struct"},"17:14356:20261":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"2:4:1239":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"21:331:2760":{"crate_id":21,"path":["futures_util","future","future","shared","Inner"],"kind":"struct"},"21:13484:2577":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","IntoAsyncRead"],"kind":"struct"},"21:13524:34184":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","ReadState"],"kind":"enum"},"7:31:15397":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"2:13636:3372":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:2859:256":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"1:1577:2586":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"17:15197:21007":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"1:4164:3048":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"17:15778:21052":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:45550:3308":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"2:31958:8612":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"6:5225:13627":{"crate_id":6,"path":["libc","unix","linux_like","linux","arpd_request"],"kind":"struct"},"21:13882:34542":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","_","__Origin"],"kind":"struct"},"16:2902:15662":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"17:12150:16907":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"17:3473:16908":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"31:136:2121":{"crate_id":31,"path":["futures_executor","local_pool","BlockingStream"],"kind":"struct"},"2:12566:9011":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"2:44170:9024":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"21:14040:2814":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IntoIter"],"kind":"struct"},"1:11770:3015":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"30:1035:21383":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixKind"],"kind":"enum"},"2:2026:8896":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"2:43235:8496":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"17:10612:16756":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:13473:19731":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"6:570:9637":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"1:12326:1849":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"6:5031:13610":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_upload"],"kind":"struct"},"2:43488:8536":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:2285:2648":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"17:1098:16796":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"2:8660:29357":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"21:11052:34542":{"crate_id":21,"path":["futures_util","stream","stream","take_while","_","__Origin"],"kind":"struct"},"2:44142:9005":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:10609:8976":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"1:8304:27480":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"6:6821:14395":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","utmpx"],"kind":"struct"},"2:43823:8548":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"16:4352:16115":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"21:14156:2613":{"crate_id":21,"path":["futures_util","sink","err_into","SinkErrInto"],"kind":"struct"},"11:673:2586":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"18:613:21383":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:30471:28198":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum"],"kind":"enum"},"1:10669:2994":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdout"],"kind":"struct"},"1:591:2783":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"5:2526:30279":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"11:2443:2609":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:3144:3220":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"2:2497:8885":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"1:8607:3071":{"crate_id":1,"path":["std","os","unix","net","ucred","UCred"],"kind":"struct"},"11:1566:15551":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"5:4468:2963":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"17:13581:19739":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"31:0:2117":{"crate_id":31,"path":["futures_executor"],"kind":"module"},"21:10117:34542":{"crate_id":21,"path":["futures_util","stream","stream","all","_","__Origin"],"kind":"struct"},"1:5052:3101":{"crate_id":1,"path":["std","os","net","linux_ext","tcp","TcpStreamExt"],"kind":"trait"},"21:8921:2493":{"crate_id":21,"path":["futures_util","future","join","Join5"],"kind":"struct"},"6:5598:13669":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifr_ifru"],"kind":"union"},"21:6199:2076":{"crate_id":21,"path":["futures_util","io","AsyncWriteExt"],"kind":"trait"},"17:12300:16989":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:1568:209":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:513:16740":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"21:8181:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:22651:28105":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"21:5675:2589":{"crate_id":21,"path":["futures_util","io","empty","Empty"],"kind":"struct"},"17:16138:21219":{"crate_id":17,"path":["object","xcoff","CsectAux32"],"kind":"struct"},"1:7841:16741":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"6:586:9639":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"1:4427:3077":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"17:3597:16926":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"6:5014:13608":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_rumble_effect"],"kind":"struct"},"2:4757:2770":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"31:120:2124":{"crate_id":31,"path":["futures_executor","local_pool","LocalPool"],"kind":"struct"},"17:15078:16798":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"21:10702:2541":{"crate_id":21,"path":["futures_util","stream","stream","peek","PeekMut"],"kind":"struct"},"17:12695:17005":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegment"],"kind":"struct"},"2:42500:8447":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"6:4992:13606":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_condition_effect"],"kind":"struct"},"17:13173:17045":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"17:13116:17043":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"11:364:32467":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"13:0:2263":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:7910:22693":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"11:2403:2813":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"17:14489:20270":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"16:8073:16655":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"21:9352:2507":{"crate_id":21,"path":["futures_util","future","either","Either"],"kind":"enum"},"6:6629:14375":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf32_Chdr"],"kind":"struct"},"30:1460:35516":{"crate_id":30,"path":["memchr","memmem","searcher","TwoWayWithPrefilter"],"kind":"struct"},"17:14325:20259":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"2:40300:2453":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"2:31975:2623":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:31974:236":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"1:11198:3153":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"11:2124:2826":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"21:8570:2482":{"crate_id":21,"path":["futures_util","future","option","OptionFuture"],"kind":"struct"},"16:2660:15651":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"18:718:21255":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"30:974:152":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Hash"],"kind":"struct"},"2:3149:3222":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"17:12464:16995":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"2:44154:9006":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"2:10246:8451":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"17:13526:19735":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"21:12513:2569":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","TryFilter"],"kind":"struct"},"1:9220:3193":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"6:6915:14424":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","semid_ds"],"kind":"struct"},"11:1107:15549":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"17:11674:16887":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"21:5992:2065":{"crate_id":21,"path":["futures_util","io","sink","Sink"],"kind":"struct"},"6:6650:14377":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_peeksiginfo_args"],"kind":"struct"},"5:7632:242":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"21:5171:2067":{"crate_id":21,"path":["futures_util","sink","SinkExt"],"kind":"trait"},"1:925:2821":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"6:8294:13843":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlock_t"],"kind":"struct"},"17:10218:16719":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"17:15814:21054":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"2:22321:3366":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr"],"kind":"trait"},"21:9114:34542":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"17:13999:20238":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:4634:3081":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"18:635:21384":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"6:553:9634":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"5:1830:2817":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"2:22993:28219":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI32Inner"],"kind":"struct"},"2:2483:659":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"21:5251:21295":{"crate_id":21,"path":["futures_util","task","spawn","SpawnExt"],"kind":"trait"},"2:8249:2626":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"11:1142:15550":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"30:1183:21373":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","ThreeIter"],"kind":"struct"},"3:0:492":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"6:8029:15183":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","align","sem_t"],"kind":"struct"},"2:42113:97":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:13485:19732":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"21:37:2081":{"crate_id":21,"path":["futures_util","pending"],"kind":"macro"},"1:6398:3186":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"6:5565:13666":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_user_dev"],"kind":"struct"},"5:5453:2528":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:1043:2826":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"2:22938:28096":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU64Inner"],"kind":"struct"},"1:9427:2953":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"11:774:2815":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"30:1011:21380":{"crate_id":30,"path":["memchr","arch","all","twoway","TwoWay"],"kind":"struct"},"16:7549:16634":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"17:12362:16991":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"16:5400:16561":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"17:11443:16836":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"6:5483:13658":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls_crypto_info"],"kind":"struct"},"1:8587:3079":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryError"],"kind":"enum"},"1:3618:2972":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"17:14298:20257":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"16:5863:16573":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"17:12707:16763":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"1:643:2790":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"21:10367:2547":{"crate_id":21,"path":["futures_util","stream","stream","into_future","StreamFuture"],"kind":"struct"},"6:6768:14392":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_desc"],"kind":"struct"},"1:1890:2884":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"2:40309:8829":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"17:13972:20236":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"3:234:225":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:12340:888":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"6:6657:14378":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_entry"],"kind":"struct"},"1:11665:22079":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"17:12485:16997":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"9:424:15428":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"2:43266:8482":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"2:4673:8611":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"17:16165:21221":{"crate_id":17,"path":["object","xcoff","FunAux32"],"kind":"struct"},"21:6934:34542":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:4747:3043":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt"],"kind":"trait"},"1:3590:2685":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7539:16633":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"6:1559:10530":{"crate_id":6,"path":["libc","unix","linux_like","fd_set"],"kind":"struct"},"2:6140:2451":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"16:7509:16631":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"2:21678:3230":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"21:10204:2555":{"crate_id":21,"path":["futures_util","stream","stream","Forward"],"kind":"struct"},"16:7111:32928":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"16:542:32913":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:12348:1888":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"21:11763:2560":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","ForEachConcurrent"],"kind":"struct"},"2:46575:8407":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:15720:21047":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"11:0:2268":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"21:13772:2495":{"crate_id":21,"path":["futures_util","stream","select","Select"],"kind":"struct"},"21:15091:2673":{"crate_id":21,"path":["futures_util","io","lines","Lines"],"kind":"struct"},"1:3337:2994":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:13753:20225":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"15:288:15585":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"16:6300:16586":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"1:8184:138":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"31:125:2125":{"crate_id":31,"path":["futures_executor","local_pool","LocalSpawner"],"kind":"struct"},"17:9807:16728":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"16:2636:15650":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"6:7429:10649":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statvfs64"],"kind":"struct"},"2:45969:3295":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"21:10613:2542":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peekable"],"kind":"struct"},"1:2199:128":{"crate_id":1,"path":["std","ffi","os_str","Display"],"kind":"struct"},"6:6738:14388":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg_v1"],"kind":"struct"},"1:4865:3057":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"1:9147:3194":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"17:11688:16853":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"1:8685:3113":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"1:3022:225":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"9:0:2266":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"1:906:2817":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"6:5636:13673":{"crate_id":6,"path":["libc","unix","linux_like","linux","hwtstamp_config"],"kind":"struct"},"5:4269:2963":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"2:45469:3293":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:44212:3224":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"6:6880:13500":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sysinfo"],"kind":"struct"},"2:22738:28007":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"17:15390:21025":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:7363:2845":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"21:11704:34542":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:44397:3371":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"21:15187:2679":{"crate_id":21,"path":["futures_util","io","read_to_string","ReadToString"],"kind":"struct"},"17:12508:16998":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:3842:15697":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"21:6767:2080":{"crate_id":21,"path":["futures_util","join"],"kind":"macro"},"9:392:15427":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"6:6811:14394":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_data"],"kind":"union"},"21:9188:2502":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin4"],"kind":"struct"},"27:127:21336":{"crate_id":27,"path":["futures_channel","mpsc","BoundedSenderInner"],"kind":"struct"},"1:3472:2587":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:10573:33741":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"1:6446:219":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"6:5376:13646":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlattr"],"kind":"struct"},"2:42074:90":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"6:5415:13650":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_initmsg"],"kind":"struct"},"2:43838:8549":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"17:12342:16956":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"16:7132:32861":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"2:8304:177":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"2:40751:2590":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:44223:9025":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"30:1030:21382":{"crate_id":30,"path":["memchr","arch","all","twoway","Suffix"],"kind":"struct"},"21:7777:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"27:368:219":{"crate_id":27,"path":["futures_channel","oneshot","Receiver"],"kind":"struct"},"11:1910:2831":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"17:11825:16921":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"21:587:2058":{"crate_id":21,"path":["futures_util","future","try_future","TryFutureExt"],"kind":"trait"},"2:43944:8553":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"21:8364:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:9394:8513":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"17:14235:20252":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"17:11853:16943":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"31:109:2120":{"crate_id":31,"path":["futures_executor","enter","enter"],"kind":"function"},"2:40737:28399":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"17:14131:20247":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"11:844:2822":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"21:4439:21285":{"crate_id":21,"path":["futures_util","stream","futures_unordered","task","Task"],"kind":"struct"},"21:12456:2572":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","TryForEach"],"kind":"struct"},"21:12108:2468":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectErr"],"kind":"struct"},"2:21558:3233":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"30:1162:21371":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","TwoIter"],"kind":"struct"},"21:7265:2453":{"crate_id":21,"path":["futures_util","future","future","Inspect"],"kind":"struct"},"17:13814:20227":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"1:11029:3154":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ExitCode"],"kind":"struct"},"2:21411:8658":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"5:7392:2609":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:6524:14368":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_req"],"kind":"struct"},"30:1475:21257":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRevKind"],"kind":"enum"},"6:517:9629":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"21:4503:2595":{"crate_id":21,"path":["futures_util","stream","futures_unordered","FuturesUnordered"],"kind":"struct"},"2:46471:3296":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"17:13211:19715":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"21:11952:2467":{"crate_id":21,"path":["futures_util","stream","try_stream","ErrInto"],"kind":"struct"},"16:2838:15659":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"2:3623:8442":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"21:400:22702":{"crate_id":21,"path":["futures_util","future","future","shared","poll","Reset"],"kind":"struct"},"16:6160:15606":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"2:9897:29358":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"6:7584:14811":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_fpregs_struct"],"kind":"struct"},"21:10298:34542":{"crate_id":21,"path":["futures_util","stream","stream","for_each","_","__Origin"],"kind":"struct"},"17:15635:21042":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"5:2309:30425":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"21:14604:2664":{"crate_id":21,"path":["futures_util","io","buf_reader","BufReader"],"kind":"struct"},"2:45874:3277":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4952:13600":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_mask"],"kind":"struct"},"27:371:3186":{"crate_id":27,"path":["futures_channel","oneshot","Sender"],"kind":"struct"},"21:15074:34542":{"crate_id":21,"path":["futures_util","io","into_sink","_","__Origin"],"kind":"struct"},"30:1196:21260":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","packedpair","Finder"],"kind":"struct"},"2:2694:201":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:11252:22092":{"crate_id":1,"path":["std","sys","pal","unix","time","Timespec"],"kind":"struct"},"6:6441:14362":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__timeval"],"kind":"struct"},"6:5236:13628":{"crate_id":6,"path":["libc","unix","linux_like","linux","inotify_event"],"kind":"struct"},"2:43327:8501":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"21:8852:2492":{"crate_id":21,"path":["futures_util","future","join","Join4"],"kind":"struct"},"21:6583:33885":{"crate_id":21,"path":["futures_util","fns","OkFn"],"kind":"struct"},"21:2780:34061":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","then"],"kind":"function"},"21:11920:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","_","__Origin"],"kind":"struct"},"1:8200:127":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"2:23004:28090":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI64Inner"],"kind":"struct"},"2:46538:8404":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"5:7730:8578":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"21:39:2426":{"crate_id":21,"path":["futures_util","async_await","pending","PendingOnce"],"kind":"struct"},"21:925:2494":{"crate_id":21,"path":["futures_util","future","join_all","JoinAll"],"kind":"struct"},"5:7094:30409":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"2:40551:2552":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:3949:3016":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"21:7539:2475":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten","TryFlatten"],"kind":"enum"},"6:1653:10538":{"crate_id":6,"path":["libc","unix","linux_like","arpreq"],"kind":"struct"},"17:16093:21216":{"crate_id":17,"path":["object","xcoff","Symbol64"],"kind":"struct"},"2:45401:3246":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"5:870:2834":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:1557:2820":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"21:9086:2500":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin"],"kind":"struct"},"21:4607:2496":{"crate_id":21,"path":["futures_util","stream","select_all","SelectAll"],"kind":"struct"},"21:8831:34542":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:3024:136":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:11637:22085":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"2:43981:8554":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"2:33949:8865":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"21:6284:2561":{"crate_id":21,"path":["futures_util","lock","bilock","ReuniteError"],"kind":"struct"},"6:5146:13620":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Shdr"],"kind":"struct"},"5:723:249":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"2:43318:8498":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"16:3669:15671":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"2:46196:3278":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"30:1541:21259":{"crate_id":30,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"6:6788:31882":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sifields_sigchld"],"kind":"struct"},"2:40775:8816":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"21:9508:34542":{"crate_id":21,"path":["futures_util","stream","stream","unzip","_","__Origin"],"kind":"struct"},"17:10954:16779":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:10254:205":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"2:43337:8499":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"2:39236:2803":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"2:42752:2956":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"2:46273:3250":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"17:12353:16990":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:41736:195":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"17:403:16739":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"2:43292:8480":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"17:14723:20983":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"2:9283:3120":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"2:41574:2813":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"17:10284:16751":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"5:1064:30363":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:8247:13836":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutexattr_t"],"kind":"struct"},"2:44146:9004":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"2:45760:3315":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"2:46060:3255":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:5722:16564":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"21:7373:2459":{"crate_id":21,"path":["futures_util","future","future","UnitError"],"kind":"struct"},"21:15556:34190":{"crate_id":21,"path":["futures_util","unfold_state","UnfoldState"],"kind":"enum"},"1:1610:2833":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"17:10018:16720":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"21:7661:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11810:3014":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"6:8351:15381":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"6:5617:13670":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifreq"],"kind":"struct"},"18:735:21256":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"9:447:15426":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"17:12949:16771":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"2:37866:8870":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"6:6542:14370":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","rtentry"],"kind":"struct"},"2:3345:141":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"27:72:21351":{"crate_id":27,"path":["futures_channel","mpsc","queue","Queue"],"kind":"struct"},"1:2432:2930":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:41838:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"11:875:2824":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"15:306:15586":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"21:9694:2532":{"crate_id":21,"path":["futures_util","stream","stream","filter","Filter"],"kind":"struct"},"2:21570:3230":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:14025:20240":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:45948:3289":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"21:13597:2566":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","TryAny"],"kind":"struct"},"2:43011:8483":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"17:11647:16886":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"21:21:1297":{"crate_id":21,"path":["futures_util","async_await","poll","poll"],"kind":"function"},"21:9401:34542":{"crate_id":21,"path":["futures_util","stream","stream","chain","_","__Origin"],"kind":"struct"},"1:12343:1809":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"1:9088:3151":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"21:13759:34542":{"crate_id":21,"path":["futures_util","stream","poll_immediate","_","__Origin"],"kind":"struct"},"2:43226:2553":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"6:5407:1226":{"crate_id":6,"path":["libc","unix","linux_like","linux","option"],"kind":"struct"},"5:2236:30476":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"1:12292:22515":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"16:4424:16164":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"6:4971:13603":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_envelope"],"kind":"struct"},"21:11439:2556":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","BufferUnordered"],"kind":"struct"},"17:13455:19730":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"17:256:32946":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"16:6782:16612":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"1:10187:21739":{"crate_id":1,"path":["std","sys","pal","unix","net","Socket"],"kind":"struct"},"6:8341:15380":{"crate_id":6,"path":["libc","unix","linux_like","linux","non_exhaustive","open_how"],"kind":"struct"},"21:7080:2454":{"crate_id":21,"path":["futures_util","future","future","IntoStream"],"kind":"struct"},"16:5897:16574":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"2:4246:2963":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"30:1486:35502":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterConfig"],"kind":"enum"},"17:10887:33747":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"21:10605:2544":{"crate_id":21,"path":["futures_util","stream","stream","select_next_some","SelectNextSome"],"kind":"struct"},"24:12:21280":{"crate_id":24,"path":["futures_task","spawn","LocalSpawn"],"kind":"trait"},"1:4102:3042":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"21:7917:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"11:1582:15552":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"5:6763:30363":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"21:327:2464":{"crate_id":21,"path":["futures_util","future","future","shared","Shared"],"kind":"struct"},"1:12332:1787":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"21:10538:34542":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"17:10818:16760":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"5:7569:2905":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"5:6681:2814":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"1:11747:21925":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"18:643:2555":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"1:9391:234":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"16:6940:32862":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"1:1605:2832":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"2:45859:28095":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:5560:3145":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"21:14482:34542":{"crate_id":21,"path":["futures_util","sink","with_flat_map","_","__Origin"],"kind":"struct"},"21:12206:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","_","__Origin"],"kind":"struct"},"2:11883:8492":{"crate_id":2,"path":["core","slice","iter","ChunkByMut"],"kind":"struct"},"2:44162:9001":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"2:22335:8885":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"function"},"1:5716:3150":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"30:1119:21260":{"crate_id":30,"path":["memchr","arch","generic","packedpair","Finder"],"kind":"struct"},"17:14372:20262":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"18:765:21257":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"6:6678:14381":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ptrace_syscall_info"],"kind":"struct"},"2:44435:8425":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"5:3397:2817":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"2:1926:658":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"18:589:21380":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"6:5546:13664":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_alg"],"kind":"struct"},"17:15410:21027":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"17:15222:21010":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:42257:8451":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"31:102:2123":{"crate_id":31,"path":["futures_executor","enter","EnterError"],"kind":"struct"},"16:6606:16606":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"30:1003:21261":{"crate_id":30,"path":["memchr","arch","all","twoway","FinderRev"],"kind":"struct"},"21:15281:2685":{"crate_id":21,"path":["futures_util","io","write","Write"],"kind":"struct"},"16:4802:16289":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"2:12506:9012":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"17:11493:16841":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"1:2282:2927":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"17:13723:20223":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"30:1504:35515":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterKind"],"kind":"union"},"17:9984:16747":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"17:13089:17042":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"17:15734:21048":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"16:6480:16598":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"21:14925:2669":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","CopyBufAbortable"],"kind":"struct"},"11:1025:2827":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"2:45416:3276":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:8773:3134":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"1:6655:3183":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"17:2203:16829":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"21:13091:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","_","__Origin"],"kind":"struct"},"21:10376:2453":{"crate_id":21,"path":["futures_util","stream","stream","Inspect"],"kind":"struct"},"5:7553:2771":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"21:10262:2536":{"crate_id":21,"path":["futures_util","stream","stream","for_each","ForEach"],"kind":"struct"},"2:3171:8435":{"crate_id":2,"path":["core","ops","async_function","AsyncFn"],"kind":"trait"},"2:4964:8627":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"6:532:9631":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"1:11497:22690":{"crate_id":1,"path":["std","sys","sync","once","futex","CompletionGuard"],"kind":"struct"},"16:6620:16607":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"21:11295:34542":{"crate_id":21,"path":["futures_util","stream","stream","chunks","_","__Origin"],"kind":"struct"},"16:4976:16325":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"2:33057:3221":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"22:7:2078":{"crate_id":22,"path":["pin_utils","pin_mut"],"kind":"macro"},"6:5112:13617":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Sym"],"kind":"struct"},"16:6398:16591":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"6:6609:14373":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","regex_t"],"kind":"struct"},"17:14402:20264":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"1:0:1691":{"crate_id":1,"path":["std"],"kind":"module"},"21:7455:2463":{"crate_id":21,"path":["futures_util","future","future","remote_handle","RemoteHandle"],"kind":"struct"},"16:7741:16646":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"18:608:21382":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"2:9715:91":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:11345:2925":{"crate_id":1,"path":["std","sys","os_str","bytes","Slice"],"kind":"struct"},"21:10931:34542":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","_","__Origin"],"kind":"struct"},"1:484:22704":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"17:15582:21037":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"21:8778:34542":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"1:11593:22537":{"crate_id":1,"path":["std","sys","thread_local","fast_local","DtorState"],"kind":"enum"},"1:12339:882":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"2:44410:3368":{"crate_id":2,"path":["core","task","wake","ContextBuilder"],"kind":"struct"},"6:4932:13598":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_absinfo"],"kind":"struct"},"1:5974:2798":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"2:38445:8871":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:2434:2931":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"2:22598:28894":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:9131:3154":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"11:832:2818":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"21:15019:2671":{"crate_id":21,"path":["futures_util","io","fill_buf","FillBuf"],"kind":"struct"},"1:9527:2883":{"crate_id":1,"path":["std","sys","pal","unix","args","Args"],"kind":"struct"},"11:2469:2817":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"1:11407:2924":{"crate_id":1,"path":["std","sys","os_str","bytes","Buf"],"kind":"struct"},"11:700:2814":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"17:14246:20253":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"21:12798:32985":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","Single"],"kind":"struct"},"6:5260:13631":{"crate_id":6,"path":["libc","unix","linux_like","linux","regmatch_t"],"kind":"struct"},"17:15521:21035":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"5:6554:2609":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"16:7397:32984":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:46081:3261":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"17:10044:16748":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"21:15042:2672":{"crate_id":21,"path":["futures_util","io","into_sink","IntoSink"],"kind":"struct"},"5:40:2862":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"17:13375:19724":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"6:6874:14422":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","sigset_t"],"kind":"struct"},"2:2927:123":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:46492:3317":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:43869:8551":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"11:1066:15548":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"17:15426:21029":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:6649:8830":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"14:214:15570":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"6:4897:13594":{"crate_id":6,"path":["libc","unix","linux_like","linux","msginfo"],"kind":"struct"},"5:7609:2907":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"24:135:2449":{"crate_id":24,"path":["futures_task","future_obj","LocalFutureObj"],"kind":"struct"},"20:17:2404":{"crate_id":20,"path":["futures_core","future","FusedFuture"],"kind":"trait"},"2:46529:8403":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"21:9529:2528":{"crate_id":21,"path":["futures_util","stream","stream","concat","Concat"],"kind":"struct"},"16:7355:16627":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"30:1254:21373":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","ThreeIter"],"kind":"struct"},"6:5200:13624":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawnattr_t"],"kind":"struct"},"6:5314:13638":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_fprog"],"kind":"struct"},"21:8896:34542":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"2:30439:8577":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"21:11831:2562":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitSink"],"kind":"struct"},"21:6846:34542":{"crate_id":21,"path":["futures_util","future","future","fuse","_","__Origin"],"kind":"struct"},"6:5643:13674":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent64"],"kind":"struct"},"6:5122:13618":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Phdr"],"kind":"struct"},"2:43642:8535":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"11:1917:2832":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"21:13348:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","_","__Origin"],"kind":"struct"},"6:5466:13655":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_prinfo"],"kind":"struct"},"21:10867:34542":{"crate_id":21,"path":["futures_util","stream","stream","skip","_","__Origin"],"kind":"struct"},"24:309:21293":{"crate_id":24,"path":["futures_task","waker_ref","WakerRef"],"kind":"struct"},"16:5686:16562":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"6:7516:14806":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user"],"kind":"struct"},"21:104:833":{"crate_id":21,"path":["futures_util","future"],"kind":"module"},"16:6758:15580":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"1:4501:3069":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"1:3782:3011":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"26:0:2415":{"crate_id":26,"path":["pin_project_lite"],"kind":"module"},"6:6670:14380":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_seccomp"],"kind":"struct"},"1:12337:894":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"7:0:1878":{"crate_id":7,"path":["unwind"],"kind":"module"},"2:2823:8662":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"2:40744:8813":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"21:5264:1157":{"crate_id":21,"path":["futures_util","never"],"kind":"module"},"6:6409:14359":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx_timestamp"],"kind":"struct"},"6:4870:13591":{"crate_id":6,"path":["libc","unix","linux_like","linux","fsid_t"],"kind":"struct"},"2:8121:8820":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"18:0:2274":{"crate_id":18,"path":["memchr"],"kind":"module"},"6:5250:13630":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_vm"],"kind":"struct"},"17:13877:20231":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"30:1575:21262":{"crate_id":30,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"21:13400:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","_","__Origin"],"kind":"struct"},"17:13308:19720":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"1:6219:22698":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:12878:8541":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"30:1212:21369":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","OneIter"],"kind":"struct"},"17:13774:16946":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"21:4954:2615":{"crate_id":21,"path":["futures_util","sink","send_all","SendAll"],"kind":"struct"},"1:1827:2866":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"2:22705:3019":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"6:1535:10528":{"crate_id":6,"path":["libc","unix","linux_like","addrinfo"],"kind":"struct"},"2:11209:8509":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"6:5083:13615":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Ehdr"],"kind":"struct"},"21:12492:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each","_","__Origin"],"kind":"struct"},"2:4604:8603":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"21:7697:34048":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenErr"],"kind":"struct"},"1:8492:2526":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"17:15434:21030":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"17:12238:16959":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"2:8613:148":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"21:7462:2462":{"crate_id":21,"path":["futures_util","future","future","remote_handle","Remote"],"kind":"struct"},"6:7485:14805":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","user_regs_struct"],"kind":"struct"},"1:8838:2586":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"9:238:3133":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"17:12808:16724":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:40343:2542":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:10256:8456":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"2:7701:8811":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"2:40392:2546":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"21:13961:33906":{"crate_id":21,"path":["futures_util","stream","futures_ordered","OrderWrapper"],"kind":"struct"},"5:7538:2810":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:1865:2877":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"2:10213:142":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"16:8118:16657":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:5038:3100":{"crate_id":1,"path":["std","os","net","linux_ext","socket","UnixSocketExt"],"kind":"trait"},"1:6136:219":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"18:706:8515":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"29:17:2070":{"crate_id":29,"path":["futures_io","if_std","AsyncRead"],"kind":"trait"},"6:6756:14390":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics_v1"],"kind":"struct"},"6:7348:14799":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","siginfo_t"],"kind":"struct"},"21:11674:2558":{"crate_id":21,"path":["futures_util","stream","stream","FlatMapUnordered"],"kind":"struct"},"2:22107:2950":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"21:12055:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:46643:8411":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"17:10399:2977":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"17:11715:16889":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"1:1581:2814":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"2:45743:3309":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"30:1555:21260":{"crate_id":30,"path":["memchr","memmem","Finder"],"kind":"struct"},"6:6763:14391":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_options"],"kind":"struct"},"17:11524:16881":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"5:7452:29912":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"16:6634:16608":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"2:10885:2950":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"6:1517:10526":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in"],"kind":"struct"},"2:3374:2861":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:7954:2950":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"21:8648:218":{"crate_id":21,"path":["futures_util","future","ready","Ready"],"kind":"struct"},"21:6770:2079":{"crate_id":21,"path":["futures_util","select"],"kind":"macro"},"2:46590:8408":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"21:8059:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"16:5107:16364":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"2:1963:1338":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"6:5160:13621":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Shdr"],"kind":"struct"},"6:6775:14393":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","iocb"],"kind":"struct"},"6:5290:13635":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_filter"],"kind":"struct"},"11:1007:2826":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:7480:8822":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"2:44334:163":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"2:5238:961":{"crate_id":2,"path":["core","iter"],"kind":"module"},"17:9781:16742":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:9401:3182":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockWriteGuard"],"kind":"struct"},"17:13387:19725":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:41566:2586":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:21448:29511":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"21:15166:2677":{"crate_id":21,"path":["futures_util","io","read_line","ReadLine"],"kind":"struct"},"17:16069:21214":{"crate_id":17,"path":["object","xcoff","SymbolBytes"],"kind":"struct"},"2:40766:2587":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:4979:13604":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_constant_effect"],"kind":"struct"},"1:6853:232":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"21:14001:21283":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinMut"],"kind":"struct"},"2:10503:2957":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:150:15612":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"2:42592:8449":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"16:5831:16571":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:12276:22452":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","parse_running_mmaps","MapsEntry"],"kind":"struct"},"16:2592:15648":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:10137:16713":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"1:8828:3136":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"2:6838:8826":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:10905:16762":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:23478:235":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"6:1547:10529":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_ll"],"kind":"struct"},"21:14552:34542":{"crate_id":21,"path":["futures_util","sink","buffer","_","__Origin"],"kind":"struct"},"21:11083:2549":{"crate_id":21,"path":["futures_util","stream","stream","take_until","TakeUntil"],"kind":"struct"},"2:39970:8634":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"21:11180:34542":{"crate_id":21,"path":["futures_util","stream","stream","then","_","__Origin"],"kind":"struct"},"1:3250:27729":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"16:5927:16575":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"17:10068:16727":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"1:8439:2589":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:10714:2766":{"crate_id":1,"path":["std","sys","pal","unix","thread","Thread"],"kind":"struct"},"1:9369:186":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"6:8288:13842":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_mutex_t"],"kind":"struct"},"21:14279:236":{"crate_id":21,"path":["futures_util","sink","send","Send"],"kind":"struct"},"1:852:2813":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"6:5382:13647":{"crate_id":6,"path":["libc","unix","linux_like","linux","file_clone_range"],"kind":"struct"},"2:41300:3005":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"6:4965:13602":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_trigger"],"kind":"struct"},"17:14503:20271":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"17:11313:16821":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"2:4323:28671":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"16:3329:15668":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"6:5266:13632":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_extended_err"],"kind":"struct"},"16:7755:16647":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"21:6768:2083":{"crate_id":21,"path":["futures_util","try_join"],"kind":"macro"},"17:12478:16996":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:14066:20243":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:4737:8614":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"17:11799:16941":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"6:1671:10540":{"crate_id":6,"path":["libc","unix","linux_like","arphdr"],"kind":"struct"},"21:9606:2530":{"crate_id":21,"path":["futures_util","stream","stream","cycle","Cycle"],"kind":"struct"},"6:4942:13599":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_keymap_entry"],"kind":"struct"},"21:6182:2074":{"crate_id":21,"path":["futures_util","io","AsyncReadExt"],"kind":"trait"},"17:11016:16782":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"5:7372:2814":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"18:680:21260":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"17:13187:19714":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"2:43379:8527":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"16:4882:16300":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"21:11117:34542":{"crate_id":21,"path":["futures_util","stream","stream","take_until","_","__Origin"],"kind":"struct"},"21:12647:2475":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","TryFlatten"],"kind":"struct"},"1:931:2822":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"16:7473:16629":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"5:7714:2817":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"16:5385:16560":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"21:12899:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","_","__Origin"],"kind":"struct"},"1:9688:137":{"crate_id":1,"path":["std","sys","pal","unix","fs","File"],"kind":"struct"},"16:5914:32855":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"21:12419:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","_","__Origin"],"kind":"struct"},"1:4156:3046":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"2:4728:8613":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"2:8117:8821":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"21:7636:2475":{"crate_id":21,"path":["futures_util","future","try_future","TryFlatten"],"kind":"struct"},"17:11256:16818":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"16:7052:16623":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"21:8544:2480":{"crate_id":21,"path":["futures_util","future","maybe_done","MaybeDone"],"kind":"enum"},"2:2236:8443":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"16:8136:16658":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"14:31:15561":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"21:7488:34542":{"crate_id":21,"path":["futures_util","future","future","remote_handle","_","__Origin"],"kind":"struct"},"2:45608:3282":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"2:11924:8488":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:5781:3186":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"6:7461:14803":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_xmmreg"],"kind":"struct"},"21:8278:2471":{"crate_id":21,"path":["futures_util","future","try_future","MapOk"],"kind":"struct"},"17:15701:21046":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"17:11661:16857":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"17:15214:21009":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:12030:16906":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"5:7655:8560":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"1:8211:2811":{"crate_id":1,"path":["std","hash","random","DefaultHasher"],"kind":"struct"},"17:11242:16817":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:32031:2624":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"2:10463:156":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"2:43995:8555":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:8301:16666":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"17:14012:20239":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"17:13785:16947":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"17:2037:16835":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"1:948:2824":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"11:1676:32481":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"17:15445:21031":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"2:11365:8505":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"16:6047:16579":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"6:1496:10523":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreqn"],"kind":"struct"},"2:45728:3260":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"2:40179:8480":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"21:11649:33888":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlowStep"],"kind":"enum"},"21:14011:2813":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterMut"],"kind":"struct"},"5:7582:8934":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"2:11040:2586":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:8150:2947":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:11189:16795":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"5:7645:8559":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:3289:2993":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:10828:33762":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"2:3324:8441":{"crate_id":2,"path":["core","ops","deref","DerefPure"],"kind":"trait"},"17:12251:16958":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"21:11465:34542":{"crate_id":21,"path":["futures_util","stream","stream","buffer_unordered","_","__Origin"],"kind":"struct"},"2:41711:2586":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"1:10455:113":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Command"],"kind":"struct"},"6:4909:13595":{"crate_id":6,"path":["libc","unix","linux_like","linux","sembuf"],"kind":"struct"},"6:564:9636":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"18:726:21263":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"21:10078:2525":{"crate_id":21,"path":["futures_util","stream","stream","all","All"],"kind":"struct"},"1:11217:9024":{"crate_id":1,"path":["std","sys","pal","unix","time","Nanoseconds"],"kind":"struct"},"1:624:2787":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"1:4823:3102":{"crate_id":1,"path":["std","os","linux","process","ChildExt"],"kind":"trait"},"17:12993:16772":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3247:27731":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"1:7998:2766":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"21:14716:2667":{"crate_id":21,"path":["futures_util","io","line_writer","LineWriter"],"kind":"struct"},"17:14545:20274":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"2:4784:8615":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:11209:22565":{"crate_id":1,"path":["std","sys","pal","unix","thread","cgroups","Cgroup"],"kind":"enum"},"16:7633:32622":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"21:11407:34542":{"crate_id":21,"path":["futures_util","stream","stream","scan","_","__Origin"],"kind":"struct"},"2:22307:2950":{"crate_id":2,"path":["core","core_simd","simd","num","sealed","Sealed"],"kind":"trait"},"21:7222:34542":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:15376:2508":{"crate_id":21,"path":["futures_util","abortable","AbortHandle"],"kind":"struct"},"16:6066:16580":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"8:0:2265":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:11086:22695":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"14:165:15562":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"2:10239:119":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"17:15822:21055":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"21:13685:2589":{"crate_id":21,"path":["futures_util","stream","empty","Empty"],"kind":"struct"},"16:7428:16628":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:5645:3147":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"1:9241:3173":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"18:651:2555":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"21:6056:2561":{"crate_id":21,"path":["futures_util","io","split","ReuniteError"],"kind":"struct"},"2:22283:3363":{"crate_id":2,"path":["core","core_simd","simd","num","uint","SimdUint"],"kind":"trait"},"17:2175:16869":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"5:4239:2963":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"16:6648:16609":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"1:4243:27085":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryDataIter"],"kind":"struct"},"2:33293:8860":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"27:495:21353":{"crate_id":27,"path":["futures_channel","oneshot","Canceled"],"kind":"struct"},"2:30460:8447":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"6:523:9630":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"2:22754:28207":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:11651:22135":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"17:10671:33753":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"17:0:2273":{"crate_id":17,"path":["object"],"kind":"module"},"11:2554:32478":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"17:10997:16781":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"21:12133:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"2:23015:28210":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI128Inner"],"kind":"struct"},"30:952:21377":{"crate_id":30,"path":["memchr","arch","all","packedpair","Pair"],"kind":"struct"},"17:11898:16920":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:12597:17009":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolTable"],"kind":"struct"},"1:7266:22716":{"crate_id":1,"path":["std","sys","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"2:39459:8663":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:7497:16630":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"2:41622:3119":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:912:2818":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"16:7648:16641":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"17:13046:16726":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"17:13252:19717":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:1971:2898":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"2:43390:8524":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"1:11075:22702":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:10877:16761":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"2:5949:2963":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"21:12873:2568":{"crate_id":21,"path":["futures_util","stream","try_stream","try_concat","TryConcat"],"kind":"struct"},"21:14145:2612":{"crate_id":21,"path":["futures_util","sink","flush","Flush"],"kind":"struct"},"17:11227:16789":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"21:15218:2682":{"crate_id":21,"path":["futures_util","io","split","ReadHalf"],"kind":"struct"},"5:6164:2963":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"21:15274:2684":{"crate_id":21,"path":["futures_util","io","window","Window"],"kind":"struct"},"1:6798:3185":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLockGuard"],"kind":"struct"},"1:4921:3059":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"5:3279:2830":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"1:1942:2897":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"17:11915:16945":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"21:11209:2552":{"crate_id":21,"path":["futures_util","stream","stream","zip","Zip"],"kind":"struct"},"21:10792:2539":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIfEq"],"kind":"struct"},"2:39266:8874":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"5:4423:264":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"2:40043:8636":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"31:65:2118":{"crate_id":31,"path":["futures_executor","local_pool","block_on"],"kind":"function"},"2:3952:2814":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"11:396:32465":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"2:21666:2950":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"21:8609:2484":{"crate_id":21,"path":["futures_util","future","poll_immediate","PollImmediate"],"kind":"struct"},"16:2355:15637":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"6:5219:13626":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_pktinfo"],"kind":"struct"},"6:4787:13585":{"crate_id":6,"path":["libc","unix","linux_like","linux","glob_t"],"kind":"struct"},"6:8300:13844":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrier_t"],"kind":"struct"},"17:11557:16883":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:9938:16746":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"6:6746:14389":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_statistics"],"kind":"struct"},"1:8162:2948":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"2:43624:8534":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:15138:21002":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"21:13536:2565":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","TryAll"],"kind":"struct"},"1:8046:2886":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"21:13246:2575":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","TryTakeWhile"],"kind":"struct"},"1:7891:22706":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"6:4985:13605":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_ramp_effect"],"kind":"struct"},"23:0:2414":{"crate_id":23,"path":["futures_macro"],"kind":"module"},"1:8534:3012":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"21:5950:2587":{"crate_id":21,"path":["futures_util","io","repeat","Repeat"],"kind":"struct"},"21:4486:21287":{"crate_id":21,"path":["futures_util","stream","futures_unordered","ready_to_run_queue","ReadyToRunQueue"],"kind":"struct"},"17:12543:17003":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSection"],"kind":"struct"},"21:7393:34542":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:1584:2609":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"17:15383:21024":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"17:11214:16790":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"2:21954:3236":{"crate_id":2,"path":["core","core_simd","to_bytes","ToBytes"],"kind":"trait"},"21:14056:2813":{"crate_id":21,"path":["futures_util","stream","select_all","IterMut"],"kind":"struct"},"21:12965:2583":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunksError"],"kind":"struct"},"21:12308:2470":{"crate_id":21,"path":["futures_util","stream","try_stream","MapErr"],"kind":"struct"},"17:14260:20254":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"2:40785:2588":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"9:482:15425":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"21:8795:2491":{"crate_id":21,"path":["futures_util","future","join","Join3"],"kind":"struct"},"2:44006:8556":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"2:43728:2785":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"6:5002:13607":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_periodic_effect"],"kind":"struct"},"17:11583:16855":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"2:45919:3283":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:30407:2844":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"2:40172:2949":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"21:7020:2455":{"crate_id":21,"path":["futures_util","future","future","Map"],"kind":"struct"},"5:1546:2819":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"5:826:101":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"2:3819:2609":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"1:1588:2817":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"21:14904:34542":{"crate_id":21,"path":["futures_util","io","copy_buf","_","__Origin"],"kind":"struct"},"30:1154:21370":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Two"],"kind":"struct"},"2:12352:8521":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"11:1051:2828":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"2:40076:2903":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"21:9733:34542":{"crate_id":21,"path":["futures_util","stream","stream","filter","_","__Origin"],"kind":"struct"},"2:39060:8440":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"5:6421:3374":{"crate_id":5,"path":["alloc","task","LocalWake"],"kind":"trait"},"16:2508:15644":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"17:3264:16903":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"21:8532:2479":{"crate_id":21,"path":["futures_util","future","lazy","Lazy"],"kind":"struct"},"30:1267:21260":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","packedpair","Finder"],"kind":"struct"},"6:6505:14323":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo2"],"kind":"struct"},"5:3026:8427":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"6:1503:10524":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq_source"],"kind":"struct"},"2:12819:8515":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"6:5052:13613":{"crate_id":6,"path":["libc","unix","linux_like","linux","dl_phdr_info"],"kind":"struct"},"1:8626:3103":{"crate_id":1,"path":["std","os","linux","process","PidFd"],"kind":"struct"},"2:3103:2772":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:39273:8586":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"2:22868:2950":{"crate_id":2,"path":["core","num","nonzero","private","Sealed"],"kind":"trait"},"2:22982:28093":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI16Inner"],"kind":"struct"},"17:13738:20224":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"1:1888:2883":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"1:6120:3186":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:31902:3155":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"16:4641:16220":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"17:14341:20260":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"2:0:550":{"crate_id":2,"path":["core"],"kind":"module"},"1:4080:3040":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"16:6427:16593":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"16:6278:16585":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"17:16151:21220":{"crate_id":17,"path":["object","xcoff","CsectAux64"],"kind":"struct"},"1:2989:22720":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"2:42554:8447":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"21:2766:2062":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt"],"kind":"trait"},"2:41727:2814":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"6:465:9623":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"5:1327:2828":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"2:39121:212":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"5:6947:8582":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"6:1526:10527":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_in6"],"kind":"struct"},"21:15123:34542":{"crate_id":21,"path":["futures_util","io","lines","_","__Origin"],"kind":"struct"},"2:33234:8858":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:8575:3008":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"17:14111:20246":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"16:7727:16645":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"17:15176:21005":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"21:11366:2543":{"crate_id":21,"path":["futures_util","stream","stream","scan","Scan"],"kind":"struct"},"2:7873:2589":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:4830:16294":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"21:11884:2466":{"crate_id":21,"path":["futures_util","stream","try_stream","and_then","AndThen"],"kind":"struct"},"2:22916:28103":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU16Inner"],"kind":"struct"},"1:8228:2986":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:12107:16759":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"16:2438:15641":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"17:12557:16799":{"crate_id":17,"path":["object","read","xcoff","section","SectionTable"],"kind":"struct"},"17:13146:17044":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"16:6749:16611":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"1:12323:405":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"11:123:32472":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"6:5352:13643":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_addfd"],"kind":"struct"},"21:13733:2484":{"crate_id":21,"path":["futures_util","stream","poll_immediate","PollImmediate"],"kind":"struct"},"1:8172:2945":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:917:2819":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"17:11115:16792":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"17:14051:20242":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"21:338:2465":{"crate_id":21,"path":["futures_util","future","future","shared","WeakShared"],"kind":"struct"},"21:9646:2531":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","Enumerate"],"kind":"struct"},"30:1511:21269":{"crate_id":30,"path":["memchr","memmem","searcher","PrefilterState"],"kind":"struct"},"6:5134:13619":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf64_Phdr"],"kind":"struct"},"16:7098:32597":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"2:22823:3021":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"21:15454:33880":{"crate_id":21,"path":["futures_util","fns","InspectFn"],"kind":"struct"},"17:10720:33752":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"21:12982:2584":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunks"],"kind":"struct"},"17:15313:21017":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"5:5217:3169":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"21:4707:2066":{"crate_id":21,"path":["futures_util","sink"],"kind":"module"},"2:44134:9000":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"1:4759:25314":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_mtime"],"kind":"function"},"6:6706:14384":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets"],"kind":"struct"},"16:6098:16582":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"21:13941:34542":{"crate_id":21,"path":["futures_util","stream","unfold","_","__Origin"],"kind":"struct"},"17:12371:16770":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"24:15:21282":{"crate_id":24,"path":["futures_task","spawn","SpawnError"],"kind":"struct"},"2:21479:29503":{"crate_id":2,"path":["core","core_simd","swizzle","resize","Resize"],"kind":"struct"},"17:9737:16714":{"crate_id":17,"path":["object","common","SubArchitecture"],"kind":"enum"},"17:11743:16891":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"6:6460:14364":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","msghdr"],"kind":"struct"},"1:9161:3191":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"2:32823:8857":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"17:13946:20234":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"2:22545:28920":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"21:15387:2511":{"crate_id":21,"path":["futures_util","abortable","Aborted"],"kind":"struct"},"21:7345:34542":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"17:13844:20229":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"17:13424:19728":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:3271:2832":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"17:12213:16987":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:2231:15544":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"6:6636:14376":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","seminfo"],"kind":"struct"},"1:4757:25312":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_atime"],"kind":"function"},"2:41632:2797":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:839:2586":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"2:22949:28014":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU128Inner"],"kind":"struct"},"21:10639:34542":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"2:8154:144":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:2612:15649":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11621:16858":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"21:10686:34542":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:7325:2457":{"crate_id":21,"path":["futures_util","future","future","NeverError"],"kind":"struct"},"2:40071:106":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"2:22730:28474":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"2:10498:2955":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"2:21433:29506":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_right","Rotate"],"kind":"struct"},"5:2207:31541":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"16:6317:16587":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"1:4273:3073":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmCredentials"],"kind":"struct"},"5:6060:9227":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"2:1933:8799":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"21:15484:33895":{"crate_id":21,"path":["futures_util","fns","MapErrFn"],"kind":"struct"},"2:32032:8836":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:6730:3179":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"21:15523:33892":{"crate_id":21,"path":["futures_util","fns","UnwrapOrElseFn"],"kind":"struct"},"2:13693:151":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:9671:16716":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:7933:2519":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"21:14809:117":{"crate_id":21,"path":["futures_util","io","copy","Copy"],"kind":"struct"},"2:22847:3035":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10969:22567":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","FdHandle"],"kind":"enum"},"5:1342:2827":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"2:41877:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"2:13748:2838":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"21:4353:34075":{"crate_id":21,"path":["futures_util","stream","futures_unordered","abort","abort","DoublePanic"],"kind":"struct"},"2:12336:8965":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"2:15:2381":{"crate_id":2,"path":["core","write"],"kind":"macro"},"6:5515:13661":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_chacha20_poly1305"],"kind":"struct"},"16:860:32988":{"crate_id":16,"path":["gimli","read","endian_slice","DebugBytes"],"kind":"struct"},"21:6217:2073":{"crate_id":21,"path":["futures_util","io","AsyncBufReadExt"],"kind":"trait"},"5:3807:2848":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"16:2458:15642":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"21:10017:70":{"crate_id":21,"path":["futures_util","stream","stream","any","Any"],"kind":"struct"},"17:261:32968":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"6:6597:14372":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","ntptimeval"],"kind":"struct"},"2:732:189":{"crate_id":2,"path":["core","num","nonzero","NonZero"],"kind":"struct"},"2:11337:8504":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:45483:3241":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"17:11341:16833":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:6385:16590":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"5:2114:2849":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMutKey"],"kind":"struct"},"2:41360:28476":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"17:15608:21039":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"1:10931:2948":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileTimes"],"kind":"struct"},"11:2383:2586":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"2:46098:3310":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"7:78:15404":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"2:13494:2483":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"30:1020:21381":{"crate_id":30,"path":["memchr","arch","all","twoway","Shift"],"kind":"enum"},"20:131:2077":{"crate_id":20,"path":["futures_core","ready"],"kind":"macro"},"1:8236:2670":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"21:14083:2609":{"crate_id":21,"path":["futures_util","sink","drain","Drain"],"kind":"struct"},"17:15273:21013":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"1:10902:25298":{"crate_id":1,"path":["std","sys","pal","unix","fs","StatxExtraFields"],"kind":"struct"},"17:11392:16831":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"30:1496:21265":{"crate_id":30,"path":["memchr","memmem","searcher","Prefilter"],"kind":"struct"},"21:11866:34542":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","_","__Origin"],"kind":"struct"},"6:1593:10534":{"crate_id":6,"path":["libc","unix","linux_like","lconv"],"kind":"struct"},"21:8431:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"2:2499:8886":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"14:187:15569":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"11:2536:32475":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"21:7526:34542":{"crate_id":21,"path":["futures_util","future","try_future","into_future","_","__Origin"],"kind":"struct"},"21:13462:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","_","__Origin"],"kind":"struct"},"17:15616:21040":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"1:11185:3152":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","ExitStatus"],"kind":"struct"},"6:1565:10531":{"crate_id":6,"path":["libc","unix","linux_like","tm"],"kind":"struct"},"2:2846:76":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"1:9396:3181":{"crate_id":1,"path":["std","sync","rwlock","MappedRwLockReadGuard"],"kind":"struct"},"2:10675:28322":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"1:11571:27497":{"crate_id":1,"path":["std","sys","thread_local","fast_local","Key"],"kind":"struct"},"16:7014:16622":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"1:506:2756":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"17:597:16741":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"21:6747:33893":{"crate_id":21,"path":["futures_util","fns","IntoFn"],"kind":"struct"},"6:6621:14374":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","Elf64_Chdr"],"kind":"struct"},"2:3288:8439":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:2702:2979":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"2:3174:8436":{"crate_id":2,"path":["core","ops","async_function","AsyncFnMut"],"kind":"trait"},"2:3335:2625":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"1:4944:3053":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"1:4867:3058":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"16:4718:16274":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"2:22245:3362":{"crate_id":2,"path":["core","core_simd","simd","num","int","SimdInt"],"kind":"trait"},"16:8259:16665":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"21:15290:2686":{"crate_id":21,"path":["futures_util","io","write_vectored","WriteVectored"],"kind":"struct"},"2:22774:28109":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"6:5370:13645":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsgerr"],"kind":"struct"},"21:15299:2687":{"crate_id":21,"path":["futures_util","io","write_all","WriteAll"],"kind":"struct"},"30:142:21375":{"crate_id":30,"path":["memchr","arch","all","packedpair","HeuristicFrequencyRank"],"kind":"trait"},"2:21421:29506":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_elements_left","Rotate"],"kind":"struct"},"17:12584:16760":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolIterator"],"kind":"struct"},"2:22816:29344":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"27:146:219":{"crate_id":27,"path":["futures_channel","mpsc","Receiver"],"kind":"struct"},"2:43406:2977":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"17:14529:20273":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"17:13235:19716":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"17:12530:17004":{"crate_id":17,"path":["object","read","xcoff","section","XcoffSectionIterator"],"kind":"struct"},"1:3844:3015":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"2:2115:188":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"17:10457:137":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"17:15058:20981":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"17:15748:21049":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"16:7604:16639":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"1:9313:16626":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"21:15499:33886":{"crate_id":21,"path":["futures_util","fns","InspectOkFn"],"kind":"struct"},"17:12516:17013":{"crate_id":17,"path":["object","read","xcoff","file","XcoffFile"],"kind":"struct"},"1:1057:2827":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:45986:3243":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"2:42799:28918":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:536:2761":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"2:43347:8500":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"21:8156:2469":{"crate_id":21,"path":["futures_util","future","try_future","InspectOk"],"kind":"struct"},"17:14587:20276":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"16:2684:15652":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"16:4587:16212":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"2:42250:8450":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"21:4275:2594":{"crate_id":21,"path":["futures_util","stream","futures_ordered","FuturesOrdered"],"kind":"struct"},"2:43570:8532":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"2:9902:29062":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"16:6263:32926":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:45629:3288":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"21:6776:2451":{"crate_id":21,"path":["futures_util","future","future","flatten","Flatten"],"kind":"enum"},"6:8317:13846":{"crate_id":6,"path":["libc","unix","linux_like","linux","canfd_frame"],"kind":"struct"},"16:7559:16635":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"16:2768:15656":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"21:6769:2082":{"crate_id":21,"path":["futures_util","select_biased"],"kind":"macro"},"21:13319:2578":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffer_unordered","TryBufferUnordered"],"kind":"struct"},"2:30190:3018":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"17:12264:16957":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"2:2049:8895":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:9293:27507":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"6:7359:14800":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stack_t"],"kind":"struct"},"5:1311:2826":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"11:787:2816":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"1:2666:2666":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"30:0:2274":{"crate_id":30,"path":["memchr"],"kind":"module"},"2:21497:2950":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"15:394:15597":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"5:5922:2609":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"21:15209:2681":{"crate_id":21,"path":["futures_util","io","seek","Seek"],"kind":"struct"},"6:5489:13659":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_128"],"kind":"struct"},"6:5677:13678":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_can"],"kind":"struct"},"24:296:35452":{"crate_id":24,"path":["futures_task","noop_waker","noop_waker_ref","SyncRawWaker"],"kind":"struct"},"21:14256:34542":{"crate_id":21,"path":["futures_util","sink","map_err","_","__Origin"],"kind":"struct"},"2:13469:204":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"11:2304:2826":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"2:45711:3254":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"30:1225:21370":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Two"],"kind":"struct"},"21:9346:2506":{"crate_id":21,"path":["futures_util","future","select_ok","SelectOk"],"kind":"struct"},"21:10479:34542":{"crate_id":21,"path":["futures_util","stream","stream","map","_","__Origin"],"kind":"struct"},"2:45521:3253":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:15324:21018":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:45384:3240":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"5:830:2541":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"18:515:21268":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"5:1171:30488":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:12494:16961":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"2:39955:2785":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"17:13606:19741":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"30:960:21260":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","Finder"],"kind":"struct"},"17:15836:21056":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"6:7330:9506":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock"],"kind":"struct"},"16:5075:16355":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"16:4614:16216":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"17:13674:20222":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"21:10889:2546":{"crate_id":21,"path":["futures_util","stream","stream","skip_while","SkipWhile"],"kind":"struct"},"6:6562:14371":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","timex"],"kind":"struct"},"18:623:21379":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"1:4612:3080":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:4074:2609":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"2:11351:8507":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:42152:3170":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:30445:8790":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"9:178:15531":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"17:12454:16994":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"17:15418:21028":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"6:6698:14383":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset"],"kind":"struct"},"21:15469:33890":{"crate_id":21,"path":["futures_util","fns","MapOkFn"],"kind":"struct"},"16:7306:32990":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"6:8265:13839":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_barrierattr_t"],"kind":"struct"},"16:3475:15669":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"2:42571:136":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"21:10822:34542":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"21:15224:2683":{"crate_id":21,"path":["futures_util","io","split","WriteHalf"],"kind":"struct"},"5:7380:2836":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"30:1387:21266":{"crate_id":30,"path":["memchr","cow","CowBytes"],"kind":"struct"},"6:1621:10535":{"crate_id":6,"path":["libc","unix","linux_like","in_pktinfo"],"kind":"struct"},"17:14449:20267":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"2:44419:179":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"2:22333:28853":{"crate_id":2,"path":["core","core_simd","simd","ptr","const_ptr","SimdConstPtr","with_addr"],"kind":"function"},"2:43694:8520":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"17:11788:16940":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"1:10313:22747":{"crate_id":1,"path":["std","sys","pal","unix","os","Env"],"kind":"struct"},"21:10962:2548":{"crate_id":21,"path":["futures_util","stream","stream","take","Take"],"kind":"struct"},"17:11142:16759":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"5:926:2835":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"21:14117:34542":{"crate_id":21,"path":["futures_util","sink","fanout","_","__Origin"],"kind":"struct"},"1:8630:3105":{"crate_id":1,"path":["std","os","linux","raw","arch","stat"],"kind":"struct"},"1:862:2814":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"21:7192:2458":{"crate_id":21,"path":["futures_util","future","future","Then"],"kind":"struct"},"30:1526:21258":{"crate_id":30,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:57:2085":{"crate_id":21,"path":["futures_util","stream_select"],"kind":"macro"},"1:11092:22714":{"crate_id":1,"path":["std","sys","pal","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"17:12089:16902":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"6:5191:13623":{"crate_id":6,"path":["libc","unix","linux_like","linux","posix_spawn_file_actions_t"],"kind":"struct"},"28:46:2586":{"crate_id":28,"path":["slab","Iter"],"kind":"struct"},"17:15342:21020":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:8012:15182":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","clone_args"],"kind":"struct"},"11:2326:2827":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"21:9632:34542":{"crate_id":21,"path":["futures_util","stream","stream","cycle","_","__Origin"],"kind":"struct"},"29:0:2068":{"crate_id":29,"path":["futures_io"],"kind":"module"},"16:6574:16604":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"2:40321:2455":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"2:21976:3226":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"21:9338:2505":{"crate_id":21,"path":["futures_util","future","try_select","TrySelect"],"kind":"struct"},"5:5064:2963":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"2:31951:28907":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"2:2822:2950":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"30:967:21261":{"crate_id":30,"path":["memchr","arch","all","rabinkarp","FinderRev"],"kind":"struct"},"21:7045:34542":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"21:13047:2571":{"crate_id":21,"path":["futures_util","stream","try_stream","try_fold","TryFold"],"kind":"struct"},"2:45504:3247":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"21:9569:2529":{"crate_id":21,"path":["futures_util","stream","stream","count","Count"],"kind":"struct"},"21:14739:34542":{"crate_id":21,"path":["futures_util","io","line_writer","_","__Origin"],"kind":"struct"},"16:7085:32873":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"1:8309:22527":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"5:7436:2814":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:11702:16888":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"2:41582:2814":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"16:5781:16568":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"2:39286:8594":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"5:7480:2814":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"17:15624:21041":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"1:3551:2621":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:11235:2953":{"crate_id":1,"path":["std","sys","pal","unix","time","SystemTime"],"kind":"struct"},"1:10472:22748":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Argv"],"kind":"struct"},"21:6429:186":{"crate_id":21,"path":["futures_util","lock","mutex","MutexGuard"],"kind":"struct"},"21:14801:2608":{"crate_id":21,"path":["futures_util","io","close","Close"],"kind":"struct"},"21:13667:2587":{"crate_id":21,"path":["futures_util","stream","repeat","Repeat"],"kind":"struct"},"5:5457:2490":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"21:13288:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_take_while","_","__Origin"],"kind":"struct"},"2:3319:2411":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:10564:3151":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:2040:28443":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"5:4438:30375":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"28:55:2813":{"crate_id":28,"path":["slab","IterMut"],"kind":"struct"},"17:15368:21022":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"27:140:21337":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSender"],"kind":"struct"},"2:13656:3369":{"crate_id":2,"path":["core","task","wake","LocalWaker"],"kind":"struct"},"2:45337:3239":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:2289:2653":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"2:40291:2452":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"17:12076:16901":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"6:7389:10666":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat64"],"kind":"struct"},"17:14436:20266":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"24:190:2450":{"crate_id":24,"path":["futures_task","future_obj","UnsafeFutureObj"],"kind":"trait"},"2:46549:8405":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"5:2289:31544":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"21:10229:34542":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"2:39216:215":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"2:46392:3290":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:10950:127":{"crate_id":1,"path":["std","sys","pal","unix","fs","DirBuilder"],"kind":"struct"},"18:698:21262":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"2:21467:29512":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"11:490:153":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"17:16212:21225":{"crate_id":17,"path":["object","xcoff","BlockAux64"],"kind":"struct"},"17:16259:19725":{"crate_id":17,"path":["object","xcoff","Rel32"],"kind":"struct"},"17:12422:16993":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"17:12433:16729":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"2:41332:3007":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"6:5277:13633":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_tp"],"kind":"struct"},"17:15168:21004":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"1:12350:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"17:13344:19722":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"2:41316:3006":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"21:12230:2471":{"crate_id":21,"path":["futures_util","stream","try_stream","MapOk"],"kind":"struct"},"21:4540:22693":{"crate_id":21,"path":["futures_util","stream","futures_unordered","poll_next","Bomb"],"kind":"struct"},"20:143:21279":{"crate_id":20,"path":["futures_core","task","__internal","atomic_waker","AtomicWaker"],"kind":"struct"},"5:1496:2814":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"6:7446:14801":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","pthread_attr_t"],"kind":"struct"},"21:12255:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"17:14189:20250":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"17:15646:21043":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:12297:2796":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"30:1233:21371":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","TwoIter"],"kind":"struct"},"17:14752:20984":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"21:12913:2582":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","TryChunks"],"kind":"struct"},"2:45437:3281":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"17:13553:19737":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"1:12347:950":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"21:13817:2591":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","PollNext"],"kind":"enum"},"2:43470:8537":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"17:14475:20269":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"17:11567:16884":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"11:2548:32469":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"1:7689:22528":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"6:7314:10480":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs"],"kind":"struct"},"17:14933:20991":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"1:921:2820":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:11604:22499":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:13024:16773":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"1:3429:2983":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"6:8197:15344":{"crate_id":6,"path":["libc","unix","linux_like","linux","arch","generic","termios2"],"kind":"struct"},"5:3305:2833":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"16:5995:16577":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"5:732:118":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"2:4600:220":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"16:2528:15645":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"5:7402:2837":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"6:5671:13677":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_can_addr"],"kind":"union"},"1:7978:2769":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"6:1639:10537":{"crate_id":6,"path":["libc","unix","linux_like","in6_rtmsg"],"kind":"struct"},"2:3546:145":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"2:40249:2531":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"21:15308:21297":{"crate_id":21,"path":["futures_util","lock","bilock","BiLock"],"kind":"struct"},"17:11354:16832":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:6588:16605":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:13325:19721":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"6:545:9633":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"17:11574:15544":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"21:7991:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:11419:16759":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"17:15376:21023":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"1:3244:25512":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"17:13766:16948":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"17:13437:19729":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:10895:238":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"6:1680:10541":{"crate_id":6,"path":["libc","unix","linux_like","mmsghdr"],"kind":"struct"},"6:538:9632":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"1:8522:2673":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:15206:21008":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"21:14289:2593":{"crate_id":21,"path":["futures_util","sink","unfold","Unfold"],"kind":"struct"},"2:45579:3228":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"30:1175:21372":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","Three"],"kind":"struct"},"2:10252:8459":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"2:12830:8512":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"11:2562:32473":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"21:13835:2592":{"crate_id":21,"path":["futures_util","stream","select_with_strategy","SelectWithStrategy"],"kind":"struct"},"1:896:2609":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:2450:2936":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"6:5102:13616":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Sym"],"kind":"struct"},"2:12582:9013":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:3339:2995":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"1:5385:202":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"11:2140:2827":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:41500:3009":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"16:5846:16572":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"5:1465:2586":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"21:10451:2455":{"crate_id":21,"path":["futures_util","stream","stream","map","Map"],"kind":"struct"},"27:124:21335":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedSenderInner"],"kind":"struct"},"2:45454:3287":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"2:31965:8924":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"17:14977:20993":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"16:2708:15653":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"21:422:2057":{"crate_id":21,"path":["futures_util","future","future","FutureExt"],"kind":"trait"},"6:5344:13642":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_resp"],"kind":"struct"},"16:5742:16565":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"17:14560:20275":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"21:13510:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","into_async_read","_","__Origin"],"kind":"struct"},"21:11247:34542":{"crate_id":21,"path":["futures_util","stream","stream","zip","_","__Origin"],"kind":"struct"},"6:5653:13675":{"crate_id":6,"path":["libc","unix","linux_like","linux","sched_attr"],"kind":"struct"},"21:5212:2084":{"crate_id":21,"path":["futures_util","task"],"kind":"module"},"11:710:2819":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:13594:19740":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"16:6335:16588":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"21:6212:2075":{"crate_id":21,"path":["futures_util","io","AsyncSeekExt"],"kind":"trait"},"16:2936:15663":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"16:8216:16663":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"2:12320:8963":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4924:13597":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_id"],"kind":"struct"},"21:13008:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","_","__Origin"],"kind":"struct"},"20:92:2950":{"crate_id":20,"path":["futures_core","stream","private_try_stream","Sealed"],"kind":"trait"},"21:14020:21284":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","IterPinRef"],"kind":"struct"},"5:1155:31551":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:40152:2921":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"1:12338:876":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"2:4609:8604":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"18:96:21241":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"6:5039:13611":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_ff_erase"],"kind":"struct"},"17:15799:21053":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"17:13272:19718":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"6:4811:13587":{"crate_id":6,"path":["libc","unix","linux_like","linux","spwd"],"kind":"struct"},"2:44356:206":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"17:14212:20251":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:10317:16752":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"21:2715:2561":{"crate_id":21,"path":["futures_util","stream","stream","split","ReuniteError"],"kind":"struct"},"21:10139:2555":{"crate_id":21,"path":["futures_util","stream","stream","forward","Forward"],"kind":"struct"},"17:12043:16904":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"17:13986:20237":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"1:1812:682":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:15010:20995":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"21:8499:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"1:11270:161":{"crate_id":1,"path":["std","sys","pal","unix","time","Instant"],"kind":"struct"},"21:6338:185":{"crate_id":21,"path":["futures_util","lock","mutex","Mutex"],"kind":"struct"},"5:1480:2813":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"17:12189:16985":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:43684:8531":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"21:8303:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"17:12127:16909":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"21:10345:34542":{"crate_id":21,"path":["futures_util","stream","stream","fuse","_","__Origin"],"kind":"struct"},"28:42:2814":{"crate_id":28,"path":["slab","IntoIter"],"kind":"struct"},"21:8557:2481":{"crate_id":21,"path":["futures_util","future","try_maybe_done","TryMaybeDone"],"kind":"enum"},"21:8474:2477":{"crate_id":21,"path":["futures_util","future","try_future","UnwrapOrElse"],"kind":"struct"},"1:8702:3132":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"21:12582:2570":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","TryFilterMap"],"kind":"struct"},"30:918:21372":{"crate_id":30,"path":["memchr","arch","all","memchr","Three"],"kind":"struct"},"5:7597:2906":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"16:8226:16664":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"17:15456:21032":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"21:6566:34050":{"crate_id":21,"path":["futures_util","fns","FnMut1"],"kind":"trait"},"2:45690:3248":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"16:2303:15607":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"16:2854:15660":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"1:10907:2944":{"crate_id":1,"path":["std","sys","pal","unix","fs","OpenOptions"],"kind":"struct"},"1:560:2763":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"21:9555:34542":{"crate_id":21,"path":["futures_util","stream","stream","concat","_","__Origin"],"kind":"struct"},"17:15463:21033":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"17:14311:20258":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"21:6982:34542":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"5:218:8446":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"6:5557:13665":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_setup"],"kind":"struct"},"17:15333:21019":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"2:37756:8868":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"21:10056:34542":{"crate_id":21,"path":["futures_util","stream","stream","any","_","__Origin"],"kind":"struct"},"17:14414:20265":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"2:40527:2548":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"28:60:2609":{"crate_id":28,"path":["slab","Drain"],"kind":"struct"},"5:4149:2813":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"21:11266:2553":{"crate_id":21,"path":["futures_util","stream","stream","chunks","Chunks"],"kind":"struct"},"17:15760:21050":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:44458:28919":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"17:16269:19727":{"crate_id":17,"path":["object","xcoff","Rel64"],"kind":"struct"},"21:6914:2451":{"crate_id":21,"path":["futures_util","future","future","Flatten"],"kind":"struct"},"21:7100:34542":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"16:3810:15688":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"16:5307:16541":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"1:2680:22709":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:3098:246":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"21:12030:2469":{"crate_id":21,"path":["futures_util","stream","try_stream","InspectOk"],"kind":"struct"},"17:11497:16828":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"2:6849:2618":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"11:687:2813":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"16:6120:16583":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"2:41654:8949":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"21:23:2424":{"crate_id":21,"path":["futures_util","async_await","poll","PollOnce"],"kind":"struct"},"6:7339:14798":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","flock64"],"kind":"struct"},"1:8515:2978":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"2:46450:3262":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"16:867:32946":{"crate_id":16,"path":["gimli","read","endian_slice","DebugByte"],"kind":"struct"},"6:5472:13656":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_authinfo"],"kind":"struct"},"21:7961:2474":{"crate_id":21,"path":["futures_util","future","try_future","OrElse"],"kind":"struct"},"30:1421:21241":{"crate_id":30,"path":["memchr","memchr","Memchr2"],"kind":"struct"},"1:6343:22519":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"16:4856:16297":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"1:726:153":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"16:0:2272":{"crate_id":16,"path":["gimli"],"kind":"module"},"6:7306:9676":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","sigaction"],"kind":"struct"},"1:7973:2767":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"16:5347:16558":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"17:11102:16793":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"2:33776:8863":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"11:742:2820":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:13855:20230":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"6:8259:13838":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_condattr_t"],"kind":"struct"},"21:9369:2526":{"crate_id":21,"path":["futures_util","stream","stream","chain","Chain"],"kind":"struct"},"6:6900:14423":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","msqid_ds"],"kind":"struct"},"11:430:32483":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"17:12443:16984":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"5:6402:3373":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"6:1628:10536":{"crate_id":6,"path":["libc","unix","linux_like","ifaddrs"],"kind":"struct"},"21:14657:2665":{"crate_id":21,"path":["futures_util","io","buf_reader","SeeKRelative"],"kind":"struct"},"14:220:15571":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"2:45661:3242":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:1485:10521":{"crate_id":6,"path":["libc","unix","linux_like","in_addr"],"kind":"struct"},"6:5536:13663":{"crate_id":6,"path":["libc","unix","linux_like","linux","dirent"],"kind":"struct"},"2:40230:8824":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"17:12621:17007":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbol"],"kind":"struct"},"2:12620:8508":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"6:5624:13671":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:9386:233":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"1:7295:24920":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"16:6948:16618":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:5528:13662":{"crate_id":6,"path":["libc","unix","linux_like","linux","sockaddr_nl"],"kind":"struct"},"2:8167:2627":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:5196:27486":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:42033:95":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:9259:115":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"18:563:21271":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"21:6556:34068":{"crate_id":21,"path":["futures_util","fns","FnOnce1"],"kind":"trait"},"2:8196:129":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:8844:3137":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"16:2808:15658":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"21:9467:2551":{"crate_id":21,"path":["futures_util","stream","stream","unzip","Unzip"],"kind":"struct"},"17:15281:21014":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"1:8502:2548":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"6:5502:13660":{"crate_id":6,"path":["libc","unix","linux_like","linux","tls12_crypto_info_aes_gcm_256"],"kind":"struct"},"5:4309:2586":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"2:33430:8861":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"17:16223:21226":{"crate_id":17,"path":["object","xcoff","StatAux"],"kind":"struct"},"17:14575:16729":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"2:41444:28102":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:12175:16973":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"1:6295:3372":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"27:441:3191":{"crate_id":27,"path":["futures_channel","mpsc","SendError"],"kind":"struct"},"21:10401:34542":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"16:6494:16599":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"30:1432:21242":{"crate_id":30,"path":["memchr","memchr","Memchr3"],"kind":"struct"},"2:40330:8825":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:5591:113":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"1:9346:22156":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"5:7621:8471":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:648:2791":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"1:11682:22741":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"2:40259:2532":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"16:6872:16615":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"21:10841:2545":{"crate_id":21,"path":["futures_util","stream","stream","skip","Skip"],"kind":"struct"},"12:0:2269":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"1:10294:2877":{"crate_id":1,"path":["std","sys","pal","unix","os","SplitPaths"],"kind":"struct"},"6:4800:13586":{"crate_id":6,"path":["libc","unix","linux_like","linux","passwd"],"kind":"struct"},"17:9755:16712":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"2:46518:8402":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"17:12824:16765":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"1:4094:3041":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"30:995:21260":{"crate_id":30,"path":["memchr","arch","all","twoway","Finder"],"kind":"struct"},"30:1411:21240":{"crate_id":30,"path":["memchr","memchr","Memchr"],"kind":"struct"},"1:7338:22165":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:41671:225":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:2849:162":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:21465:29508":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"2:45536:3259":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"17:10622:33761":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"1:1593:2830":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"17:11595:16885":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"0:56:1318":{"crate_id":0,"path":["futures","prelude"],"kind":"module"},"21:15329:2510":{"crate_id":21,"path":["futures_util","abortable","Abortable"],"kind":"struct"},"17:14177:20249":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"6:4864:13590":{"crate_id":6,"path":["libc","unix","linux_like","linux","itimerspec"],"kind":"struct"},"2:3531:8873":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"1:8593:3068":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketAncillary"],"kind":"struct"},"1:12342:1827":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"2:31976:243":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"2:42777:156":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"5:6007:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"2:4456:8617":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"21:14396:34542":{"crate_id":21,"path":["futures_util","sink","with","_","__Origin"],"kind":"struct"},"6:5400:13649":{"crate_id":6,"path":["libc","unix","linux_like","linux","in6_ifreq"],"kind":"struct"},"2:11282:8503":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"17:15023:20996":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"11:434:32484":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"2:41518:3010":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"16:6962:16619":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"21:13423:2581":{"crate_id":21,"path":["futures_util","stream","try_stream","try_for_each_concurrent","TryForEachConcurrent"],"kind":"struct"},"13:110:32535":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:22388:8885":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"function"},"6:5174:3064":{"crate_id":6,"path":["libc","unix","linux_like","linux","ucred"],"kind":"struct"},"17:12851:16766":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"17:15944:19715":{"crate_id":17,"path":["object","xcoff","FileHeader64"],"kind":"struct"},"11:2151:2828":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"21:7815:2478":{"crate_id":21,"path":["futures_util","future","try_future","FlattenSink"],"kind":"struct"},"2:40199:2858":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"2:40050:8637":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"struct"},"27:149:21339":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedReceiver"],"kind":"struct"},"17:11405:16830":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"17:11089:16794":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"17:16121:21218":{"crate_id":17,"path":["object","xcoff","FileAux64"],"kind":"struct"},"21:13575:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_all","_","__Origin"],"kind":"struct"},"1:10878:3104":{"crate_id":1,"path":["std","sys","pal","unix","fd","FileDesc"],"kind":"struct"},"6:5329:13640":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif_sizes"],"kind":"struct"},"17:12318:16771":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"6:7452:14802":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpxreg"],"kind":"struct"},"2:46666:8412":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"16:5802:16569":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"2:3091:8434":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"2:11850:8491":{"crate_id":2,"path":["core","slice","iter","ChunkBy"],"kind":"struct"},"2:22419:2950":{"crate_id":2,"path":["core","core_simd","simd","ptr","sealed","Sealed"],"kind":"trait"},"21:2566:33915":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","WrappedWaker"],"kind":"struct"},"2:42264:8458":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:12324:1157":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"27:467:21350":{"crate_id":27,"path":["futures_channel","mpsc","SendErrorKind"],"kind":"enum"},"6:1580:10532":{"crate_id":6,"path":["libc","unix","linux_like","sched_param"],"kind":"struct"},"17:15596:21038":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:8509:2977":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"2:39158:211":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"11:2352:2828":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"1:6619:3175":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"21:14517:2618":{"crate_id":21,"path":["futures_util","sink","buffer","Buffer"],"kind":"struct"},"2:46613:8409":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"6:6491:14322":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","mallinfo"],"kind":"struct"},"2:12804:8517":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"1:11300:22539":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:8582:3078":{"crate_id":1,"path":["std","os","unix","net","ancillary","SocketCred"],"kind":"struct"},"18:754:21264":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"30:1077:21370":{"crate_id":30,"path":["memchr","arch","generic","memchr","Two"],"kind":"struct"},"30:1091:21372":{"crate_id":30,"path":["memchr","arch","generic","memchr","Three"],"kind":"struct"},"1:1599:2831":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:3179:8437":{"crate_id":2,"path":["core","ops","async_function","AsyncFnOnce"],"kind":"trait"},"21:13030:2585":{"crate_id":21,"path":["futures_util","stream","try_stream","try_ready_chunks","TryReadyChunksError"],"kind":"struct"},"2:8622:8819":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"2:22666:29079":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"16:6456:16596":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"2:6844:29339":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"2:40353:8828":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12388:16982":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"2:41538:193":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"21:8120:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:14430:2617":{"crate_id":21,"path":["futures_util","sink","with_flat_map","WithFlatMap"],"kind":"struct"},"17:12572:16759":{"crate_id":17,"path":["object","read","xcoff","symbol","SymbolTable"],"kind":"struct"},"1:10920:21841":{"crate_id":1,"path":["std","sys","pal","unix","fs","FilePermissions"],"kind":"struct"},"6:5046:13612":{"crate_id":6,"path":["libc","unix","linux_like","linux","uinput_abs_setup"],"kind":"struct"},"1:11899:27502":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"18:491:33785":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"2:46628:8410":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"16:4743:16276":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"21:335:33913":{"crate_id":21,"path":["futures_util","future","future","shared","Notifier"],"kind":"struct"},"30:1444:8515":{"crate_id":30,"path":["memchr","memmem","searcher","Searcher"],"kind":"struct"},"17:14091:20245":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"17:4986:17014":{"crate_id":17,"path":["object","read","xcoff","relocation","XcoffRelocationIterator"],"kind":"struct"},"11:102:32476":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"6:5588:13668":{"crate_id":6,"path":["libc","unix","linux_like","linux","mq_attr"],"kind":"struct"},"17:15266:21012":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"25:9:2065":{"crate_id":25,"path":["futures_sink","Sink"],"kind":"trait"},"28:217:2826":{"crate_id":28,"path":["slab","Entry"],"kind":"enum"},"20:0:2054":{"crate_id":20,"path":["futures_core"],"kind":"module"},"2:4530:8472":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"21:15417:33894":{"crate_id":21,"path":["futures_util","fns","ChainFn"],"kind":"struct"},"17:14147:20248":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"1:8206:2812":{"crate_id":1,"path":["std","hash","random","RandomState"],"kind":"struct"},"17:11841:16942":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"16:7528:16632":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"17:10350:16753":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"5:3792:2670":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"21:6962:2460":{"crate_id":21,"path":["futures_util","future","future","FlattenStream"],"kind":"struct"},"6:4891:13425":{"crate_id":6,"path":["libc","unix","linux_like","linux","if_nameindex"],"kind":"struct"},"10:36:32456":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3552:8599":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"16:2998:15664":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"16:2374:15638":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"2:44348:226":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"1:10315:27508":{"crate_id":1,"path":["std","sys","pal","unix","os","EnvStrDebug"],"kind":"struct"},"17:15116:21000":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"1:10997:3147":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","Stdio"],"kind":"enum"},"21:9887:2451":{"crate_id":21,"path":["futures_util","stream","stream","Flatten"],"kind":"struct"},"21:7757:2476":{"crate_id":21,"path":["futures_util","future","try_future","TryFlattenStream"],"kind":"struct"},"1:9700:22718":{"crate_id":1,"path":["std","sys","pal","unix","fs","Dir"],"kind":"struct"},"1:5526:3143":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"18:598:21381":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"1:12345:1821":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:10381:3157":{"crate_id":1,"path":["std","sys","pal","unix","pipe","AnonPipe"],"kind":"struct"},"2:22836:3020":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"21:1291:2059":{"crate_id":21,"path":["futures_util","stream"],"kind":"module"},"21:10319:2452":{"crate_id":21,"path":["futures_util","stream","stream","fuse","Fuse"],"kind":"struct"},"2:40239:2530":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"6:5477:13657":{"crate_id":6,"path":["libc","unix","linux_like","linux","rlimit64"],"kind":"struct"},"2:43737:8529":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"21:6240:2088":{"crate_id":21,"path":["futures_util","lock"],"kind":"module"},"16:6991:32815":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"17:10710:16758":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"17:11269:16819":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"2:39926:8640":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"21:12824:2567":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","TryCollect"],"kind":"struct"},"27:0:2086":{"crate_id":27,"path":["futures_channel"],"kind":"module"},"21:9948:2535":{"crate_id":21,"path":["futures_util","stream","stream","fold","Fold"],"kind":"struct"},"2:3306:124":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"30:1468:21264":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherRev"],"kind":"struct"},"16:8188:16661":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"21:15177:2678":{"crate_id":21,"path":["futures_util","io","read_to_end","ReadToEnd"],"kind":"struct"},"16:8313:136":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"1:4863:3054":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"17:11634:16856":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"16:4771:16281":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"17:13064:16725":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"17:13832:20228":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"2:40268:2533":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"16:2418:15640":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"17:15957:21212":{"crate_id":17,"path":["object","xcoff","AuxHeader32"],"kind":"struct"},"30:943:21260":{"crate_id":30,"path":["memchr","arch","all","packedpair","Finder"],"kind":"struct"},"6:4959:13601":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_replay"],"kind":"struct"},"5:2103:2848":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8145:2946":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"16:6246:205":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"21:14863:2668":{"crate_id":21,"path":["futures_util","io","copy_buf","CopyBuf"],"kind":"struct"},"2:22466:3356":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdOrd"],"kind":"trait"},"18:481:21266":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"2:46421:3311":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"17:13363:19723":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"17:1207:16804":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"1:12341:869":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:5581:13667":{"crate_id":6,"path":["libc","unix","linux_like","linux","af_alg_iv"],"kind":"struct"},"18:521:21265":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"17:9886:16744":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"6:485:9626":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"18:80:21240":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"21:5875:2963":{"crate_id":21,"path":["futures_util","io","read_to_end","Guard"],"kind":"struct"},"6:6471:14365":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","cmsghdr"],"kind":"struct"},"16:4468:16185":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"21:13676:2588":{"crate_id":21,"path":["futures_util","stream","repeat_with","RepeatWith"],"kind":"struct"},"2:44338:218":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"21:15139:2674":{"crate_id":21,"path":["futures_util","io","read","Read"],"kind":"struct"},"21:14844:34542":{"crate_id":21,"path":["futures_util","io","copy","_","__Origin"],"kind":"struct"},"16:6504:16600":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:44188:130":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"16:4560:16208":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"17:10661:16757":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"1:8528:3013":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:15249:21011":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"16:7570:16636":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:44158:9007":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"21:14667:2666":{"crate_id":21,"path":["futures_util","io","buf_writer","BufWriter"],"kind":"struct"},"2:46119:3244":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"6:5630:13672":{"crate_id":6,"path":["libc","unix","linux_like","linux","ifconf"],"kind":"struct"},"9:502:15429":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"16:4062:15848":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"21:14633:34542":{"crate_id":21,"path":["futures_util","io","buf_reader","_","__Origin"],"kind":"struct"},"21:0:2056":{"crate_id":21,"path":["futures_util"],"kind":"module"},"1:11012:22477":{"crate_id":1,"path":["std","sys","pal","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6231:16584":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"17:11166:16797":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"1:3847:3014":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"21:20:1297":{"crate_id":21,"path":["futures_util","poll"],"kind":"macro"},"1:7081:3225":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"16:5037:16340":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"11:2369:15554":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"2:3339:139":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:2979:2901":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"16:3014:15665":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"2:41633:3121":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"17:11537:16848":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"1:3502:2963":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:10185:16718":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"21:7586:34048":{"crate_id":21,"path":["futures_util","future","try_future","try_flatten_err","TryFlattenErr"],"kind":"enum"},"17:13899:20232":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"2:45322:3274":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:40142:2922":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:4487:8618":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"2:10248:8450":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"2:43245:8494":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"9:53:15445":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"17:15992:21213":{"crate_id":17,"path":["object","xcoff","AuxHeader64"],"kind":"struct"},"1:8601:3013":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"1:6727:3178":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"1:11610:3158":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"21:12552:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter","_","__Origin"],"kind":"struct"},"2:39108:8872":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"11:299:32459":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:31940:21769":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:5774:219":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"17:15126:21001":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"6:6417:14360":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","aiocb"],"kind":"struct"},"30:1204:21368":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","One"],"kind":"struct"},"6:6532:14369":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_mmap_hdr"],"kind":"struct"},"1:8220:27483":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:9094:198":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"10:44:15536":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"16:8202:16662":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"1:12308:22479":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:11914:15594":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"17:15569:21036":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"16:6532:16601":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"11:1160:2829":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"24:9:21281":{"crate_id":24,"path":["futures_task","spawn","Spawn"],"kind":"trait"},"21:8596:34542":{"crate_id":21,"path":["futures_util","future","option","_","__Origin"],"kind":"struct"},"6:6478:14366":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","termios"],"kind":"struct"},"6:8328:13847":{"crate_id":6,"path":["libc","unix","linux_like","linux","canxl_frame"],"kind":"struct"},"16:7590:16638":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"21:7840:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"11:883:2825":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"6:5306:13637":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_filter"],"kind":"struct"},"21:13116:2576":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","TryUnfold"],"kind":"struct"},"6:6435:14361":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__exit_status"],"kind":"struct"},"27:434:21354":{"crate_id":27,"path":["futures_channel","lock","Lock"],"kind":"struct"},"17:13922:20233":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"21:9828:2451":{"crate_id":21,"path":["futures_util","stream","stream","flatten","Flatten"],"kind":"struct"},"2:25878:266":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"2:11064:2813":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"6:559:9635":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:5212:13625":{"crate_id":6,"path":["libc","unix","linux_like","linux","genlmsghdr"],"kind":"struct"},"21:13636:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_any","_","__Origin"],"kind":"struct"},"18:507:2555":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"2:8158:164":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:3468:210":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"17:10251:16750":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"1:10897:21869":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileAttr"],"kind":"struct"},"1:9139:2586":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"5:671:29911":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"18:548:152":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"21:9232:34542":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"1:4281:3074":{"crate_id":1,"path":["std","os","unix","net","ancillary","AncillaryData"],"kind":"enum"},"17:16249:21228":{"crate_id":17,"path":["object","xcoff","DwarfAux64"],"kind":"struct"},"21:11576:34042":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","FlattenUnorderedWithFlowController"],"kind":"struct"},"21:11543:34546":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStreamFut"],"kind":"struct"},"16:7711:209":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"21:15321:34077":{"crate_id":21,"path":["futures_util","lock","bilock","BiLockGuard"],"kind":"struct"},"1:417:184":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"6:497:9628":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"21:2553:34078":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","PollStateBomb"],"kind":"struct"},"16:6466:16597":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"2:39176:214":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"1:12349:1397":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"17:11042:16784":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"5:6039:3169":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"16:7006:16621":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"11:1883:2586":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"1:4761:25316":{"crate_id":1,"path":["std","os","linux","fs","MetadataExt","st_ctime"],"kind":"function"},"2:3712:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"16:7686:16643":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"16:6342:32987":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"1:9326:22315":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"5:6600:30363":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"2:41466:3017":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"5:1726:30363":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"5:7527:2809":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"21:12856:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_collect","_","__Origin"],"kind":"struct"},"2:11089:2978":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"1:12336:740":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"16:8155:16659":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"17:12683:17006":{"crate_id":17,"path":["object","read","xcoff","segment","XcoffSegmentIterator"],"kind":"struct"},"16:6560:16603":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:7119:30373":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"2:30814:195":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"1:3533:2674":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"2:4389:8601":{"crate_id":2,"path":["core","async_iter","async_iter","IntoAsyncIterator"],"kind":"trait"},"21:13152:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_unfold","_","__Origin"],"kind":"struct"},"5:3648:2586":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"21:14991:2670":{"crate_id":21,"path":["futures_util","io","cursor","Cursor"],"kind":"struct"},"21:5266:2089":{"crate_id":21,"path":["futures_util","io"],"kind":"module"},"16:5006:16332":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:2599:103":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"21:9010:2496":{"crate_id":21,"path":["futures_util","future","select_all","SelectAll"],"kind":"struct"},"1:8448:2065":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"16:6433:16594":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"21:9592:34542":{"crate_id":21,"path":["futures_util","stream","stream","count","_","__Origin"],"kind":"struct"},"1:8750:3133":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"1:4152:3045":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"16:6079:16581":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"2:40537:2550":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"2:40114:2977":{"crate_id":2,"path":["core","ffi","c_str","Bytes"],"kind":"struct"},"27:154:3192":{"crate_id":27,"path":["futures_channel","mpsc","TryRecvError"],"kind":"struct"},"20:82:2405":{"crate_id":20,"path":["futures_core","stream","FusedStream"],"kind":"trait"},"1:4142:3044":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"2:45369:3280":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:3558:8598":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"18:581:8658":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"2:3229:8864":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"2:46318:3284":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"21:11840:2461":{"crate_id":21,"path":["futures_util","stream","stream","catch_unwind","CatchUnwind"],"kind":"struct"},"17:11063:16803":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"17:16079:21215":{"crate_id":17,"path":["object","xcoff","Symbol32"],"kind":"struct"},"2:22461:3358":{"crate_id":2,"path":["core","core_simd","simd","cmp","ord","SimdPartialOrd"],"kind":"trait"},"2:21499:3234":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"17:12659:17001":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdat"],"kind":"struct"},"17:14284:20256":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"2:21949:2950":{"crate_id":2,"path":["core","core_simd","to_bytes","sealed","Sealed"],"kind":"trait"},"17:10915:33746":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"1:5108:3109":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"30:1045:21379":{"crate_id":30,"path":["memchr","arch","all","twoway","SuffixOrdering"],"kind":"enum"},"30:1583:35492":{"crate_id":30,"path":["memchr","vector","SensibleMoveMask"],"kind":"struct"},"5:2197:2756":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:43712:8518":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:12325:458":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"6:491:9627":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"1:870:2815":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"5:3037:30489":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"1:5895:3171":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"16:7144:16625":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"1:2041:197":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"17:10982:16780":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"17:11051:16809":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"17:11547:16882":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"6:8306:13845":{"crate_id":6,"path":["libc","unix","linux_like","linux","can_frame"],"kind":"struct"},"6:8271:13840":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_event_metadata"],"kind":"struct"},"17:15092:20998":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"30:1141:21369":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","OneIter"],"kind":"struct"},"2:7585:8645":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"2:2688:194":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"1:4265:3072":{"crate_id":1,"path":["std","os","unix","net","ancillary","ScmRights"],"kind":"struct"},"1:4294:3075":{"crate_id":1,"path":["std","os","unix","net","ancillary","Messages"],"kind":"struct"},"16:2748:15655":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"1:10607:22712":{"crate_id":1,"path":["std","sys","pal","unix","stack_overflow","Handler"],"kind":"struct"},"17:14876:20989":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"2:41478:3008":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"17:13399:19726":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"16:5700:16563":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"18:573:2555":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:42760:28892":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:39963:8528":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"17:14038:20241":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"2:46031:3249":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"16:3925:15734":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"5:4104:30363":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"16:3614:15670":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"16:2548:15646":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"1:3599:27255":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"2:31944:16665":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:14516:20272":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"16:872:32968":{"crate_id":16,"path":["gimli","read","endian_slice","DebugLen"],"kind":"struct"},"31:38:35524":{"crate_id":31,"path":["futures_executor","local_pool","ThreadNotify"],"kind":"struct"},"21:8973:34542":{"crate_id":21,"path":["futures_util","future","join","_","__Origin"],"kind":"struct"},"21:9309:34542":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"18:659:21258":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"21:12183:2454":{"crate_id":21,"path":["futures_util","stream","try_stream","into_stream","IntoStream"],"kind":"struct"},"5:6924:8581":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"30:930:21373":{"crate_id":30,"path":["memchr","arch","all","memchr","ThreeIter"],"kind":"struct"},"0:46:1962":{"crate_id":0,"path":["futures","executor"],"kind":"module"},"26:43:35454":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeDropInPlaceGuard"],"kind":"struct"},"1:8026:2794":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"28:76:35483":{"crate_id":28,"path":["slab","compact","CleanupGuard"],"kind":"struct"},"21:5256:21294":{"crate_id":21,"path":["futures_util","task","spawn","LocalSpawnExt"],"kind":"trait"},"17:15400:21026":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"17:11755:16892":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"21:14327:34542":{"crate_id":21,"path":["futures_util","sink","unfold","_","__Origin"],"kind":"struct"},"1:4050:3038":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"17:15655:21044":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"2:43674:2673":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"21:15358:34542":{"crate_id":21,"path":["futures_util","abortable","_","__Origin"],"kind":"struct"},"1:9118:3153":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"16:7857:16652":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"26:37:35453":{"crate_id":26,"path":["pin_project_lite","__private","AlwaysUnpin"],"kind":"struct"},"15:327:15590":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"2:37701:8867":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"5:2089:2670":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"2:44029:8538":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"21:12673:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten","_","__Origin"],"kind":"struct"},"21:12448:2573":{"crate_id":21,"path":["futures_util","stream","try_stream","try_next","TryNext"],"kind":"struct"},"11:1728:155":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"1:12344:1815":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6895:16616":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"17:14868:20988":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"16:8093:16656":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:44389:3370":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"22:0:2413":{"crate_id":22,"path":["pin_utils"],"kind":"module"},"2:41760:89":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"6:6447:14363":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","glob64_t"],"kind":"struct"},"16:2478:15643":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"2:40277:28406":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"21:2769:1038":{"crate_id":21,"path":["futures_util","stream","stream","StreamExt","map"],"kind":"function"},"17:12408:16983":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"21:15314:2760":{"crate_id":21,"path":["futures_util","lock","bilock","Inner"],"kind":"struct"},"16:2572:15647":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"1:10989:2887":{"crate_id":1,"path":["std","sys","pal","unix","os","JoinPathsError"],"kind":"struct"},"21:11977:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:13215:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","_","__Origin"],"kind":"struct"},"21:8217:2468":{"crate_id":21,"path":["futures_util","future","try_future","InspectErr"],"kind":"struct"},"2:22201:3361":{"crate_id":2,"path":["core","core_simd","simd","num","float","SimdFloat"],"kind":"trait"},"6:5181:13622":{"crate_id":6,"path":["libc","unix","linux_like","linux","mntent"],"kind":"struct"},"17:16105:21217":{"crate_id":17,"path":["object","xcoff","FileAux32"],"kind":"struct"},"21:15148:2675":{"crate_id":21,"path":["futures_util","io","read_vectored","ReadVectored"],"kind":"struct"},"2:5196:2996":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"2:10244:128":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4837:13589":{"crate_id":6,"path":["libc","unix","linux_like","linux","signalfd_siginfo"],"kind":"struct"},"21:15382:34188":{"crate_id":21,"path":["futures_util","abortable","AbortInner"],"kind":"struct"},"21:11514:34542":{"crate_id":21,"path":["futures_util","stream","stream","buffered","_","__Origin"],"kind":"struct"},"21:14220:2614":{"crate_id":21,"path":["futures_util","sink","map_err","SinkMapErr"],"kind":"struct"},"17:12671:17037":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatSectionIterator"],"kind":"struct"},"17:13015:16729":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"1:9190:3192":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"2:22109:3232":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"18:689:21261":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"6:5390:13648":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_ifru_map"],"kind":"struct"},"17:12647:17002":{"crate_id":17,"path":["object","read","xcoff","comdat","XcoffComdatIterator"],"kind":"struct"},"21:14191:34542":{"crate_id":21,"path":["futures_util","sink","err_into","_","__Origin"],"kind":"struct"},"2:39196:213":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"2:41663:2412":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"2:43438:8502":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:9155:2814":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"17:10534:33740":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"2:5137:423":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"5:7412:2850":{"crate_id":5,"path":["alloc","collections","btree","map","UnorderedKeyError"],"kind":"struct"},"1:6615:2590":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"5:5409:30363":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"27:487:21352":{"crate_id":27,"path":["futures_channel","oneshot","Cancellation"],"kind":"struct"},"2:39871:2785":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"17:14599:20277":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"2:4683:8612":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7799:16649":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"17:2234:16854":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"6:5296:13636":{"crate_id":6,"path":["libc","unix","linux_like","linux","j1939_filter"],"kind":"struct"},"6:1510:10525":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr"],"kind":"struct"},"1:2044:196":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"2:41799:96":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"5:1356:2829":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"16:6813:16613":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"17:15356:21021":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"11:856:2823":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"1:12329:333":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"1:2448:2935":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"2:32637:8854":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"1:12111:22689":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"17:12278:16988":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"2:42529:28471":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"21:15027:2612":{"crate_id":21,"path":["futures_util","io","flush","Flush"],"kind":"struct"},"1:5540:3144":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"2:12764:2923":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"1:2741:2667":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:8175:16660":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"6:6379:14294":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","statx"],"kind":"struct"},"21:7442:34542":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","_","__Origin"],"kind":"struct"},"5:3635:181":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:9272:21815":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"5:5852:250":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"2:45565:3314":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"2:33175:8859":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"27:481:3133":{"crate_id":27,"path":["futures_channel","mpsc","State"],"kind":"struct"},"21:11144:2458":{"crate_id":21,"path":["futures_util","stream","stream","then","Then"],"kind":"struct"},"21:10727:34542":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"16:7695:16644":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"1:9300:22497":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:7537:14807":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","mcontext_t"],"kind":"struct"},"6:4876:13592":{"crate_id":6,"path":["libc","unix","linux_like","linux","packet_mreq"],"kind":"struct"},"28:208:2828":{"crate_id":28,"path":["slab","VacantEntry"],"kind":"struct"},"1:1449:155":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:22789:28209":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:15039:20997":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"21:8242:34542":{"crate_id":21,"path":["futures_util","future","try_future","_","__Origin"],"kind":"struct"},"21:15157:2676":{"crate_id":21,"path":["futures_util","io","read_exact","ReadExact"],"kind":"struct"},"11:328:32457":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"6:6689:14382":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","sockaddr_xdp"],"kind":"struct"},"2:40402:8827":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"16:4940:16312":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"17:14788:20985":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"1:954:2825":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"2:11244:8502":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"16:7656:16642":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"5:0:307":{"crate_id":5,"path":["alloc"],"kind":"module"},"11:1923:2833":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"6:7412:10651":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","statfs64"],"kind":"struct"},"29:20:2072":{"crate_id":29,"path":["futures_io","if_std","AsyncWrite"],"kind":"trait"},"16:7769:16648":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"1:10978:22560":{"crate_id":1,"path":["std","sys","pal","unix","kernel_copy","SpliceMode"],"kind":"enum"},"21:15256:34542":{"crate_id":21,"path":["futures_util","io","take","_","__Origin"],"kind":"struct"},"1:8788:3135":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"21:6394:21299":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexGuard"],"kind":"struct"},"17:10155:16560":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"10:0:2267":{"crate_id":10,"path":["adler"],"kind":"module"},"5:3284:31573":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"5:7472:2814":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"2:40009:8635":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"21:12758:34023":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","NestedTryStreamIntoEitherTryStream"],"kind":"struct"},"21:10597:2537":{"crate_id":21,"path":["futures_util","stream","stream","next","Next"],"kind":"struct"},"2:11132:8508":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"17:13412:19727":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"17:12201:16986":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"1:10941:138":{"crate_id":1,"path":["std","sys","pal","unix","fs","FileType"],"kind":"struct"},"6:5445:13653":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_rcvinfo"],"kind":"struct"},"2:44047:8539":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"2:45792:28017":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"11:1903:2830":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"1:3380:2990":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"2:43396:8523":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"20:32:2055":{"crate_id":20,"path":["futures_core","future","TryFuture"],"kind":"trait"},"2:5158:28437":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"17:14912:20990":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"16:7618:16640":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"11:837:2821":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"14:202:8558":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"17:12289:16953":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"30:895:21370":{"crate_id":30,"path":["memchr","arch","all","memchr","Two"],"kind":"struct"},"5:1191:31549":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"1:1075:2829":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"21:6452:3174":{"crate_id":21,"path":["futures_util","lock","mutex","MappedMutexGuard"],"kind":"struct"},"17:12863:16767":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"21:9257:2503":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin5"],"kind":"struct"},"5:2757:30284":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:3342:140":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:6026:2534":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"2:33603:8862":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"16:5769:16567":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"1:9265:2760":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"2:21550:2950":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"5:5717:8581":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:13538:19736":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"1:11887:8419":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"21:14783:34542":{"crate_id":21,"path":["futures_util","io","chain","_","__Origin"],"kind":"struct"},"1:5576:3146":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"16:7823:16651":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"17:12328:16954":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"17:11605:16880":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"6:6714:14385":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_ring_offset_v1"],"kind":"struct"},"16:5367:16559":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"21:10773:34542":{"crate_id":21,"path":["futures_util","stream","stream","peek","_","__Origin"],"kind":"struct"},"18:538:21270":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"1:12330:1665":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"2:41591:3118":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"5:3238:2586":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"18:531:21269":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"6:6721:14386":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_mmap_offsets_v1"],"kind":"struct"},"2:32061:8433":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"1:8155:2944":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"2:7650:28398":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"5:3029:30282":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:1428:99":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"16:7168:16626":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:35825:8866":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"17:12792:16723":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"2:3140:8835":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"0:0:2152":{"crate_id":0,"path":["futures"],"kind":"module"},"2:42490:28475":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:22960:28087":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroUsizeInner"],"kind":"struct"},"30:874:21368":{"crate_id":30,"path":["memchr","arch","all","memchr","One"],"kind":"struct"},"30:1107:2586":{"crate_id":30,"path":["memchr","arch","generic","memchr","Iter"],"kind":"struct"},"11:2569:2809":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"11:351:32462":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"21:7290:34542":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"1:12328:1295":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"11:1603:15553":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"1:8460:2620":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"21:8750:2490":{"crate_id":21,"path":["futures_util","future","join","Join"],"kind":"struct"},"17:16235:21227":{"crate_id":17,"path":["object","xcoff","DwarfAux32"],"kind":"struct"},"2:43255:8495":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"11:1896:2817":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"1:4346:3076":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10759:16759":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"16:6849:16614":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"9:357:15442":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"2:33116:3223":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"17:12768:16721":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"2:40793:8818":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:45842:28221":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"2:1850:2963":{"crate_id":2,"path":["core","mem","maybe_uninit","Guard"],"kind":"struct"},"21:13371:2579":{"crate_id":21,"path":["futures_util","stream","try_stream","try_buffered","TryBuffered"],"kind":"struct"},"5:7048:263":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:45821:28203":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"2:39947:8529":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"2:10692:22709":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"17:14847:20986":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"17:4821:17008":{"crate_id":17,"path":["object","read","xcoff","symbol","XcoffSymbolIterator"],"kind":"struct"},"21:6823:2452":{"crate_id":21,"path":["futures_util","future","future","fuse","Fuse"],"kind":"struct"},"6:5665:13676":{"crate_id":6,"path":["libc","unix","linux_like","linux","sock_txtime"],"kind":"struct"},"21:9799:34542":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","_","__Origin"],"kind":"struct"},"16:3029:15666":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"21:13714:34542":{"crate_id":21,"path":["futures_util","stream","once","_","__Origin"],"kind":"struct"},"17:11293:16820":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"17:11730:16890":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"1:10960:2620":{"crate_id":1,"path":["std","sys","pal","unix","io","IoSlice"],"kind":"struct"},"17:13509:19734":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"1:883:2816":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"1:8061:2887":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"6:7984:9583":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","not_x32","statvfs"],"kind":"struct"},"18:670:21259":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:2598:2664":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"30:1065:21368":{"crate_id":30,"path":["memchr","arch","generic","memchr","One"],"kind":"struct"},"21:10988:34542":{"crate_id":21,"path":["futures_util","stream","stream","take","_","__Origin"],"kind":"struct"},"5:3741:30363":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"15:0:2271":{"crate_id":15,"path":["addr2line"],"kind":"module"},"6:5064:13614":{"crate_id":6,"path":["libc","unix","linux_like","linux","Elf32_Ehdr"],"kind":"struct"},"2:42517:2529":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"2:40102:2904":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"2:13618:115":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:11323:8506":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:46509:8401":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"5:1577:2847":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"17:13797:20226":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"21:9672:34542":{"crate_id":21,"path":["futures_util","stream","stream","enumerate","_","__Origin"],"kind":"struct"},"17:12887:16768":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"2:44138:9003":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"21:9763:2533":{"crate_id":21,"path":["futures_util","stream","stream","filter_map","FilterMap"],"kind":"struct"},"2:40124:2908":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"1:8652:3056":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"2:22716:28200":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"2:13038:119":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"16:2728:15654":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7379:32941":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:9445:3219":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"17:15678:21045":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"21:14047:2586":{"crate_id":21,"path":["futures_util","stream","select_all","Iter"],"kind":"struct"},"29:25:2071":{"crate_id":29,"path":["futures_io","if_std","AsyncSeek"],"kind":"trait"},"2:43217:8493":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"17:11367:16799":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:12969:16717":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:12711:136":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:12810:8513":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"20:68:2060":{"crate_id":20,"path":["futures_core","stream","Stream"],"kind":"trait"},"1:9254:22507":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"2:32063:114":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"30:144:21376":{"crate_id":30,"path":["memchr","arch","all","packedpair","DefaultFrequencyRank"],"kind":"struct"},"14:160:15561":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"1:359:2780":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"5:943:2586":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"6:8006:15181":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","align","max_align_t"],"kind":"struct"},"2:3133:8833":{"crate_id":2,"path":["core","marker","Freeze"],"kind":"trait"},"17:11153:16760":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"6:5336:13641":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_notif"],"kind":"struct"},"2:8616:2842":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"2:40087:8934":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"17:11877:16900":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:10672:2990":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stderr"],"kind":"struct"},"21:14752:2526":{"crate_id":21,"path":["futures_util","io","chain","Chain"],"kind":"struct"},"21:7887:2466":{"crate_id":21,"path":["futures_util","future","try_future","AndThen"],"kind":"struct"},"17:12399:16992":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"30:1133:21368":{"crate_id":30,"path":["memchr","arch","x86_64","avx2","memchr","One"],"kind":"struct"},"19:0:1274":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"17:14463:20268":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:2657:133":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:45646:3294":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"16:6665:16610":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"21:15230:2548":{"crate_id":21,"path":["futures_util","io","take","Take"],"kind":"struct"},"1:9305:22529":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"17:9858:16743":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"1:4826:3080":{"crate_id":1,"path":["std","os","linux","process","CommandExt"],"kind":"trait"},"2:5853:2963":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"6:1692:3065":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_un"],"kind":"struct"},"16:6927:16617":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"30:1519:21267":{"crate_id":30,"path":["memchr","memmem","searcher","Pre"],"kind":"struct"},"1:12346:1803":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"6:1707:10544":{"crate_id":6,"path":["libc","unix","linux_like","utsname"],"kind":"struct"},"17:11467:16834":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:32451:8855":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"30:905:21371":{"crate_id":30,"path":["memchr","arch","all","memchr","TwoIter"],"kind":"struct"},"21:9002:2495":{"crate_id":21,"path":["futures_util","future","select","Select"],"kind":"struct"},"16:7888:16653":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"6:5436:13652":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndinfo"],"kind":"struct"},"21:3786:2063":{"crate_id":21,"path":["futures_util","stream","try_stream","TryStreamExt"],"kind":"trait"},"2:21552:3229":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"20:97:2061":{"crate_id":20,"path":["futures_core","stream","TryStream"],"kind":"trait"},"17:14386:20263":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"5:7422:31539":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"17:11026:16783":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"1:5029:3099":{"crate_id":1,"path":["std","os","net","linux_ext","addr","SocketAddrExt"],"kind":"trait"},"16:3899:15731":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"16:5960:16576":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"17:16198:21224":{"crate_id":17,"path":["object","xcoff","BlockAux32"],"kind":"struct"},"21:12383:2474":{"crate_id":21,"path":["futures_util","stream","try_stream","or_else","OrElse"],"kind":"struct"},"17:10439:16754":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"5:3245:2831":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:43524:8506":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:12331:1699":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:43166:28395":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"17:15289:21015":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"1:5902:3172":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"16:2338:15636":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"21:6410:21298":{"crate_id":21,"path":["futures_util","lock","mutex","MutexLockFuture"],"kind":"struct"},"17:16032:19717":{"crate_id":17,"path":["object","xcoff","SectionHeader32"],"kind":"struct"},"1:5788:3187":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"1:7444:27089":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"17:11865:16944":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"6:7467:14804":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","_libc_fpstate"],"kind":"struct"},"2:39913:8638":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:10419:16715":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:2652:200":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"6:5283:13634":{"crate_id":6,"path":["libc","unix","linux_like","linux","__c_anonymous_sockaddr_can_j1939"],"kind":"struct"},"2:2618:112":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"2:41719:2813":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"17:15190:21006":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:5453:128":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"1:3287:2992":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"6:8282:13841":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_cond_t"],"kind":"struct"},"1:11676:25325":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"2:40760:8815":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"21:14065:2814":{"crate_id":21,"path":["futures_util","stream","select_all","IntoIter"],"kind":"struct"},"6:1490:10522":{"crate_id":6,"path":["libc","unix","linux_like","ip_mreq"],"kind":"struct"},"1:8040:2795":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"16:5817:16570":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"2:39136:209":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"17:14986:20994":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"17:14079:20244":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"2:39104:2860":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"1:9205:3190":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"2:43420:2978":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"6:6729:14387":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","xdp_umem_reg"],"kind":"struct"},"1:9382:2963":{"crate_id":1,"path":["std","sync","poison","Guard"],"kind":"struct"},"16:3778:15679":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"5:3250:31578":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"1:4108:3043":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"1:365:2781":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"6:5020:13609":{"crate_id":6,"path":["libc","unix","linux_like","linux","ff_effect"],"kind":"struct"},"21:8339:2470":{"crate_id":21,"path":["futures_util","future","try_future","MapErr"],"kind":"struct"},"2:22927:28201":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU32Inner"],"kind":"struct"},"4:0:2264":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"2:3159:8856":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"5:6957:8583":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstDataSrcBufDrop"],"kind":"struct"},"17:11510:16827":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"21:13658:2586":{"crate_id":21,"path":["futures_util","stream","iter","Iter"],"kind":"struct"},"2:43588:8533":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"2:42768:2958":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"20:27:2950":{"crate_id":20,"path":["futures_core","future","private_try_future","Sealed"],"kind":"trait"},"2:43802:8547":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"21:7419:2461":{"crate_id":21,"path":["futures_util","future","future","catch_unwind","CatchUnwind"],"kind":"struct"},"5:3661:2813":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:640:2789":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"16:6353:16589":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"21:15035:32432":{"crate_id":21,"path":["futures_util","io","into_sink","Block"],"kind":"struct"},"2:11171:8497":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:8539:3004":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"17:12225:16960":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"14:40:19716":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"2:12543:9014":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"17:11128:16791":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:11831:3016":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:40058:8633":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"17:10092:16749":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"2:4335:28799":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:46564:8406":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"2:46363:3256":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"21:14089:2610":{"crate_id":21,"path":["futures_util","sink","fanout","Fanout"],"kind":"struct"},"21:9418:2527":{"crate_id":21,"path":["futures_util","stream","stream","collect","Collect"],"kind":"struct"},"21:12333:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","_","__Origin"],"kind":"struct"},"21:9907:34542":{"crate_id":21,"path":["futures_util","stream","stream","_","__Origin"],"kind":"struct"},"13:229:32536":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:2852:143":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"21:11824:2563":{"crate_id":21,"path":["futures_util","stream","stream","split","SplitStream"],"kind":"struct"},"5:280:30363":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"21:13173:2574":{"crate_id":21,"path":["futures_util","stream","try_stream","try_skip_while","TrySkipWhile"],"kind":"struct"},"16:4913:16308":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"6:6664:14379":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","__c_anonymous_ptrace_syscall_info_exit"],"kind":"struct"},"2:22374:3367":{"crate_id":2,"path":["core","core_simd","simd","ptr","mut_ptr","SimdMutPtr"],"kind":"trait"},"21:13801:34542":{"crate_id":21,"path":["futures_util","stream","select","_","__Origin"],"kind":"struct"},"2:43542:8504":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"21:15438:33887":{"crate_id":21,"path":["futures_util","fns","MergeResultFn"],"kind":"struct"},"21:15372:2509":{"crate_id":21,"path":["futures_util","abortable","AbortRegistration"],"kind":"struct"},"2:40221:8823":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"17:15931:19714":{"crate_id":17,"path":["object","xcoff","FileHeader32"],"kind":"struct"},"16:4531:16202":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"2:42271:8459":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"27:181:21340":{"crate_id":27,"path":["futures_channel","mpsc","UnboundedInner"],"kind":"struct"},"2:43703:8519":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"6:578:9638":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"21:11537:33878":{"crate_id":21,"path":["futures_util","stream","stream","flatten_unordered","SharedPollState"],"kind":"struct"},"2:39877:8602":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"2:43719:8528":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:3382:2991":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:43007:28357":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"16:5756:16566":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"21:1087:2504":{"crate_id":21,"path":["futures_util","future","try_join_all","TryJoinAll"],"kind":"struct"},"2:43305:8481":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"1:6311:22719":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"27:11:35465":{"crate_id":27,"path":["futures_channel","lock","TryLock"],"kind":"struct"},"5:3033:30492":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:3586:8438":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"21:12717:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","_","__Origin"],"kind":"struct"},"11:800:2609":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"2:42545:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:3093:117":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"17:13292:19719":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"17:11764:16893":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:8314:2619":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"6:1585:10533":{"crate_id":6,"path":["libc","unix","linux_like","Dl_info"],"kind":"struct"},"2:3571:28831":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:9105:3152":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"2:2596:102":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:46705:8413":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:2280:137":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"30:882:21369":{"crate_id":30,"path":["memchr","arch","all","memchr","OneIter"],"kind":"struct"},"1:3608:2681":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"16:7910:16654":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"1:5227:27486":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"1:9695:2947":{"crate_id":1,"path":["std","sys","pal","unix","fs","ReadDir"],"kind":"struct"},"2:40378:2545":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:21676:3231":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"17:16050:19718":{"crate_id":17,"path":["object","xcoff","SectionHeader64"],"kind":"struct"},"1:8472:2622":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"2:7586:8646":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"2:43366:8530":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:7851:24921":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"2:40362:2543":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"2:44166:9002":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:13568:19738":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:39024:8597":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"21:7503:163":{"crate_id":21,"path":["futures_util","future","try_future","into_future","IntoFuture"],"kind":"struct"},"6:1686:10542":{"crate_id":6,"path":["libc","unix","linux_like","epoll_event"],"kind":"struct"},"21:7130:2456":{"crate_id":21,"path":["futures_util","future","future","MapInto"],"kind":"struct"},"17:16176:21222":{"crate_id":17,"path":["object","xcoff","FunAux64"],"kind":"struct"},"21:13727:204":{"crate_id":21,"path":["futures_util","stream","pending","Pending"],"kind":"struct"},"1:2506:2089":{"crate_id":1,"path":["std","io"],"kind":"module"},"6:0:986":{"crate_id":6,"path":["libc"],"kind":"module"},"1:10666:2992":{"crate_id":1,"path":["std","sys","pal","unix","stdio","Stdin"],"kind":"struct"},"16:6026:16578":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"6:7546:14808":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ipc_perm"],"kind":"struct"},"2:39936:8641":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"29:27:2069":{"crate_id":29,"path":["futures_io","if_std","AsyncBufRead"],"kind":"trait"},"16:6412:16592":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCacheStrategy"],"kind":"enum"},"2:42992:8993":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"5:1518:2815":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"1:2460:2941":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:11324:16847":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"21:8401:2472":{"crate_id":21,"path":["futures_util","future","try_future","MapOkOrElse"],"kind":"struct"},"17:12724:16764":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"27:187:21341":{"crate_id":27,"path":["futures_channel","mpsc","BoundedInner"],"kind":"struct"},"2:21988:29513":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"21:9167:34542":{"crate_id":21,"path":["futures_util","future","try_join","_","__Origin"],"kind":"struct"},"21:9450:34542":{"crate_id":21,"path":["futures_util","stream","stream","collect","_","__Origin"],"kind":"struct"},"17:11075:16799":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"21:8538:204":{"crate_id":21,"path":["futures_util","future","pending","Pending"],"kind":"struct"},"6:5320:13639":{"crate_id":6,"path":["libc","unix","linux_like","linux","seccomp_data"],"kind":"struct"},"5:3872:2817":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"24:169:2448":{"crate_id":24,"path":["futures_task","future_obj","FutureObj"],"kind":"struct"},"6:8253:13837":{"crate_id":6,"path":["libc","unix","linux_like","linux","pthread_rwlockattr_t"],"kind":"struct"},"6:7561:14809":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","shmid_ds"],"kind":"struct"},"2:41994:88":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"1:9409:161":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"17:9916:16745":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"11:1087:32488":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"1:12335:724":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"11:2542:28928":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"17:14994:20982":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:9710:84":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"26:53:35455":{"crate_id":26,"path":["pin_project_lite","__private","UnsafeOverwriteGuard"],"kind":"struct"},"16:2878:15661":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"1:9178:3189":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"2:12825:8514":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"21:6377:21300":{"crate_id":21,"path":["futures_util","lock","mutex","OwnedMutexLockFuture"],"kind":"struct"},"16:2323:15635":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"21:10508:2534":{"crate_id":21,"path":["futures_util","stream","stream","FlatMap"],"kind":"struct"},"17:12056:16905":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"1:6784:3184":{"crate_id":1,"path":["std","sync","reentrant_lock","ReentrantLock"],"kind":"struct"},"21:13691:2590":{"crate_id":21,"path":["futures_util","stream","once","Once"],"kind":"struct"},"5:4925:216":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"5:4502:30375":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"16:7321:3118":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"1:942:2823":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"2:4347:109":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"14:0:2270":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:1978:770":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:39887:8639":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"21:9992:34542":{"crate_id":21,"path":["futures_util","stream","stream","fold","_","__Origin"],"kind":"struct"},"21:8034:2467":{"crate_id":21,"path":["futures_util","future","try_future","ErrInto"],"kind":"struct"},"2:44446:8423":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"1:9374:3174":{"crate_id":1,"path":["std","sync","mutex","MappedMutexGuard"],"kind":"struct"},"2:22905:28078":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroU8Inner"],"kind":"struct"},"17:10524:16755":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"2:4370:8432":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"6:4824:13588":{"crate_id":6,"path":["libc","unix","linux_like","linux","dqblk"],"kind":"struct"},"21:7155:34542":{"crate_id":21,"path":["futures_util","future","future","_","__Origin"],"kind":"struct"},"2:10042:8448":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"28:30:21356":{"crate_id":28,"path":["slab","Slab"],"kind":"struct"},"1:6509:185":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"27:452:3193":{"crate_id":27,"path":["futures_channel","mpsc","TrySendError"],"kind":"struct"},"17:16187:21223":{"crate_id":17,"path":["object","xcoff","ExpAux"],"kind":"struct"},"2:41955:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"6:5244:13629":{"crate_id":6,"path":["libc","unix","linux_like","linux","fanotify_response"],"kind":"struct"},"21:4045:2483":{"crate_id":21,"path":["futures_util","stream","poll_fn","PollFn"],"kind":"struct"},"1:5713:3148":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"6:5423:13651":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_sndrcvinfo"],"kind":"struct"},"2:43917:8552":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"17:15301:21016":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"30:1565:21261":{"crate_id":30,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:42789:3133":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"21:14031:2586":{"crate_id":21,"path":["futures_util","stream","futures_unordered","iter","Iter"],"kind":"struct"},"2:21450:29500":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"31:100:2122":{"crate_id":31,"path":["futures_executor","enter","Enter"],"kind":"struct"},"21:6859:2455":{"crate_id":21,"path":["futures_util","future","future","map","Map"],"kind":"enum"},"17:437:15609":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"1:1066:2828":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"6:6519:14367":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","nl_pktinfo"],"kind":"struct"},"2:30841:8658":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"14:7:15561":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"16:6976:16620":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"11:2423:2814":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"6:7366:3105":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","stat"],"kind":"struct"},"2:22:802":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"5:1527:2816":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"21:13908:2593":{"crate_id":21,"path":["futures_util","stream","unfold","Unfold"],"kind":"struct"},"2:10250:8458":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:7955:2782":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"2:40208:2526":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"17:14855:20987":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"21:14134:2611":{"crate_id":21,"path":["futures_util","sink","feed","Feed"],"kind":"struct"},"17:13959:20235":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:8855:3138":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"5:3209:100":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6442:16595":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"21:12618:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_filter_map","_","__Origin"],"kind":"struct"},"6:5457:13654":{"crate_id":6,"path":["libc","unix","linux_like","linux","sctp_nxtinfo"],"kind":"struct"},"2:45352:3275":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"6:473:9624":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"21:10661:2540":{"crate_id":21,"path":["futures_util","stream","stream","peek","Peek"],"kind":"struct"},"31:68:2119":{"crate_id":31,"path":["futures_executor","local_pool","block_on_stream"],"kind":"function"},"2:44331:149":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"1:4044:3039":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:5273:203":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"6:4885:13593":{"crate_id":6,"path":["libc","unix","linux_like","linux","cpu_set_t"],"kind":"struct"},"21:8095:2473":{"crate_id":21,"path":["futures_util","future","try_future","OkInto"],"kind":"struct"},"6:7575:14810":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ptrace_rseq_configuration"],"kind":"struct"},"17:15151:21003":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"21:12942:34542":{"crate_id":21,"path":["futures_util","stream","try_stream","try_chunks","_","__Origin"],"kind":"struct"},"11:1891:2609":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"24:0:2153":{"crate_id":24,"path":["futures_task"],"kind":"module"},"5:1536:2818":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"16:2788:15657":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"2:3541:253":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:4712:3098":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"21:8635:34542":{"crate_id":21,"path":["futures_util","future","poll_immediate","_","__Origin"],"kind":"struct"},"16:7061:16624":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"11:1887:2814":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"11:811:2817":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"17:13497:19733":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"2:729:3022":{"crate_id":2,"path":["core","num","nonzero","ZeroablePrimitive"],"kind":"trait"},"6:1663:10539":{"crate_id":6,"path":["libc","unix","linux_like","arpreq_old"],"kind":"struct"},"2:37811:8869":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"6:7602:14812":{"crate_id":6,"path":["libc","unix","linux_like","linux","gnu","b64","x86_64","ucontext_t"],"kind":"struct"},"30:1450:21256":{"crate_id":30,"path":["memchr","memmem","searcher","SearcherKind"],"kind":"union"},"30:1397:33785":{"crate_id":30,"path":["memchr","cow","Imp"],"kind":"enum"},"2:44016:8557":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"30:989:21260":{"crate_id":30,"path":["memchr","arch","all","shiftor","Finder"],"kind":"struct"},"17:15473:21034":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"1:1829:2867":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:5929:3114":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"16:2394:15639":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"16:4502:16196":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:2938:136":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"6:479:9625":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"5:295:2628":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"21:9131:2501":{"crate_id":21,"path":["futures_util","future","try_join","TryJoin3"],"kind":"struct"},"2:2855:257":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"2:41278:169":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"17:10769:33733":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:42807:28891":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"2:23026:28094":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroIsizeInner"],"kind":"struct"},"5:3027:30496":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:2843:77":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"17:14968:20992":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"21:10743:2538":{"crate_id":21,"path":["futures_util","stream","stream","peek","NextIf"],"kind":"struct"},"30:1057:21384":{"crate_id":30,"path":["memchr","arch","all","twoway","ApproximateByteSet"],"kind":"struct"},"2:13442:2480":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"9:330:15482":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:41916:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"21:14969:34542":{"crate_id":21,"path":["futures_util","io","copy_buf_abortable","_","__Origin"],"kind":"struct"},"21:11344:34542":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","_","__Origin"],"kind":"struct"},"17:11812:16899":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"17:12900:16769":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"21:15198:2680":{"crate_id":21,"path":["futures_util","io","read_until","ReadUntil"],"kind":"struct"},"21:14574:2663":{"crate_id":21,"path":["futures_util","io","allow_std","AllowStdIo"],"kind":"struct"},"18:113:21242":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"2:41557:172":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:22682:28001":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"16:7813:16650":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"17:11773:16939":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"21:14072:2608":{"crate_id":21,"path":["futures_util","sink","close","Close"],"kind":"struct"},"1:11906:15594":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"6:4916:13596":{"crate_id":6,"path":["libc","unix","linux_like","linux","input_event"],"kind":"struct"},"2:43852:8550":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"21:779:2483":{"crate_id":21,"path":["futures_util","future","poll_fn","PollFn"],"kind":"struct"},"2:44150:9008":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"21:12697:2580":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","TryFlattenUnordered"],"kind":"struct"},"21:15511:33883":{"crate_id":21,"path":["futures_util","fns","InspectErrFn"],"kind":"struct"},"21:14347:2616":{"crate_id":21,"path":["futures_util","sink","with","With"],"kind":"struct"},"5:7444:209":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"6:1699:10543":{"crate_id":6,"path":["libc","unix","linux_like","sockaddr_storage"],"kind":"struct"},"2:45775:3316":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"28:0:2416":{"crate_id":28,"path":["slab"],"kind":"module"},"16:7580:16637":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"2:10455:152":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"2:22433:3357":{"crate_id":2,"path":["core","core_simd","simd","cmp","eq","SimdPartialEq"],"kind":"trait"},"2:10195:2685":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"16:6543:16602":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"21:12808:33891":{"crate_id":21,"path":["futures_util","stream","try_stream","try_flatten_unordered","PropagateBaseStreamError"],"kind":"struct"},"25:0:2064":{"crate_id":25,"path":["futures_sink"],"kind":"module"},"21:11318:2554":{"crate_id":21,"path":["futures_util","stream","stream","ready_chunks","ReadyChunks"],"kind":"struct"},"21:11488:2557":{"crate_id":21,"path":["futures_util","stream","stream","buffered","Buffered"],"kind":"struct"},"2:22971:28092":{"crate_id":2,"path":["core","num","nonzero","private","NonZeroI8Inner"],"kind":"struct"},"21:11010:2550":{"crate_id":21,"path":["futures_util","stream","stream","take_while","TakeWhile"],"kind":"struct"},"30:1246:21372":{"crate_id":30,"path":["memchr","arch","x86_64","sse2","memchr","Three"],"kind":"struct"},"2:39898:28081":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"17:15769:21051":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"16:5415:32911":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"6:1723:10545":{"crate_id":6,"path":["libc","unix","linux_like","sigevent"],"kind":"struct"},"17:10170:16561":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"6:5361:13644":{"crate_id":6,"path":["libc","unix","linux_like","linux","nlmsghdr"],"kind":"struct"},"2:10707:28330":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"16:6802:15579":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"17:14271:20255":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"},"2:10258:8457":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"21:11802:34542":{"crate_id":21,"path":["futures_util","stream","stream","for_each_concurrent","_","__Origin"],"kind":"struct"},"16:3196:15667":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:12929:16770":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"}},"external_crates":{"31":{"name":"futures_executor","html_root_url":null},"28":{"name":"slab","html_root_url":null},"25":{"name":"futures_sink","html_root_url":null},"22":{"name":"pin_utils","html_root_url":"https://docs.rs/pin-utils/0.1.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/nightly/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/nightly/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/nightly/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/nightly/"},"29":{"name":"futures_io","html_root_url":null},"26":{"name":"pin_project_lite","html_root_url":null},"23":{"name":"futures_macro","html_root_url":null},"20":{"name":"futures_core","html_root_url":null},"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/nightly/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/nightly/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/nightly/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"30":{"name":"memchr","html_root_url":null},"27":{"name":"futures_channel","html_root_url":null},"24":{"name":"futures_task","html_root_url":null},"21":{"name":"futures_util","html_root_url":null},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/nightly/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/nightly/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/nightly/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/nightly/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/nightly/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":28}